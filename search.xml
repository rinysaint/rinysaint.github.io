<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2013年7月flash游戏推荐</title>
    <url>/post/aecb2428.html</url>
    <content><![CDATA[<p><img src="/../images/2013%E5%B9%B47%E6%9C%88flash%E6%B8%B8%E6%88%8F%E6%8E%A8%E8%8D%90/clip_image001.jpg" alt="http://cdn.aixifan.com/dotnet/artemis/u/cms/www/201307/301624317w88.jpg"></p>
<p><strong>[**</strong>相关游戏请点击右上角传送门按钮]**</p>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>-游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>15种微服务架构框架汇总</title>
    <url>/post/88bd6452.html</url>
    <content><![CDATA[<p>这几年来，微服务这个概念越来越火了，火到什么程度呢？2019年有一个统计说，两千家企业里，45%在使用微服务，16%在实验开发和测试微服务架构，24%在学习微服务准备转型，只有剩下的15%的企业没有使用微服务。</p>
<p>微服务到底有什么好呢？微服务在2013年才被提出，短短几年就有这么快速的发展。微服务架构能够实现由小型自主服务组成一个整体应用，各个组成部分之间是松耦合的，复杂性低，各个部分可以独立部署，修复bug或者引入新特性更容易，能够独立扩展，不同技术栈之间可以使用不同框架、不同版本库甚至不同的操作系统平台。</p>
<p><a href="http://dockone.io/uploads/article/20200313/164327ba20aa89052d31083dffb42a40.png"><img src="/../images/15%E7%A7%8D%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6%E6%B1%87%E6%80%BB/164327ba20aa89052d31083dffb42a40.png" alt="1.png"></a></p>
<p>对于中大型架构系统来说，微服务更加便捷，微服务成为很多企业架构重构的方向，同时也对架构师提出更高的挑战。目前有很多常用于微服务构建的框架，对于构建微服务架构能够带来一些帮助。</p>
<h3 id="Java语言相关微服务框架"><a href="#Java语言相关微服务框架" class="headerlink" title="Java语言相关微服务框架"></a>Java语言相关微服务框架</h3><h4 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h4><p>Spring Boot的设计目的是简化新Spring应用初始搭建以及开发过程，2017年有64.4%的受访者决定使用Spring Boot，可以说是最受欢迎的微服务开发框架。利用Spring Boot开发的便捷度简化分布式系统基础设施的开发，比如像配置中心、注册、负载均衡等方面都可以做到一键启动和一键部署。</p>
<h4 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h4><p>Spring Cloud是一个系列框架的合计，基于HTTP（s）的RETS服务构建服务体系，Spring Cloud能够帮助架构师构建一整套完整的微服务架构技术生态链。</p>
<p><a href="http://dockone.io/uploads/article/20200313/11a1419750c73bd56497836959ce61ec.png"><img src="/../images/15%E7%A7%8D%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6%E6%B1%87%E6%80%BB/11a1419750c73bd56497836959ce61ec.png" alt="2.png"></a></p>
<h4 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h4><p>Dubbo是由阿里巴巴开源的分布式服务化治理框架，通过RPC请求方式访问。Dubbo是在阿里巴巴的电商平台中逐渐探索演进所形成的，经历过复杂业务的高并发挑战，比Spring Cloud的开源时间还要早。目前阿里、京东、当当、携程、去哪等一些企业都在使用Dubbo。</p>
<h4 id="Dropwizard"><a href="#Dropwizard" class="headerlink" title="Dropwizard"></a>Dropwizard</h4><p>Dropwizard将Java生态系统中各个问题域里最好的组建集成于一身，能够快速打造一个Rest风格的后台，还可以整合Dropwizard核心以外的项目。国内现在使用Dropwizard还很少，资源也不多，但是与Spring Boot相比，Dropwizard在轻量化上更有优势，同时如果用过Spring，那么基本也会使用Spring Boot。</p>
<h4 id="Akka"><a href="#Akka" class="headerlink" title="Akka"></a>Akka</h4><p>Akka是一个用Scala编写的库，可以用在有简化编写容错、高可伸缩性的Java和Scala的Actor模型，使用Akka能够实现微服务集群。</p>
<h4 id="Vert-x-Lagom-ReactiveX-Spring-5"><a href="#Vert-x-Lagom-ReactiveX-Spring-5" class="headerlink" title="Vert.x/Lagom/ReactiveX/Spring 5"></a>Vert.x/Lagom/ReactiveX/Spring 5</h4><p>这四种框架主要用于响应式微服务开发，响应式本身和微服务没有关系，更多用于提升性能上，但是可以和微服务相结合，也可以提升性能。</p>
<p><a href="http://dockone.io/uploads/article/20200313/0b652f478d53c98b8ac319b2251428c7.png"><img src="/../images/15%E7%A7%8D%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6%E6%B1%87%E6%80%BB/0b652f478d53c98b8ac319b2251428c7.png" alt="3.png"></a></p>
<h3 id="Net相关微服务框架"><a href="#Net相关微服务框架" class="headerlink" title=".Net相关微服务框架"></a>.Net相关微服务框架</h3><h4 id="NET-Core"><a href="#NET-Core" class="headerlink" title=".NET Core"></a>.NET Core</h4><p>.NET Core是专门针对模块化微服务架构设计的，是跨平台应用程序开发框架，是微软开发的第一个官方版本。</p>
<h4 id="Service-Fabric"><a href="#Service-Fabric" class="headerlink" title="Service Fabric"></a>Service Fabric</h4><p>Service Fabric是微软开发的一个微服务框架，基于Service Fabric构建的很多云服务被用在了Azure上。</p>
<h4 id="Surging"><a href="#Surging" class="headerlink" title="Surging"></a>Surging</h4><p>Surging是基于RPC协议的分布式微服务技术框架，基于.NET Core而来。</p>
<h4 id="Microdot-Framework"><a href="#Microdot-Framework" class="headerlink" title="Microdot Framework"></a>Microdot Framework</h4><p>Microdot Framework用于编写定义服务逻辑代码，不需要解决开发分布式系统的挑战，能够很方便的进行MicrosoftOrleans集成。</p>
<p><a href="http://dockone.io/uploads/article/20200313/de0b57c1b910be578cb3824e1729bdf7.png"><img src="/../images/15%E7%A7%8D%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%A1%86%E6%9E%B6%E6%B1%87%E6%80%BB/de0b57c1b910be578cb3824e1729bdf7.png" alt="4.png"></a></p>
<h3 id="Node-js相关微服务框架"><a href="#Node-js相关微服务框架" class="headerlink" title="Node.js相关微服务框架"></a>Node.js相关微服务框架</h3><h4 id="Seneca"><a href="#Seneca" class="headerlink" title="Seneca"></a>Seneca</h4><p>Seneca是Node.js的微服务框架开发工具，可以用于编写可用于产品环境的代码。</p>
<h4 id="Hapi-Restify-LoopBack"><a href="#Hapi-Restify-LoopBack" class="headerlink" title="Hapi/Restify/LoopBack"></a>Hapi/Restify/LoopBack</h4><p>这三种框架的分工不同，前两种更适合开发简单的微服务后端系统，第三种更适合用在大型复杂应用开发，还可以用在现有微服务上的构建。</p>
<h3 id="Go相关微服务框架"><a href="#Go相关微服务框架" class="headerlink" title="Go相关微服务框架"></a>Go相关微服务框架</h3><h4 id="Go-Kit-Goa-Dubbogo"><a href="#Go-Kit-Goa-Dubbogo" class="headerlink" title="Go-Kit/Goa/Dubbogo"></a>Go-Kit/Goa/Dubbogo</h4><p>Go-Kit是分布式开发的工具合集，适合用于大型业务场景下构建微服务；Goa是用Go语言构建的微服务框架；Dubbogo是和阿里巴巴开源的Dubbo能够兼容的Golang微服务框架。</p>
<h3 id="Python相关微服务框架"><a href="#Python相关微服务框架" class="headerlink" title="Python相关微服务框架"></a>Python相关微服务框架</h3><p>Python相关的微服务框架非常少，用的比较多的是Nameko。Nameko让实现微服务变得更简单，同时也提供了很丰富的功能，比如支持负载均衡、服务发现还支持依赖自动注入等，使用起来很方便，但是有限速、超时和权限机制不完善等缺点。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>微服务已经成为很多大型互联网公司的选择，对于架构师和想要成为架构师的工程师来说，掌握微服务不仅要学会使用相关框架来实现，还要掌握具体用法，在具体的实践中仍然要避开很多坑。</p>
<p>原文链接：<a href="https://juejin.im/post/5e6786f0f265da571a39e108%EF%BC%8C%E4%BD%9C%E8%80%85%EF%BC%9A%E9%A3%8E%E5%B9%B3%E6%B5%AA%E9%9D%99%E5%A6%82%E7%A0%81">https://juejin.im/post/5e6786f0f265da571a39e108，作者：风平浪静如码</a></p>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>6种微服务RPC框架，你知道几个？</title>
    <url>/post/464f099f.html</url>
    <content><![CDATA[<p>开源 RPC 框架有哪些呢？</p>
<p>一类是跟某种特定语言平台绑定的，另一类是与语言无关即跨语言平台的。</p>
<p>跟语言平台绑定的开源 RPC 框架主要有下面几种。</p>
<p>Dubbo：国内最早开源的 RPC 框架，由阿里巴巴公司开发并于 2011 年末对外开源，仅支持 Java 语言。</p>
<p>Motan：微博内部使用的 RPC 框架，于 2016 年对外开源，仅支持 Java 语言。</p>
<p>Tars：腾讯内部使用的 RPC 框架，于 2017 年对外开源，仅支持 C++ 语言。</p>
<p>Spring Cloud：国外 Pivotal 公司 2014 年对外开源的 RPC 框架，仅支持 Java 语言</p>
<p>而跨语言平台的开源 RPC 框架主要有以下几种。</p>
<p>gRPC：Google 于 2015 年对外开源的跨语言 RPC 框架，支持多种语言。</p>
<p>Thrift：最初是由 Facebook 开发的内部系统跨语言的 RPC 框架，2007 年贡献给了 Apache 基金，成为 Apache 开源项目之一，支持多种语言。</p>
<p>如果你的业务场景仅仅局限于一种语言的话，可以选择跟语言绑定的 RPC 框架中的一种；</p>
<p>如果涉及多个语言平台之间的相互调用，就应该选择跨语言平台的 RPC 框架。</p>
<p>RPC 框架，它们具体有何区别？</p>
<h3 id="1-Dubbo"><a href="#1-Dubbo" class="headerlink" title="1. Dubbo"></a>1. Dubbo</h3><p>先来聊聊 Dubbo，Dubbo 可以说是国内开源最早的 RPC 框架了，目前只支持 Java 语言，它的架构可以用下面这张图展示。</p>
<p><img src="/../images/6%E7%A7%8D%E5%BE%AE%E6%9C%8D%E5%8A%A1RPC%E6%A1%86%E6%9E%B6/a3a256226950d18ba2267d96bfbbdc48.JPEG" alt="img"></p>
<p>从图中你能看到，Dubbo 的架构主要包含四个角色，其中 Consumer 是服务消费者，Provider 是服务提供者，Registry 是注册中心，Monitor 是监控系统。</p>
<p>具体的交互流程是 Consumer 一端通过注册中心获取到 Provider 节点后，通过 Dubbo 的客户端 SDK 与 Provider 建立连接，并发起调用。Provider 一端通过 Dubbo 的服务端 SDK 接收到 Consumer 的请求，处理后再把结果返回给 Consumer。</p>
<h3 id="2-Motan"><a href="#2-Motan" class="headerlink" title="2. Motan"></a>2. Motan</h3><p>Motan 是国内另外一个比较有名的开源的 RPC 框架，同样也只支持 Java 语言实现，它的架构可以用下面这张图描述。</p>
<p><img src="/../images/6%E7%A7%8D%E5%BE%AE%E6%9C%8D%E5%8A%A1RPC%E6%A1%86%E6%9E%B6/44a1e0b7cd17a7b261e194a15f4bb9c0.JPEG" alt="img"></p>
<p>Motan 与 Dubbo 的架构类似，都需要在 Client 端（服务消费者）和 Server 端（服务提供者）引入 SDK，其中 Motan 框架主要包含下面几个功能模块。</p>
<p>register：用来和注册中心交互，包括注册服务、订阅服务、服务变更通知、服务心跳发送等功能。</p>
<p>protocol：用来进行 RPC 服务的描述和 RPC 服务的配置管理，这一层还可以添加不同功能的 filter 用来完成统计、并发限制等功能。</p>
<p>serialize：将 RPC 请求中的参数、结果等对象进行序列化与反序列化</p>
<p>transport：用来进行远程通信，默认使用 Netty NIO 的 TCP 长链接方式。</p>
<p>cluster：请求时会根据不同的高可用与负载均衡策略选择一个可用的 Server 发起远程调用。</p>
<h3 id="3-Tars"><a href="#3-Tars" class="headerlink" title="3. Tars"></a>3. Tars</h3><p>Tars 是腾讯根据内部多年使用微服务架构的实践，总结而成的开源项目，仅支持 C++ 语言，它的架构图如下。</p>
<p><img src="/../images/6%E7%A7%8D%E5%BE%AE%E6%9C%8D%E5%8A%A1RPC%E6%A1%86%E6%9E%B6/dcc6e184595674a3c2d615a5b97ba097.JPEG" alt="img"></p>
<p>Tars 的架构交互主要包括以下几个流程：</p>
<p>服务发布流程：在 web 系统上传 server 的发布包到 patch，上传成功后，在 web 上提交发布 server 请求，由 registry 服务传达到 node，然后 node 拉取 server 的发布包到本地，拉起 server 服务。</p>
<p>管理命令流程：web 系统上的可以提交管理 server 服务命令请求，由 registry 服务传达到 node 服务，然后由 node 向 server 发送管理命令。</p>
<p>心跳上报流程：server 服务运行后，会定期上报心跳到 node，node 然后把服务心跳信息上报到 registry 服务，由 registry 进行统一管理。</p>
<p>信息上报流程：server 服务运行后，会定期上报统计信息到 stat，打印远程日志到 log，定期上报属性信息到 prop、上报异常信息到 notify、从 config 拉取服务配置信息。</p>
<p>client 访问 server 流程：client 可以通过 server 的对象名 Obj 间接访问 server，client 会从 registry 上拉取 server 的路由信息（如 IP、Port 信息），然后根据具体的业务特性（同步或者异步，TCP 或者 UDP 方式）访问 server（当然 client 也可以通过 IP/Port 直接访问 server）。</p>
<h3 id="4-Spring-Cloud"><a href="#4-Spring-Cloud" class="headerlink" title="4. Spring Cloud"></a>4. Spring Cloud</h3><p>Spring Cloud 利用 Spring Boot 特性整合了开源行业中优秀的组件，整体对外提供了一套在微服务架构中服务治理的解决方案。</p>
<p>只支持 Java 语言平台，它的架构图可以用下面这张图来描述。</p>
<p><img src="/../images/6%E7%A7%8D%E5%BE%AE%E6%9C%8D%E5%8A%A1RPC%E6%A1%86%E6%9E%B6/2dbb0e450be55353ebc4d47f94244d63.JPEG" alt="img"></p>
<p>由此可见，Spring Cloud 微服务架构是由多个组件一起组成的，各个组件的交互流程如下。</p>
<p>请求统一通过 API 网关 Zuul 来访问内部服务，先经过 Token 进行安全认证。</p>
<p>通过安全认证后，网关 Zuul 从注册中心 Eureka 获取可用服务节点列表。</p>
<p>从可用服务节点中选取一个可用节点，然后把请求分发到这个节点。</p>
<p>整个请求过程中，Hystrix 组件负责处理服务超时熔断，Turbine 组件负责监控服务间的调用和熔断相关指标，Sleuth 组件负责调用链监控，ELK 负责日志分析。</p>
<h3 id="5-gRPC"><a href="#5-gRPC" class="headerlink" title="5. gRPC"></a>5. gRPC</h3><p>先来看下 gRPC，它的原理是通过 IDL（Interface Definition Language）文件定义服务接口的参数和返回值类型，然后通过代码生成程序生成服务端和客户端的具体实现代码，这样在 gRPC 里，客户端应用可以像调用本地对象一样调用另一台服务器上对应的方法。</p>
<p><img src="/../images/6%E7%A7%8D%E5%BE%AE%E6%9C%8D%E5%8A%A1RPC%E6%A1%86%E6%9E%B6/4b216676e3df28cf715fd30a978fa3ea.JPEG" alt="img"></p>
<p>它的主要特性包括三个方面。</p>
<p>通信协议采用了 HTTP/2，因为 HTTP/2 提供了连接复用、双向流、服务器推送、请求优先级、首部压缩等机制</p>
<p>IDL 使用了 ProtoBuf，ProtoBuf 是由 Google 开发的一种数据序列化协议，它的压缩和传输效率极高，语法也简单</p>
<p>多语言支持，能够基于多种语言自动生成对应语言的客户端和服务端的代码。</p>
<h3 id="6-Thrift"><a href="#6-Thrift" class="headerlink" title="6. Thrift"></a>6. Thrift</h3><p>再来看下 Thrift，Thrift 是一种轻量级的跨语言 RPC 通信方案，支持多达 25 种编程语言。为了支持多种语言，跟 gRPC 一样，Thrift 也有一套自己的接口定义语言 IDL，可以通过代码生成器，生成各种编程语言的 Client 端和 Server 端的 SDK 代码，这样就保证了不同语言之间可以相互通信。它的架构图可以用下图来描述。</p>
<p><img src="/../images/6%E7%A7%8D%E5%BE%AE%E6%9C%8D%E5%8A%A1RPC%E6%A1%86%E6%9E%B6/bff58395a40f589e881dd47f669b428f.JPEG" alt="img"></p>
<p>从这张图上可以看出 Thrift RPC 框架的特性。</p>
<p>支持多种序列化格式：如 Binary、Compact、JSON、Multiplexed 等。</p>
<p>支持多种通信方式：如 Socket、Framed、File、Memory、zlib 等。</p>
<p>服务端支持多种处理方式：如 Simple 、Thread Pool、Non-Blocking 等。</p>
<p>关于微服务我总结了一个技术路线，分享给大家</p>
<p><img src="/../images/6%E7%A7%8D%E5%BE%AE%E6%9C%8D%E5%8A%A1RPC%E6%A1%86%E6%9E%B6/e6a2784240f1aa1d1c37b780b0b28df6.JPEG" alt="img"></p>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,RPC</tag>
      </tags>
  </entry>
  <entry>
    <title>2020周阳Spring Cloud完整版笔记一</title>
    <url>/post/d41eacb4.html</url>
    <content><![CDATA[<p>微服务 的概念最早产生于Martin Fowler在2014年的一篇论文中。</p>
<blockquote>
<p>微服务架构是一种架构模式，他提倡将单一应用程序划分成一组小的服务，服务与服务之间互相协调、相互配合，为用户提供最终价值。每个服务运行在独立的进程中，服务与服务之间采用轻量级的通信机制相互合作（通常是基于HTTP协议的Restful API）。每个服务围绕具体业务进行构建，并且能够被独立的部署到生产环境、类生产环境等。另外，应当尽量避免同一的、集中式的服务管理机制，对具有的一个服务而言，应当根据业务上下文，选择合适的语言、工具对其进行构建。</p>
</blockquote>
<h2 id="Cloud组件停更"><a href="#Cloud组件停更" class="headerlink" title="Cloud组件停更"></a>Cloud组件停更</h2><p>被动修复bug，停更不停用，不再github上接收新的合并请求，不再发布新的版本。</p>
<p><img src="/../images/2020%E5%91%A8%E9%98%B3SpringCloud%E5%AE%8C%E6%95%B4%E7%89%88%E7%AC%94%E8%AE%B0%E4%B8%80/a1.png" alt="cloud升级"></p>
<p>RestTemplate提供了多种边界访问远程HTTP服务的方法，是一种简单便捷的访问restful服务模板类，是Spring提供的用于访问Rest服务的客户端模板工具集。</p>
<p>（URL，requestMap，ResponseBean.class）这三个参数分别代表REST请求地址，请求参数，HTTP响应转换的对象类型。</p>
<h2 id="服务注册中心"><a href="#服务注册中心" class="headerlink" title="服务注册中心"></a>服务注册中心</h2><h3 id="Eureka服务注册中心"><a href="#Eureka服务注册中心" class="headerlink" title="Eureka服务注册中心"></a>Eureka服务注册中心</h3><h4 id="什么是服务治理"><a href="#什么是服务治理" class="headerlink" title="什么是服务治理"></a>什么是服务治理</h4><p>SpringCloud封装了Netflix公司开发的Eureka模块来实现服务治理。</p>
<p>在传统的RPC远程调用框架中，管理每个服务于服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理来管理服务与服务之间的依赖关系，可以实现服务调用、负载均衡、容错等，实现服务发现与注册。</p>
<h4 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h4><p>Eureka采用来CS的设计架构，Eureka Server作为服务注册功能的服务器，他是服务注册中心。而系统中的其他微服务，使用Eureka客户端连接到Eureka Server并维持心跳链接。这样系统的维护人员可以通过Eureka Server来监控系统中各个微服务是否正常运行。</p>
<p>在服务注册与发现中，有一个注册中心，当服务器启动的时候，会把当前自己服务器的信息，比如服务地址，通讯地址等以别名的方式注册到注册中心中，另一方（其实也就是消费者或者服务提供者），以别名的方式去注册中心上获取实际的服务通信地址，然后在实现本地RPC调用。</p>
<p>RPC远程调用框架的思想在于：使用注册中心管理服务与服务之间的依赖关系。在任何RPC远程框架中都会有一个注册中心。</p>
<h3 id="Eureka-Server和Eureka-Client"><a href="#Eureka-Server和Eureka-Client" class="headerlink" title="Eureka Server和Eureka Client"></a>Eureka Server和Eureka Client</h3><p><strong>Eureka Server提供服务注册</strong></p>
<p>各个微服务节点通过配置启动后，会在Eureka Server中进行注册，这样Eureka Server中的服务注册表中将会存储所有可用的节点信息，服务节点信息可以在界面中直观看到。</p>
<p><strong>Eureka Client通过注册中心进行访问</strong></p>
<p>这个客户端是用来简化Eureka Server的交互，客户端同时具备一个内置的，使用轮询负载算法的负载均衡器。在应用启动后，将会向Eureka Server发送心跳（默认是30s一次），如果Serve在多个心跳周期内（默认90s）没有接收到某个节点的心跳，那就会被Server除名（从服务注册表中将节点移除）。</p>
<p>Eureka架构图与Dubbo对比</p>
<p><img src="/../images/2020%E5%91%A8%E9%98%B3SpringCloud%E5%AE%8C%E6%95%B4%E7%89%88%E7%AC%94%E8%AE%B0%E4%B8%80/a2.png" alt="img"></p>
<p><img src="/../images/2020%E5%91%A8%E9%98%B3SpringCloud%E5%AE%8C%E6%95%B4%E7%89%88%E7%AC%94%E8%AE%B0%E4%B8%80/a3.png" alt="img"></p>
<p>Eureka Server模块</p>
<p>1、创建模块</p>
<p>2、导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xzq.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-eureka-server7001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xzq.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka-server--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--boot web actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--一般通用配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、编写配置文件</p>
<p> application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment"># eureka服务端实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment"># 表示自己就是注册中心，不必检索其他服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span> <span class="comment"># 设置与 Eureka Server 交互的地址，可用来查询注册的服务</span></span><br></pre></td></tr></table></figure>
<p>4、创建主类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaMain7001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaMain7001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>5、启动server,访问<a href="http://localhost:7001/">http://localhost:7001</a></p>
<p><img src="/../images/2020%E5%91%A8%E9%98%B3SpringCloud%E5%AE%8C%E6%95%B4%E7%89%88%E7%AC%94%E8%AE%B0%E4%B8%80/a4.png" alt="image-20200902180220370"></p>
<h3 id="Eureka集群原理"><a href="#Eureka集群原理" class="headerlink" title="Eureka集群原理"></a>Eureka集群原理</h3><p>先启动Eureka注册中心，启动服务提供者，支付服务启动后会把自身信息以别名的方式注册进Eureka，消费者order服务在需要调用接口时，使用服务别名去注册中心获取实际的远程调用地址，消费者获取调用地址后，底层使用的是HTPPClient技术实现远程调用，消费者获得服务地址后会魂村到本地JVM内存中，默认每隔30s更新一次服务调用地址。</p>
<p><strong>要实现RPC远程调用服务最核心的是高可用，但是如何实现高可用？</strong></p>
<p>方法：搭建注册中心集群，实现负载均衡+故障容错。</p>
<p>服务注册中心搭建集群，集群中的所有服务都相互注册，例如server7001，server7002，7002的eureka.client.service-url.defaultZone=<a href="http://eureka7001.com:7001/eureka%EF%BC%8C%E8%80%8C7001%E4%B8%AD%E7%9A%84Eureka%E9%85%8D%E7%BD%AE%E6%98%AFeureka.client.service-url.defaultZone=http://eureka7002.com:7002/eureka%E3%80%82%E5%9C%A8%E4%B8%BB%E5%90%AF%E5%8A%A8%E7%B1%BB%E4%B8%8A%E6%B7%BB%E5%8A%A0%60@EnableEurekaServer%60%E6%B3%A8%E8%A7%A3%EF%BC%8C%E5%85%88%E5%90%AF%E5%8A%A8%E8%BF%99%E4%BA%9B%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%9C%8D%E5%8A%A1%EF%BC%8C%E5%86%8D%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%EF%BC%8C%E6%9C%80%E5%90%8E%E5%90%AF%E5%8A%A8%E6%B6%88%E8%B4%B9%E8%80%85%E3%80%82">http://eureka7001.com:7001/eureka，而7001中的Eureka配置是eureka.client.service-url.defaultZone=http://eureka7002.com:7002/eureka。在主启动类上添加`@EnableEurekaServer`注解，先启动这些注册中心服务，再启动服务提供者，最后启动消费者。</a></p>
<h3 id="服务发现Discovery"><a href="#服务发现Discovery" class="headerlink" title="服务发现Discovery"></a>服务发现Discovery</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/payment&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoClient;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/discover&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">discovery</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;String&gt; services = discoClient.getServices();</span><br><span class="line">        <span class="keyword">for</span> (String service : services) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;service====&quot;</span>+service);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;ServiceInstance&gt; instances =  discoClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">            log.info(instance.getInstanceId()+<span class="string">&quot;\t&quot;</span>+instance.getHost()+<span class="string">&quot;\t&quot;</span>+instance.getPort()+<span class="string">&quot;\t&quot;</span>+instance.getUri());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.discoClient;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在主启动类上添加<code>@EnableDiscoveryClient</code>注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Payment8002</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Payment8002.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过浏览器访问<code>localhost:8001/payment/discover</code></p>
<p><img src="/../images/2020%E5%91%A8%E9%98%B3SpringCloud%E5%AE%8C%E6%95%B4%E7%89%88%E7%AC%94%E8%AE%B0%E4%B8%80/a5.png" alt="image-20200903213504777"></p>
<h3 id="Eureka的自我保护"><a href="#Eureka的自我保护" class="headerlink" title="Eureka的自我保护"></a>Eureka的自我保护</h3><p>所谓的保护模式就是用于一组客户端和Eureka Server之间存在网络分区场景下的保护。一旦进入保护模式，Eureka Server将会尝试保护其服务注册表中的信息，不再删除服务注册表中的数据，也就是不会注销任何微服务。</p>
<p>如果在Eureka Server的首页看到以下这段提示，则说明Eureka进入了保护模式：</p>
<p><strong>EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.</strong></p>
<p><img src="/../images/2020%E5%91%A8%E9%98%B3SpringCloud%E5%AE%8C%E6%95%B4%E7%89%88%E7%AC%94%E8%AE%B0%E4%B8%80/a6.png" alt="image-20200903214526701"></p>
<p>一句话：在某时刻一个微服务不可用，Eureka不会立刻清理，依旧会对改为服务的信息进行保护。</p>
<p>这是属于CAP里面的AP分支。</p>
<h3 id="怎样禁止自我保护？"><a href="#怎样禁止自我保护？" class="headerlink" title="怎样禁止自我保护？"></a>怎样禁止自我保护？</h3><p>在Eureka-server中，修改配置文件，添加</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span>  <span class="comment"># eureka服务端实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment"># 表示自己就是注册中心，不必检索其他服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span> <span class="comment"># 设置与 Eureka Server 交互的地址，可用来查询注册的服务</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span>  <span class="comment"># eureka服务端实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment"># 表示自己就是注册中心，不必检索其他服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span> <span class="comment"># 设置与 Eureka Server 交互的地址，可用来查询注册的服务</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment"># 关闭自我检测</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">2000</span> <span class="comment"># 修改检查心跳时间 默认是30s，现在改成2s。</span></span><br></pre></td></tr></table></figure>
<p>enable-self-preservation: false # 关闭自我检测，一旦关闭自我检测，其中有任何一台微服务宕机，Eureka就会立刻将他从注册中心除名。</p>
<p>将其中的一个服务提供者的配置也更改如下。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span> <span class="comment"># 默认是true表示将自己注册进服务中心</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment"># 默认是true表示抓取已有的注册中心，如果是集群必须进行配置</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span> <span class="comment"># 单机版</span></span><br><span class="line">      <span class="comment">#defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8001</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 代表路径可以显示IP地址信息</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">2</span> <span class="comment">#Eureka在收到最后一次心跳后，等待的时间默认是90s，如果超过等待时间，将会剔除服务</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">1</span> <span class="comment"># 客户端默认间隔30s 向服务端发送心跳，现在每间隔1s向服务端发送心跳。</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eureka.instance.lease-expiration-duration-in-seconds=2</span><br><span class="line">eureka.instance.lease-renewal-interval-in-seconds=1</span><br></pre></td></tr></table></figure>
<p>客户端默认间隔是30s，向服务端发送心跳，改成每隔1s向服务端发送心跳。</p>
<p>启动服务后，访问<a href="http://eureka7001.com:7001/">http://eureka7001.com:7001/</a></p>
<p><img src="/../images/2020%E5%91%A8%E9%98%B3SpringCloud%E5%AE%8C%E6%95%B4%E7%89%88%E7%AC%94%E8%AE%B0%E4%B8%80/a7.png" alt="image-20200904111251599"></p>
<p>当关闭payment8001服务提供者后，实例立即消失。</p>
<p>使用zookeeper作服务发现与注册时，服务节点是临时节点。当服务关闭时，zookeeper会立即去除实例。</p>
<p>导入zookeeper相关的依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xzq.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合zookeeper客户端 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--先排除自带的zookeeper3.5.3--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--添加zookeeper3.4.9版本--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8004</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-provider-payment #微服务实例名</span><br><span class="line">  cloud:</span><br><span class="line">    zookeeper:</span><br><span class="line">      connect-string: localhost:2181 #zookeeper服务所在的IP地址，默认端口是2181</span><br></pre></td></tr></table></figure>
<p>之后启动zookeeper服务，并打开zkCli.sh，ls /services，会发现实例名成是cloud-provider-payment。</p>
<h3 id="Consul简介"><a href="#Consul简介" class="headerlink" title="Consul简介"></a>Consul简介</h3><p>官网地址:<a href="https://www.consul.io/docs">https://www.consul.io/docs</a></p>
<p>Consul是一套开源的分布式服务发现和配置管理系统，有<code>HashiCorp</code>公司使用<code>Go</code>语言开发。</p>
<p>提供了微服务系统中的<strong>服务治理、配置中心、控制总线</strong>等功能。</p>
<p>这些功能中的每一个否可以根据自己的需要单独使用，也可以一起使用构成全方面的服务网格，总之Consul提供了一种完整的服务网格解决方案。</p>
<p>它具有很多优点。包括：基于raft协议，比较简洁；支持健康检查，同时支持HTTP和DNS协议支持扩数据中心的WAN集群，提供图形界面 扩平台支持，例如Linux，Mac，Windows。</p>
<h4 id="Consul安装与配置"><a href="#Consul安装与配置" class="headerlink" title="Consul安装与配置"></a>Consul安装与配置</h4><p>Consul下载地址： <a href="https://www.consul.io/downloads">https://www.consul.io/downloads</a></p>
<p>选择你所对应的版本，下载压缩包后，直接解压。</p>
<p><img src="/../images/2020%E5%91%A8%E9%98%B3SpringCloud%E5%AE%8C%E6%95%B4%E7%89%88%E7%AC%94%E8%AE%B0%E4%B8%80/a8.png" alt="image-20200905105518316"></p>
<p>解压完成后，只有一个consul.exe文件，通过cmd窗口，输入<code>consul agent -dev</code> 启动，然后通过浏览器访问localhost:8500,得到以下界面，算是安装完成了。</p>
<p><img src="/../images/2020%E5%91%A8%E9%98%B3SpringCloud%E5%AE%8C%E6%95%B4%E7%89%88%E7%AC%94%E8%AE%B0%E4%B8%80/a9.png" alt="image-20200905105804273"></p>
<p><img src="/../images/2020%E5%91%A8%E9%98%B3SpringCloud%E5%AE%8C%E6%95%B4%E7%89%88%E7%AC%94%E8%AE%B0%E4%B8%80/a10.png" alt="image-20200905110013729"></p>
<h3 id="CAP原则"><a href="#CAP原则" class="headerlink" title="CAP原则"></a>CAP原则</h3><p>最多只能同时满足两个。</p>
<p>CAP理论的核心就是：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性，这三个需求。</p>
<p>因此，根据CAP原理将NoSQL数据库分成了满足CA原则，满足CP原则和满足AP原则三大类。</p>
<p>CA-单点集群，满足一致性，可用性的系统，通常在可扩展性上不强大。</p>
<p>CP-满足一致性，分区容错性，通常性能上有所损失。（Zookeeper/Consul）</p>
<p>AP-满足可用性，分区容错性的系统，通常可能对一致性的要其余不是很严格。（Eureka）</p>
<table>
<thead>
<tr>
<th>组件名</th>
<th>语言</th>
<th>CAP</th>
<th>服务健康检测</th>
<th>对外暴露接口</th>
<th>SpringCloud集成</th>
</tr>
</thead>
<tbody><tr>
<td>Eureka</td>
<td>Java</td>
<td>AP</td>
<td>可配支持</td>
<td>HTTP</td>
<td>已集成</td>
</tr>
<tr>
<td>Consul</td>
<td>Go</td>
<td>CP</td>
<td>支持</td>
<td>HTTP/DNS</td>
<td>已集成</td>
</tr>
<tr>
<td>Zookeeper</td>
<td>Java</td>
<td>CP</td>
<td>支持</td>
<td>客户端</td>
<td>已集成</td>
</tr>
</tbody></table>
<h3 id="Ribbon简单概述"><a href="#Ribbon简单概述" class="headerlink" title="Ribbon简单概述"></a>Ribbon简单概述</h3><p>SpringCloud Ribbon是基于Netflix Ribbon实现的一套客户端。（负载均衡工具）</p>
<p>简单的说，Ribbon是Netflix发布的开源项目，主要功能是<strong>提供客户端的软件负载均衡算法和服务调用</strong>。Ribbon客户端主键提供一系列完善的配置项：如连接超时，重试等。简单的说，就是在配置文件中列出Load Blance后面的所有机器，Ribbon会自动帮助你基于某种规则去连接这些机器。我们很容易使用Ribbon实现自定义的负载均衡算法。</p>
<p>虽然现在Ribbon已经停止维护，但是还是有不少人使用。</p>
<p>主要的模块有Ribbon-HTTPClient，Ribbon-eureka，Ribbon-Loadbalance</p>
<h3 id="所谓的负载均衡是什么？"><a href="#所谓的负载均衡是什么？" class="headerlink" title="所谓的负载均衡是什么？"></a>所谓的负载均衡是什么？</h3><p>简单的说就是将用户的请求分发到多个服务上，从而达到系统的高可用。</p>
<p>常见的负载均衡有Nginx，LVS，硬件F5等。</p>
<h3 id="Ribbon本地负载均衡VS-Nginx服务端负载均衡"><a href="#Ribbon本地负载均衡VS-Nginx服务端负载均衡" class="headerlink" title="Ribbon本地负载均衡VS Nginx服务端负载均衡"></a><code>Ribbon</code>本地负载均衡VS <code>Nginx</code>服务端负载均衡</h3><p>Nginx是服务器负载均衡，客户端所有请求都会交给Nginx，然后由Nginx实现转发请求。即负载均衡是服务端实现的。</p>
<p>Ribbon是本地负载均衡，在调用微服务接口的时候，会在注册中心上获取注册信息，缓存到JVM本地，从而在本地实现RPC远程调用服务技术。</p>
<p>Ribbon负载均衡是客户端本地的负载均衡，分为集中式和进程内。</p>
<p><strong>集中式</strong></p>
<p>在服务的消费方和提供方之间使用独立的负载均衡设施(可以是硬件，如F5，也可以是软件，如Nginx),由该设施负责访问请求，通过某种策略转发到服务的提供方。</p>
<p><strong>进程式</strong></p>
<p>将负载均衡的逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。Ribbon属于进程内的负载均衡。他是一个类库，继承消费方进程，消费方通过它来获取到服务提供方的地址。</p>
<p>Ribbon是一个软负载均衡的客户端组件，它可以和其他所需请求的客户端结合使用，例如Eureka，RestTemplate等。</p>
<p>Ribbon的工作原理：第一步先选择EurekaServer，他会优先选择在同一个区域内负载均衡较少的Server。</p>
<p>第二步再根据用户指定的策略，从Server取到的服务注册列表中选择一个地址。</p>
<p>其中Ribbon提供了多种策略：比如轮询，随机，根据响应时间加权等。</p>
<p>Ribbon依赖如下。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>默认情况下，Eureka-client依赖中包含有ribbon的依赖，不需要再次引入。</p>
<p>RestTemplate中的getForEntity方法返回的是对象，getForObject方法返回的是JSON串。</p>
<h3 id="Ribbon的核心组件IRule"><a href="#Ribbon的核心组件IRule" class="headerlink" title="Ribbon的核心组件IRule"></a>Ribbon的核心组件IRule</h3><p>Ribbon默认的负载均衡算法是轮询，而IRule是根据特定的算法中从服务列表中选取其中一个要访问的服务。</p>
<p>一共有7个方法。</p>
<p><img src="/../images/2020%E5%91%A8%E9%98%B3SpringCloud%E5%AE%8C%E6%95%B4%E7%89%88%E7%AC%94%E8%AE%B0%E4%B8%80/a11.png" alt="image-20200905163732232"></p>
<h3 id="修改负载均衡算法"><a href="#修改负载均衡算法" class="headerlink" title="修改负载均衡算法"></a>修改负载均衡算法</h3><p>将默认的轮询改为随机。</p>
<p>首先增加配置类，需要注意的是，自定义的配置类不能被@ComponentScan注解扫描到，所以自定义的IRule不要放在启动类的子目录，要与启动类隔离开。</p>
<p><img src="/../images/2020%E5%91%A8%E9%98%B3SpringCloud%E5%AE%8C%E6%95%B4%E7%89%88%E7%AC%94%E8%AE%B0%E4%B8%80/a12.png" alt="image-20200905162037590"></p>
<p>MySelfRule类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySelfRule</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> IRule <span class="title function_">getRule</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 负载均衡算法改为随机</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第二步，需要在主启动类上添加<code>@RibbonClient</code>注解。然后再启动。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@RibbonClient(name = &quot;CLOUD-PAYMENT-SERVICE&quot;,configuration = MySelfRule.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderMain80</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderMain80.class,args    );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动Eureka-server，启动服务提供者payment8001,payment8002，启动服务消费者consumer-order80.</p>
<p>访问<a href="http://localhost/consumer/payment/getForEntity/1001%EF%BC%8C%E4%BC%9A%E5%8F%91%E7%8E%B0%E8%A2%AB%E8%AE%BF%E9%97%AE%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%E7%9A%84%E7%AB%AF%E5%8F%A3%E6%98%AF%E9%9A%8F%E6%9C%BA%E5%8F%98%E5%8C%96%E7%9A%84%EF%BC%8C%E5%9B%A0%E6%AD%A4%E9%80%89%E5%8F%96%E7%9A%84%E6%9C%8D%E5%8A%A1%E4%B9%9F%E6%98%AF%E9%9A%8F%E6%9C%BA%E7%9A%84%E3%80%82">http://localhost/consumer/payment/getForEntity/1001，会发现被访问的服务提供者的端口是随机变化的，因此选取的服务也是随机的。</a></p>
<h3 id="Ribbon负载均衡算法原理"><a href="#Ribbon负载均衡算法原理" class="headerlink" title="Ribbon负载均衡算法原理"></a>Ribbon负载均衡算法原理</h3><p>轮询方法：rest接口第几次请求数对服务集群总数量取余操作，得到结果就是实际调用服务器的下标，每次服务器重启后rest接口计数从1开始。</p>
<p>例如有两台服务提供者，instances[0] = 127.0.0.1:8001,instances[1] = 127.0.0.1:8002，两台实例作为两台机器，集群总数是2，按照轮询算法原理。</p>
<p>当第1请求时， 1%2 = 1，所以获取服务地址是127.0.0.1:8001；</p>
<p>当第2请求时， 2%2 = 0，所以获取服务地址是127.0.0.1:8002；</p>
<p>当第3请求时， 3%2 = 1，所以获取服务地址是127.0.0.1:8001；</p>
<p>当第4请求时， 4%2 = 0，所以获取服务地址是127.0.0.1:8002；</p>
<p>以此类推…</p>
<h3 id="手写轮询负载均衡算法"><a href="#手写轮询负载均衡算法" class="headerlink" title="手写轮询负载均衡算法"></a>手写轮询负载均衡算法</h3><p>首先创建一个MyLoadBalance接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyLoadBalance</span> &#123;</span><br><span class="line">    </span><br><span class="line">     ServiceInstance <span class="title function_">instances</span><span class="params">(List&lt;ServiceInstance&gt; serviceInstances)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接口的实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLoadBalanceImpl</span> <span class="keyword">implements</span> <span class="title class_">MyLoadBalance</span> &#123;</span><br><span class="line">	<span class="comment">// 原子操作类，底层使用的是CAS</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndIncrement</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            current = <span class="built_in">this</span>.atomicInteger.get();</span><br><span class="line">            next = current &gt; <span class="number">2147483647</span> ? <span class="number">0</span>: current+<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//如果CAS自增操作成功，就会退出循环（当期望值是current时才会更改称为next，否则一直自旋）</span></span><br><span class="line">        &#125;<span class="keyword">while</span> (!<span class="built_in">this</span>.atomicInteger.compareAndSet(current,next));</span><br><span class="line">        log.info(<span class="string">&quot;next= &quot;</span>+next);</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServiceInstance <span class="title function_">instances</span><span class="params">(List&lt;ServiceInstance&gt; serviceInstances)</span> &#123;</span><br><span class="line">        <span class="comment">// 服务提供者下标 = 自增的数据 % 服务提供者总数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getAndIncrement() % serviceInstances.size();</span><br><span class="line">        <span class="comment">// 选取成功后返回</span></span><br><span class="line">        <span class="keyword">return</span> serviceInstances.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>服务消费者使用这种轮询方法，选取服务提供者。orderController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/consumer/payment/lb&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getPaymentUrl</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">serviceID</span> <span class="operator">=</span> <span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>;</span><br><span class="line">      List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(serviceID);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (instances == <span class="literal">null</span> || instances.size() &lt;=<span class="number">0</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">ServiceInstance</span> <span class="variable">instances1</span> <span class="operator">=</span> loadBalance.instances(instances);</span><br><span class="line">      <span class="type">URI</span> <span class="variable">uri</span> <span class="operator">=</span> instances1.getUri();</span><br><span class="line">      log.info(<span class="string">&quot;url= &quot;</span>+uri);</span><br><span class="line">      <span class="keyword">return</span>  restTemplate.getForObject(uri+<span class="string">&quot;/payment/lb&quot;</span>,String.class);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="OpenFeign的基本概念"><a href="#OpenFeign的基本概念" class="headerlink" title="OpenFeign的基本概念"></a><code>OpenFeign</code>的基本概念</h3><p>Feign是一个声明式WebService客户端。使用Feign能让编写WebService客户端更加简单。</p>
<p>他的使用方法是：定义一个服务接口然后在上面添加注解。Feign也能支持可拔插式的编码器和解码器。Spring Cloud对Feign进行了封装，使其能够支持SpringMVC标准注解和HttpMessageConverters。Feign可以与Eureka和Ribbon组合使用完成负载均衡。</p>
<p>Feign旨在使Java Http客户端变得更加容易。</p>
<p>前面在使用Ribbon+RestTemplate时，利用RestTemplate对Http请求做封装处理，形成一套模板话的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用。所以，Feign在此基础上做了进一步的封装，由他来帮助我们定义和实现接口。在Feign的实现下，我们只需要使用注解配置接口，即可完成对服务提供方的接口绑定，简化了使用Spring Cloud Ribbon时，自己封装服务调用的工作量。</p>
<p>还有一点，默认Feign也已经集成了Ribbon。</p>
<h3 id="OpenFeign的使用"><a href="#OpenFeign的使用" class="headerlink" title="OpenFeign的使用"></a>OpenFeign的使用</h3><p>1、新建cloud-consumer-fegin-order80模块，</p>
<p>2、修改pom.xml</p>
<p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--entity--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xzq.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--openfeign--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--web--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--一般基础通用配置--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、创建application.yml配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>4、写主启动类</p>
<p>注意是@Feign注解生效，需要在主启动类上添加@EnableFeignClients。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OpenFeignMain80</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OpenFeignMain80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、编写业务类</p>
<p>service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PAYMENT-SERVICE&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentFeignService</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    CommonResult&lt;Payment&gt; <span class="title function_">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderFeignController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentFeignService paymentFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title function_">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">           <span class="keyword">return</span>  paymentFeignService.getPaymentById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>6、测试feign功能</p>
<p>启动两个Eureka-server，启动payment-8001，payment-8002，然后再启动feign-order80.</p>
<p><img src="/../images/2020%E5%91%A8%E9%98%B3SpringCloud%E5%AE%8C%E6%95%B4%E7%89%88%E7%AC%94%E8%AE%B0%E4%B8%80/a13.png" alt="image-20200905204612067"></p>
<p><img src="/../images/2020%E5%91%A8%E9%98%B3SpringCloud%E5%AE%8C%E6%95%B4%E7%89%88%E7%AC%94%E8%AE%B0%E4%B8%80/a14.png" alt="image-20200905204735033"></p>
<h3 id="OpenFeign的超时控制"><a href="#OpenFeign的超时控制" class="headerlink" title="OpenFeign的超时控制"></a>OpenFeign的超时控制</h3><p>问题描述：在消费者向服务提供者发起请求到最后完成响应的过程中，如果服务提供者在处理过程中消耗的时间大于客户端消费者等待的时间，客户端就会<code>java.net.SocketTimeoutException: Read timed out</code>抛出异常。</p>
<p><img src="/../images/2020%E5%91%A8%E9%98%B3SpringCloud%E5%AE%8C%E6%95%B4%E7%89%88%E7%AC%94%E8%AE%B0%E4%B8%80/a15.png" alt="image-20200905210751668"></p>
<p>解决方法：在配置文件中，修改客户端读取时间和连接时间尽量让消费者等待的时间大于提供者处理的时间。这个也就是Feign的超时控制。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># s设置feign的超时时间，OpenFeign默认只此Ribbon</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="comment"># 在两端正常情况下，网络连接所用的时间</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">5000</span></span><br><span class="line"> <span class="comment"># 建立连接后从服务器读取到可用资源所用的时间</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure>
<h3 id="OpenFeign的日志增强"><a href="#OpenFeign的日志增强" class="headerlink" title="OpenFeign的日志增强"></a>OpenFeign的日志增强</h3><p>支持的日志级别</p>
<ul>
<li>NONE：默认的，不显示任何日志</li>
<li>BASIC：仅仅记录请求方法、URL、响应状态码以及执行时间</li>
<li>HEADERS：除了BASIC中定义的信息之外，还有请求和响应的头信息</li>
<li>FULL：除了HEADERS中定义的信息之外，还有请求和响应的正文以及元数据。</li>
</ul>
<p>要想在控制台中查看详细日志，需要设置配置类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeginLogConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.Level <span class="title function_">feignLogger</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> feign.Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置文件中添加需要打印日志的请求方法路径。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">   <span class="attr">com.guigu.service.PaymentFeignService:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>
<p>启动服务后，向服务提供方发起请求，在控制台上可以看到以下日志。</p>
<p><img src="/../images/2020%E5%91%A8%E9%98%B3SpringCloud%E5%AE%8C%E6%95%B4%E7%89%88%E7%AC%94%E8%AE%B0%E4%B8%80/a16.png" alt="image-20200905212806192"></p>
<p><img src="/../images/2020%E5%91%A8%E9%98%B3SpringCloud%E5%AE%8C%E6%95%B4%E7%89%88%E7%AC%94%E8%AE%B0%E4%B8%80/a17.png" alt="image-20200905212845747"></p>
<p>未完待续…<br><a href="https://blog.csdn.net/qq_43672652/article/details/108453456">下一篇：Hystrix</a></p>
<p>参考：<a href="https://www.bilibili.com/video/BV18E411x7eT">https://www.bilibili.com/video/BV18E411x7eT</a></p>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Aplayer搭配MetingJS音乐插件的使用</title>
    <url>/post/a7e9e655.html</url>
    <content><![CDATA[<h2 id="1-Aplayer和MetingJ的介绍"><a href="#1-Aplayer和MetingJ的介绍" class="headerlink" title="1. Aplayer和MetingJ的介绍"></a>1. Aplayer和MetingJ的介绍</h2><p><strong>Aplayer官网文档：<a href="https://aplayer.js.org/#/">https://aplayer.js.org/#/</a><br>Metingjs官网文档：<a href="https://github.com/metowolf/MetingJS">https://github.com/metowolf/MetingJS</a></strong></p>
<p>Aplayer是一个功能强大的HTML5音乐播放器，Metingjs基于Aplayer插件封装好的插件，开箱即用。</p>
<h2 id="2-MetingJS的简单使用"><a href="#2-MetingJS的简单使用" class="headerlink" title="2. MetingJS的简单使用"></a>2. MetingJS的简单使用</h2><h3 id="MetingJS支持Aplayer版本"><a href="#MetingJS支持Aplayer版本" class="headerlink" title="MetingJS支持Aplayer版本"></a>MetingJS支持Aplayer版本</h3><table>
<thead>
<tr>
<th>Version</th>
<th>API Status</th>
<th>APlayer</th>
</tr>
</thead>
<tbody><tr>
<td>1.2.x</td>
<td>Supported</td>
<td>1.10.0</td>
</tr>
<tr>
<td>2.0.x</td>
<td>Latest</td>
<td>1.10.0</td>
</tr>
</tbody></table>
<h3 id="支持的浏览器"><a href="#支持的浏览器" class="headerlink" title="支持的浏览器"></a>支持的浏览器</h3><ul>
<li>Chrome</li>
<li>Firefox</li>
<li>Safari</li>
<li>Internet Explorer 11</li>
<li>Microsoft Edge</li>
</ul>
<h2 id="3-使用详解"><a href="#3-使用详解" class="headerlink" title="3. 使用详解"></a>3. 使用详解</h2><h3 id="简单使用实例"><a href="#简单使用实例" class="headerlink" title="简单使用实例"></a>简单使用实例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span>	</span><br><span class="line">	<span class="comment">&lt;!-- require APlayer --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- require MetingJS --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">meting-js</span> <span class="attr">server</span>=<span class="string">&quot;netease&quot;</span> <span class="attr">type</span>=<span class="string">&quot;playlist&quot;</span> <span class="attr">id</span>=<span class="string">&quot;60198&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meting-js</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> 解析：server=&quot;netease&quot; type=&quot;playlist&quot; id=&quot;60198&quot;</span><br><span class="line"></span><br><span class="line">server指音乐平台，netease指网易云音乐， type类型，playlist列表，id指歌曲的i或者专辑或列表外链id</span><br><span class="line">因此重点在于指定平台，指定外链id</span><br></pre></td></tr></table></figure>
<p><strong>中文版选项</strong></p>
<table>
<thead>
<tr>
<th>选项</th>
<th>默认</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>id(编号)</td>
<td><strong>require</strong></td>
<td>歌曲ID /播放列表ID /专辑ID /搜索关键字</td>
</tr>
<tr>
<td>server(平台)</td>
<td><strong>require</strong></td>
<td>音乐平台：<code>netease</code>，<code>tencent</code>，<code>kugou</code>，<code>xiami</code>，<code>baidu</code></td>
</tr>
<tr>
<td>type（类型）</td>
<td><strong>require</strong></td>
<td><code>song</code>，<code>playlist</code>，<code>album</code>，<code>search</code>，<code>artist</code></td>
</tr>
<tr>
<td>auto（支持类种 类）</td>
<td>options</td>
<td>音乐链接，支持：<code>netease</code>，<code>tencent</code>，<code>xiami</code></td>
</tr>
<tr>
<td>fixed（固定模式）</td>
<td><code>false</code></td>
<td>启用固定模式，默认<code>false</code></td>
</tr>
<tr>
<td>mini（迷你模式）</td>
<td><code>false</code></td>
<td>启用迷你模式,默认<code>false</code></td>
</tr>
<tr>
<td>autoplay（自动播放）</td>
<td><code>false</code></td>
<td>音频自动播放，默认<code>false</code></td>
</tr>
<tr>
<td>theme(主题颜色)</td>
<td><code>#2980b9</code></td>
<td>默认<code>#2980b9</code></td>
</tr>
<tr>
<td>loop（循环）</td>
<td><code>all</code></td>
<td>播放器循环播放，值：“all”，one”，“none”</td>
</tr>
<tr>
<td>order(顺序)</td>
<td><code>list</code></td>
<td>播放器播放顺序，值：“list”，“random”</td>
</tr>
<tr>
<td>preload(加载)</td>
<td><code>auto</code></td>
<td>值：“none”，“metadata”，“’auto”</td>
</tr>
<tr>
<td>volume（声量）</td>
<td><code>0.7</code></td>
<td>默认音量，请注意播放器会记住用户设置，用户自己设置音量后默认音量将不起作用</td>
</tr>
<tr>
<td>mutex（限制）</td>
<td><code>true</code></td>
<td>防止同时播放多个玩家，在该玩家开始播放时暂停其他玩家</td>
</tr>
<tr>
<td>lrc-type（歌词）</td>
<td><code>0</code></td>
<td>歌词显示</td>
</tr>
<tr>
<td>list-folded（列表折叠）</td>
<td><code>false</code></td>
<td>指示列表是否应该首先折叠</td>
</tr>
<tr>
<td>list-max-height（最大高度）</td>
<td><code>340px</code></td>
<td>列出最大高度</td>
</tr>
<tr>
<td>storage-name（储存名称）</td>
<td><code>metingjs</code></td>
<td>存储播放器设置的localStorage键</td>
</tr>
</tbody></table>
<p><strong>英文版选项</strong></p>
<table>
<thead>
<tr>
<th>option</th>
<th>default</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td><strong>require</strong></td>
<td>song id / playlist id / album id / search keyword</td>
</tr>
<tr>
<td>server</td>
<td><strong>require</strong></td>
<td>music platform: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td>
</tr>
<tr>
<td>type</td>
<td><strong>require</strong></td>
<td><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td>
</tr>
<tr>
<td>auto</td>
<td>options</td>
<td>music link, support: <code>netease</code>, <code>tencent</code>, <code>xiami</code></td>
</tr>
<tr>
<td>fixed</td>
<td><code>false</code></td>
<td>enable fixed mode</td>
</tr>
<tr>
<td>mini</td>
<td><code>false</code></td>
<td>enable mini mode</td>
</tr>
<tr>
<td>autoplay</td>
<td><code>false</code></td>
<td>audio autoplay</td>
</tr>
<tr>
<td>theme</td>
<td><code>#2980b9</code></td>
<td>main color</td>
</tr>
<tr>
<td>loop</td>
<td><code>all</code></td>
<td>player loop play, values: ‘all’, ‘one’, ‘none’</td>
</tr>
<tr>
<td>order</td>
<td><code>list</code></td>
<td>player play order, values: ‘list’, ‘random’</td>
</tr>
<tr>
<td>preload</td>
<td><code>auto</code></td>
<td>values: ‘none’, ‘metadata’, ‘auto’</td>
</tr>
<tr>
<td>volume</td>
<td><code>0.7</code></td>
<td>default volume, notice that player will remember user setting, default volume will not work after user set volume themselves</td>
</tr>
<tr>
<td>mutex</td>
<td><code>true</code></td>
<td>prevent to play multiple player at the same time, pause other players when this player start play</td>
</tr>
<tr>
<td>lrc-type</td>
<td><code>0</code></td>
<td>lyric type</td>
</tr>
<tr>
<td>list-folded</td>
<td><code>false</code></td>
<td>indicate whether list should folded at first</td>
</tr>
<tr>
<td>list-max-height</td>
<td><code>340px</code></td>
<td>list max height</td>
</tr>
<tr>
<td>storage-name</td>
<td><code>metingjs</code></td>
<td>localStorage key that store player setting</td>
</tr>
</tbody></table>
<h2 id="3-迷你版背景音乐"><a href="#3-迷你版背景音乐" class="headerlink" title="3. 迷你版背景音乐"></a>3. 迷你版背景音乐</h2><p>根据以上参数，写好了迷你版背景音乐，默认在左下角显示，默认列表折叠，默认不显示歌词</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span>	</span><br><span class="line">	<span class="comment">&lt;!-- require APlayer --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- require MetingJS --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meting-js</span> </span></span><br><span class="line"><span class="tag">	<span class="attr">server</span>=<span class="string">&quot;netease&quot;</span> </span></span><br><span class="line"><span class="tag">	<span class="attr">type</span>=<span class="string">&quot;playlist&quot;</span> </span></span><br><span class="line"><span class="tag">	<span class="attr">id</span>=<span class="string">&quot;60198&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">fixed</span>=<span class="string">&quot;true&quot;</span> </span></span><br><span class="line"><span class="tag">	<span class="attr">autoplay</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">loop</span>=<span class="string">&quot;all&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">order</span>=<span class="string">&quot;random&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">preload</span>=<span class="string">&quot;auto&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">list-folded</span>=<span class="string">&quot;ture&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">list-max-height</span>=<span class="string">&quot;500px&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">lrc-type</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meting-js</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>抽取出来</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--css--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--js--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meting-js</span> </span></span><br><span class="line"><span class="tag">	<span class="attr">server</span>=<span class="string">&quot;netease&quot;</span> </span></span><br><span class="line"><span class="tag">	<span class="attr">type</span>=<span class="string">&quot;playlist&quot;</span> </span></span><br><span class="line"><span class="tag">	<span class="attr">id</span>=<span class="string">&quot;60198&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">fixed</span>=<span class="string">&quot;true&quot;</span> </span></span><br><span class="line"><span class="tag">	<span class="attr">autoplay</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">loop</span>=<span class="string">&quot;all&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">order</span>=<span class="string">&quot;random&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">preload</span>=<span class="string">&quot;auto&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">list-folded</span>=<span class="string">&quot;ture&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">list-max-height</span>=<span class="string">&quot;500px&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">lrc-type</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">meting-js</span>&gt;</span></span><br><span class="line">	</span><br></pre></td></tr></table></figure>
<h2 id="4-网易云音乐外链获取方法"><a href="#4-网易云音乐外链获取方法" class="headerlink" title="4. 网易云音乐外链获取方法"></a>4. 网易云音乐外链获取方法</h2><h2 id="1、打开网页版网易云音乐：https-music-163-com"><a href="#1、打开网页版网易云音乐：https-music-163-com" class="headerlink" title="1、打开网页版网易云音乐：https://music.163.com/#"></a>1、打开网页版网易云音乐：<a href="https://music.163.com/#">https://music.163.com/#</a></h2><p>2、选择播放的的歌单，（由于部分歌曲限制外链，只能另辟蹊径通过分享获得歌单id），如图分享：</p>
<p><img src="/../images/Aplayer%E6%90%AD%E9%85%8DMetingjs%E9%9F%B3%E4%B9%90%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/2311623-20210315154729912-1432011760.png" alt="歌单分享"></p>
<p>3、打开分享的链接（如图我是分享到微博中，打开该链接）</p>
<p><img src="/../images/Aplayer%E6%90%AD%E9%85%8DMetingjs%E9%9F%B3%E4%B9%90%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/2311623-20210315155001986-1866875527.png" alt="微博分享链接"></p>
<p>4、点击链接，打开后，可以看到地址栏中该字段值就是歌单id，填写到上述的id中即可；</p>
<p><img src="/../images/Aplayer%E6%90%AD%E9%85%8DMetingjs%E9%9F%B3%E4%B9%90%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/2311623-20210315155134243-1310613511.png" alt="歌单id"></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Aplayer</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7安装k8s （kubernetes）教程 yum方式</title>
    <url>/post/57806a78.html</url>
    <content><![CDATA[<p>介绍<br> kubernetes和docker以及服务之间的关系</p>
<p>kubernetes集群包括master主机和node从机  以下放个简单的关系图 具体文档介绍地址可参考 Kubernetes教程</p>
<p><img src="/../images/CentOS7%E5%AE%89%E8%A3%85k8s%E6%95%99%E7%A8%8Byum%E6%96%B9%E5%BC%8F/image-20211224103654696.png" alt="image-20211224103654696"></p>
<p>1.安装准备<br>    1.1.所有机器更新yum源</p>
<p>yum update -y<br>   1.2 所有机器 安装 epel-release源  这个软件为“红帽系”的操作系统提供额外的软件包，适用于RHEL、CentOS和Scientific Linux这个软件包会自动配置yum的软件仓库。</p>
<p>yum -y install epel-release<br>  1.3 所有机器关闭防火墙 关闭 swap分区 关闭 SELinux (seLinux是一个安全增强型的linux内核模块，也是linux的一个安全子系统)</p>
<p>#关闭防火墙<br>systemctl stop firewalld</p>
<p>#禁用开机自启动<br>systemctl disable firewalld</p>
<p>#关闭SELinux<br>setenforce 0  #临时关闭</p>
<p>#永久关闭selinux：<br>vim /etc/sysconfig/selinux<br>SELINUX=enforcing 替换为SELINUX=disabled 需重启机器</p>
<p>#关闭swap<br>swapoff -a  #临时关闭</p>
<p>#永久关闭swap<br>vi /etc/fstab  #注释掉最后一行关于swap的配置  可参考我的Linux分类中的其他博客<br>  1.4 机器准备</p>
<p>服务器    操作系统    IP    需要组件<br>master    centOs7    192.168.33.229    etcd,kube-apiserver,kube-scheduler,kube-controller-manager,docker(看个人需要)<br>node1    centOs7    192.168.33.226    kube-proxy,kubelet,docker<br>node2    centOs7    192.168.33.227    kube-proxy,kubelet,docker<br>  1.5 组件介绍：</p>
<pre><code>master主机组件：</code></pre>
<p>　　　etcd：提供分布式数据存储的数据库吧，用于持久化存储k8s集群的配置和状态</p>
<p>　　　kube-apiserver：api service提供了http rest接口，是整个集群的入口，K8s其它组件之间不直接通信，而是通过API server通信的。（只有API server连接了etcd，即其它组件更新K8s集群的状态时，只能通过API server读写etcd中的数据）</p>
<p>　　　kube-scheduler：scheduler负责资源的调度</p>
<p>　　　kube-controller-manager：整个集群的管理控制中心，此组件里面是由多个控制器组成的</p>
<p>   node机器组件：</p>
<p>　　　kube-proxy：用来负载均衡网络流量</p>
<p>　　　kubelet：用来管理node节点机上的容器</p>
<p>　　　docker：运行项目镜像容器的组件</p>
<pre><code>  组件具体介绍这里可以参考 官方kubernetes组件介绍</code></pre>
<p>2.在Master机器上安装kubernetes-master和etcd<br>   2.1 分别修改三台服务器的 /etc/hosts 文件 增加以下ip配置</p>
<p>  192.168.33.229  k8s-master<br>  192.168.33.226  k8s-node1<br>  192.168.33.227  k8s-node2</p>
<p><img src="/../images/CentOS7%E5%AE%89%E8%A3%85k8s%E6%95%99%E7%A8%8Byum%E6%96%B9%E5%BC%8F/20200709115116452.png" alt="img"></p>
<p>   2.2 使用yum安装etcd、kubernetes-master</p>
<p>yum -y install etcd kubernetes-master<br>   2.3.编辑  vi /etc/etcd/etcd.conf 修改如下</p>
<p><img src="/../images/CentOS7%E5%AE%89%E8%A3%85k8s%E6%95%99%E7%A8%8Byum%E6%96%B9%E5%BC%8F/20200709115530626.png" alt="img"></p>
<p>   2.4 编辑 vi /etc/kubernetes/apiserver 修改如下</p>
<p><img src="/../images/CentOS7%E5%AE%89%E8%A3%85k8s%E6%95%99%E7%A8%8Byum%E6%96%B9%E5%BC%8F/20200709115846650.png" alt="img"></p>
<p>  2.5 编辑  vi /etc/kubernetes/config 修改如下</p>
<p><img src="/../images/CentOS7%E5%AE%89%E8%A3%85k8s%E6%95%99%E7%A8%8Byum%E6%96%B9%E5%BC%8F/2020070912004248.png" alt="img"></p>
<p>2.6 启动 etcd ,kube-apiserver, kube-controller-manager, kube-scheduler 等服务 并设置开机自启动</p>
<p>for SERVICES in etcd docker kube-apiserver kube-controller-manager kube-scheduler; </p>
<p>do systemctl restart $SERVICES;</p>
<p>systemctl enable $SERVICES;</p>
<p>systemctl status $SERVICES; </p>
<p>done</p>
<p>到此 以上Master主机配置完毕 </p>
<p>3.接下来配置node从机配置<br>   3.1 在node1机器上安装 kubernetes-node 组件 192.168.33.226</p>
<p>yum -y install kubernetes-node<br>  3.2 编辑 /etc/sysconfig/flanneld 修改如下 (flannel暂不安装后续单独做配置 该步骤可忽略 不影响其他)</p>
<p><img src="/../images/CentOS7%E5%AE%89%E8%A3%85k8s%E6%95%99%E7%A8%8Byum%E6%96%B9%E5%BC%8F/20200709121037854.png" alt="img"></p>
<p>  3.3  编辑 vi /etc/kubernetes/config 修改如下</p>
<p><img src="/../images/CentOS7%E5%AE%89%E8%A3%85k8s%E6%95%99%E7%A8%8Byum%E6%96%B9%E5%BC%8F/20200709121159502.png" alt="img"></p>
<p>  3.4. 编辑 vi /etc/kubernetes/kubelet 修改如下</p>
<p><img src="/../images/CentOS7%E5%AE%89%E8%A3%85k8s%E6%95%99%E7%A8%8Byum%E6%96%B9%E5%BC%8F/20200709121412434.png" alt="img"></p>
<p>  3.5 启动 kube-proxy，kubelet, docker 等服务 并设置开机自启</p>
<p>for SERVICES in docker kubelet kube-proxy;do systemctl start $SERVICES;systemctl enable $SERVICES;systemctl status $SERVICES; done<br>node2服务器参考node1配置</p>
<p>至此 k8s 的主从服务器都配置完毕<br>然后在master服务器上执行如下命令 查看运行的node节点机器</p>
<p>kubectl get nodes<br>成功如下</p>
<p><img src="/../images/CentOS7%E5%AE%89%E8%A3%85k8s%E6%95%99%E7%A8%8Byum%E6%96%B9%E5%BC%8F/2020070912173758.png" alt="img"></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
      </tags>
  </entry>
  <entry>
    <title>Axhub Charts Pro 帮助文档</title>
    <url>/post/7d9f7df6.html</url>
    <content><![CDATA[<h1 id="Axhub-Charts-Pro-帮助文档"><a href="#Axhub-Charts-Pro-帮助文档" class="headerlink" title="Axhub Charts Pro 帮助文档"></a>Axhub Charts Pro 帮助文档</h1><p><a href="https://www.yuque.com/books/share/9d8112e1-5edf-4fd0-a435-ba151986c336/zhvach">一、基本说明</a>2020-09-22 12:44</p>
<p><a href="https://www.yuque.com/books/share/9d8112e1-5edf-4fd0-a435-ba151986c336/ya1f4q">二、Antv G2 4.x 基础图表</a>2020-05-20 16:11</p>
<p><a href="https://www.yuque.com/books/share/9d8112e1-5edf-4fd0-a435-ba151986c336/pic2zi">三、ECharts 地理可视化</a>2020-05-14 19:42</p>
<p><a href="https://www.yuque.com/books/share/9d8112e1-5edf-4fd0-a435-ba151986c336/cpzrdp">四、Antv L7 地理可视化</a>2020-05-19 22:07</p>
<p><a href="https://www.yuque.com/books/share/9d8112e1-5edf-4fd0-a435-ba151986c336/mwis3t">五、动态元件</a>2020-01-02 13:36</p>
<p><a href="https://www.yuque.com/books/share/9d8112e1-5edf-4fd0-a435-ba151986c336/gfx5qn">六、Block 元件</a>2019-12-08 18:37</p>
<p><a href="https://www.yuque.com/books/share/9d8112e1-5edf-4fd0-a435-ba151986c336/gu3drv">【历史版本】Antv G2 3.x 图表配置列表</a>2020-05-16 15:35</p>
<p><a href="https://www.yuque.com/books/share/9d8112e1-5edf-4fd0-a435-ba151986c336/puxrmr">更新日志</a>2020-05-10 22:56</p>
<p><a href="https://www.yuque.com/books/share/9d8112e1-5edf-4fd0-a435-ba151986c336/un4o2x">二次创作分发</a>2019-12-14 23:38</p>
<p><a href="https://www.yuque.com/books/share/9d8112e1-5edf-4fd0-a435-ba151986c336/gmxtun">社群福利</a></p>
<p><a href="https://www.yuque.com/books/share/9d8112e1-5edf-4fd0-a435-ba151986c336/ya1f4q">https://www.yuque.com/books/share/9d8112e1-5edf-4fd0-a435-ba151986c336/ya1f4q</a></p>
<p>密码：mrfq</p>
<h1 id="一、基本说明"><a href="#一、基本说明" class="headerlink" title="一、基本说明"></a>一、基本说明</h1><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Axhub Charts Pro （ 下称 acp ）是一套基于 Antv 、ECharts 等前端可视化库开发的 Axure 元件库，旨在帮助用户快速实现高保真的数据可视化原型设计。</p>
<p>本文档仅在语雀平台发布，密码定期更新在 Axhub 数据可视化原型设计社群内。</p>
<h1 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h1><ol>
<li>通过合法合规渠道下载 Axhub Charts Pro.rplib 文件</li>
<li>在 Axure 内的 Libraries 面板，点击菜单导入下载的元件库</li>
<li>在 Axure 内的 Libraries 面板选择对应图表，拖拽入目标页面即可，预览或生成即可看到图表</li>
<li>建议使用前先阅读本文档，并学习下数据可视化图表的基础用法，<a href="https://antv-2018.alipay.com/zh-cn/vis/chart/index.html">教程 &gt;&gt;</a></li>
</ol>
<h1 id="认识图表"><a href="#认识图表" class="headerlink" title="认识图表"></a>认识图表</h1><h3 id="元件组成"><a href="#元件组成" class="headerlink" title="元件组成"></a>元件组成</h3><p>每个图表元件一般为一个组合，组合名称可任意修改，组合内有：</p>
<ul>
<li>容器矩形：一般名称为 acp-xxx-chart ，名称不可更改，为图表容器</li>
<li>数据中继器：一般名称为 acp-data ，名称不可更改，存放图表数据</li>
<li>配置中继器：一般名称为 acp-config ，名称不可更改，存放图表数据配置</li>
</ul>
<p><img src="/../images/AxhubChartsPro%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3/1569252379002-4f54cccf-ea54-40d0-b415-920516d00083.png" alt="image.png"></p>
<p>acp 工作原理就是通过 javascript 读取中继器内的数据和配置，然后通过第三方图表库渲染成对应图表。</p>
<p>请注意，每个图表元件的组合不能打乱，否则将无法正常工作。</p>
<p>请注意，你在 Axure 内的 Outline（中文翻译为大纲或概要） 面板即可看到元件库组合，若找不到该面板，请尝试点击 Axure 视图 Views 菜单 - 面板 Panes 打开。</p>
<h3 id="图表组成"><a href="#图表组成" class="headerlink" title="图表组成"></a>图表组成</h3><p>为了更好地配置和设计，请先了解图表的组成以及相关概念。</p>
<p>完整的图表组成如下图所示：</p>
<p><img src="/../images/AxhubChartsPro%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3/image.png" alt="image"></p>
<p>具体说明请查看 G2 官方介绍  <a href="https://www.yuque.com/antv/g2-docs/tutorial-g2-chart-composition">https://www.yuque.com/antv/g2-docs/tutorial-g2-chart-composition</a></p>
<h1 id="更改画布"><a href="#更改画布" class="headerlink" title="更改画布"></a>更改画布</h1><p>更改尺寸：在 Axure 内更改容器矩形（ acp-xxx-chart ）的尺寸和比例，图表画布即会更新</p>
<p>更改颜色：图表画布背景是透明的，可以在 Axure 内自行增加一个背景层，实现图表的背景和纹路等</p>
<h1 id="更改数据"><a href="#更改数据" class="headerlink" title="更改数据"></a>更改数据</h1><p>在 Axure 内更改数据中继器（ acp-data ）的数据，即可更改数据，录入数据量大的话建议从 Excel 复制。</p>
<p>由于目前 Axure 中继器表头限制了输入中文，可以通过 <a href="https://www.yuque.com/books/share/9d8112e1-5edf-4fd0-a435-ba151986c336/gu3drv">fieldAlias 配置项</a>来解决这个问题。</p>
<h1 id="更改配置"><a href="#更改配置" class="headerlink" title="更改配置"></a>更改配置</h1><p>在 Axure 内更改数据中继器（ acp-config ）的数据，可以针对数据、坐标轴、图形、文本及提示信息更多配置，具体配置内容请查看 <a href="https://www.yuque.com/books/share/9d8112e1-5edf-4fd0-a435-ba151986c336/gu3drv">配置项列表</a>。</p>
<p>同一配置项，权重顺序为 图表配置 &gt; 全局配置 &gt; 主题配置 ，权重最高的为最终配置结果。</p>
<h1 id="数据交互"><a href="#数据交互" class="headerlink" title="数据交互"></a>数据交互</h1><p>目前可以实现实时刷新、滑块（slider）的数据交互新增，未来会逐步支持滑动，缩放等操作。</p>
<h3 id="实时更新数据"><a href="#实时更新数据" class="headerlink" title="实时更新数据"></a>实时更新数据</h3><p><strong>Antv G2 3.x 、**</strong>Antv G2 4.x 适用**</p>
<p>如上文所述，acp 的数据是存放在数据中继器（ acp-data ）内的，你可以通过 Axure 内置的中继器方法更改对应数据，这些操作都会实时同步到图表上的。</p>
<p><a href="http://www.woshipm.com/rp/614773.html">Axure 中继器教程</a></p>
<p><a href="https://axhub.im/pro/84172de8e923cb73/#g=1&p=%E3%80%90new%E3%80%91%E4%B8%AD%E7%BB%A7%E5%99%A8%E4%BA%A4%E4%BA%92">Axure 实时更新数据案例</a></p>
<h3 id="实时更新配置"><a href="#实时更新配置" class="headerlink" title="实时更新配置"></a>实时更新配置</h3><p><strong>Antv G2 4.x 适用</strong></p>
<p>如上文所述，acp 的配置是存放在配置中继器（ acp-config ）内的，你可以通过 Axure 内置的中继器方法更改对应配置，这些操作都会实时同步到图表上的。</p>
<p><a href="http://www.woshipm.com/rp/614773.html">Axure 中继器教程</a></p>
<p><a href="https://axhub.im/pro/84172de8e923cb73/#g=1&p=%E3%80%90new%E3%80%91%E4%B8%AD%E7%BB%A7%E5%99%A8%E4%BA%A4%E4%BA%92">Axure 实时更新配置案例</a></p>
<h3 id="滑块使用"><a href="#滑块使用" class="headerlink" title="滑块使用"></a>滑块使用</h3><p><strong>Antv G2 3.x</strong>  <strong>适用</strong></p>
<p>目前支持滑块交互的图表只有折线图、面积图和 K 线图，使用步骤如下：</p>
<p><strong>创建滑块：</strong>将元件库的滑块元件拖放到目标图表所在页面</p>
<p><strong>关联图表：</strong>将滑块放到目标图表元件的组内（如图）</p>
<p>​         <img src="/../images/AxhubChartsPro%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3/1569754092690-7e681516-6745-4601-ba74-b5f787ff2bf3.png" alt="image.png"></p>
<p><strong>修改属性：</strong>通过修改 slider 矩形可以改变滑块的大小和位置，通过 config 中继器 可以修改<a href="https://www.yuque.com/lintendo/uux5xi/gu3drv#KAA2n">相关配置</a>。</p>
<p>这就完成了，预览看看吧~</p>
<h3 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h3><p><strong>Antv G2 4.x</strong>  <strong>ECharts地图、L7地图适用</strong></p>
<ol>
<li>创建全局变量 AxhubClickX 、AxhubClickName、AxhubClickValue，默认值为空</li>
<li>为图表容器 acp-xxx-chart 添加点击事件，点击时，acp 会自动赋值给以上全局变量，让你知道所点击的图表内容，你可以根据该值进行条件判断或者赋值</li>
<li>AxhubClickX 为点击的图形横坐标，无坐标轴则不支持；AxhubClickName 为点击的图形系列名称；AxhubClickValue为点击的图形值；</li>
<li><a href="https://axhub.im/pro/84172de8e923cb73/#g=1&p=%E3%80%90new%E3%80%91%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92">在线例子 &gt;&gt;</a></li>
</ol>
<h1 id="伪实时预览"><a href="#伪实时预览" class="headerlink" title="伪实时预览"></a>伪实时预览</h1><p>由于 acp 的实现方式，导致 Axure 内无法实时预览。你可以通过以下步骤，实现伪实时预览：</p>
<p>1、设置好目标图表的数据和配置，并在浏览器预览</p>
<p>2、对图表右键，复制图片到 Axure，并将图片移入图表的元件组合</p>
<p>3、将图片名称改为容器矩形的名称（ acp-xxx-chart ），并将原来的容器矩形删除</p>
<p>这样就是实现了伪实时预览，效果可以看元件库内的部分示例。可以方便地在图表上加上自己需要的辅助线或者文案，也可以提升图表渲染过程的视觉效果。</p>
<h1 id="离线使用"><a href="#离线使用" class="headerlink" title="离线使用"></a>离线使用</h1><h3 id="Antv-G2-离线"><a href="#Antv-G2-离线" class="headerlink" title="Antv G2 离线"></a>Antv G2 离线</h3><p><strong>方式一：自行部署 js 文件（推荐）</strong></p>
<ul>
<li>下载群内离线包的 <strong>g2v4.x.js</strong>，部署到自己的局域网或私有服务器</li>
<li>设置项目全局变量 AxhubJsLink ，值为 部署后的 <strong>g2v4.x.js</strong> 链接</li>
</ul>
<p><strong>方式二：通过本地路径引入</strong></p>
<ol>
<li>下载群内的 acp离线.zip ，将压缩包内的  <strong>local-g2v4.x.js</strong> 放到生成的 html 文件根目录</li>
<li>点击发布-&gt;生成 html , 添加字体 acp , 在 URL 输入框输入一下内容（含引号）：</li>
</ol>
<p>​    “&gt;<script type="text/javascript" src="./local-g2v4.x.js"></script> &lt;link href=” </p>
<p>**<br>**</p>
<h3 id="ECharts-Block-离线"><a href="#ECharts-Block-离线" class="headerlink" title="ECharts Block 离线"></a>ECharts Block 离线</h3><p><strong>方式一：自行部署 js 文件（推荐）</strong></p>
<ul>
<li>下载群内离线包内的 ec 文件夹下的所有 js ，部署到自己的局域网或私有服务器</li>
<li>设置项目全局变量 AxhubECJsLink ，值为 部署后的 ec.js 链接</li>
<li>其他 js 文件请安原来的顺序，用部署后的 js 链接替换 acp-js 中继器内的对应链接</li>
</ul>
<p><strong>方式二：通过本地路径引入</strong></p>
<ol>
<li>下载群内的 离线包zip ，将压缩包内的 ec 文件夹 放到生成的 html 文件根目录</li>
<li>点击发布-&gt;生成 html , 添加字体 ec, 在 URL 输入框输入一下内容（含引号）：</li>
</ol>
<p>“&gt;<script type="text/javascript" src="./ec/local-ec.js"></script> &lt;link href=” </p>
<ol>
<li>在 acp-config 内，把 离线模式 设置为 true</li>
</ol>
<p><strong>请注意，使用了在线数据或者百度地图接口的图表是不支持离线的，若图表还使用了别的 js 文件，也需要一并下载和引入。</strong></p>
<h1 id="开发者糖果"><a href="#开发者糖果" class="headerlink" title="开发者糖果"></a>开发者糖果</h1><p>（TODO）</p>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>（TODO）</p>
<h1 id="版权说明"><a href="#版权说明" class="headerlink" title="版权说明"></a>版权说明</h1><p>acp 不是免费作品，仅允许 Axhub 数据可视化原型设计社群成员免费使用，包括个人学习、企业商业化等使用范围。但为了保障社群成员利益，禁止普通成员做任何二次分发包括转赠、销售（含二次创作）等，希望大家理解。</p>
<p>如果你是原型创作者，需要使用 acp 完成作品并进行二次销售，可以查看 <a href="https://www.yuque.com/lintendo/uux5xi/un4o2x">二次创作分发</a>。</p>
<h1 id="特别感谢"><a href="#特别感谢" class="headerlink" title="特别感谢"></a>特别感谢</h1><p>图标来源：<a href="https://github.com/Haonancx/chart-type-icon[">https://github.com/Haonancx/chart-type-icon[</a> ](<a href="https://github.com/Haonancx/chart-type-icon)%EF%BC%88%E4%BD%9C%E8%80%85fsux">https://github.com/Haonancx/chart-type-icon)（作者fsux</a>  ）</p>
<h1 id="二、Antv-G2-4-x-基础图表"><a href="#二、Antv-G2-4-x-基础图表" class="headerlink" title="二、Antv G2 4.x 基础图表"></a>二、Antv G2 4.x 基础图表</h1><h1 id="图表组成-1"><a href="#图表组成-1" class="headerlink" title="图表组成"></a>图表组成</h1><p>为了更好地配置，请先了解图表的组成以及相关概念。</p>
<p>完整的图表组成如下图所示：</p>
<p><img src="/../images/AxhubChartsPro%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3/image.png" alt="image"></p>
<p>具体说明请查看 G2 官方介绍  <a href="https://www.yuque.com/antv/g2-docs/tutorial-g2-chart-composition">https://www.yuque.com/antv/g2-docs/tutorial-g2-chart-composition</a></p>
<p>只需将下方配置项填入 acp-config 中继器即可进行配置。当然，Axhub Charts Pro 默认已内置了部分常用配置，可以不必重复添加。</p>
<p>同一配置项，权重顺序为 图表配置 &gt; 全局配置 &gt; 主题配置 ，权重最高的为最终配置结果。</p>
<h1 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h1><p>优先推荐，你可以通过设置项目的 <strong>全局变量（Axure-项目-全局变量）</strong>，来实现全局配置，一旦设置，将在项目内所有图表生效，支持字段如下：</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
</tr>
</thead>
<tbody><tr>
<td>globalTheme</td>
<td>图表主题，可取值 default / dark</td>
<td>dark</td>
</tr>
<tr>
<td>globalColor</td>
<td>图表颜色，可以参考配置列表里的 fieldColors 配置</td>
<td>#545454</td>
</tr>
<tr>
<td>globalFontSize</td>
<td>字体大小</td>
<td>14</td>
</tr>
<tr>
<td>globalTextFill</td>
<td>字体主颜色</td>
<td>#BDCCED</td>
</tr>
<tr>
<td>globalLineStroke</td>
<td>坐标轴颜色</td>
<td>#CCD6EC</td>
</tr>
<tr>
<td>globalGridLineStroke</td>
<td>网格颜色</td>
<td>#BDCCED</td>
</tr>
<tr>
<td>globalLegendTextFill</td>
<td>图例文本颜色</td>
<td>#BDCCED</td>
</tr>
</tbody></table>
<h1 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h1><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>主题</td>
<td>主题，目前支持 default 和 dark（适合深色背景）两种，<a href>欢迎贡献 </a></td>
<td>dark</td>
<td>default</td>
<td></td>
</tr>
<tr>
<td>图表颜色</td>
<td>图表字段对应的颜色，多个用‘,’或‘|’分隔，使用 rgb/rgba 格式时，分隔符号只能使用‘|’，具体请查看 <a href="#e2VEH">颜色说明</a></td>
<td>#4169E1,#B0C4DE</td>
<td></td>
<td></td>
</tr>
<tr>
<td>系列别名</td>
<td>图表字段对应的别名，多个用‘,’分隔，一般用于解决 Axure 中继器表头不支持中文的问题</td>
<td>东京,伦敦</td>
<td></td>
<td></td>
</tr>
<tr>
<td>图形边距</td>
<td>中间图形（不含图例和坐标轴标签）距离四周的距离按上右下左的顺序设置，用 ‘,’ 分隔</td>
<td>12,24,12,24</td>
<td></td>
<td></td>
</tr>
<tr>
<td>镜像翻转</td>
<td>图形镜像翻转，例如柱状图可以变成条形图</td>
<td>true</td>
<td>false</td>
<td></td>
</tr>
</tbody></table>
<h1 id="坐标轴"><a href="#坐标轴" class="headerlink" title="坐标轴"></a>坐标轴</h1><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>显示x轴</td>
<td>是否显示X轴</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>x轴刻度数量</td>
<td>x轴刻度数量</td>
<td>5</td>
<td></td>
</tr>
<tr>
<td>x轴数据类型</td>
<td>分类度量：cat： 分类度量timeCat: 时间分类度量连续度量：linear: 线性度量time：连续的时间度量log: log 度量pow: pow 度量quantize：分段度量，用户可以指定不均匀的分段quantile: 等分度量，根据数据的分布自动计算分段常量度量identity: 常量度量</td>
<td>linear</td>
<td>cat</td>
</tr>
<tr>
<td>x轴位置</td>
<td>x轴的位置，可选top/right/bottom/left</td>
<td>top</td>
<td>bottom</td>
</tr>
<tr>
<td>x轴标题</td>
<td>x轴的标题</td>
<td>月份</td>
<td>空</td>
</tr>
<tr>
<td>x轴标签模板</td>
<td>x轴标签内容模板</td>
<td>{x}年</td>
<td>{x}</td>
</tr>
<tr>
<td>x轴标签角度</td>
<td></td>
<td>-20</td>
<td></td>
</tr>
<tr>
<td>自动隐藏x轴标签</td>
<td></td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>x轴标签颜色</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>x轴标签字体大小</td>
<td></td>
<td>8</td>
<td>12</td>
</tr>
<tr>
<td>x轴网格线颜色</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>x轴网格线宽</td>
<td></td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>显示y轴</td>
<td>是否显示Y轴</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>y轴最小值</td>
<td>y轴最小刻度</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>y轴最大值</td>
<td>y轴最大刻度</td>
<td>10</td>
<td></td>
</tr>
<tr>
<td>y轴刻度数量</td>
<td>y轴刻度数量</td>
<td>5</td>
<td></td>
</tr>
<tr>
<td>y轴数据类型</td>
<td>分类度量：cat： 分类度量timeCat: 时间分类度量连续度量：linear: 线性度量time：连续的时间度量log: log 度量pow: pow 度量quantize：分段度量，用户可以指定不均匀的分段quantile: 等分度量，根据数据的分布自动计算分段常量度量identity: 常量度量</td>
<td>linear</td>
<td>cat</td>
</tr>
<tr>
<td>y轴位置</td>
<td>y轴的位置，可取 top/right/bottom/left</td>
<td>right</td>
<td>left</td>
</tr>
<tr>
<td>y轴标题</td>
<td>y轴的标题</td>
<td>摄氏度（℃）</td>
<td></td>
</tr>
<tr>
<td>y轴标签模板</td>
<td>y轴标签内容模板</td>
<td>{y}℃</td>
<td>{y}</td>
</tr>
<tr>
<td>y轴标签角度</td>
<td></td>
<td>-20</td>
<td></td>
</tr>
<tr>
<td>自动隐藏y轴标签</td>
<td></td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>y轴标签颜色</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴标签字体大小</td>
<td></td>
<td>8</td>
<td>12</td>
</tr>
<tr>
<td>y轴网格线颜色</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴网格线宽</td>
<td></td>
<td>2</td>
<td>1</td>
</tr>
</tbody></table>
<h1 id="图例"><a href="#图例" class="headerlink" title="图例"></a>图例</h1><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>显示图例</td>
<td>是否显示图例</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>图例位置</td>
<td>设置图例的显示位置，可设置的值为12个：left-top,left-center,left-bottom,right-top,right-center,right-bottom,top-left,top-center,top-right,bottom-left,bottom-center,bottom-right也可使用bottom,top,left,right设置位置</td>
<td>top</td>
<td>bottom</td>
<td></td>
</tr>
<tr>
<td>图例翻页</td>
<td>图例过多换行时自动翻页</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>图例对齐方式</td>
<td>用于设置各个图例项的排列方式，可设置值包括：vertical、horizontal，分别表示垂直和水平排布</td>
<td>vertical</td>
<td>horizontal</td>
<td></td>
</tr>
<tr>
<td>图例标志</td>
<td>用于设置图例的 marker 样式，默认按照 图表 的类型显示，<a href="https://www.yuque.com/antv/g2-docs/api-geom#6b5269ad">详情见 </a></td>
<td>circle</td>
<td></td>
<td></td>
</tr>
<tr>
<td>图例文本颜色</td>
<td>图例文本的颜色</td>
<td>#BFBFBF</td>
<td>#BFBFBF</td>
<td></td>
</tr>
<tr>
<td>图例字体大小</td>
<td>图例文本大小</td>
<td>14</td>
<td>12</td>
<td></td>
</tr>
<tr>
<td>图例横向偏移量</td>
<td>图例 X 方向的偏移值，数值类型，数值单位为 ‘px’</td>
<td>2</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>图例纵向偏移量</td>
<td>图例 Y 方向的偏移值，数值类型，数值单位为 ‘px’</td>
<td>2</td>
<td>0</td>
<td></td>
</tr>
</tbody></table>
<h1 id="提示信息"><a href="#提示信息" class="headerlink" title="提示信息"></a>提示信息</h1><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>显示提示信息</td>
<td>是否显示提示信息</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>隐藏提示信息标题</td>
<td>是否隐藏提示信息标题</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>提示信息模板</td>
<td>提示信息内容模板，支持变量{name},{value}，和换行符<br>柱状图、百分比堆叠图、饼图、环形图支持变量{percent}区间图、甘特图 支持变量 {start},{end}K线图，支持变量{date},{start}，{end}，{max}，{min}</td>
<td>{value}</td>
<td></td>
</tr>
<tr>
<td>左Y轴提示信息模板</td>
<td>双轴图专属，配置规则同上</td>
<td></td>
<td></td>
</tr>
<tr>
<td>右Y轴提示信息模板</td>
<td>双轴图专属，配置规则同上</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="图形文本标签"><a href="#图形文本标签" class="headerlink" title="图形文本标签"></a>图形文本标签</h1><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>显示标签</td>
<td>是否显示字段对应的文本标签</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>标签偏移量</td>
<td>label距当前图形偏移量，负数则标识渲染在图形内部</td>
<td>-40</td>
<td>20</td>
</tr>
<tr>
<td>标签文本颜色</td>
<td>label文本颜色</td>
<td>#545454</td>
<td>#545454</td>
</tr>
<tr>
<td>标签字体大小</td>
<td>label文本大小</td>
<td>4</td>
<td>12</td>
</tr>
<tr>
<td>标签连线宽度</td>
<td>label线宽</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>标签位置</td>
<td>当前label与当前图形的相对位置，可选参数为middle, top,bottom,left,right</td>
<td>middle</td>
<td>top</td>
</tr>
<tr>
<td>标签模板</td>
<td>label文本模板，支持变量{name}、{value}、{br}，百分比堆叠图、饼图、环形图支持变量{percent}</td>
<td>{value}个</td>
<td>{value}</td>
</tr>
<tr>
<td>左y轴图形标签模板</td>
<td>双轴图专属，配置规则同上</td>
<td></td>
<td></td>
</tr>
<tr>
<td>右y轴图形标签模板</td>
<td>双轴图专属，配置规则同上</td>
<td></td>
<td></td>
</tr>
<tr>
<td>标签角度</td>
<td>label文本角度</td>
<td>30</td>
<td></td>
</tr>
</tbody></table>
<h1 id="辅助文本"><a href="#辅助文本" class="headerlink" title="辅助文本"></a>辅助文本</h1><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>显示辅助文本</td>
<td>是否示辅助文本</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>辅助文本标题</td>
<td>辅助文案标题</td>
<td>数量</td>
<td></td>
</tr>
<tr>
<td>辅助文本标题颜色</td>
<td>辅助文案标题颜色</td>
<td>#545454</td>
<td>#545454</td>
</tr>
<tr>
<td>辅助文本标题大小</td>
<td>辅助文案标题文本大小</td>
<td>24</td>
<td>20</td>
</tr>
<tr>
<td>辅助文本内容</td>
<td>辅助文案内容</td>
<td>200台</td>
<td></td>
</tr>
<tr>
<td>辅助文本内容颜色</td>
<td>辅助文本内容颜色</td>
<td>#545454</td>
<td>#545454</td>
</tr>
<tr>
<td>辅助文本内容大小</td>
<td>辅助文案文本大小</td>
<td>12</td>
<td>14</td>
</tr>
<tr>
<td>辅助文本内容模板</td>
<td>漏斗文本模板，支持变量{name},{value}，{percent}</td>
<td>{name}</td>
<td>{value}</td>
</tr>
<tr>
<td>隐藏辅助文本标题</td>
<td>简易环形图可用，配置后可以控制辅助文本标题的显示与关闭</td>
<td>false</td>
<td>true</td>
</tr>
</tbody></table>
<h1 id="图形样式"><a href="#图形样式" class="headerlink" title="图形样式"></a>图形样式</h1><h3 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>图形左边距</td>
<td>图形距离左边框的距离，单位px。一般用于左边坐标轴内容宽度不足被覆盖时配置。</td>
<td>72</td>
<td></td>
</tr>
</tbody></table>
<h3 id><a href="#" class="headerlink" title></a></h3><h3 id="线条"><a href="#线条" class="headerlink" title="线条"></a>线条</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>线条宽度</td>
<td>线宽</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>线条形状</td>
<td>线条类型，支持line,smooth,dot,dash,spline</td>
<td>line</td>
<td></td>
</tr>
</tbody></table>
<h3 id="-1"><a href="#-1" class="headerlink" title></a></h3><h3 id="点"><a href="#点" class="headerlink" title="点"></a>点</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>点的形状</td>
<td>折线图节点形状，circle, square, bowtie, diamond, hexagon, triangle，设置为none则不显示</td>
<td>circle</td>
<td></td>
</tr>
<tr>
<td>点的大小</td>
<td>折线图节点大小</td>
<td>4</td>
<td></td>
</tr>
</tbody></table>
<h3 id="-2"><a href="#-2" class="headerlink" title></a></h3><h3 id="柱子和条形"><a href="#柱子和条形" class="headerlink" title="柱子和条形"></a>柱子和条形</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>柱子宽度</td>
<td>柱子的宽度，单位为 px</td>
<td>12</td>
<td></td>
</tr>
<tr>
<td>柱状图类型</td>
<td>柱状图类型，可取 normal，stacked（堆叠）</td>
<td>normal</td>
<td></td>
</tr>
<tr>
<td>柱子间距</td>
<td>用于调整分组中各个柱子的间距，柱子宽度的倍数例如 0.5 则表示间距为柱子宽度的 1/2</td>
<td>0.5</td>
<td>0</td>
</tr>
</tbody></table>
<h3 id="-3"><a href="#-3" class="headerlink" title></a></h3><h3 id="面积"><a href="#面积" class="headerlink" title="面积"></a>面积</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>面积图类型</td>
<td>面积类型，可取 normal，stacked（堆叠）</td>
<td>normal</td>
<td></td>
</tr>
<tr>
<td>面积形状</td>
<td>面积形状，支持area,smooth,line,smoothLine</td>
<td>area</td>
<td></td>
</tr>
<tr>
<td>面积图不透明度</td>
<td>取值0-1</td>
<td>0.5</td>
<td>1</td>
</tr>
</tbody></table>
<h3 id="-4"><a href="#-4" class="headerlink" title></a></h3><h3 id="扇形和环形"><a href="#扇形和环形" class="headerlink" title="扇形和环形"></a>扇形和环形</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>饼图半径</td>
<td>饼图半径，值范围为 0 至 1</td>
<td>0.75</td>
<td></td>
</tr>
<tr>
<td>空心圆的半径</td>
<td>空心圆的半径，值范围为 0 至 1</td>
<td>0</td>
<td></td>
</tr>
</tbody></table>
<h3 id="-5"><a href="#-5" class="headerlink" title></a></h3><h3 id="雷达图"><a href="#雷达图" class="headerlink" title="雷达图"></a>雷达图</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>雷达图网格线类型</td>
<td>可以设置为折线或者原型，取值 line,circle</td>
<td>line</td>
<td>circle</td>
</tr>
</tbody></table>
<h1 id="动态交互"><a href="#动态交互" class="headerlink" title="动态交互"></a>动态交互</h1><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>图表交互</td>
<td>Antv 图表元素交互，详情可以见 <a href="https://g2.antv.vision/zh/docs/manual/concepts/interaction">官方文档&gt;&gt;</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示滑块</td>
<td>是否显示滑块，适用于一般有 X 轴的图表</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>滑块开启面积图背景</td>
<td>滑块背景是否为面积图</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>滑块默认起点</td>
<td>滑块的默认起点，值范围0-1</td>
<td>0.2</td>
<td>0</td>
</tr>
<tr>
<td>滑块默认终点</td>
<td>滑块的默认终点，值范围0-1</td>
<td>0.8</td>
<td>1</td>
</tr>
<tr>
<td>排序方式</td>
<td>数据排序的方式，ASC 为顺序，DESC 为倒序</td>
<td>DESC</td>
<td></td>
</tr>
<tr>
<td>动态数据类型</td>
<td>delay 数据延迟加载 scroll 数据轮播</td>
<td>scroll</td>
<td></td>
</tr>
<tr>
<td>初始数据范围起始</td>
<td>默认延迟加载或轮播的数据范围起点，填行数</td>
<td>2</td>
<td>0</td>
</tr>
<tr>
<td>初始数据范围末尾</td>
<td>默认延迟加载或轮播的数据范围末尾，填行数</td>
<td>5</td>
<td>1</td>
</tr>
<tr>
<td>数据更新间隔</td>
<td>数据间隔时间，单位毫秒</td>
<td>2000</td>
<td>1000</td>
</tr>
<tr>
<td>关闭循环轮播</td>
<td>数据轮播，是否关闭循环轮播</td>
<td>true</td>
<td>false</td>
</tr>
</tbody></table>
<h2 id="-6"><a href="#-6" class="headerlink" title></a></h2><h1 id="颜色说明"><a href="#颜色说明" class="headerlink" title="颜色说明"></a>颜色说明</h1><p>颜色支持以下几种格式：</p>
<p>16进制：#4169E1</p>
<p>rgb、rgba：rgb(65,105,225)、rgba(65,105,225,0.5)</p>
<p>渐变色：<a href="https://www.yuque.com/antv/g2-docs/api-graphic#y6x6le">请查看 Antv 官方说明</a></p>
<p>纹理：<a href="https://www.yuque.com/antv/g2-docs/api-graphic#9w3mxd">请查看 Antv 官方说明</a></p>
<h1 id="三、ECharts-地理可视化"><a href="#三、ECharts-地理可视化" class="headerlink" title="三、ECharts 地理可视化"></a>三、ECharts 地理可视化</h1><p>ECharts 的地图元件，包含了地图/散点/动态散点/飞线四个元素，可以任意组合搭配。每个元素都有对应的 data 和 config 中继器。</p>
<h1 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h1><h3 id="基础地图"><a href="#基础地图" class="headerlink" title="基础地图"></a>基础地图</h3><table>
<thead>
<tr>
<th>列名称</th>
<th>说明</th>
<th>示例值</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>name</td>
<td>二级地区标准名称</td>
<td>广州市</td>
<td></td>
</tr>
<tr>
<td>value</td>
<td>值</td>
<td>20</td>
<td></td>
</tr>
</tbody></table>
<h3 id="散点-动态散点"><a href="#散点-动态散点" class="headerlink" title="散点/动态散点"></a>散点/动态散点</h3><table>
<thead>
<tr>
<th>列名称</th>
<th>说明</th>
<th>示例值</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>name</td>
<td>二级地区标准名称</td>
<td>广州市</td>
<td></td>
</tr>
<tr>
<td>lnglat</td>
<td>非必填，点的经纬度，为空则自动取二级地区的经纬度，可通过下方链接获取<a href="https://lbs.amap.com/console/show/picker">https://lbs.amap.com/console/show/picker</a></td>
<td>113.280637,23.125178</td>
<td></td>
</tr>
<tr>
<td>value</td>
<td>值</td>
<td>20</td>
<td></td>
</tr>
</tbody></table>
<h3 id="飞线"><a href="#飞线" class="headerlink" title="飞线"></a>飞线</h3><table>
<thead>
<tr>
<th>列名称</th>
<th>说明</th>
<th>示例值</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>startArea</td>
<td>飞线起点二级地区标准名称</td>
<td>广州市</td>
<td></td>
</tr>
<tr>
<td>endArea</td>
<td>飞线终点二级地区标准名称</td>
<td>深圳市</td>
<td></td>
</tr>
<tr>
<td>startLnglat</td>
<td>非必填，飞线起点的经纬度，为空则自动取起点二级地区的经纬度，可通过下方链接获取<a href="https://lbs.amap.com/console/show/picker">https://lbs.amap.com/console/show/picker</a></td>
<td>113.280637,23.125178</td>
<td></td>
</tr>
<tr>
<td>endLnglat</td>
<td>非必填，飞线终点的经纬度，为空则自动取起点二级地区的经纬度，可通过下方链接获取<a href="https://lbs.amap.com/console/show/picker">https://lbs.amap.com/console/show/picker</a></td>
<td>113.280637,23.125178</td>
<td></td>
</tr>
<tr>
<td>value</td>
<td>值</td>
<td>20</td>
<td></td>
</tr>
</tbody></table>
<h3 id="-7"><a href="#-7" class="headerlink" title></a></h3><h3 id="热力"><a href="#热力" class="headerlink" title="热力"></a>热力</h3><table>
<thead>
<tr>
<th>列名称</th>
<th>说明</th>
<th>示例值</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>name</td>
<td>二级地区标准名称</td>
<td>广州市</td>
<td></td>
</tr>
<tr>
<td>lnglat</td>
<td>非必填，点的经纬度，为空则自动取二级地区的经纬度，可通过下方链接获取<a href="https://lbs.amap.com/console/show/picker">https://lbs.amap.com/console/show/picker</a></td>
<td>113.280637,23.125178</td>
<td></td>
</tr>
<tr>
<td>value</td>
<td>值</td>
<td>20</td>
<td></td>
</tr>
</tbody></table>
<h1 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h1><h3 id="基础地图-1"><a href="#基础地图-1" class="headerlink" title="基础地图"></a>基础地图</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>地区     adcode</td>
<td>地区名称或行政区划代码，支持中国及大多数省市</td>
<td>中国湖南广州市110101</td>
<td>广东省</td>
<td></td>
</tr>
<tr>
<td>地区颜色     areaColor</td>
<td>地区默认颜色，支持16进制/RGB/RGBA的格式，若开启下方视觉映射则会失效</td>
<td>#FAE4C3rgb(0, 131, 143)</td>
<td>#EEE</td>
<td></td>
</tr>
<tr>
<td>地区边框颜色     borderStroke</td>
<td>地区边框颜色，支持16进制/RGB/RGBA的格式</td>
<td>#FAE4C3rgb(0, 131, 143)</td>
<td>#111</td>
<td></td>
</tr>
<tr>
<td>地区边框宽度     borderWidth</td>
<td>地区边框宽度，单位为px</td>
<td>2</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>显示标签     showLabel</td>
<td>是否显示标签</td>
<td>true</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>标签模板     labelTpl</td>
<td>标签模板，支持地区名称 {name} 和 值 {value}</td>
<td>{name}:{value}</td>
<td>{name}</td>
<td></td>
</tr>
<tr>
<td>标签文本颜色     labeltextFill</td>
<td>标签文本颜色，支持16进制/RGB/RGBA的格式</td>
<td>#333</td>
<td>#FFF</td>
<td></td>
</tr>
<tr>
<td>高亮时地区颜色     emphasisAreaColor</td>
<td>高亮地区颜色，支持16进制/RGB/RGBA的格式</td>
<td>#0050B3</td>
<td>#0050B3</td>
<td></td>
</tr>
<tr>
<td>高亮时显示标签     emphasisShowLabel</td>
<td>高亮地区是否显示标签</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>高亮时标签文本颜色     emphasisLabeltextFill</td>
<td>高亮标签文本颜色，支持16进制/RGB/RGBA的格式</td>
<td>#333</td>
<td>#FFF</td>
<td></td>
</tr>
<tr>
<td>显示提示信息     showTooltips</td>
<td>是否显示提示信息</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>提示信息模板     tooltipItemTpl</td>
<td>提示信息模板，支持地区名称 {name} 、 值 {value}、任意列 {列名}</td>
<td>{name}:{value}</td>
<td>{value}</td>
<td></td>
</tr>
<tr>
<td>视觉映射     visualMap</td>
<td>是否开颜色映射模式，设置后将会根据值的大小来控制颜色的深浅</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>映射颜色     visualMapColor</td>
<td>映射颜色取值范围，支持16进制/RGB/RGBA的格式，多个颜色用”-“链接。</td>
<td>#BAE7FF-#1890FF-#0050B3</td>
<td></td>
<td></td>
</tr>
<tr>
<td>映射范围最小值     visualRangeMin</td>
<td>映射值范围的最小值，即最后一个映射颜色匹配的值</td>
<td>10</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>映射范围最大值     visualRangeMax</td>
<td>映射值范围的最大值，即第一个映射颜色匹配的值</td>
<td>40</td>
<td>40</td>
<td></td>
</tr>
</tbody></table>
<h3 id="散点"><a href="#散点" class="headerlink" title="散点"></a>散点</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>散点图形     symbol</td>
<td>散点的图形，取值’circle’, ‘rect’, ‘roundRect’, ‘triangle’, ‘diamond’, ‘pin’, ‘arrow’, ‘none’还可以支持图片链接或者SVG矢量路径</td>
<td>arrow</td>
<td>circle</td>
<td></td>
</tr>
<tr>
<td>基础大小     baseSize</td>
<td>基础大小n，散点实际大小为 （value/n）px ，若想统一大小则设置为 value 的最大值</td>
<td>10</td>
<td>5</td>
<td></td>
</tr>
<tr>
<td>显示标签     showLabel</td>
<td>是否显示标签</td>
<td>true</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>高亮时显示标签     emphasisShowLabel</td>
<td>高亮是否显示标签</td>
<td>true</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>标签模板     labelTpl</td>
<td>标签模板，支持地区名称 {name} 和 值 {value}</td>
<td>{name}:{value}</td>
<td>{name}</td>
<td></td>
</tr>
<tr>
<td>散点颜色     color</td>
<td>散点默认颜色，支持16进制/RGB/RGBA的格式</td>
<td>#FAE4C3rgb(0, 131, 143)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>地区边框颜色     borderStroke</td>
<td>散点边框颜色，支持16进制/RGB/RGBA的格式</td>
<td>#FAE4C3rgb(0, 131, 143)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>地区边框宽度     borderWidth</td>
<td>散点边框宽度，单位为px</td>
<td>2</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>边框类型     borderType</td>
<td>散点边框类型，取值 ‘solid’, ‘dashed’, ‘dotted’</td>
<td>solid</td>
<td>solid</td>
<td></td>
</tr>
<tr>
<td>显示提示信息     showTooltips</td>
<td>是否显示提示信息</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>提示信息模板     tooltipItemTpl</td>
<td>提示信息模板，支持地区名称 {name} 、 值 {value}、任意列 {列名}</td>
<td>{name}:{value}</td>
<td>{value}</td>
<td></td>
</tr>
</tbody></table>
<h3 id="动态散点"><a href="#动态散点" class="headerlink" title="动态散点"></a>动态散点</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>散点图形     symbol</td>
<td>散点的图形，取值’circle’, ‘rect’, ‘roundRect’, ‘triangle’, ‘diamond’, ‘pin’, ‘arrow’, ‘none’还可以支持图片链接或者SVG矢量路径</td>
<td>arrow</td>
<td>circle</td>
<td></td>
</tr>
<tr>
<td>基础大小     baseSize</td>
<td>基础大小n，散点实际大小为 （value/n）px ，若想统一大小则设置为 value 的最大值</td>
<td>10</td>
<td>5</td>
<td></td>
</tr>
<tr>
<td>显示标签     showLabel</td>
<td>是否显示标签</td>
<td>true</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>高亮时显示标签     emphasisShowLabel</td>
<td>高亮是否显示标签</td>
<td>true</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>标签模板     labelTpl</td>
<td>标签模板，支持地区名称 {name} 和 值 {value}</td>
<td>{name}:{value}</td>
<td>{name}</td>
<td></td>
</tr>
<tr>
<td>散点颜色     color</td>
<td>散点默认颜色，支持16进制/RGB/RGBA的格式</td>
<td>#FAE4C3rgb(0, 131, 143)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>地区边框颜色     borderStroke</td>
<td>散点边框颜色，支持16进制/RGB/RGBA的格式</td>
<td>#FAE4C3rgb(0, 131, 143)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>地区边框宽度     borderWidth</td>
<td>散点边框宽度，单位为px</td>
<td>2</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>边框类型     borderType</td>
<td>散点边框类型，取值 ‘solid’, ‘dashed’, ‘dotted’</td>
<td>solid</td>
<td>solid</td>
<td></td>
</tr>
<tr>
<td>显示提示信息     showTooltips</td>
<td>是否显示提示信息</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>提示信息模板     tooltipItemTpl</td>
<td>提示信息模板，支持地区名称 {name} 、 值 {value}、任意列 {列名}</td>
<td>{name}:{value}</td>
<td>{value}</td>
<td></td>
</tr>
</tbody></table>
<h3 id="飞线-1"><a href="#飞线-1" class="headerlink" title="飞线"></a>飞线</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>头尾点图形     pointSymbol</td>
<td>起始点图形，取值’circle’, ‘rect’, ‘roundRect’, ‘triangle’, ‘diamond’, ‘pin’, ‘arrow’, ‘none’还可以支持图片链接或者SVG矢量路径</td>
<td>arrow</td>
<td>circle</td>
<td></td>
</tr>
<tr>
<td>头尾点大小    pointSymbolSize</td>
<td>起始点的大小</td>
<td>10</td>
<td>12</td>
<td></td>
</tr>
<tr>
<td>飞行点图形     symbol</td>
<td>飞行点图形，取值’circle’, ‘rect’, ‘roundRect’, ‘triangle’, ‘diamond’, ‘pin’, ‘arrow’, ‘none’还可以支持图片链接或者SVG矢量路径</td>
<td>arrow</td>
<td>circle</td>
<td></td>
</tr>
<tr>
<td>飞行点大小     symbolSize</td>
<td>飞行点的大小</td>
<td>10</td>
<td>12</td>
<td></td>
</tr>
<tr>
<td>动画时间     period</td>
<td>飞线特效动画的时间</td>
<td>4</td>
<td>6</td>
<td></td>
</tr>
<tr>
<td>飞线颜色     stroke</td>
<td>飞线颜色，支持16进制/RGB/RGBA的格式</td>
<td>#FAE4C3rgb(0, 131, 143)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>飞线宽度     width</td>
<td>飞线宽度，单位为px</td>
<td>2</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>飞线弧度     curveness</td>
<td>飞线曲率，数值越大折越弯曲</td>
<td>0.4</td>
<td>0.2</td>
<td></td>
</tr>
</tbody></table>
<h3 id="热力-1"><a href="#热力-1" class="headerlink" title="热力"></a>热力</h3><p>暂无配置项</p>
<h1 id="四、Antv-L7-地理可视化"><a href="#四、Antv-L7-地理可视化" class="headerlink" title="四、Antv L7 地理可视化"></a>四、Antv L7 地理可视化</h1><p>Antv L7 的地理可视化元件，是基于 <a href="https://l7.antv.vision/zh">https://l7.antv.vision/zh</a> 开发的 Axure 元件，可以高效的在 Axure 内实现地理可视化的效果。</p>
<p>一个元件一般由1个地图和多个图层两部分组成：</p>
<p><strong>地图：</strong>基础地图，目前有高德地图（国内），和 Mapbox 地图（全球）</p>
<p><strong>图层：</strong>地图上的可视化元素，目前支持 点/线/面/地区/热图 图层，图层可以任意组合，比如1个点图1个线图，或者2个点图1个面层。</p>
<h1 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h1><p>可选择 高德地图（国内），和 Mapbox 地图（全球），元件由两个子元件组成</p>
<p>acp-xxx-map：普通矩形，地图容器可以控制地图的大小</p>
<p>acp-config：中继器，地图配置管理，具体配置项见下方</p>
<h3 id="地图配置"><a href="#地图配置" class="headerlink" title="地图配置"></a>地图配置</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>主题</td>
<td>地图主题，目前支持 dark（暗黑）light （简约）、normal （正常）、blank （无底图） 如果是高德地图，还可以之前高德的自定义样式链接，具体请看高德官方说明<a href="https://lbs.amap.com/api/javascript-api/guide/map/map-style">https://lbs.amap.com/api/javascript-api/guide/map/map-style</a></td>
<td>darkamap://styles/whitesmoke</td>
<td>normal</td>
</tr>
<tr>
<td>地图中心</td>
<td>地图初始中心经纬度可通过高德拾取工具获取<a href="https://lbs.amap.com/console/show/picker">https://lbs.amap.com/console/show/picker</a></td>
<td>113.280637,23.125178</td>
<td>dark</td>
</tr>
<tr>
<td>俯仰角度</td>
<td>地图初始俯仰角度</td>
<td>64.56</td>
<td>0</td>
</tr>
<tr>
<td>缩放等级</td>
<td>地图初始显示级别 Mapbox （0-24） 高德 （3-18）</td>
<td>8</td>
<td></td>
</tr>
<tr>
<td>最大缩放等级</td>
<td>地图最大缩放等级  Mapbox（0-24） 高德 （3-18）</td>
<td>15</td>
<td>22</td>
</tr>
<tr>
<td>最小缩放等级</td>
<td>地图最小缩放等级Mapbox （0-24） 高德 （3-18）</td>
<td>3</td>
<td>0</td>
</tr>
<tr>
<td>开发Token</td>
<td>自定义高德或 Mapbox 开发者 Token，元件库已经内置，但仅供测试使用</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="区域图"><a href="#区域图" class="headerlink" title="区域图"></a>区域图</h1><p>根据省市区的行政划分，显示对应的区域图。由两个子元件组成。</p>
<p>acp-area-data：中继器，点图数据，格式参加下方说明</p>
<p>acp-area-config：中继器，点图配置，格式参加下方说明</p>
<h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><table>
<thead>
<tr>
<th>列名称</th>
<th>说明</th>
<th>示例值</th>
</tr>
</thead>
<tbody><tr>
<td>area</td>
<td>二级地区名称acp-config 配置的地区对应的二级地区</td>
<td>广州市</td>
</tr>
<tr>
<td>value</td>
<td>地区值，可选一般用于显提示信息显示</td>
<td>5</td>
</tr>
</tbody></table>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>地区</td>
<td>地区名称或行政区划代码，支持中国及大多数省市</td>
<td>中国湖南广州市110101</td>
<td>广东省</td>
</tr>
<tr>
<td>形状</td>
<td>fill 绘制填充面  line 绘制填充图描边</td>
<td>text</td>
<td>circl</td>
</tr>
<tr>
<td>图表颜色</td>
<td>地区的颜色，多个请用英文逗号“,”隔开支持 hex/rgb/rgba 格式的颜色值</td>
<td>#4169E1,#B0C4DE</td>
<td></td>
</tr>
<tr>
<td>大小</td>
<td>点的大小，单位px，一搬情况下填数值。还支持 min,max 的格式，根据 data 中继器里 value 大小映射。</td>
<td>84,32</td>
<td>4</td>
</tr>
<tr>
<td>显示提示信息</td>
<td>是否显示提示信息</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>提示信息模板</td>
<td>提示信息模板，支持 {br}（换行）、 {name} 、 {value} 、{任意列名} 注意列名需为小写</td>
<td>{name}:{value}{area}</td>
<td></td>
</tr>
<tr>
<td>不透明度</td>
<td>图形的不透明度，取值 0-1</td>
<td>0.5</td>
<td>0.8</td>
</tr>
</tbody></table>
<h1 id="-8"><a href="#-8" class="headerlink" title></a></h1><h1 id="点图"><a href="#点图" class="headerlink" title="点图"></a>点图</h1><p>目前点图支持，普通散点、动态散点、自定义图片、文字、气泡图（形状图）和3D柱状图等，由两个子元件组成。</p>
<p>acp-point-data：中继器，点图数据，格式参加下方说明</p>
<p>acp-point-config：中继器，点图配置，格式参加下方说明</p>
<h3 id="数据-1"><a href="#数据-1" class="headerlink" title="数据"></a>数据</h3><table>
<thead>
<tr>
<th>列名称</th>
<th>说明</th>
<th>示例值</th>
</tr>
</thead>
<tbody><tr>
<td>lnglat</td>
<td>点的经纬度，lnglat 和 area 必填一个可通过高德拾取工具获取<a href="https://lbs.amap.com/console/show/picker">https://lbs.amap.com/console/show/picker</a></td>
<td>113.280637,23.125178</td>
</tr>
<tr>
<td>area</td>
<td>地区名称当该地图组合内存在地区层，可以直接填写二级地区的名称来替代经纬度，程序会自动计算出其对应的经纬度</td>
<td>广州市</td>
</tr>
<tr>
<td>shape</td>
<td>点图形状或类型，可选。优先级高于 acp-config 的形状配置。支持 circle、square、hexagon、triangle、pentagon、octogon、hexagram、rhombus、vesica</td>
<td>circle</td>
</tr>
<tr>
<td>value</td>
<td>点值，可选一般用于显提示信息显示，点的颜色映射或图形大小映射</td>
<td>5</td>
</tr>
<tr>
<td>name</td>
<td>点的名称，选填。当 shape = text 时，name则为显示在地图上的文本</td>
<td>中心区域</td>
</tr>
<tr>
<td>img</td>
<td>图片地址，目前只支持 svg，选填。当 shape = img时，img 的图片会显示在地图上</td>
<td><a href="https://gw.alipayobjects.com/mdn/antv_site/afts/img/A*BJ6cTpDcuLcAAAAAAAAAAABkARQnAQ">https://gw.alipayobjects.com/mdn/antv_site/afts/img/A*BJ6cTpDcuLcAAAAAAAAAAABkARQnAQ</a></td>
</tr>
<tr>
<td>color</td>
<td>点的颜色，选填。优先级高于 acp-config 的图表颜色配置。支持 hex/rgb/rgba 格式的颜色值</td>
<td>#e3e3e3</td>
</tr>
<tr>
<td>size</td>
<td>点的大小，单位px，选填。优先级高于 acp-config 的大小配置</td>
<td>16</td>
</tr>
<tr>
<td>height</td>
<td>点的高度，单位px，选填。用于设置3D柱状图的高度</td>
<td>24</td>
</tr>
</tbody></table>
<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>形状</td>
<td>点图形状或类型，可选普通形状：circle、square、hexagon、triangle、pentagon、octogon、hexagram、rhombus、vesica3D柱子：cylinder文本：text图片：img</td>
<td>text</td>
<td>circl</td>
</tr>
<tr>
<td>图表颜色</td>
<td>点的颜色，多个请用英文逗号“,”隔开支持 hex/rgb/rgba 格式的颜色值</td>
<td>#4169E1,#B0C4DE</td>
<td></td>
</tr>
<tr>
<td>大小</td>
<td>点的大小，单位px，一搬情况下填数值。还支持 min,max 的格式，根据 data 中继器里 value 大小映射。</td>
<td>84,32</td>
<td>4</td>
</tr>
<tr>
<td>显示提示信息</td>
<td>是否显示提示信息</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>提示信息模板</td>
<td>提示信息模板，支持 {br}（换行）、 {name} 、 {value} 、{任意列名} 注意列名需为小写</td>
<td>{name}:{value}{area}</td>
<td></td>
</tr>
<tr>
<td>不透明度</td>
<td>图形的不透明度，取值 0-1</td>
<td>0.5</td>
<td>0.8</td>
</tr>
<tr>
<td>描边宽度</td>
<td>描边宽度，单位px</td>
<td>2</td>
<td>1</td>
</tr>
<tr>
<td>描边颜色</td>
<td>图形边框颜色支持 hex/rgb/rgba 格式的颜色值</td>
<td>3</td>
<td>0</td>
</tr>
<tr>
<td>显示动画</td>
<td>是否显示动画，普通点图开启动画后变成动态散点图</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>图形高亮</td>
<td>是否支持 hover 状态下高亮显示</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>高亮颜色</td>
<td>高亮状态下的颜色支持 hex/rgb/rgba 格式的颜色值</td>
<td>#4169E1</td>
<td></td>
</tr>
<tr>
<td>geojson</td>
<td>GeoJson 数据的 url，填写后 data 中继器的数据将无效</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="线图"><a href="#线图" class="headerlink" title="线图"></a>线图</h1><p>目前线图支持，路径图、绘制弧线、大圆航线、3d 弧线图，由两个子元件组成。</p>
<p>acp-line-data：中继器，线图数据，格式参加下方说明</p>
<p>acp-line-config：中继器，线图配置，格式参加下方说明</p>
<h3 id="数据-2"><a href="#数据-2" class="headerlink" title="数据"></a>数据</h3><table>
<thead>
<tr>
<th>列名称</th>
<th>说明</th>
<th>示例值</th>
</tr>
</thead>
<tbody><tr>
<td>startlnglat</td>
<td>线起点的经纬度，lnglat 和 area 必填一个可通过高德拾取工具获取<a href="https://lbs.amap.com/console/show/picker">https://lbs.amap.com/console/show/picker</a></td>
<td>113.280637,23.125178</td>
</tr>
<tr>
<td>endlnglat</td>
<td>线终点的经纬度，lnglat 和 area 必填一个可通过高德拾取工具获取<a href="https://lbs.amap.com/console/show/picker">https://lbs.amap.com/console/show/picker</a></td>
<td>113.30,23.22</td>
</tr>
<tr>
<td>startarea</td>
<td>线起点地区名称当该地图组合内存在地区层，可以直接填写二级地区的名称来替代经纬度，程序会自动计算出其对应的经纬度</td>
<td>广州市</td>
</tr>
<tr>
<td>endarea</td>
<td>线终点地区名称当该地图组合内存在地区层，可以直接填写二级地区的名称来替代经纬度，程序会自动计算出其对应的经纬度</td>
<td>深圳市</td>
</tr>
<tr>
<td>name</td>
<td>线的名称，选填。</td>
<td>司机路线</td>
</tr>
<tr>
<td>color</td>
<td>线的颜色，选填。优先级高于 acp-config 的图表颜色配置。支持 hex/rgb/rgba 格式的颜色值</td>
<td>#e3e3e3</td>
</tr>
<tr>
<td>size</td>
<td>线宽，单位px，选填。优先级高于 acp-config 的大小配置当 shape 为绘制弧线、大圆航线、3d 弧线图时，支持配置“宽度,高度”的格式</td>
<td>44,12</td>
</tr>
</tbody></table>
<h3 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>形状</td>
<td>线图形状或类型，可选line 绘制路径图，arc 绘制弧线 通过贝塞尔曲线算法技术弧线greatcircle 大圆航线，地图两个点的最近距离不是两个点连线，而是大圆航线arc3d 3d 弧线地图 3D 视角</td>
<td>arc</td>
<td>line</td>
</tr>
<tr>
<td>图表颜色</td>
<td>线的颜色，多个请用英文逗号“,”隔开支持 hex/rgb/rgba 格式的颜色值</td>
<td>#4169E1,#B0C4DE</td>
<td></td>
</tr>
<tr>
<td>大小</td>
<td>线宽，单位px，选填。当 shape 为绘制弧线、大圆航线、3d 弧线图时，支持配置“宽度,高度”的格式</td>
<td>44,12</td>
<td>2</td>
</tr>
<tr>
<td>显示提示信息</td>
<td>是否显示提示信息</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>提示信息模板</td>
<td>提示信息模板，支持 {br}（换行）、 {name} 、 {value} 、{任意列名} 注意列名需为小写</td>
<td>{name}:{value}{area}</td>
<td></td>
</tr>
<tr>
<td>不透明度</td>
<td>图形的不透明度，取值 0-1</td>
<td>0.5</td>
<td>0.8</td>
</tr>
<tr>
<td>显示动画</td>
<td>是否显示动画，普通点图开启动画后变成动态散点图</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>动画间隔</td>
<td>动画时间 单位(s)秒</td>
<td>2</td>
<td>1</td>
</tr>
<tr>
<td>持续时间</td>
<td>轨迹间隔, 取值区间 0 - 1</td>
<td>0.5</td>
<td>1</td>
</tr>
<tr>
<td>流线长度</td>
<td>轨迹长度 取值区间 0 - 1</td>
<td>0.5</td>
<td>1</td>
</tr>
<tr>
<td>geojson</td>
<td>GeoJson 数据的 url，填写后 data 中继器的数据将无效</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="面图"><a href="#面图" class="headerlink" title="面图"></a>面图</h1><p>由两个子元件组成，支持任意变形，一般用于地理围栏、区域标识。</p>
<p>acp-polygon-data：中继器，面图数据，格式参加下方说明</p>
<p>acp-polygon-config：中继器，面图配置，格式参加下方说明</p>
<h3 id="数据-3"><a href="#数据-3" class="headerlink" title="数据"></a>数据</h3><table>
<thead>
<tr>
<th>列名称</th>
<th>说明</th>
<th>示例值</th>
</tr>
</thead>
<tbody><tr>
<td>lnglat</td>
<td>面图各个节点的经纬度，至少需要3行数据可通过高德拾取工具获取<a href="https://lbs.amap.com/console/show/picker">https://lbs.amap.com/console/show/picker</a></td>
<td>113.280637,23.125178</td>
</tr>
</tbody></table>
<h3 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>形状</td>
<td>fill 绘制填充面  line 绘制填充图描边  extrude 对填充图 3D 拉伸</td>
<td>arc</td>
<td>line</td>
</tr>
<tr>
<td>图表颜色</td>
<td>面的颜色，多个请用英文逗号“,”隔开支持 hex/rgb/rgba 格式的颜色值</td>
<td>#4169E1,#B0C4DE</td>
<td></td>
</tr>
<tr>
<td>大小</td>
<td>暂不支持，预留</td>
<td>4</td>
<td>2</td>
</tr>
<tr>
<td>显示提示信息</td>
<td>是否显示提示信息</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>提示信息内容</td>
<td>提示信息的内容</td>
<td>地理围栏</td>
<td></td>
</tr>
<tr>
<td>不透明度</td>
<td>图形的不透明度，取值 0-1</td>
<td>0.5</td>
<td>0.8</td>
</tr>
<tr>
<td>geojson</td>
<td>GeoJson 数据的 url，填写后 data 中继器的数据将无效</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="热力图"><a href="#热力图" class="headerlink" title="热力图"></a>热力图</h1><p>经典热力图，由两个子元件组成。</p>
<p>acp-heatmap-data：中继器，热力图数据，格式参加下方说明</p>
<p>acp-heatmap-config：中继器，热力图配置，格式参加下方说明</p>
<h3 id="数据-4"><a href="#数据-4" class="headerlink" title="数据"></a>数据</h3><table>
<thead>
<tr>
<th>列名称</th>
<th>说明</th>
<th>示例值</th>
</tr>
</thead>
<tbody><tr>
<td>lnglat</td>
<td>热力中心点的经纬度，lnglat 和 area 必填一个可通过高德拾取工具获取<a href="https://lbs.amap.com/console/show/picker">https://lbs.amap.com/console/show/picker</a></td>
<td>113.280637,23.125178</td>
</tr>
<tr>
<td>area</td>
<td>地区名称当该地图组合内存在地区层，可以直接填写二级地区的名称来替代经纬度，程序会自动计算出其对应的经纬度</td>
<td>广州市</td>
</tr>
<tr>
<td>value</td>
<td>热力值，根据该值的大小决定颜色和热力大小</td>
<td>5</td>
</tr>
<tr>
<td>name</td>
<td>热力图的名称，选填。</td>
<td>中心区域</td>
</tr>
</tbody></table>
<h3 id="配置-4"><a href="#配置-4" class="headerlink" title="配置"></a>配置</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>图表颜色</td>
<td>热图的颜色范围，请用英文逗号“,”隔开支持 hex/rgb/rgba 格式的颜色值</td>
<td>#4169E1,#B0C4DE</td>
<td></td>
</tr>
<tr>
<td>大小</td>
<td>预留配置项</td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示提示信息</td>
<td>是否显示提示信息</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>提示信息模板</td>
<td>提示信息模板，支持 {br}（换行）、 {name} 、 {value} 、{任意列名} 注意列名需为小写</td>
<td>{name}:{value}{area}</td>
<td></td>
</tr>
<tr>
<td>不透明度</td>
<td>图形的不透明度，取值 0-1</td>
<td>0.5</td>
<td>0.8</td>
</tr>
<tr>
<td>热图半径</td>
<td>热力半径，单位px</td>
<td>2</td>
<td>4</td>
</tr>
</tbody></table>
<h1 id="五、动态元件"><a href="#五、动态元件" class="headerlink" title="五、动态元件"></a>五、动态元件</h1><p>由于 Axure 实现部分动态效果会比较占资源，在多图表的复杂场景下可能会让页面卡顿，acp 因此提供了部分动态可视化元件。使用方式跟普通文本原件一致，只是增加了 config 中继器提供相关配置。</p>
<h3 id="实时时间"><a href="#实时时间" class="headerlink" title="实时时间"></a>实时时间</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
</tr>
</thead>
<tbody><tr>
<td>时间格式format</td>
<td>时间格式，同 Excel 的时间格式，<a href="https://blog.csdn.net/u013400939/article/details/47761113">请参考</a></td>
<td>YYYY-MM-DD HH:mm:ss</td>
</tr>
</tbody></table>
<h3 id="倒计时"><a href="#倒计时" class="headerlink" title="倒计时"></a>倒计时</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
</tr>
</thead>
<tbody><tr>
<td>时间     time</td>
<td>需要倒数的时间，单位为秒</td>
<td>172800</td>
</tr>
<tr>
<td>时间格式     format</td>
<td>时间格式，同 Excel 的时间格式，<a href="https://blog.csdn.net/u013400939/article/details/47761113">请参考</a></td>
<td>D天 H时 mm分 ss秒</td>
</tr>
</tbody></table>
<h3 id="动态数字-自增数字"><a href="#动态数字-自增数字" class="headerlink" title="动态数字/自增数字"></a>动态数字/自增数字</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
</tr>
</thead>
<tbody><tr>
<td>启始值     startVal</td>
<td>启始值</td>
<td>0</td>
</tr>
<tr>
<td>间隔时间     duration</td>
<td>动画时长，单位为秒，每次加载/更新时动画时长，时间越短则数字变化越快</td>
<td>2</td>
</tr>
<tr>
<td>数字分组     useGrouping</td>
<td>是否使用千分位，acp 会自动格式化</td>
<td>true</td>
</tr>
<tr>
<td>更新间隔     interval</td>
<td>数字自增更新间隔，单位为秒</td>
<td>2</td>
</tr>
<tr>
<td>随机范围最小值     randomMin</td>
<td>数字自增随机数范围最小值，可以填负数</td>
<td>10</td>
</tr>
<tr>
<td>随机范围最大值     randomMax</td>
<td>数字自增随机数范围最大值，可以填负数</td>
<td>100</td>
</tr>
</tbody></table>
<h3 id="轮播表格"><a href="#轮播表格" class="headerlink" title="轮播表格"></a>轮播表格</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
</tr>
</thead>
<tbody><tr>
<td>行数     rowNum</td>
<td>默认显示行数</td>
<td>5</td>
</tr>
<tr>
<td>奇数行背景颜色     oddRowBGC</td>
<td>奇数行背景颜色</td>
<td>#003B51</td>
</tr>
<tr>
<td>偶素行背景颜色     evenRowBGC</td>
<td>偶数行背景颜色</td>
<td>#0A2732</td>
</tr>
<tr>
<td>文字颜色     textFill</td>
<td>文本颜色</td>
<td>#FFF</td>
</tr>
<tr>
<td>字体大小     fontSize</td>
<td>文本字体大小</td>
<td>12</td>
</tr>
<tr>
<td>等待时间     waitTime</td>
<td>轮播间隔（单位毫秒）</td>
<td>2000</td>
</tr>
<tr>
<td>轮播方式     carousel</td>
<td>轮播方式，single（逐行）、page（每页）</td>
<td>page</td>
</tr>
<tr>
<td>对齐方式     align</td>
<td>文本对齐方式 center、left、right</td>
<td>center</td>
</tr>
<tr>
<td>列宽     columnWidth</td>
<td>列宽（单位px），支持分列设置，值 20,30，表示第1列为 20px 宽度，第 2 列为 30px 宽度</td>
<td>20,3050</td>
</tr>
</tbody></table>
<h3 id="轮播排行榜"><a href="#轮播排行榜" class="headerlink" title="轮播排行榜"></a>轮播排行榜</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
</tr>
</thead>
<tbody><tr>
<td>行数     rowNum</td>
<td>默认显示行数</td>
<td>5</td>
</tr>
<tr>
<td>文字颜色     textFill</td>
<td></td>
<td></td>
</tr>
<tr>
<td>字体大小     fontSize</td>
<td></td>
<td></td>
</tr>
<tr>
<td>等待时间     waitTime</td>
<td></td>
<td></td>
</tr>
<tr>
<td>轮播方式     carousel</td>
<td></td>
<td></td>
</tr>
<tr>
<td>单位     unit</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="-9"><a href="#-9" class="headerlink" title></a></h3><h3 id="动态边框"><a href="#动态边框" class="headerlink" title="动态边框"></a>动态边框</h3><p>可以任意缩放的动态矢量边框，一般用于单个图表或者大屏的背景。</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
</tr>
</thead>
<tbody><tr>
<td>类型type</td>
<td>边框类型，可选1-13，具体效果可以参考<a href="http://datav-react.jiaminghi.com/guide/borderBox.html#borderbox1">http://datav-react.jiaminghi.com/guide/borderBox.html</a></td>
<td>2</td>
</tr>
<tr>
<td>反转     reverse</td>
<td></td>
<td></td>
</tr>
<tr>
<td>边框颜色     colors</td>
<td>元件颜色，需要填写主色合副色，’,’ 分隔</td>
<td>#003B51,#0A2732</td>
</tr>
<tr>
<td>标题     title</td>
<td></td>
<td></td>
</tr>
<tr>
<td>标题宽度     titleWidth</td>
<td></td>
<td></td>
</tr>
<tr>
<td>动画时长     duration</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="装饰文本"><a href="#装饰文本" class="headerlink" title="装饰文本"></a>装饰文本</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
</tr>
</thead>
<tbody><tr>
<td>颜色     colors</td>
<td>元件颜色，需要填写主色合副色，’,’ 分隔</td>
<td></td>
</tr>
<tr>
<td>文本     text</td>
<td>元件中央的文本</td>
<td>66%</td>
</tr>
<tr>
<td>字体大小     fontSize</td>
<td>元件中央的文本字体大小，单位 px</td>
<td>32</td>
</tr>
</tbody></table>
<h1 id="六、Block-元件"><a href="#六、Block-元件" class="headerlink" title="六、Block 元件"></a>六、Block 元件</h1><p>Block 元件的存在是为了弥补部分 acp 常规元件图表不足和灵活性不足的问题。你可以轻易的将 ECharts、Highcharts 及 Antv 等官网超过 1000+ 图表复制到 Axure。缺点就是无法像普通元件一样通过中继器更改数据和样式，修改起来需要有一定前端基础，可以让开发来协助（反正他们最终都要实现的= =）。</p>
<h1 id="ECharts-Block"><a href="#ECharts-Block" class="headerlink" title="ECharts Block"></a>ECharts Block</h1><p>ECharts Block 可以帮助你快速实现 ECharts 相关图表，和 Antv G2 相关元件库不一样，并不支持在 Axure 内直接修改图表样式和属性。好处就是可以支持 <a href="https://gallery.echartsjs.com/explore.html">ECharts 社区</a> 和 <a href="https://www.echartsjs.com/examples/zh/index.html">官方示例</a> 上千种图表，元件组合如下：</p>
<ul>
<li>容器矩形：名称为 acp-echats-chart ，名称不可更改，为图表容器</li>
<li>js 文件中继器：acp-js，名称不可更改，设置需要加载的第三方脚本</li>
<li>code 中继器：一般名称为 acp-code ，使用中继器内的 textArea 文本框来存放 ECharts 图表代码</li>
</ul>
<p>  <img src="/../images/AxhubChartsPro%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3/1569755846528-92454bcd-7311-4c59-9bf2-e0147ec8bc50.png" alt="image.png"></p>
<p>使用步骤如下：</p>
<p><strong>创建图表：</strong>将元件库的 ECharts Block 元件拖放到页面页面</p>
<p><strong>填充代码：</strong>访问 <a href="https://gallery.echartsjs.com/explore.html">ECharts 社区</a> 或 <a href="https://www.echartsjs.com/examples/zh/index.html">官方示例</a> ，打开选定图表，复制对应代码到 code 中继器下的文本框</p>
<p><strong>补充 js 脚本：</strong>点击 ECharts 图表详情页上顶部脚本按钮，将需要引用的脚本复制到 js 文件中继器。请注意，js 文件中继器第一条为 ECharts js文件的链接，可以更改版本但不能覆盖或删除。acp 已经默认填写了常用的脚本 js，<strong>这一步大部分情况下可以省略**</strong>。**</p>
<p>这就完成了，预览看看吧。</p>
<p>由于百度地图的 api 会限制调用的域名，暂不支持含有百度地图图表的引用。</p>
<p>另外需要注意的事，社区的代码由第三方提供，代码质量参次不齐，如果遇到无法显示的图表，可以找首席客服反馈。</p>
<h1 id="Highcharts-Block"><a href="#Highcharts-Block" class="headerlink" title="Highcharts Block"></a>Highcharts Block</h1><p>Highcharts Block 跟 ECharts Block 基本一致，<strong>但请注意</strong> <strong>Highcharts 本身是商业软件，任何使用带来的法律问题， Axhub 及本人概不承担，请谨慎使用。</strong></p>
<p>使用步骤如下：</p>
<p><strong>创建图表：</strong>将元件库的 Highcharts Block 元件拖放到页面页面</p>
<p><strong>填充代码：</strong>访问 <a href="https://www.highcharts.com.cn/demo/highcharts">Highcharts 官网</a>，打开选定图表，点击 js tab 复制对应代码到 code 中继器下的文本框</p>
<p><strong>补充 js 脚本：</strong>点击图表详情页上 html tab，将需要加载的 js 链接复制到 js 文件中继器。请注意，js 文件中继器第一条为 Highcharts js文件的链接，可以更改版本但不能覆盖或删除。acp 已经默认填写了常用的脚本 js，所以这一部分大部分情况下可以省略。</p>
<p>这就完成了，预览看看吧~</p>
<h1 id="Antv-G2-G6-G2plot-L7-F2-Block"><a href="#Antv-G2-G6-G2plot-L7-F2-Block" class="headerlink" title="Antv G2/G6/G2plot/L7/F2 Block"></a>Antv G2/G6/G2plot/L7/F2 Block</h1><p>请参考 ECharts Blcok 使用方法前两步，可以复制的图表请看</p>
<table>
<thead>
<tr>
<th>Block</th>
<th>图表类型</th>
<th>适用图表</th>
</tr>
</thead>
<tbody><tr>
<td>G2</td>
<td>常规图表</td>
<td><a href="https://g2.antv.vision/zh/examples/">https://g2.antv.vision/zh/examples/</a></td>
</tr>
<tr>
<td>G2plot</td>
<td>简易常规图表</td>
<td><a href="https://g2plot.antv.vision/zh/examples/">https://g2plot.antv.vision/zh/examples/</a></td>
</tr>
<tr>
<td>G6</td>
<td>数据关系图表</td>
<td><a href="https://g6.antv.vision/zh/examples/">https://g6.antv.vision/zh/examples/</a></td>
</tr>
<tr>
<td>L7</td>
<td>地理可视化</td>
<td><a href="https://l7.antv.vision/zh/examples/">https://l7.antv.vision/zh/examples/</a></td>
</tr>
<tr>
<td>F2</td>
<td>移动端图表</td>
<td><a href="https://f2.antv.vision/zh/examples/">https://f2.antv.vision/zh/examples/</a></td>
</tr>
</tbody></table>
<h1 id="【历史版本】Antv-G2-3-x-图表配置列表"><a href="#【历史版本】Antv-G2-3-x-图表配置列表" class="headerlink" title="【历史版本】Antv G2 3.x 图表配置列表"></a>【历史版本】Antv G2 3.x 图表配置列表</h1><h1 id="全局配置-1"><a href="#全局配置-1" class="headerlink" title="全局配置"></a>全局配置</h1><p>优先推荐，你可以通过设置项目的 <strong>全局变量（Axure-项目-全局变量）</strong>，来实现全局配置，一旦设置，将在项目内所有图表生效，支持字段如下：</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
</tr>
</thead>
<tbody><tr>
<td>globalTheme</td>
<td>图表主题，可取值 default / dark</td>
<td>dark</td>
</tr>
<tr>
<td>globalColor</td>
<td>图表颜色，可以参考配置列表里的 fieldColors 配置</td>
<td>#545454</td>
</tr>
<tr>
<td>globalFontSize</td>
<td>字体大小</td>
<td>14</td>
</tr>
<tr>
<td>globalTextFill</td>
<td>字体主颜色</td>
<td>#BDCCED</td>
</tr>
<tr>
<td>globalLineStroke</td>
<td>坐标轴颜色</td>
<td>#CCD6EC</td>
</tr>
<tr>
<td>globalGridLineStroke</td>
<td>网格颜色</td>
<td>#BDCCED</td>
</tr>
<tr>
<td>globalLegendTextFill</td>
<td>图例文本颜色</td>
<td>#BDCCED</td>
</tr>
</tbody></table>
<h1 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h1><p><strong>温馨提示：</strong>由于单个图表的配置项过多，下方分为“常用配置”和“全部配置”。其中常用配置为图表 config 中继器默认内置的，若不满足需求，可以到全部配置内寻找配置项并自行添加到 config 中继器。</p>
<h3 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>主题     theme</td>
<td>主题，目前支持 default 和 dark（适合深色背景）两种，<a href>欢迎贡献 </a></td>
<td>dark</td>
<td>default</td>
</tr>
<tr>
<td>图表颜色     fieldColors</td>
<td>图表字段对应的颜色，多个用‘,’或‘|’分隔，使用 rgb/rgba 格式时，分隔符号只能使用‘|’，具体请查看 <a href="#e2VEH">颜色说明</a></td>
<td>#4169E1,#B0C4DE</td>
<td></td>
</tr>
<tr>
<td>系列别名     fieldAlias</td>
<td>图表字段对应的别名，多个用‘,’分隔，一般用于解决 Axure 中继器表头不支持中文的问题</td>
<td>东京,伦敦</td>
<td></td>
</tr>
<tr>
<td>显示x轴     showXAxis</td>
<td>是否显示X轴</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>x轴刻度数量     xAxisTickCount</td>
<td>x轴刻度数量</td>
<td>5</td>
<td></td>
</tr>
<tr>
<td>x轴刻度     xAxisTicks</td>
<td>x轴刻度，多个用‘,’分隔</td>
<td>5,10,15,20</td>
<td></td>
</tr>
<tr>
<td>x轴位置     xAxisPosition</td>
<td>x轴的位置，可选top/right/bottom/left</td>
<td>top</td>
<td>bottom</td>
</tr>
<tr>
<td>x轴标题     xAxisTitle</td>
<td>x轴的标题</td>
<td>月份</td>
<td>空</td>
</tr>
<tr>
<td>x轴标签模板     xLabelTpl</td>
<td>x轴标签内容模板</td>
<td>{x}年</td>
<td>{x}</td>
</tr>
<tr>
<td>显示y轴     showYAxis</td>
<td>是否显示Y轴</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>y轴最小值     yAxisMin</td>
<td>y轴最小刻度</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>y轴最大值     yAxisMax</td>
<td>y轴最大刻度</td>
<td>10</td>
<td></td>
</tr>
<tr>
<td>y轴刻度数量     yAxisTickCount</td>
<td>y轴刻度数量</td>
<td>5</td>
<td></td>
</tr>
<tr>
<td>y轴位置     yAxisPosition</td>
<td>y轴的位置，可取 top/right/bottom/left</td>
<td>right</td>
<td>left</td>
</tr>
<tr>
<td>y轴标题     yAxisTitle</td>
<td>y轴的标题</td>
<td>摄氏度（℃）</td>
<td></td>
</tr>
<tr>
<td>y轴标签模板     yLabelTpl</td>
<td>y轴标签内容模板</td>
<td>{y}℃</td>
<td>{y}</td>
</tr>
<tr>
<td>显示图例     showLegend</td>
<td>是否显示图例</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>显示提示信息     showTooltips</td>
<td>是否显示提示信息</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>显示标签     showLabel</td>
<td>是否显示字段对应的文本</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>线条形状     lineShape</td>
<td>折线图线条类型，支持line,smooth,dot,dash,spline</td>
<td>smooth</td>
<td>line</td>
</tr>
<tr>
<td>点的形状     pointShape</td>
<td>折线图节点形状，circle, square, bowtie, diamond, hexagon, triangle，设置为none则不显示</td>
<td>none</td>
<td>circle</td>
</tr>
<tr>
<td>点的大小pointSize</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="柱状图-条形图-堆叠柱状图-堆叠条形图"><a href="#柱状图-条形图-堆叠柱状图-堆叠条形图" class="headerlink" title="柱状图/条形图/堆叠柱状图/堆叠条形图"></a>柱状图/条形图/堆叠柱状图/堆叠条形图</h3><p>请注意，条形图本质是镜像翻转的柱状图，配置时需要注意 x 轴和 y 轴的位置</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>主题     theme</td>
<td>主题，目前支持 default 和 dark（适合深色背景）两种，<a href>欢迎贡献 </a></td>
<td>dark</td>
<td>default</td>
<td></td>
</tr>
<tr>
<td>图表颜色     fieldColors</td>
<td>图表字段对应的颜色，多个用‘,’或‘|’分隔，使用 rgb/rgba 格式时，分隔符号只能使用‘|’，具体请查看 <a href="#e2VEH">颜色说明</a></td>
<td>#4169E1,#B0C4DE</td>
<td></td>
<td></td>
</tr>
<tr>
<td>系列别名     fieldAlias</td>
<td>图表字段对应的别名，多个用‘,’分隔，一般用于解决 Axure 中继器表头不支持中文的问题</td>
<td>东京,伦敦</td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示x轴     showXAxis</td>
<td>是否显示X轴</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>x轴位置     xAxisPosition</td>
<td>x轴的位置，可选top/right/bottom/left</td>
<td>top</td>
<td>bottom</td>
<td></td>
</tr>
<tr>
<td>x轴标题     xAxisTitle</td>
<td>x轴的标题</td>
<td>月份</td>
<td>空</td>
<td></td>
</tr>
<tr>
<td>x轴标签模板     xLabelTpl</td>
<td>x轴标签内容模板</td>
<td>{x}年</td>
<td>{x}</td>
<td></td>
</tr>
<tr>
<td>显示y轴     showYAxis</td>
<td>是否显示Y轴</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>y轴最小值     yAxisMin</td>
<td>y轴最小刻度</td>
<td>0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴最大值     yAxisMax</td>
<td>y轴最大刻度</td>
<td>10</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴刻度数量     yAxisTickCount</td>
<td>y轴刻度数量</td>
<td>5</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴位置     yAxisPosition</td>
<td>y轴的位置，可取 top/right/bottom/left</td>
<td>right</td>
<td>left</td>
<td></td>
</tr>
<tr>
<td>y轴标题     yAxisTitle</td>
<td>y轴的标题</td>
<td>摄氏度（℃）</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴标签模板     yLabelTpl</td>
<td>y轴标签内容模板</td>
<td>{y}℃</td>
<td>{y}</td>
<td></td>
</tr>
<tr>
<td>显示图例     showLegend</td>
<td>是否显示图例</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>显示提示信息     showTooltips</td>
<td>是否显示提示信息</td>
<td>false</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>显示标签     showLabel</td>
<td>是否显示字段对应的文本</td>
<td>true</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>标签偏移量     labelOffset</td>
<td>label距当前图形偏移量，负数则标识渲染在图形内部</td>
<td>-40</td>
<td>20</td>
<td></td>
</tr>
<tr>
<td>标签模板     labelTpl</td>
<td>label文本模板，可取 变量{name},{value}, {percent}</td>
<td>{value}个</td>
<td>{value}</td>
<td></td>
</tr>
<tr>
<td>柱状图类型     columnType</td>
<td>柱状图类型，可取 normal，stacked（堆叠）</td>
<td>stacked</td>
<td>normal</td>
<td></td>
</tr>
<tr>
<td>镜像翻转     transposeCoord</td>
<td>是否转化为条形图</td>
<td>true</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>柱子间距     dodgeMarginRatio</td>
<td>用于调整分组中各个柱子的间距</td>
<td>4</td>
<td>0</td>
<td></td>
</tr>
</tbody></table>
<h3 id="分面条形图"><a href="#分面条形图" class="headerlink" title="分面条形图"></a>分面条形图</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>主题     theme</td>
<td>主题，目前支持 default 和 dark（适合深色背景）两种，<a href>欢迎贡献 </a></td>
<td>dark</td>
<td>default</td>
<td></td>
</tr>
<tr>
<td>图表颜色     fieldColors</td>
<td>图表字段对应的颜色，多个用‘,’或‘|’分隔，使用 rgb/rgba 格式时，分隔符号只能使用‘|’，具体请查看 <a href="#e2VEH">颜色说明</a></td>
<td>#4169E1,#B0C4DE</td>
<td></td>
<td></td>
</tr>
<tr>
<td>系列别名     fieldAlias</td>
<td>图表字段对应的别名，多个用‘,’分隔，一般用于解决 Axure 中继器表头不支持中文的问题</td>
<td>东京,伦敦</td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示x轴     showXAxis</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>x轴刻度数量     xAxisTickCount</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>x轴刻度     xAxisTicks</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>x轴位置     xAxisPosition</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>x轴标题     xAxisTitle</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>x轴标签模板     xLabelTpl</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示y轴     showYAxis</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴最小值     yAxisMin</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴最大值     yAxisMax</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴刻度数量     yAxisTickCount</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴位置     yAxisPosition</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴标题     yAxisTitle</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴标签模板     yLabelTpl</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示图例     showLegend</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示提示信息     showTooltips</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示标签     showLabel</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="面积-面积堆叠图"><a href="#面积-面积堆叠图" class="headerlink" title="面积/面积堆叠图"></a>面积/面积堆叠图</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>主题     theme</td>
<td>主题，目前支持 default 和 dark（适合深色背景）两种，<a href>欢迎贡献 </a></td>
<td>dark</td>
<td>default</td>
<td></td>
</tr>
<tr>
<td>图表颜色     fieldColors</td>
<td>图表字段对应的颜色，多个用‘,’或‘|’分隔，使用 rgb/rgba 格式时，分隔符号只能使用‘|’，具体请查看 <a href="#e2VEH">颜色说明</a></td>
<td>#4169E1,#B0C4DE</td>
<td></td>
<td></td>
</tr>
<tr>
<td>系列别名     fieldAlias</td>
<td>图表字段对应的别名，多个用‘,’分隔，一般用于解决 Axure 中继器表头不支持中文的问题</td>
<td>东京,伦敦</td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示x轴     showXAxis</td>
<td>是否显示X轴</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>x轴位置     xAxisPosition</td>
<td>x轴的位置，可选top/right/bottom/left</td>
<td>top</td>
<td>bottom</td>
<td></td>
</tr>
<tr>
<td>x轴标题     xAxisTitle</td>
<td>x轴的标题</td>
<td>月份</td>
<td>空</td>
<td></td>
</tr>
<tr>
<td>x轴标签模板     xLabelTpl</td>
<td>x轴标签内容模板</td>
<td>{x}年</td>
<td>{x}</td>
<td></td>
</tr>
<tr>
<td>显示y轴     showYAxis</td>
<td>是否显示Y轴</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>y轴最小值     yAxisMin</td>
<td>y轴最小刻度</td>
<td>0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴最大值     yAxisMax</td>
<td>y轴最大刻度</td>
<td>10</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴刻度数量     yAxisTickCount</td>
<td>y轴刻度数量</td>
<td>5</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴位置     yAxisPosition</td>
<td>y轴的位置，可取 top/right/bottom/left</td>
<td>right</td>
<td>left</td>
<td></td>
</tr>
<tr>
<td>y轴标题     yAxisTitle</td>
<td>y轴的标题</td>
<td>摄氏度（℃）</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴标签模板     yLabelTpl</td>
<td>y轴标签内容模板</td>
<td>{y}℃</td>
<td>{y}</td>
<td></td>
</tr>
<tr>
<td>显示图例     showLegend</td>
<td>是否显示图例</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>显示提示信息     showTooltips</td>
<td>是否显示提示信息</td>
<td>false</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>显示标签     showLabel</td>
<td>是否显示字段对应的文本</td>
<td>true</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>面积图类型     areaType</td>
<td>面积类型，可取 normal，stacked（堆叠）</td>
<td>stacked</td>
<td>normal</td>
<td></td>
</tr>
<tr>
<td>面积形状     areaShape</td>
<td>面积形状，支持area,smooth,line,smoothLine</td>
<td>smooth</td>
<td>area</td>
<td></td>
</tr>
<tr>
<td>面积透明度     areaOpacity</td>
<td>面积透明度</td>
<td>1</td>
<td>0.5</td>
<td></td>
</tr>
<tr>
<td>线条形状     lineShape</td>
<td>折线条类型，支持line,smooth,dot,dash,spline</td>
<td>smooth</td>
<td>line</td>
<td></td>
</tr>
</tbody></table>
<h3 id="百分比堆叠图-百分比堆叠面积图"><a href="#百分比堆叠图-百分比堆叠面积图" class="headerlink" title="百分比堆叠图/百分比堆叠面积图"></a>百分比堆叠图/百分比堆叠面积图</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>主题     theme</td>
<td>主题，目前支持 default 和 dark（适合深色背景）两种，<a href>欢迎贡献 </a></td>
<td>dark</td>
<td>default</td>
<td></td>
</tr>
<tr>
<td>图表颜色     fieldColors</td>
<td>图表字段对应的颜色，多个用‘,’或‘|’分隔，使用 rgb/rgba 格式时，分隔符号只能使用‘|’，具体请查看 <a href="#e2VEH">颜色说明</a></td>
<td>#4169E1,#B0C4DE</td>
<td></td>
<td></td>
</tr>
<tr>
<td>系列别名     fieldAlias</td>
<td>图表字段对应的别名，多个用‘,’分隔，一般用于解决 Axure 中继器表头不支持中文的问题</td>
<td>东京,伦敦</td>
<td></td>
<td></td>
</tr>
<tr>
<td>是否显示x轴     showXAxis</td>
<td>是否显示X轴</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>x轴位置     xAxisPosition</td>
<td>x轴的位置，可选top/right/bottom/left</td>
<td>top</td>
<td>bottom</td>
<td></td>
</tr>
<tr>
<td>x轴标题     xAxisTitle</td>
<td>x轴的标题</td>
<td>月份</td>
<td>空</td>
<td></td>
</tr>
<tr>
<td>x轴标签模板     xLabelTpl</td>
<td>x轴标签内容模板</td>
<td>{x}年</td>
<td>{x}</td>
<td></td>
</tr>
<tr>
<td>是否显示y轴     showYAxis</td>
<td>是否显示Y轴</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>y轴最小值     yAxisMin</td>
<td>y轴最小刻度</td>
<td>0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴最大值     yAxisMax</td>
<td>y轴最大刻度</td>
<td>10</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴刻度数量     yAxisTickCount</td>
<td>y轴刻度数量</td>
<td>5</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴位置     yAxisPosition</td>
<td>y轴的位置，可取 top/right/bottom/left</td>
<td>right</td>
<td>left</td>
<td></td>
</tr>
<tr>
<td>y轴标题     yAxisTitle</td>
<td>y轴的标题</td>
<td>摄氏度（℃）</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴标签模板     yLabelTpl</td>
<td>y轴标签内容模板</td>
<td>{y}℃</td>
<td>{y}</td>
<td></td>
</tr>
<tr>
<td>显示图例     showLegend</td>
<td>是否显示图例</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>显示提示信息     showTooltips</td>
<td>是否显示提示信息</td>
<td>false</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>显示标签     showLabel</td>
<td>是否显示字段对应的文本</td>
<td>true</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>堆叠图类型     stackedType</td>
<td>堆叠图类型，可取 area，cloumn</td>
<td>area</td>
<td>cloumn</td>
<td></td>
</tr>
<tr>
<td>镜像翻转     transposeCoord</td>
<td>是否镜像旋转（柱状图可转换为条形图）</td>
<td>true</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>是否显示线条     showLine</td>
<td>是否显示折线</td>
<td>true</td>
<td>false</td>
<td></td>
</tr>
</tbody></table>
<h3 id="区间图-甘特图"><a href="#区间图-甘特图" class="headerlink" title="区间图/甘特图"></a>区间图/甘特图</h3><p>请注意，甘特图（区间条形图）本质是镜像翻转的柱状区间图，配置时需要注意 x 轴和 y 轴</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>主题     theme</td>
<td>主题，目前支持 default 和 dark（适合深色背景）两种，<a href>欢迎贡献 </a></td>
<td>dark</td>
<td>default</td>
<td></td>
</tr>
<tr>
<td>图表颜色     fieldColors</td>
<td>图表字段对应的颜色，多个用‘,’或‘|’分隔，使用 rgb/rgba 格式时，分隔符号只能使用‘|’，具体请查看 <a href="#e2VEH">颜色说明</a></td>
<td>#4169E1,#B0C4DE</td>
<td></td>
<td></td>
</tr>
<tr>
<td>系列别名     fieldAlias</td>
<td>图表字段对应的别名，多个用‘,’分隔，一般用于解决 Axure 中继器表头不支持中文的问题</td>
<td>东京,伦敦</td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示x轴     showXAxis</td>
<td>是否显示X轴</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>x轴位置     xAxisPosition</td>
<td>x轴的位置，可选top/right/bottom/left</td>
<td>top</td>
<td>bottom</td>
<td></td>
</tr>
<tr>
<td>x轴标题     xAxisTitle</td>
<td>x轴的标题</td>
<td>月份</td>
<td>空</td>
<td></td>
</tr>
<tr>
<td>x轴标签模板     xLabelTpl</td>
<td>x轴标签内容模板</td>
<td>{x}年</td>
<td>{x}</td>
<td></td>
</tr>
<tr>
<td>显示y轴     showYAxis</td>
<td>是否显示Y轴</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>y轴最小值     yAxisMin</td>
<td>y轴最小刻度</td>
<td>0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴最大值     yAxisMax</td>
<td>y轴最大刻度</td>
<td>10</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴刻度数量     yAxisTickCount</td>
<td>y轴刻度数量</td>
<td>5</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴位置     yAxisPosition</td>
<td>y轴的位置，可取 top/right/bottom/left</td>
<td>right</td>
<td>left</td>
<td></td>
</tr>
<tr>
<td>y轴标题     yAxisTitle</td>
<td>y轴的标题</td>
<td>摄氏度（℃）</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴标签模板     yLabelTpl</td>
<td>y轴标签内容模板</td>
<td>{y}℃</td>
<td>{y}</td>
<td></td>
</tr>
<tr>
<td>显示图例     showLegend</td>
<td>是否显示图例</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>显示提示信息     showTooltips</td>
<td>是否显示提示信息</td>
<td>false</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>提示信息模板     tooltipItemTpl</td>
<td>提示信息内容模板，区间图、甘特图 支持变量 {start},{end}</td>
<td>{start}至{end}</td>
<td>{start}-{end}</td>
<td></td>
</tr>
<tr>
<td>镜像翻转     transposeCoord</td>
<td>是否镜像旋转（柱状图可转换为条形图）</td>
<td>true</td>
<td>false</td>
<td></td>
</tr>
</tbody></table>
<h3 id="色块图"><a href="#色块图" class="headerlink" title="色块图"></a>色块图</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>主题     theme</td>
<td>主题，目前支持 default 和 dark（适合深色背景）两种，<a href>欢迎贡献 </a></td>
<td>dark</td>
<td>default</td>
<td></td>
</tr>
<tr>
<td>图表颜色     fieldColors</td>
<td>图表字段对应的颜色，多个用‘,’或‘|’分隔，使用 rgb/rgba 格式时，分隔符号只能使用‘|’，具体请查看 <a href="#e2VEH">颜色说明</a></td>
<td>#4169E1,#B0C4DE</td>
<td></td>
<td></td>
</tr>
<tr>
<td>系列别名     fieldAlias</td>
<td>图表字段对应的别名，多个用‘,’分隔，一般用于解决 Axure 中继器表头不支持中文的问题</td>
<td>东京,伦敦</td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示x轴     showXAxis</td>
<td>是否显示X轴</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>x轴刻度数量     xAxisTickCount</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>x轴刻度     xAxisTicks</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>x轴位置     xAxisPosition</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>x轴标题     xAxisTitle</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>x轴标签模板     xLabelTpl</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示y轴     showYAxis</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴最小值     yAxisMin</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴最大值     yAxisMax</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴刻度数量     yAxisTickCount</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴位置     yAxisPosition</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴标题     yAxisTitle</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴标签模板     yLabelTpl</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示图例     showLegend</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示提示信息     showTooltips</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示标签     showLabel</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>标签文本颜色     labelTextFill</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>标签偏移量     labelOffset</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="饼图-环形图"><a href="#饼图-环形图" class="headerlink" title="饼图/环形图"></a>饼图/环形图</h3><p>请注意，环形图为带空心圆的饼图</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>主题     theme</td>
<td>主题，目前支持 default 和 dark（适合深色背景）两种，<a href>欢迎贡献 </a></td>
<td>dark</td>
<td>default</td>
<td></td>
</tr>
<tr>
<td>图表颜色     fieldColors</td>
<td>图表字段对应的颜色，多个用‘,’或‘|’分隔，使用 rgb/rgba 格式时，分隔符号只能使用‘|’，具体请查看 <a href="#e2VEH">颜色说明</a></td>
<td>#4169E1,#B0C4DE</td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示图例     showLegend</td>
<td>是否显示图例</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>显示提示信息     showTooltips</td>
<td>是否显示提示信息</td>
<td>false</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>标签偏移量     labelOffset</td>
<td>label距当前图形偏移量，负数则标识渲染在图形内部</td>
<td>-40</td>
<td>20</td>
<td></td>
</tr>
<tr>
<td>提示信息模板     tooltipItemTpl</td>
<td>提示信息内容模板，支持变量{name},{value}，{percent}</td>
<td>{value}</td>
<td>{name}:{value}</td>
<td></td>
</tr>
<tr>
<td>显示标签     showLabel</td>
<td>是否显示字段对应的文本</td>
<td>true</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>标签模板     labelTpl</td>
<td>label文本模板，支持变量{name},{value}，{percent}</td>
<td>{value}个</td>
<td>{percent}</td>
<td></td>
</tr>
<tr>
<td>饼图半径     radius</td>
<td>饼图半径，值范围为 0 至 1</td>
<td>1</td>
<td>0.75</td>
<td></td>
</tr>
<tr>
<td>空心圆的半径     innerRadius</td>
<td>空心圆的半径，值范围为 0 至 1</td>
<td>0.7</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>辅助文本标题     guideTextTitle</td>
<td>环形图中间的文案标题</td>
<td>数量</td>
<td></td>
<td></td>
</tr>
<tr>
<td>辅助文本内容     guideTextContent</td>
<td>环形图中间的文案内容</td>
<td>200台</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="简易环形图"><a href="#简易环形图" class="headerlink" title="简易环形图"></a>简易环形图</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>主题     theme</td>
<td>主题，目前支持 default 和 dark（适合深色背景）两种，<a href>欢迎贡献 </a></td>
<td>dark</td>
<td>default</td>
<td></td>
</tr>
<tr>
<td>图表颜色     fieldColors</td>
<td>图表字段对应的颜色，多个用‘,’或‘|’分隔，使用 rgb/rgba 格式时，分隔符号只能使用‘|’，具体请查看 <a href="#e2VEH">颜色说明</a></td>
<td>#4169E1,#B0C4DE</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴最小值     yAxisMin</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴最大值     yAxisMax</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>环形宽度     circleLineWidth</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>辅助文本标题     guideTextTitle</td>
<td>环形图中间的文案标题</td>
<td>数量</td>
<td></td>
<td></td>
</tr>
<tr>
<td>辅助文本内容     guideTextContent</td>
<td>环形图中间的文案内容</td>
<td>200台</td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示辅助文本     showGuideText</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="玉珏图"><a href="#玉珏图" class="headerlink" title="玉珏图"></a>玉珏图</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>主题     theme</td>
<td>主题，目前支持 default 和 dark（适合深色背景）两种，<a href>欢迎贡献 </a></td>
<td>dark</td>
<td>default</td>
<td></td>
</tr>
<tr>
<td>图表颜色     fieldColors</td>
<td>图表字段对应的颜色，多个用‘,’或‘|’分隔，使用 rgb/rgba 格式时，分隔符号只能使用‘|’，具体请查看 <a href="#e2VEH">颜色说明</a></td>
<td>#4169E1,#B0C4DE</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴最小值     yAxisMin</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴最大值     yAxisMax</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示图例     showLegend</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示提示信息     showTooltips</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示标签     showLabel</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>标签偏移量     labelOffset</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>标签模板     labelTpl</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示辅助文本     showGuideText</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="玫瑰图"><a href="#玫瑰图" class="headerlink" title="玫瑰图"></a>玫瑰图</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>主题     theme</td>
<td>主题，目前支持 default 和 dark（适合深色背景）两种，<a href>欢迎贡献 </a></td>
<td>dark</td>
<td>default</td>
<td></td>
</tr>
<tr>
<td>图表颜色     fieldColors</td>
<td>图表字段对应的颜色，多个用‘,’或‘|’分隔，使用 rgb/rgba 格式时，分隔符号只能使用‘|’，具体请查看 <a href="#e2VEH">颜色说明</a></td>
<td>#4169E1,#B0C4DE</td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示图例     showLegend</td>
<td>是否显示图例</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>显示提示信息     showTooltips</td>
<td>是否显示提示信息</td>
<td>false</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>显示标签     showLabel</td>
<td>是否显示字段对应的文本</td>
<td>true</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>标签模板     labelTpl</td>
<td>label文本模板，支持变量{name},{value}</td>
<td>{value}个</td>
<td>{value}</td>
<td></td>
</tr>
<tr>
<td>饼图半径     radius</td>
<td>玫瑰图半径，值范围为 0 至 1</td>
<td>1</td>
<td>0.75</td>
<td></td>
</tr>
<tr>
<td>空心圆的半径     innerRadius</td>
<td>空心圆的半径，值范围为 0 至 1</td>
<td>0.7</td>
<td>0</td>
<td></td>
</tr>
</tbody></table>
<h3 id="-10"><a href="#-10" class="headerlink" title></a></h3><h3 id="仪表盘"><a href="#仪表盘" class="headerlink" title="仪表盘"></a>仪表盘</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>主题     theme</td>
<td>主题，目前支持 default 和 dark（适合深色背景）两种，<a href>欢迎贡献 </a></td>
<td>dark</td>
<td>default</td>
<td></td>
</tr>
<tr>
<td>图表颜色     fieldColors</td>
<td>图表字段对应的颜色，多个用‘,’或‘|’分隔，使用 rgb/rgba 格式时，分隔符号只能使用‘|’，具体请查看 <a href="#e2VEH">颜色说明</a></td>
<td>#4169E1,#B0C4DE</td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示x轴     showXAxis</td>
<td>是否显示X轴</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>显示y轴     showYAxis</td>
<td>是否显示Y轴</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>y轴最小值     yAxisMin</td>
<td>y轴最小刻度</td>
<td>0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴最大值     yAxisMax</td>
<td>y轴最大刻度</td>
<td>10</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴刻度间隔     yAxisTickInterval</td>
<td>y轴刻度间隔</td>
<td>5</td>
<td></td>
<td></td>
</tr>
<tr>
<td>指针类型     pointerType</td>
<td>指针类型</td>
<td>2</td>
<td></td>
<td></td>
</tr>
<tr>
<td>辅助文本标题     guideTextTitle</td>
<td>指标中间的文案标题</td>
<td>数量</td>
<td></td>
<td></td>
</tr>
<tr>
<td>辅助文本内容     guideTextContent</td>
<td>指标中间的文案内容</td>
<td>200台</td>
<td></td>
<td></td>
</tr>
<tr>
<td>隐藏y轴标签     hideYAxisLabel</td>
<td>是否隐藏Y轴标签</td>
<td>true</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>起点角度     startAngle</td>
<td>仪表盘极坐标的起始角度，值范围为 -16 至 16</td>
<td>-10</td>
<td>-9</td>
<td></td>
</tr>
<tr>
<td>终点角度     endAngle</td>
<td>仪表盘极坐标的结束角度，值范围为 -16 至 16</td>
<td>2</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="水波图"><a href="#水波图" class="headerlink" title="水波图"></a>水波图</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>主题     theme</td>
<td>主题，目前支持 default 和 dark（适合深色背景）两种，<a href>欢迎贡献 </a></td>
<td>dark</td>
<td>default</td>
<td></td>
</tr>
<tr>
<td>图表颜色     fieldColors</td>
<td>图表字段对应的颜色，多个用‘,’或‘|’分隔，使用 rgb/rgba 格式时，分隔符号只能使用‘|’，具体请查看 <a href="#e2VEH">颜色说明</a></td>
<td>#4169E1,#B0C4DE</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴最小值     yAxisMin</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴最大值     yAxisMax</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>环形宽度     circleLineWidth</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>辅助字体大小     guideTextSize</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>辅助文本颜色     guideTextFill</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示辅助文本     showGuideText</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>辅助文本     guideText</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="雷达图-1"><a href="#雷达图-1" class="headerlink" title="雷达图"></a>雷达图</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>主题     theme</td>
<td>主题，目前支持 default 和 dark（适合深色背景）两种，<a href>欢迎贡献 </a></td>
<td>dark</td>
<td>default</td>
<td></td>
</tr>
<tr>
<td>系列别名     fieldAlias</td>
<td>图表字段对应的颜色，多个用‘,’或‘|’分隔，使用 rgb/rgba 格式时，分隔符号只能使用‘|’，具体请查看 <a href="#e2VEH">颜色说明</a></td>
<td>#4169E1,#B0C4DE</td>
<td></td>
<td></td>
</tr>
<tr>
<td>图表颜色     fieldColors</td>
<td>图表字段对应的别名，多个用‘,’分隔，一般用于解决 Axure 中继器表头不支持中文的问题</td>
<td>东京,伦敦</td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示x轴     showXAxis</td>
<td>是否显示X轴</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>显示y轴     showYAxis</td>
<td>是否显示Y轴</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>y轴最小值     yAxisMin</td>
<td>y轴最小刻度</td>
<td>0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴最大值     yAxisMax</td>
<td>y轴最大刻度</td>
<td>10</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴刻度数量     yAxisTickCount</td>
<td>y轴刻度数量</td>
<td>5</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴标签模板     yLabelTpl</td>
<td>y轴标签内容模板</td>
<td>{y}℃</td>
<td>{y}</td>
<td></td>
</tr>
<tr>
<td>显示提示信息     showTooltips</td>
<td>是否显示提示信息</td>
<td>false</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>显示图例     showLegend</td>
<td>是否显示图例</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>饼图半径     radius</td>
<td>雷达图半径，值范围为 0 至 1</td>
<td>1</td>
<td>0.8</td>
<td></td>
</tr>
<tr>
<td>雷达类型     radarType</td>
<td>雷达图类型，可取值 line（线图），area（面积图）</td>
<td>area</td>
<td>line</td>
<td></td>
</tr>
<tr>
<td>x轴网格矩形框颜色     yGridAlternateColor</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>x轴网格类型     yGridType</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="散点图-气泡图"><a href="#散点图-气泡图" class="headerlink" title="散点图/气泡图"></a>散点图/气泡图</h3><p>气泡图为大小不一的散点图</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>theme</td>
<td>主题，目前支持 default 和 dark（适合深色背景）两种，<a href>欢迎贡献 </a></td>
<td>dark</td>
<td>default</td>
</tr>
<tr>
<td>fieldColors</td>
<td>图表字段对应的颜色，多个用‘,’或‘|’分隔，使用 rgb/rgba 格式时，分隔符号只能使用‘|’，具体请查看 <a href="#e2VEH">颜色说明</a></td>
<td>#4169E1,#B0C4DE</td>
<td></td>
</tr>
<tr>
<td>fieldAlias</td>
<td>图表字段对应的别名，多个用‘,’分隔，一般用于解决 Axure 中继器表头不支持中文的问题</td>
<td>东京,伦敦</td>
<td></td>
</tr>
<tr>
<td>showXAxis</td>
<td>是否显示X轴</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>xAxisTickCount</td>
<td>x轴刻度数量</td>
<td>5</td>
<td></td>
</tr>
<tr>
<td>xAxisTicks</td>
<td>x轴刻度，多个用‘,’分隔</td>
<td>5,10,15,20</td>
<td></td>
</tr>
<tr>
<td>xAxisPosition</td>
<td>x轴的位置，可选top/right/bottom/left</td>
<td>top</td>
<td>bottom</td>
</tr>
<tr>
<td>xAxisTitle</td>
<td>x轴的标题</td>
<td>月份</td>
<td>空</td>
</tr>
<tr>
<td>xLabelTpl</td>
<td>x轴标签内容模板</td>
<td>{x}年</td>
<td>{x}</td>
</tr>
<tr>
<td>showYAxis</td>
<td>是否显示Y轴</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>yAxisMin</td>
<td>y轴最小刻度</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>yAxisMax</td>
<td>y轴最大刻度</td>
<td>10</td>
<td></td>
</tr>
<tr>
<td>yAxisTickCount</td>
<td>y轴刻度数量</td>
<td>5</td>
<td></td>
</tr>
<tr>
<td>yAxisPosition</td>
<td>y轴的位置，可取 top/right/bottom/left</td>
<td>right</td>
<td>left</td>
</tr>
<tr>
<td>yAxisTitle</td>
<td>y轴的标题</td>
<td>摄氏度（℃）</td>
<td></td>
</tr>
<tr>
<td>yLabelTpl</td>
<td>y轴标签内容模板</td>
<td>{y}℃</td>
<td>{y}</td>
</tr>
<tr>
<td>showLegend</td>
<td>是否显示图例</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>showTooltips</td>
<td>是否显示提示信息</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>tooltipItemTpl</td>
<td>提示信息内容模板，支持变量{name}，{xValue}（横坐标值），{yValue}（纵坐标值），{zValue}（点大小值）， <br>（换行）</td>
<td>{xValue} {yValue}</td>
<td>{name} <br> {xValue} {yValue}</td>
</tr>
<tr>
<td>showLabel</td>
<td>是否显示字段对应的文本</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>pointShape</td>
<td>折线图节点形状，circle, square, bowtie, diamond, hexagon, triangle，设置为none则不显示</td>
<td>none</td>
<td>circle</td>
</tr>
</tbody></table>
<h3 id="双轴图"><a href="#双轴图" class="headerlink" title="双轴图"></a>双轴图</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>主题     theme</td>
<td>主题，目前支持 default 和 dark（适合深色背景）两种，<a href>欢迎贡献 </a></td>
<td>dark</td>
<td>default</td>
</tr>
<tr>
<td>图表颜色     fieldColors</td>
<td>图表字段对应的颜色，多个用‘,’或‘|’分隔，使用 rgb/rgba 格式时，分隔符号只能使用‘|’，具体请查看 <a href="#e2VEH">颜色说明</a></td>
<td>#4169E1,#B0C4DE</td>
<td></td>
</tr>
<tr>
<td>系列别名     fieldAlias</td>
<td>图表字段对应的别名，多个用‘,’分隔，一般用于解决 Axure 中继器表头不支持中文的问题</td>
<td>东京,伦敦</td>
<td></td>
</tr>
<tr>
<td>形状     shapes</td>
<td>字段对应图形类型，折线为line，柱状图为column，面积图为area，多个用“,”分开</td>
<td>line,line,columncolumn</td>
<td>circle</td>
</tr>
<tr>
<td>显示x轴     showXAxis</td>
<td>是否显示X轴</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>x轴刻度数量     xAxisTickCount</td>
<td>x轴刻度数量</td>
<td>5</td>
<td></td>
</tr>
<tr>
<td>x轴刻度     xAxisTicks</td>
<td>x轴刻度，多个用‘,’分隔</td>
<td>5,10,15,20</td>
<td></td>
</tr>
<tr>
<td>x轴位置     xAxisPosition</td>
<td>x轴的位置，可选top/right/bottom/left</td>
<td>top</td>
<td>bottom</td>
</tr>
<tr>
<td>x轴标题     xAxisTitle</td>
<td>x轴的标题</td>
<td>月份</td>
<td>空</td>
</tr>
<tr>
<td>x轴标签模板     xLabelTpl</td>
<td>x轴标签内容模板</td>
<td>{x}年</td>
<td>{x}</td>
</tr>
<tr>
<td>显示y轴     showYAxis</td>
<td>是否显示Y轴</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>y轴最小值     yAxisMin</td>
<td>y轴最小刻度</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>y轴最大值     yAxisMax</td>
<td>y轴最大刻度</td>
<td>10</td>
<td></td>
</tr>
<tr>
<td>y轴刻度数量     yAxisTickCount</td>
<td>y轴刻度数量</td>
<td>5</td>
<td></td>
</tr>
<tr>
<td>y轴位置     yAxisPosition</td>
<td>y轴的位置，可取 top/right/bottom/left</td>
<td>right</td>
<td>left</td>
</tr>
<tr>
<td>y轴标题     yAxisTitle</td>
<td>y轴的标题</td>
<td>摄氏度（℃）</td>
<td></td>
</tr>
<tr>
<td>y轴标签模板     yLabelTpl</td>
<td>y轴标签内容模板</td>
<td>{y}℃</td>
<td>{y}</td>
</tr>
<tr>
<td>显示第二y轴     showSecondYAxis</td>
<td>是否显示第二y轴</td>
<td></td>
<td></td>
</tr>
<tr>
<td>第二y轴最小值     secondYAxisMin</td>
<td>第二 y 轴最小刻度</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>第二y轴最大值     secondYAxisMax</td>
<td>第二 y 轴最大刻度</td>
<td>10</td>
<td></td>
</tr>
<tr>
<td>第二y轴刻度数量     secondYAxisTickCount</td>
<td>第二 y 轴刻度数量</td>
<td>5</td>
<td></td>
</tr>
<tr>
<td>第二y轴位置     secondYAxisPosition</td>
<td>第二 y 轴的位置，可取 top/right/bottom/left</td>
<td>right</td>
<td>left</td>
</tr>
<tr>
<td>第二y轴标题     secondYAxisTitle</td>
<td>第二 y 轴的标题</td>
<td>摄氏度（℃）</td>
<td></td>
</tr>
<tr>
<td>第二y轴标签模板     secondYLabelTpl</td>
<td>第二 y 轴标签内容模板</td>
<td>{y}℃</td>
<td>{y}</td>
</tr>
<tr>
<td>显示图例     showLegend</td>
<td>是否显示图例</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>显示提示信息     showTooltips</td>
<td>是否显示提示信息</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>柱图提示信息模板     columnTooltipItemTpl</td>
<td>柱状图提示信息内容模板，支持变量{name},{value}，{percent}</td>
<td>{value}</td>
<td>{name}:{value}</td>
</tr>
<tr>
<td>线图提示信息模板     lineTooltipItemTpl</td>
<td>折线图提示信息内容模板，支持变量{name},{value}</td>
<td>{value}</td>
<td>{name}:{value}</td>
</tr>
</tbody></table>
<h3 id="K线图"><a href="#K线图" class="headerlink" title="K线图"></a>K线图</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>主题     theme</td>
<td>主题，目前支持 default 和 dark（适合深色背景）两种，<a href>欢迎贡献 </a></td>
<td>dark</td>
<td>default</td>
<td></td>
</tr>
<tr>
<td>图表颜色     fieldColors</td>
<td>图表字段对应的颜色，多个用‘,’或‘|’分隔，使用 rgb/rgba 格式时，分隔符号只能使用‘|’，具体请查看 <a href="#e2VEH">颜色说明</a></td>
<td>#4169E1,#B0C4DE</td>
<td></td>
<td></td>
</tr>
<tr>
<td>系列别名     fieldAlias</td>
<td>图表字段对应的别名，多个用‘,’分隔，一般用于解决 Axure 中继器表头不支持中文的问题</td>
<td>东京,伦敦</td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示x轴     showXAxis</td>
<td>是否显示X轴</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>x轴刻度数量     xAxisTickCount</td>
<td>x轴刻度数量</td>
<td>5</td>
<td></td>
<td></td>
</tr>
<tr>
<td>x轴刻度     xAxisTicks</td>
<td>x轴刻度，多个用‘,’分隔</td>
<td>5,10,15,20</td>
<td></td>
<td></td>
</tr>
<tr>
<td>x轴位置     xAxisPosition</td>
<td>x轴的位置，可选top/right/bottom/left</td>
<td>top</td>
<td>bottom</td>
<td></td>
</tr>
<tr>
<td>x轴标题     xAxisTitle</td>
<td>x轴的标题</td>
<td>月份</td>
<td>空</td>
<td></td>
</tr>
<tr>
<td>x轴标签模板     xLabelTpl</td>
<td>x轴标签内容模板</td>
<td>{x}年</td>
<td>{x}</td>
<td></td>
</tr>
<tr>
<td>显示y轴     showYAxis</td>
<td>是否显示Y轴</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>y轴最小值     yAxisMin</td>
<td>y轴最小刻度</td>
<td>0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴最大值     yAxisMax</td>
<td>y轴最大刻度</td>
<td>10</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴刻度数量     yAxisTickCount</td>
<td>y轴刻度数量</td>
<td>5</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴位置     yAxisPosition</td>
<td>y轴的位置，可取 top/right/bottom/left</td>
<td>right</td>
<td>left</td>
<td></td>
</tr>
<tr>
<td>y轴标题     yAxisTitle</td>
<td>y轴的标题</td>
<td>摄氏度（℃）</td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴标签模板     yLabelTpl</td>
<td>y轴标签内容模板</td>
<td>{y}℃</td>
<td>{y}</td>
<td></td>
</tr>
<tr>
<td>显示图例     showLegend</td>
<td>是否显示图例</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>显示提示信息     showTooltips</td>
<td>是否显示提示信息</td>
<td>false</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>提示信息模板     tooltipItemTpl</td>
<td>提示信息内容模板，支持变量{date},{start}，{end}，{max}，{min}</td>
<td>{date}：{end}</td>
<td>{date} <br>开盘价：{start}<br>收盘价：{end}<br>最高价：{max}<br>最低价：{min}</td>
<td></td>
</tr>
</tbody></table>
<h3 id="漏斗图"><a href="#漏斗图" class="headerlink" title="漏斗图"></a>漏斗图</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>主题     theme</td>
<td>主题，目前支持 default 和 dark（适合深色背景）两种，<a href>欢迎贡献 </a></td>
<td>dark</td>
<td>default</td>
<td></td>
</tr>
<tr>
<td>图表颜色     fieldColors</td>
<td>图表字段对应的颜色，多个用‘,’或‘|’分隔，使用 rgb/rgba 格式时，分隔符号只能使用‘|’，具体请查看 <a href="#e2VEH">颜色说明</a></td>
<td>#4169E1,#B0C4DE</td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示图例     showLegend</td>
<td>是否显示图例</td>
<td>false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>显示提示信息     showTooltips</td>
<td>是否显示提示信息</td>
<td>false</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>提示信息模板     tooltipItemTpl</td>
<td>提示信息内容模板，支持变量{name},{value}，{percent}</td>
<td>{value}</td>
<td>{name}:{value}</td>
<td></td>
</tr>
<tr>
<td>显示标签     showLabel</td>
<td>是否显示字段对应的文本</td>
<td>true</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>标签模板     labelTpl</td>
<td>label文本模板，支持变量{name},{value}，{percent}</td>
<td>{value}个</td>
<td>{percent}</td>
<td></td>
</tr>
<tr>
<td>标签偏移量     labelOffset</td>
<td></td>
<td></td>
<td>20</td>
<td></td>
</tr>
<tr>
<td>显示辅助文本     showGuideText</td>
<td>是否显示图形中的辅助文本</td>
<td></td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>辅助文本模板     guideTextTpl</td>
<td>图形中的辅助文本模板，支持变量{name},{value}，{percent}</td>
<td>{value}个</td>
<td>{percent}</td>
<td></td>
</tr>
<tr>
<td>图表内边距     padding</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="散点图-气泡图-1"><a href="#散点图-气泡图-1" class="headerlink" title="散点图/气泡图"></a>散点图/气泡图</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>主题     theme</td>
<td>主题，目前支持 default 和 dark（适合深色背景）两种，<a href>欢迎贡献 </a></td>
<td>dark</td>
<td>default</td>
<td></td>
</tr>
<tr>
<td>图表颜色     fieldColors</td>
<td>图表字段对应的颜色，多个用‘,’或‘|’分隔，使用 rgb/rgba 格式时，分隔符号只能使用‘|’，具体请查看 <a href="#e2VEH">颜色说明</a></td>
<td>#4169E1,#B0C4DE</td>
<td></td>
<td></td>
</tr>
<tr>
<td>系列别名     fieldAlias</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示x轴     showXAxis</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>x轴刻度数量     xAxisTickCount</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>x轴刻度     xAxisTicks</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>x轴位置     xAxisPosition</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>x轴标题     xAxisTitle</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>x轴标签模板     xLabelTpl</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示y轴     showYAxis</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴最小值     yAxisMin</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴最大值     yAxisMax</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴刻度数量     yAxisTickCount</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴位置     yAxisPosition</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴标题     yAxisTitle</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>y轴标签模板     yLabelTpl</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示图例     showLegend</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示提示信息     showTooltips</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>提示信息模板     tooltipItemTpl</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>显示标签     showLabel</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>点的形状     pointShape</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="-11"><a href="#-11" class="headerlink" title></a></h3><h3 id="词云"><a href="#词云" class="headerlink" title="词云"></a>词云</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>主题     theme</td>
<td>主题，目前支持 default 和 dark（适合深色背景）两种，<a href>欢迎贡献 </a></td>
<td>dark</td>
<td>default</td>
</tr>
<tr>
<td>图表颜色     fieldColors</td>
<td>图表字段对应的颜色，多个用‘,’或‘|’分隔，使用 rgb/rgba 格式时，分隔符号只能使用‘|’，具体请查看 <a href="#e2VEH">颜色说明</a></td>
<td>#4169E1,#B0C4DE</td>
<td></td>
</tr>
<tr>
<td>显示提示信息     showTooltips</td>
<td>是否显示提示信息</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>提示信息模板     tooltipItemTpl</td>
<td>提示信息内容模板，支持变量{name},{value}</td>
<td>{value}</td>
<td>{name}: {value}</td>
</tr>
<tr>
<td>最小字体大小     minFontSize</td>
<td>词云文本最小字体大小</td>
<td>24</td>
<td>16</td>
</tr>
<tr>
<td>词云字体     wordCloudFont</td>
<td>词云文本字体</td>
<td>微软雅黑</td>
<td>Verdana</td>
</tr>
<tr>
<td>词云内边距     wordCloudPadding</td>
<td>词云文本内边距</td>
<td>4</td>
<td>2</td>
</tr>
</tbody></table>
<h3 id="滑块"><a href="#滑块" class="headerlink" title="滑块"></a>滑块</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>textFill</td>
<td>slider 滑块文本颜色</td>
<td>#545454</td>
<td>#545454</td>
</tr>
<tr>
<td>backgroundChartColor</td>
<td>slider 滑块的背景图表颜色</td>
<td>#CCD6EC</td>
<td>#CCD6EC</td>
</tr>
<tr>
<td>fillerFill</td>
<td>slider 滑块选中区域颜色</td>
<td>#BDCCED</td>
<td>#BDCCED</td>
</tr>
<tr>
<td>backgroundColor</td>
<td>slider 滑块的背景颜色</td>
<td>#CCD6EC</td>
<td>#CCD6EC</td>
</tr>
</tbody></table>
<h1 id="全部配置"><a href="#全部配置" class="headerlink" title="全部配置"></a>全部配置</h1><h3 id="图表配置"><a href="#图表配置" class="headerlink" title="图表配置"></a>图表配置</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>theme</td>
<td>主题，目前支持 default 和 dark（适合深色背景）两种，<a href>欢迎贡献 </a></td>
<td>dark</td>
<td>default</td>
</tr>
<tr>
<td>fieldColors</td>
<td>图表字段对应的颜色，多个用‘,’或‘|’分隔，使用 rgb/rgba 格式时，分隔符号只能使用‘|’，具体请查看 <a href="#e2VEH">颜色说明</a></td>
<td>#4169E1,#B0C4DE</td>
<td></td>
</tr>
<tr>
<td>padding</td>
<td>容器的内边距，支持多种设置方式，可以填写统一边距，也可以填写上下/左右边距，还可以单独填写上/下/左/右四边边距支持%格式的值；如果填写auto，则可以自动计算对应值</td>
<td>20,30,20,302020,auto,20,3020%,30%</td>
<td>auto</td>
</tr>
<tr>
<td>renderer</td>
<td>图表渲染方式，支持 svg 和 canvas，svg 可以复制到 Axure 进行二次设计</td>
<td>svg</td>
<td>canvas</td>
</tr>
<tr>
<td>fieldAlias</td>
<td>图表字段对应的别名，多个用‘,’分隔，一般用于解决 Axure 中继器表头不支持中文的问题</td>
<td>东京,伦敦</td>
<td></td>
</tr>
</tbody></table>
<h3 id="坐标轴-1"><a href="#坐标轴-1" class="headerlink" title="坐标轴"></a>坐标轴</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>showXAxis</td>
<td>是否显示X轴</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>xAxisMin</td>
<td>x轴最小刻度</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>xAxisMax</td>
<td>x轴最大刻度</td>
<td>10</td>
<td></td>
</tr>
<tr>
<td>xAxisTickCount</td>
<td>x轴刻度数量</td>
<td>5</td>
<td></td>
</tr>
<tr>
<td>xAxisTickInterval</td>
<td>x轴两个刻度直接相差值</td>
<td>10</td>
<td></td>
</tr>
<tr>
<td>xAxisTicks</td>
<td>x轴刻度，多个用‘,’分隔</td>
<td>5,10,15,20</td>
<td></td>
</tr>
<tr>
<td>xAxisPosition</td>
<td>x轴的位置，可选top/right/bottom/left</td>
<td>top</td>
<td>bottom</td>
</tr>
<tr>
<td>xAxisTitle</td>
<td>x轴的标题</td>
<td>月份</td>
<td>空</td>
</tr>
<tr>
<td>xTitleTextFill</td>
<td>x轴的标题字体颜色</td>
<td>#545454</td>
<td>#545454</td>
</tr>
<tr>
<td>xTitleFontSize</td>
<td>x轴的标题字体大小</td>
<td>14</td>
<td>12</td>
</tr>
<tr>
<td>xLineStroke</td>
<td>x轴颜色</td>
<td>#BFBFBF</td>
<td>#BFBFBF</td>
</tr>
<tr>
<td>xLineWidth</td>
<td>x轴线宽</td>
<td>2</td>
<td>1</td>
</tr>
<tr>
<td>hideXAxisLabel</td>
<td>是否隐藏x轴标签</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>xLabelTpl</td>
<td>x轴标签内容模板</td>
<td>{x}年</td>
<td>{x}</td>
</tr>
<tr>
<td>xLabelOffset</td>
<td>x轴标签位置距坐标轴偏移量</td>
<td>20</td>
<td></td>
</tr>
<tr>
<td>xLabelTextAlign</td>
<td>x轴标签文本对齐方向，可取 start center end</td>
<td>start</td>
<td></td>
</tr>
<tr>
<td>xLabelTextFill</td>
<td>x轴标签文字颜色，参考 <a href="#e2VEH">颜色说明</a></td>
<td>#4169E1</td>
<td>#545454</td>
</tr>
<tr>
<td>xLabelFontSize</td>
<td>x轴标签文字大小</td>
<td>14</td>
<td>12</td>
</tr>
<tr>
<td>xLabelFontWeight</td>
<td>x轴标签字重</td>
<td>bold</td>
<td>normal</td>
</tr>
<tr>
<td>xLabelRotate</td>
<td>x轴标签文本角度</td>
<td>30</td>
<td></td>
</tr>
<tr>
<td>xTickLineWidth</td>
<td>x轴刻度线宽</td>
<td>2</td>
<td>1</td>
</tr>
<tr>
<td>xTickLineStroke</td>
<td>x轴刻度颜色，参考 <a href="#e2VEH">颜色说明</a></td>
<td>#BFBFBF</td>
<td>#BFBFBF</td>
</tr>
<tr>
<td>xTickLineLength</td>
<td>x轴刻度线的长度，可以为负值（表示反方向渲染）</td>
<td>-4</td>
<td>4</td>
</tr>
<tr>
<td>xGridType</td>
<td>x轴网格的类型，line 表示线，polygon 表示矩形框</td>
<td>line</td>
<td>line</td>
</tr>
<tr>
<td>xGridLineStroke</td>
<td>x轴网格线的颜色，参考 <a href="#e2VEH">颜色说明</a></td>
<td>#404040</td>
<td>#404040</td>
</tr>
<tr>
<td>xGridLineWidth</td>
<td>x轴网格线宽</td>
<td>2</td>
<td>1</td>
</tr>
<tr>
<td>xGridLineDash</td>
<td>x轴网格线的虚线配置，第一个参数描述虚线的实部占多少像素，第二个参数描述虚线的虚部占多少像素</td>
<td>3,3</td>
<td></td>
</tr>
<tr>
<td>xGridAlternateColor</td>
<td>当网格类型 type 为 polygon 时，为x轴网格设置交替的颜色，指定一个值则先渲染奇数层，两个值则交替渲染，参考 <a href="https://www.yuque.com/lintendo/uux5xi/gu3drv/edit">颜色说明</a></td>
<td>#eeeeee</td>
<td></td>
</tr>
<tr>
<td>showYAxis</td>
<td>是否显示Y轴</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>yAxisMin</td>
<td>y轴最小刻度</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>yAxisMax</td>
<td>y轴最大刻度</td>
<td>10</td>
<td></td>
</tr>
<tr>
<td>yAxisTickCount</td>
<td>y轴刻度数量</td>
<td>5</td>
<td></td>
</tr>
<tr>
<td>yAxisTickInterval</td>
<td>y轴两个刻度直接相差值</td>
<td>10</td>
<td></td>
</tr>
<tr>
<td>yAxisTicks</td>
<td>y轴刻度，多个用‘,’分隔</td>
<td>5,10,15,20</td>
<td></td>
</tr>
<tr>
<td>yAxisPosition</td>
<td>y轴的位置，可取 top/right/bottom/left</td>
<td>right</td>
<td>left</td>
</tr>
<tr>
<td>yAxisTitle</td>
<td>y轴的标题</td>
<td>摄氏度（℃）</td>
<td></td>
</tr>
<tr>
<td>yTitleTextFill</td>
<td>y轴的标题字体颜色</td>
<td>#545454</td>
<td>#545454</td>
</tr>
<tr>
<td>yTitleFontSize</td>
<td>y轴的标题字体大小</td>
<td>14</td>
<td>12</td>
</tr>
<tr>
<td>yLineStroke</td>
<td>y轴颜色</td>
<td>#BFBFBF</td>
<td>#BFBFBF</td>
</tr>
<tr>
<td>yLineWidth</td>
<td>y轴线宽</td>
<td>2</td>
<td>1</td>
</tr>
<tr>
<td>hideYAxisLabel</td>
<td>是否隐藏y轴标签</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>yLabelTpl</td>
<td>y轴标签内容模板</td>
<td>{y}℃</td>
<td>{y}</td>
</tr>
<tr>
<td>xLabelTextAlign</td>
<td>y轴标签文本对齐方向，可取 start center end</td>
<td>center</td>
<td></td>
</tr>
<tr>
<td>yLabelTextFill</td>
<td>y轴标签文字颜色，参考 <a href="#e2VEH">颜色说明</a></td>
<td>#545454</td>
<td>#545454</td>
</tr>
<tr>
<td>yLabelFontSize</td>
<td>y轴标签文字大小</td>
<td>14</td>
<td>12</td>
</tr>
<tr>
<td>yLabelFontWeight</td>
<td>y轴标签字重</td>
<td>bold</td>
<td>normal</td>
</tr>
<tr>
<td>yLabelOffset</td>
<td>y轴标签位置距坐标轴偏移量</td>
<td>20</td>
<td></td>
</tr>
<tr>
<td>yTickLineWidth</td>
<td>y轴刻度线宽</td>
<td>2</td>
<td>1</td>
</tr>
<tr>
<td>yTickLineStroke</td>
<td>y轴刻度颜色，参考 <a href="#e2VEH">颜色说明</a></td>
<td>#BFBFBF</td>
<td>#BFBFBF</td>
</tr>
<tr>
<td>yTickLineLength</td>
<td>y轴刻度线的长度，可以为负值（表示反方向渲染）</td>
<td>-4</td>
<td>4</td>
</tr>
<tr>
<td>yGridType</td>
<td>y轴网格的类型，line 表示线，polygon 表示矩形框</td>
<td>line</td>
<td>line</td>
</tr>
<tr>
<td>yGridLinColor</td>
<td>y轴网格线的颜色，参考 <a href="#e2VEH">颜色说明</a></td>
<td>#404040</td>
<td>#404040</td>
</tr>
<tr>
<td>yGridLineWidth</td>
<td>y轴网格线宽</td>
<td>2</td>
<td>1</td>
</tr>
<tr>
<td>yGridLineDash</td>
<td>y轴网格线的虚线配置，第一个参数描述虚线的实部占多少像素，第二个参数描述虚线的虚部占多少像素</td>
<td>3,3</td>
<td></td>
</tr>
<tr>
<td>yGridAlternateColor</td>
<td>当网格类型 type 为 polygon 时，为y轴网格设置交替的颜色，指定一个值则先渲染奇数层，两个值则交替渲染</td>
<td>#eeeeee</td>
<td></td>
</tr>
</tbody></table>
<h3 id="图例-1"><a href="#图例-1" class="headerlink" title="图例"></a>图例</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>showLegend</td>
<td>是否显示图例</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>legendPosition</td>
<td>设置图例的显示位置，可设置的值为12个：left-top,left-center,left-bottom,right-top,right-center,right-bottom,top-left,top-center,top-right,bottom-left,bottom-center,bottom-right也可使用bottom,top,left,right设置位置</td>
<td>right-center</td>
<td>bottom-center</td>
</tr>
<tr>
<td>legendLayout</td>
<td>用于设置各个图例项的排列方式，可设置值包括：vertical、horizontal，分别表示垂直和水平排布</td>
<td>vertical</td>
<td>horizontal</td>
</tr>
<tr>
<td>legendMarker</td>
<td>用于设置图例的 marker 样式，默认按照 图表 的类型显示，<a href="https://www.yuque.com/antv/g2-docs/api-geom#6b5269ad">详情见 </a></td>
<td>circle</td>
<td></td>
</tr>
<tr>
<td>legendTextFill</td>
<td>图例文本的颜色</td>
<td>#BFBFBF</td>
<td>#BFBFBF</td>
</tr>
<tr>
<td>legendFontSize</td>
<td>图例文本大小</td>
<td>14</td>
<td>12</td>
</tr>
<tr>
<td>legendOffsetX</td>
<td>图例 X 方向的偏移值，数值类型，数值单位为 ‘px’</td>
<td>2</td>
<td>0</td>
</tr>
<tr>
<td>legendOffsetY</td>
<td>图例 Y 方向的偏移值，数值类型，数值单位为 ‘px’</td>
<td>2</td>
<td>0</td>
</tr>
</tbody></table>
<h3 id="提示信息-1"><a href="#提示信息-1" class="headerlink" title="提示信息"></a>提示信息</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>showTooltips</td>
<td>是否显示提示信息</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>hideTooltipTitle</td>
<td>是否隐藏提示信息标题</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>tooltipItemTpl</td>
<td>提示信息内容模板，支持变量{name},{value}，柱状图、百分比堆叠图、饼图、环形图支持变量{percent}区间图、甘特图 支持变量 {start},{end}</td>
<td>{value}</td>
<td>{name}:{value}</td>
</tr>
<tr>
<td>tooltipCrosshairsType</td>
<td>提示信息的辅助线或者辅助框，rect 表示矩形框，x 表示水平辅助线，y 表示垂直辅助线，cross 表示十字辅助线</td>
<td>cross</td>
<td>y</td>
</tr>
</tbody></table>
<h3 id="图形文本"><a href="#图形文本" class="headerlink" title="图形文本"></a>图形文本</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>showLabel</td>
<td>是否显示字段对应的文本</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>labelOffset</td>
<td>label距当前图形偏移量，负数则标识渲染在图形内部</td>
<td>-40</td>
<td>20</td>
</tr>
<tr>
<td>labelTextFill</td>
<td>label文本颜色</td>
<td>#545454</td>
<td>#545454</td>
</tr>
<tr>
<td>labelFontSize</td>
<td>label文本大小</td>
<td>4</td>
<td>12</td>
</tr>
<tr>
<td>labelLineWidth</td>
<td>label线宽</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>labelPosition</td>
<td>当前label与当前图形的相对位置，可选参数为middle, top,bottom,left,right</td>
<td>middle</td>
<td>top</td>
</tr>
<tr>
<td>labelTpl</td>
<td>label文本模板，支持变量{name},{value}，百分比堆叠图、饼图、环形图支持变量{percent}</td>
<td>{value}个</td>
<td>{value}</td>
</tr>
</tbody></table>
<h3 id="辅助文本-1"><a href="#辅助文本-1" class="headerlink" title="辅助文本"></a>辅助文本</h3><p>只有仪表盘、环形图和漏斗支持以下配置。</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>guideTextTitle</td>
<td>辅助文案标题</td>
<td>数量</td>
<td></td>
</tr>
<tr>
<td>guideTextTitleFill</td>
<td>辅助文案标题颜色</td>
<td>#545454</td>
<td>#545454</td>
</tr>
<tr>
<td>guideTextTitleSize</td>
<td>辅助文案标题文本大小</td>
<td>12</td>
<td>14</td>
</tr>
<tr>
<td>guideTextContent</td>
<td>辅助文案内容</td>
<td>200台</td>
<td></td>
</tr>
<tr>
<td>guideTextContentFill</td>
<td>辅助文案标题颜色</td>
<td>#545454</td>
<td>#545454</td>
</tr>
<tr>
<td>guideTextContentSize</td>
<td>辅助文案标题文本大小</td>
<td>24</td>
<td>20</td>
</tr>
<tr>
<td>guideTextTitle</td>
<td>辅助文案标题</td>
<td>数量</td>
<td></td>
</tr>
<tr>
<td>guideTextFill</td>
<td>辅助文案颜色</td>
<td>#545454</td>
<td>#545454</td>
</tr>
<tr>
<td>guideTextSize</td>
<td>辅助文案文本大小</td>
<td>12</td>
<td>14</td>
</tr>
</tbody></table>
<h3 id="图形样式-1"><a href="#图形样式-1" class="headerlink" title="图形样式"></a>图形样式</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
<th>示例值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>lineWidth</td>
<td>线宽</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>lineShape</td>
<td>线条类型，支持line,smooth,dot,dash,spline</td>
<td>line</td>
<td></td>
</tr>
<tr>
<td>pointShape</td>
<td>折线图节点形状，circle, square, bowtie, diamond, hexagon, triangle，设置为none则不显示</td>
<td>circle</td>
<td></td>
</tr>
<tr>
<td>pointSize</td>
<td>折线图节点大小</td>
<td>4</td>
<td></td>
</tr>
<tr>
<td>columnType</td>
<td>柱状图类型，可取 normal，stacked（堆叠）</td>
<td>normal</td>
<td></td>
</tr>
<tr>
<td>transposeCoord</td>
<td>是否镜像旋转（柱状图可转换为条形图）</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>dodgMarginRatio</td>
<td>用于调整分组中各个柱子的间距</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>areaType</td>
<td>面积类型，可取 normal，stacked（堆叠）</td>
<td>normal</td>
<td></td>
</tr>
<tr>
<td>areaShape</td>
<td>面积形状，支持area,smooth,line,smoothLine</td>
<td>area</td>
<td></td>
</tr>
<tr>
<td>areaOpacity</td>
<td>面积透明度</td>
<td>0.5</td>
<td></td>
</tr>
<tr>
<td>stackedType</td>
<td>堆叠图类型，可取 area，cloumn</td>
<td>cloumn</td>
<td></td>
</tr>
<tr>
<td>showLine</td>
<td>是否显示折线</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>pieRadius</td>
<td>饼图半径，值范围为 0 至 1</td>
<td>0.75</td>
<td></td>
</tr>
<tr>
<td>pieInnerRadius</td>
<td>空心圆的半径，值范围为 0 至 1</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>pointOpacity</td>
<td>点的透明度</td>
<td>0.5</td>
<td>1</td>
</tr>
<tr>
<td>roseLineWidth</td>
<td>玫瑰间隔图线框</td>
<td>2</td>
<td>0</td>
</tr>
</tbody></table>
<h1 id="颜色说明-1"><a href="#颜色说明-1" class="headerlink" title="颜色说明"></a>颜色说明</h1><p>颜色支持以下几种格式：</p>
<p>16进制：#4169E1</p>
<p>rgb、rgba：rgb(65,105,225)、rgba(65,105,225,0.5)</p>
<p>渐变色：<a href="https://www.yuque.com/antv/g2-docs/api-graphic#y6x6le">请查看 Antv 官方说明</a></p>
<p>纹理：<a href="https://www.yuque.com/antv/g2-docs/api-graphic#9w3mxd">请查看 Antv 官方说明</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Axhub</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Toolbox for Windows之安装二三事</title>
    <url>/post/b76d5600.html</url>
    <content><![CDATA[<h3 id="安装所需的环境"><a href="#安装所需的环境" class="headerlink" title="安装所需的环境"></a>安装所需的环境</h3><p>1、Win7 及以上版本，Win10 以上可以安装 <a href="https://link.jianshu.com/?t=https://docs.docker.com/docker-for-windows/install/">Docker for Windows</a><br> 2、MacType 和 VirtualBox 冲突，导致无法启动虚拟机<br> 3、安装 VirtualBox 时选择 NDIS5 驱动器。根据官方的说法，从 Windows Vista 开始， VirtualBox 默认安装 NDIS6 驱动，但是可能会导致虚拟机从系统变慢到网络异常的一系列问题，所以如果不幸出现了问题，可以重装 Docker Toolbox，选择用 NDIS5 驱动安装 VirtualBox<br> <a href="https://link.jianshu.com/?t=https://docs.docker.com/toolbox/toolbox_install_windows/%23looking-for-troubleshooting-help">点击查看官方说法</a></p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>点击 Docker Quickstart Terminal</p>
<blockquote>
<p>有时点击可能无效，是因为之前有安装过 git 了，但是 git 的安装路径不对，点击<code>右键 - 属性 - 快捷方式</code> 修改 bash 的路径即可</p>
</blockquote>
<p><img src="/../images/DockerToolboxforWindows%E4%B9%8B%E5%AE%89%E8%A3%85%E4%BA%8C%E4%B8%89%E4%BA%8B/2381335-e52468f17ccb66bf.png" alt="img"></p>
<p>不出意外会需要更新 <a href="https://link.jianshu.com/?t=https://github.com/boot2docker/boot2docker/releases">boot2docker.iso</a> 文件，但是下载很慢，此时可以退出直接去 <code>github</code> 下载最新版的 <a href="https://link.jianshu.com/?t=https://github.com/boot2docker/boot2docker/releases">boot2docker.iso</a> 到 <code>C:\Users\Administrator\.docker\machine\cache</code>路径下</p>
<p>重新点击，启动成功</p>
<blockquote>
<p>此前电脑上装了 MacType，导致一直无法启动 VirtualBox 的虚拟机，这里再次提个醒。其实以前安装 Genymotion 的时候就遇到过 MacType 和 VirtualBox 冲突的情况，只是一直没有联系到一起</p>
</blockquote>
<p><img src="/../images/DockerToolboxforWindows%E4%B9%8B%E5%AE%89%E8%A3%85%E4%BA%8C%E4%B8%89%E4%BA%8B/2381335-9848860e09999627.png" alt="img"></p>
<p>创建虚拟机 default</p>
<p><img src="/../images/DockerToolboxforWindows%E4%B9%8B%E5%AE%89%E8%A3%85%E4%BA%8C%E4%B8%89%E4%BA%8B/2381335-9b9572c4ac43cc4e.png" alt="img"></p>
<p>鲸鱼出现说明启动成功了！</p>
<p>现在可以 Hello World 了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>
<p><img src="/../images/DockerToolboxforWindows%E4%B9%8B%E5%AE%89%E8%A3%85%E4%BA%8C%E4%B8%89%E4%BA%8B/2381335-c7f737c80adf52ac.png" alt="img"></p>
<p>Hello World</p>
<p>现在你有一个镜像 (image) 和一个容器(container)了</p>
<blockquote>
<p>镜像和容器，可以用类和实例类比，镜像是模版，容器是实例</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">docker images <span class="comment">// 查看所有镜像</span></span><br><span class="line">docker container ls <span class="comment">// 查看正在运行的容器，辛辛苦苦敲了这几个单词却没有显示容器怎么办？</span></span><br><span class="line">docker container ls -a <span class="comment">// 可以带上 -a 参数，列出所有的容器，此时可以看到刚才的 hello-world 容器了，因为它运行完就退出了</span></span><br><span class="line">docker rm -f container CONTAINER ID <span class="comment">// 删除容器</span></span><br><span class="line">docker rmi IMAGE ID <span class="comment">// 删除镜像</span></span><br></pre></td></tr></table></figure>
<h3 id="设置国内镜像源"><a href="#设置国内镜像源" class="headerlink" title="设置国内镜像源"></a>设置国内镜像源</h3><p>如果尝试拉取一个比较大的镜像，比如<code>nginx</code>，你会发现速度慢得让人怀疑人生，此时可以设置一下国内的镜像源，让下载速度起飞</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">docker-machine ssh <span class="literal">default</span> <span class="comment">// 先进入虚拟机，default 是默认的虚拟机名称</span></span><br><span class="line">sudo vi /<span class="keyword">var</span>/lib/boot2docker/profile <span class="comment">// 编辑这个文件，添加镜像源 --registry-mirror https://registry.docker-cn.com</span></span><br></pre></td></tr></table></figure>
<p><img src="/../images/DockerToolboxforWindows%E4%B9%8B%E5%AE%89%E8%A3%85%E4%BA%8C%E4%B8%89%E4%BA%8B/2381335-02bccbeb80092bc4.png" alt="img"></p>
<p>sudo vi /var/lib/boot2docker/profile</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/docker restart <span class="comment">// 重启 docker 进程</span></span><br><span class="line">exit <span class="comment">// 退出虚拟机</span></span><br><span class="line">docker info <span class="comment">// 看一下镜像源是否设置成功（是否有刚刚设置的 --registry-mirror 这一行）</span></span><br><span class="line">docker pull nginx <span class="comment">// 现在可以愉快地拉取`nginx`镜像了</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里有个问题，对于虚拟机中的配置的修改，在重启虚拟机之后（比如关机再开机）配置又被重置了，导致每次开机都要重新配置一遍，比如上面的镜像源配置。Github 上也有不少这方面的 issue <a href="https://link.jianshu.com/?t=https://github.com/docker/machine/issues/1718%23%23issuecomment-176653850">#1718 这个描述得比较清晰</a>，暂时的解决方案也很简单，第一次启动后修改启动脚本 <code>start.sh</code> 注释掉 <code>yes | &quot;$&#123;DOCKER_MACHINE&#125;&quot; regenerate-certs &quot;$&#123;VM&#125;&quot;</code> 这一行即可</p>
</blockquote>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="subst">$&#123;VM_STATUS&#125;</span>&quot;</span> != <span class="string">&quot;Running&quot;</span> ]; then</span><br><span class="line">  <span class="string">&quot;<span class="subst">$&#123;DOCKER_MACHINE&#125;</span>&quot;</span> start <span class="string">&quot;<span class="subst">$&#123;VM&#125;</span>&quot;</span></span><br><span class="line">  # yes | <span class="string">&quot;<span class="subst">$&#123;DOCKER_MACHINE&#125;</span>&quot;</span> regenerate-certs <span class="string">&quot;<span class="subst">$&#123;VM&#125;</span>&quot;</span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<h3 id="文件夹权限"><a href="#文件夹权限" class="headerlink" title="文件夹权限"></a>文件夹权限</h3><p>在 boot2docker 中，默认的用户名和密码是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user: docker pass: tcuser</span><br></pre></td></tr></table></figure>
<p>Toolbox 默认只能访问 <code>C:\Users</code> 这个文件夹下的内容，映射到虚拟机上就是 <code>/c/Users</code></p>
<p><img src="/../images/DockerToolboxforWindows%E4%B9%8B%E5%AE%89%E8%A3%85%E4%BA%8C%E4%B8%89%E4%BA%8B/2381335-8df6d1b4263d241c.png" alt="img"></p>
<blockquote>
<p>注意：<code>c</code> 是小写，<code>Users</code> 是大写开头</p>
</blockquote>
<p>如果你的项目在这个目录内，在添加数据卷（Volume）挂载本机目录时，可以使用相对路径， 比如这样</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">redis:</span><br><span class="line">  ...</span><br><span class="line">  volumes:</span><br><span class="line">    - ./<span class="keyword">data</span>:/<span class="keyword">data</span></span><br><span class="line">  ...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>如果你本机的项目放在其他目录，或者需要进入到其他目录的权限，需要添加该目录到虚拟机的共享文件夹</p>
<ol>
<li><p>打开 VirtualBox</p>
</li>
<li><p>选择虚拟机，点击设置，这里是 default</p>
</li>
<li><p>选择共享文件夹，添加目录，映射到虚拟机的对应路径（截图显示是映射到 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/Dockerfile</span><br></pre></td></tr></table></figure>
<p> 文件夹）</p>
<p><img src="/../images/DockerToolboxforWindows%E4%B9%8B%E5%AE%89%E8%A3%85%E4%BA%8C%E4%B8%89%E4%BA%8B/2381335-e7cd4526e6d754c9.png" alt="img"></p>
<p>添加共享文件夹</p>
</li>
<li><p>重启虚拟机</p>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">docker-machine restart <span class="keyword">default</span></span><br></pre></td></tr></table></figure>
<p>这样就可以愉快地写数据卷（Volume）了，比如这样：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="symbol">redis:</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="symbol">volumes:</span></span><br><span class="line">    - <span class="regexp">/Dockerfile/data</span><span class="symbol">:/data</span> <span class="comment">#这里就只能使用绝对路径了</span></span><br><span class="line">  ...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="Docker-开机自启动"><a href="#Docker-开机自启动" class="headerlink" title="Docker 开机自启动"></a>Docker 开机自启动</h3><p>将 <code>Docker Quickstart Terminal</code> 快捷方式拖到开始菜单『启动』文件夹下即可，这样 Docker 每次开机都会自行启动，相应的为了能让容器也重新启动（因为关机等原因容器停止运行了，但是并未删除，只需重新启动即可），可以加一条重启的命令：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="symbol">redis:</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="symbol">restart:</span> always <span class="comment"># 加一条重启的命令</span></span><br><span class="line">  <span class="symbol">volumes:</span></span><br><span class="line">    - <span class="regexp">/Dockerfile/data</span><span class="symbol">:/data</span> </span><br><span class="line">  ...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="卸载-Toolbox"><a href="#卸载-Toolbox" class="headerlink" title="卸载 Toolbox"></a>卸载 Toolbox</h3><p>进入控制面板，先卸载 Toolbox，再卸载 VirtualBox，<code>C:\Users\Administor\.docker</code> 需要手动删除。</p>
<h3 id="Toolbox修改虚拟机IP"><a href="#Toolbox修改虚拟机IP" class="headerlink" title="Toolbox修改虚拟机IP"></a>Toolbox修改虚拟机IP</h3><p>changeip.bat</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">setlocal enabledelayedexpansion</span><br><span class="line">set machine=%1</span><br><span class="line">if &quot;%machine%&quot; == &quot;&quot; (</span><br><span class="line">    echo dmvbf expects a machine name</span><br><span class="line">    exit /b 1</span><br><span class="line">)</span><br><span class="line">set ipx=%2</span><br><span class="line">if &quot;%ipx%&quot; == &quot;&quot; (</span><br><span class="line">    echo dmvbf x missing ^(for 192.168.x.y^)</span><br><span class="line">    exit /b 2</span><br><span class="line">)</span><br><span class="line">set ipy=%3</span><br><span class="line">if &quot;%ipy%&quot; == &quot;&quot; (</span><br><span class="line">    echo dmvbf y missing ^(for 192.168.x.y^)</span><br><span class="line">    exit /b 3</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">echo kill $(more /var/run/udhcpc.eth0.pid) ^| docker-machine ssh %machine% sudo tee /var/lib/boot2docker/bootsync.sh ^&gt;NUL</span><br><span class="line">echo ifconfig eth0 192.168.%ipx%.%ipy% netmask 255.255.255.0 broadcast 192.168.%ipx%.255 up ^| docker-machine ssh %machine% sudo tee -a /var/lib/boot2docker/bootsync.sh ^&gt;NUL</span><br><span class="line">echo route add default gw ^&lt;gateway ip address here^&gt; ^| docker-machine ssh %machine% sudo tee -a /var/lib/boot2docker/bootsync.sh ^&gt;NUL</span><br><span class="line"></span><br><span class="line">docker-machine ssh %machine% &quot;sudo cat /var/run/udhcpc.eth0.pid | xargs sudo kill -9&quot;</span><br><span class="line"></span><br><span class="line">docker-machine ssh %machine% &quot;sudo ifconfig eth0 192.168.%ipx%.%ipy% netmask 255.255.255.0 broadcast 192.168.%ipx%.255 up&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">changeip.bat &lt;machine-name&gt; 99 100</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-machine regenerate-certs &lt;machine-name&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Armbian搭建Git服务器</title>
    <url>/post/af5306f2.html</url>
    <content><![CDATA[<p>之前入手的N1盒子一直当电视盒子在用，但是因为不能看奈飞，所以最近又换了新的电视盒子，N1也就闲置下来了。<br>趁清明节给它刷入了armbian，搭了个git server，这里记录一下搭建的过程。</p>
<h5 id="新建一个git用户"><a href="#新建一个git用户" class="headerlink" title="新建一个git用户"></a>新建一个git用户</h5><p>新建专门的git用户，方便权限管理。</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo adduser git</span></span><br></pre></td></tr></table></figure>
<h5 id="禁用git用户shell"><a href="#禁用git用户shell" class="headerlink" title="禁用git用户shell"></a>禁用git用户shell</h5><p>git用户只是单纯的git server用户，禁止其shell权限。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>passwd</span><br></pre></td></tr></table></figure>
<p>将git用户的shell路径替换为：<code>/usr/bin/git-shell</code></p>
<h5 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install git</span><br></pre></td></tr></table></figure>
<h5 id="创建git仓库"><a href="#创建git仓库" class="headerlink" title="创建git仓库"></a>创建git仓库</h5><p>在根目录创建一个gitServer文件夹做git仓库，进入文件夹内做git初始化，注意要加<code>--bare</code>。最后将该仓库owner设为git。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> /</span><br><span class="line"><span class="built_in">mkdir</span> gitServer</span><br><span class="line"><span class="keyword">cd</span> gitServer</span><br><span class="line">sudo git init --bare yourName.git</span><br><span class="line">sudo chown -R gi<span class="variable">t:git</span> yourName.git</span><br></pre></td></tr></table></figure>
<h5 id="克隆git仓库"><a href="#克隆git仓库" class="headerlink" title="克隆git仓库"></a>克隆git仓库</h5><p>克隆到本地。</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">clone <span class="symbol">ssh:</span>//git<span class="variable">@server</span><span class="symbol">:/gitServer/yourName</span>.git</span><br></pre></td></tr></table></figure>
<h5 id="添加密钥"><a href="#添加密钥" class="headerlink" title="添加密钥"></a>添加密钥</h5><p>如果不想每次都输密码的话，可以将自己的公钥保存到git server上。先在本机上执行<code>ssh-keygen</code>，会发现生成了<code>id_rsa.pub</code>,这就是公钥。执行以下cmd将公钥复制到server。</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/home/git</span></span><br><span class="line">mkdir <span class="string">.ssh</span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">.ssh</span></span><br><span class="line">touch authorized_keys</span><br><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Git服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>docker命令</title>
    <url>/post/a9214619.html</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install  docker-ce-18.09.9 docker-ce-cli-18.09.9 containerd.io</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#进入DOCKER容器</span><br><span class="line">docker exec -it d497dcfd6062  /bin/bash(这里也可以直接用 bash)或者下面都行</span><br><span class="line">docker exec -it baota /bin/bash</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#启动 FRPS服务器</span><br><span class="line">docker run -itd --restart=always --name=&quot;ssfrps&quot; --net=host  alpine</span><br><span class="line">docker run -itd -p 7777:7777 -p 3399:3399 --name frps frps nohup /home/frp/frps -c /home/frp/frps.ini &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建自定义网络</span><br><span class="line">docker network create --subnet=172.18.0.0/16 webserver</span><br><span class="line"></span><br><span class="line">docker network ls</span><br><span class="line">#查询IP</span><br><span class="line">docker inspect #容器name或者id |grep IPAddress</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动nginx服务器</span><br><span class="line">docker run -itd  --restart=always --name nginx --net webserver --ip 172.18.0.2 -p 80:80 -p 443:443  nginx:latest</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动webserver服务器</span><br><span class="line">docker run -itd  --restart=always --name webserver --net webserver --ip 172.18.0.3 -p 80:80 -p 443:443 -v /www:/www --privileged=true  webserver:20220116 </span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动mysql</span><br><span class="line">docker run -itd  --restart=always --name mysql --net webserver --ip 172.18.0.8 -p 3306:3306  -v /mysqldata:/var/lib/mysql --privileged=true mysql:20220116</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动宝塔服务</span><br><span class="line">docker run -itd --name btserver --net webserver --ip 172.18.0.2 --restart=always -p 20:20 -p 21:21 -p 81:80 -p 444:443 -p 888:888 -p 8888:8888  --privileged=true btserver:latest /usr/sbin/init</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#启动git服务</span><br><span class="line">docker run -itd --restart=always --name gitserver --net webserver --ip 172.18.0.5 -p 23:22 -v /www:/www gitserver:20211217 </span><br><span class="line"></span><br><span class="line">/usr/sbin/sshd -D &amp;</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#启动FRPC服务</span><br><span class="line">docker run -itd  --restart=always --name frpc  --net webserver --ip 172.18.0.4 frpc:20211217 /sbin/init nohup /home/frpc -c /home/frpc.ini &gt; /dev/null 2&gt;&amp;1 &amp; </span><br><span class="line"></span><br><span class="line">docker run -itd  --restart=always --name frpc --link btserver:btserver  frpc:gsbtfrpc /usr/sbin/init nohup /home/frpc -c /home/frpc.ini &gt; /dev/null 2&gt;&amp;1 &amp; </span><br><span class="line"></span><br><span class="line">#启动命令</span><br><span class="line">nohup ./frps -c ./frps.ini &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">nohup /usr/bin/ss-server -s 47.243.195.230 -p 9030 -k a@111111 -m aes-256-gcm -d 8.8.8.8 -u &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 虚拟机重启后服务</span><br><span class="line">mkdir /sys/fs/cgroup/systemd</span><br><span class="line">mount -t cgroup -o none,name=systemd cgroup /sys/fs/cgroup/systemd</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动kuboard</span><br><span class="line">docker run -d --restart=unless-stopped --name=kuboard -p 1080:80/tcp -p 10081:10081/udp -p 10081:10081/tcp -e KUBOARD_ENDPOINT=&quot;http://192.168.99.100&quot; -e KUBOARD_AGENT_SERVER_UDP_PORT=&quot;10081&quot; -e KUBOARD_AGENT_SERVER_TCP_PORT=&quot;10081&quot; swr.cn-east-2.myhuaweicloud.com/kuboard/kuboard:v3.3.0.3</span><br></pre></td></tr></table></figure>




<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#启动 SS 服务</span><br><span class="line">docker run -e PASSWORD=a@111111 -p 9030:8388 -p 9030:8388/udp -d shadowsocks/shadowsocks-libev</span><br></pre></td></tr></table></figure>


<p><strong>docker 普通命令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 1 docker ps                 # 仅列出当前运行的容器</span><br><span class="line"> 2 docker ps -l              # 列出最新创建得容器</span><br><span class="line"> 3 docker ps -a              # 列出素有容器(包括 未运行的)</span><br><span class="line"> 4 docker inspect web4       # 列出指定容器的详细信息</span><br><span class="line"> 5 </span><br><span class="line"> 6 #### 持久化容器</span><br><span class="line"> 7 </span><br><span class="line"> 8 docker exec -it web4 bash                     # 进入容器web4中</span><br><span class="line"> 9 touch 1.txt 2.txt                             # 对容器进行修改</span><br><span class="line">10 docker commit web4 nginx:web4                 # 将修改后的web4容器提交为一个新镜像 nginx:web4</span><br><span class="line">11 docker images                                 # 可以看到 多了一个 TAG标记为 web4 的镜像</span><br><span class="line">12 docker run -d --name web4-1 nginx:web4        # 使用刚刚提交的镜像web4创建一个容器web4-1</span><br><span class="line">13 docker exec -it web4-1 bash                   # 进入web4-1的bash环境</span><br><span class="line">14 </span><br><span class="line">15 #### 从宿主机复制文件到docker容器</span><br><span class="line">16 docker cp nginx.tar web4-1:/home              # 将宿主机nginx.tar文件拷贝到容器web4-1的/home目录中</span><br><span class="line">17 docker exec -it web4-1 ls /home               # 在容器web4-1中执行 &quot;ls /home&quot; 命令</span><br><span class="line">18 </span><br><span class="line">19 #### 容器常用查询命令</span><br><span class="line">20 docker logs web4-1                            # 查看web4-1中控制台日志</span><br><span class="line">21 docker port 55f870061ed9                      # 查看指定容器端口映射</span><br><span class="line">22 docker top 00f7ddc96622                       # 查看容器中有哪些进程</span><br><span class="line">23 docker stats 00f7ddc96622                     # 查看容器资源使用情况</span><br><span class="line">24 </span><br><span class="line">25 ##### 启动、停止、删除 容器</span><br><span class="line">26 docker ps -a                                  # 列出素有容器(包括 未运行的)</span><br><span class="line">27 docker start web                              # 启动容器web　　　　　　</span><br><span class="line">28 docker stop web                               # 停止容器web</span><br><span class="line">29 docker rm web                                 # 删除容器web</span><br></pre></td></tr></table></figure>
<p><strong>2. 镜像常用命令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 [root@linux-node4 diff]# docker help                           # 查看docker帮助</span><br><span class="line">2 [root@linux-node4 diff]# docker image --help                   # 查看 docker中 镜像相关帮助</span><br><span class="line">3 [root@linux-node4 diff]# docker image ls                       # 查看当前所有镜像</span><br><span class="line">4 [root@linux-node4 diff]# docker image inspect nginx            # 查看指定镜像（nginx镜像）详细信息</span><br><span class="line">5 [root@linux-node4 diff]# docker pull nginx:1.14                # 下载指定版本镜像 nginx</span><br><span class="line">6 [root@linux-node4 diff]# docker image rm nginx:1.14            # 删除nginx 1.14版本</span><br><span class="line">7 [root@linux-node4 diff]# docker image save nginx &gt; nginx.tar   # 导出niginx镜像</span><br></pre></td></tr></table></figure>
<p>Docker run 常用参数详解<br>命令格式：docker run [OPTIONS] IMAGE [COMMAND] [ARG…]<br>Usage: Run a command in a new container<br>中文意思为：通过run命令创建一个新的容器（container）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常用选项说明</span><br><span class="line">-d, --detach=false， 指定容器运行于前台还是后台，默认为false</span><br><span class="line">-i, --interactive=false， 打开STDIN，用于控制台交互</span><br><span class="line">-t, --tty=false， 分配tty设备，该可以支持终端登录，默认为false</span><br><span class="line">-u, --user=&quot;&quot;， 指定容器的用户</span><br><span class="line">-a, --attach=[]， 登录容器（必须是以docker run -d启动的容器）</span><br><span class="line">-w, --workdir=&quot;&quot;， 指定容器的工作目录</span><br><span class="line">-c, --cpu-shares=0， 设置容器CPU权重，在CPU共享场景使用</span><br><span class="line">-e, --env=[]， 指定环境变量，容器中可以使用该环境变量</span><br><span class="line">-m, --memory=&quot;&quot;， 指定容器的内存上限</span><br><span class="line">-P, --publish-all=false， 指定容器暴露的端口</span><br><span class="line">-p, --publish=[]， 指定容器暴露的端口</span><br><span class="line">-h, --hostname=&quot;&quot;， 指定容器的主机名</span><br><span class="line">-v, --volume=[]， 给容器挂载存储卷，挂载到容器的某个目录</span><br><span class="line">--volumes-from=[]， 给容器挂载其他容器上的卷，挂载到容器的某个目录</span><br><span class="line">--cap-add=[]， 添加权限，权限清单详见：http://linux.die.net/man/7/capabilities</span><br><span class="line">--cap-drop=[]， 删除权限，权限清单详见：http://linux.die.net/man/7/capabilities</span><br><span class="line">--cidfile=&quot;&quot;， 运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法</span><br><span class="line">--cpuset=&quot;&quot;， 设置容器可以使用哪些CPU，此参数可以用来容器独占CPU</span><br><span class="line">--device=[]， 添加主机设备给容器，相当于设备直通</span><br><span class="line">--dns=[]， 指定容器的dns服务器</span><br><span class="line">--dns-search=[]， 指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件</span><br><span class="line">--entrypoint=&quot;&quot;， 覆盖image的入口点</span><br><span class="line">--env-file=[]， 指定环境变量文件，文件格式为每行一个环境变量</span><br><span class="line">--expose=[]， 指定容器暴露的端口，即修改镜像的暴露端口</span><br><span class="line">--link=[]， 指定容器间的关联，使用其他容器的IP、env等信息</span><br><span class="line">--lxc-conf=[]， 指定容器的配置文件，只有在指定--exec-driver=lxc时使用</span><br><span class="line">--name=&quot;&quot;， 指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字</span><br><span class="line">--net=&quot;bridge&quot;， 容器网络设置:</span><br><span class="line">bridge 使用docker daemon指定的网桥</span><br><span class="line">host //容器使用主机的网络</span><br><span class="line">container:NAME_or_ID &gt;//使用其他容器的网路，共享IP和PORT等网络资源</span><br><span class="line">none 容器使用自己的网络（类似--net=bridge），但是不进行配置</span><br><span class="line">--privileged=false， 指定容器是否为特权容器，特权容器拥有所有的capabilities</span><br><span class="line">--restart=&quot;no&quot;， 指定容器停止后的重启策略:</span><br><span class="line">no：容器退出时不重启</span><br><span class="line">on-failure：容器故障退出（返回值非零）时重启</span><br><span class="line">always：容器退出时总是重启</span><br><span class="line">--rm=false， 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)</span><br><span class="line">--sig-proxy=true， 设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理</span><br><span class="line">示例</span><br><span class="line">运行一个在后台执行的容器，同时，还能用控制台管理：docker run -i -t -d ubuntu:latest</span><br><span class="line">运行一个带命令在后台不断执行的容器，不直接展示容器内部信息：docker run -d ubuntu:latest ping www.docker.com</span><br><span class="line">运行一个在后台不断执行的容器，同时带有命令，程序被终止后还能重启继续跑，还能用控制台管理，docker run -d --restart=always ubuntu:latest ping www.docker.com</span><br><span class="line">为容器指定一个名字，docker run -d --name=ubuntu_server ubuntu:latest</span><br><span class="line">容器暴露80端口，并指定宿主机80端口与其通信(: 之前是宿主机端口，之后是容器需暴露的端口)，docker run -d --name=ubuntu_server -p 80:80 ubuntu:latest</span><br><span class="line">指定容器内目录与宿主机目录共享(: 之前是宿主机文件夹，之后是容器需共享的文件夹)，docker run -d --name=ubuntu_server -v /etc/www:/var/www ubuntu:latest</span><br></pre></td></tr></table></figure>
<p><strong>3. 运行容器常用命令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@linux-node4 ]# docker run --help                              # 查看创建容器帮助</span><br><span class="line">[root@linux-node4 ]# docker run -it centos                          # 创建centos镜像并进入终端</span><br><span class="line">[root@linux-node4 ]# docker run -d nginx                            # 后台启动nginx容器</span><br><span class="line">[root@linux-node4 ]# docker stop 6bb09dce461f                       # 关闭一个容器</span><br><span class="line">[root@linux-node4 ]# docker ps -l                                         # 查看最近运行的容器</span><br><span class="line">[root@linux-node4 ]# docker run -itd centos                         # 启用一个伪终端守护centos容器</span><br><span class="line">[root@linux-node4 ]# docker container run -d --name web3 -e test=123456 -p 8800:80 -h webhostname --restart always nginx</span><br><span class="line">-d                   # 后台启动nginx容器</span><br><span class="line">--name web3          # 自定义容器名字(默认会是一段随机字符串)</span><br><span class="line">-e test=123456       # 启动容器添加变量 test=123456 (echo $test)</span><br><span class="line">-p 8800:80           # 宿主机的8800端口映射到docker容器的80端口中</span><br><span class="line">-h webhostname       # docker容器主机名 (a300f394af88)</span><br><span class="line">--restart always     # 宿主机重启自动拉起这个docker容器</span><br><span class="line">nginx                # 使用这个nginx镜像启动容器</span><br><span class="line">注：http://192.168.56.12:8800/     访问这个docker  nginx</span><br><span class="line">[root@linux-node4 ]# docker logs web                                 # 查看上面启动的web容器的日志</span><br><span class="line">[root@linux-node4 ]# docker exec -it web bash                        # 进入容器web</span><br></pre></td></tr></table></figure>




<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 1 [root@linux-node1 /]# docker run -itd nginx          # 在后台启动一个docker容器</span><br><span class="line"> 2 [root@linux-node1 /]# docker inspect 5a3ad030a621    # 查看docker运行容器的详细信息</span><br><span class="line"> 3 [root@linux-node1 /]# curl http://172.17.0.2         # </span><br><span class="line"> 4 [root@linux-node1 /]# docker run -itd --name=web2 -p 192.168.56.11:8800:80 nginx</span><br><span class="line"> 5 使用--itd参数（指定后台启动这个容器），--name=web2(指定这个web容器的名字叫web2) </span><br><span class="line"> 6 </span><br><span class="line"> 7         </span><br><span class="line"> 8 -d:   后台运行容器，并返回容器ID；</span><br><span class="line"> 9 -i:   以交互模式运行容器，通常与 -t 同时使用；</span><br><span class="line">10 -t:   为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br><span class="line">11 -P:   随机端口映射，容器内部端口随机映射到主机的高端口</span><br><span class="line">12 -p:   指定端口映射，格式为：主机(宿主)端口:容器端口</span><br><span class="line">13 --name=&quot;nginx-lb&quot;:   为容器指定一个名称</span><br><span class="line">14 --dns 8.8.8.8:   指定容器使用的DNS服务器，默认和宿主一致；</span><br><span class="line">15 [root@linux-node1 /]# docker exec -it c9b7a480ee68 bash    # 进入docker环境</span><br></pre></td></tr></table></figure>
<p> <strong><em>停止运行容器，删除运行容器，删除镜像</em></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 停止容器运行(CONTAINER ID)</span><br><span class="line">docker stop 容器ID </span><br><span class="line"></span><br><span class="line"># 删除 容器(CONTAINER ID)</span><br><span class="line">docker rm 容器ID</span><br><span class="line"></span><br><span class="line"># 删除 镜像(IMAGE ID)</span><br><span class="line">docker images 镜像ID</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Dubbo环境搭建-管理控制台dubbo-admin实现服务监控</title>
    <url>/post/27fc2280.html</url>
    <content><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>Dubbo环境搭建-ZooKeeper注册中心：</p>
<p><a href="https://blog.csdn.net/BADAO_LIUMANG_QIZHI/article/details/103555470">https://blog.csdn.net/BADAO_LIUMANG_QIZHI/article/details/103555470</a></p>
<p>在上面搭建好ZooKeeper注册中心后，搭建管理控制台实现服务监控。</p>
<p>注：</p>
<p>博客：<br><a href="https://blog.csdn.net/badao_liumang_qizhi">https://blog.csdn.net/badao_liumang_qizhi</a><br>关注公众号<br>霸道的程序猿<br>获取编程相关电子书、教程推送与免费下载。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>进入Dubbo官网，点击GIthub</p>
<p><a href="http://dubbo.apache.org/zh-cn/">http://dubbo.apache.org/zh-cn/</a></p>
<p><img src="/../images/Dubbo%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%AE%A1%E7%90%86%E6%8E%A7%E5%88%B6%E5%8F%B0dubboadmin%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/1328191-20191219225907506-169614100.jpg" alt="img"></p>
<p>进入到Github页面后，一直往下找到dubbo-admin/dubbo-monitor</p>
<p><img src="/../images/Dubbo%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%AE%A1%E7%90%86%E6%8E%A7%E5%88%B6%E5%8F%B0dubboadmin%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/1328191-20191219225911795-1160310383.jpg" alt="img"></p>
<p>在此页面会看到dubbo-admin-server,但是没有dubbo-admin,这是因为此时的分支是develop,将分支切换为master</p>
<p><img src="/../images/Dubbo%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%AE%A1%E7%90%86%E6%8E%A7%E5%88%B6%E5%8F%B0dubboadmin%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/1328191-20191219225921067-845154369.jpg" alt="img"></p>
<p>此时页面地址为：</p>
<p><a href="https://github.com/apache/dubbo-admin/tree/master">https://github.com/apache/dubbo-admin/tree/master</a></p>
<p>在此页面可以看见其官方说明</p>
<p><img src="/../images/Dubbo%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%AE%A1%E7%90%86%E6%8E%A7%E5%88%B6%E5%8F%B0dubboadmin%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/1328191-20191219225925396-151057438.jpg" alt="img"></p>
<p>下载后找到dubbo-admin-server/src/main/resources/application.properties</p>
<p>将要监控的Zookpeeper注册中心的地址修改，这里是本机。</p>
<p><img src="/../images/Dubbo%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%AE%A1%E7%90%86%E6%8E%A7%E5%88%B6%E5%8F%B0dubboadmin%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/1328191-20191219225933124-1429542383.jpg" alt="img"></p>
<p>然后回到dubbo-admin目录下，在此处打开命令行窗口，使用maven进行打包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure>
<p><img src="/../images/Dubbo%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%AE%A1%E7%90%86%E6%8E%A7%E5%88%B6%E5%8F%B0dubboadmin%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/1328191-20191219225943163-143123458.jpg" alt="img"></p>
<p>出现Build Success 则就打包成功</p>
<p><img src="/../images/Dubbo%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%AE%A1%E7%90%86%E6%8E%A7%E5%88%B6%E5%8F%B0dubboadmin%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/1328191-20191219225948594-1998646016.jpg" alt="img"></p>
<p>此时在目录下会生成target目录，在target目录下会有一个jar包</p>
<p>在运行jar包程序前将上面博客所讲的ZooKeeper的服务端与客户端运行</p>
<p>然后在target目录下打开命令行运行jar包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar dubbo-admin-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>
<p><img src="/../images/Dubbo%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%AE%A1%E7%90%86%E6%8E%A7%E5%88%B6%E5%8F%B0dubboadmin%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/1328191-20191219225957350-490437057.jpg" alt="img"></p>
<p>此时打开浏览器输入：</p>
<p><a href="http://localhost:7001/">http://localhost:7001/</a></p>
<p>默认是7001端口，会提示输入账户密码，默认都是root</p>
<p><img src="/../images/Dubbo%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%AE%A1%E7%90%86%E6%8E%A7%E5%88%B6%E5%8F%B0dubboadmin%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/1328191-20191219230001093-1535583790.jpg" alt="img"></p>
<p>点击登录</p>
<p><img src="/../images/Dubbo%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%AE%A1%E7%90%86%E6%8E%A7%E5%88%B6%E5%8F%B0dubboadmin%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/1328191-20191219230004259-866507400.jpg" alt="img"></p>
<p>博客园： <a href="https://www.cnblogs.com/badaoliumangqizhi/">https://www.cnblogs.com/badaoliumangqizhi/</a> 关注公众号 霸道的程序猿 获取编程相关电子书、教程推送与免费下载。</p>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,Dubbo,ZooKeeper,dubboadmin</tag>
      </tags>
  </entry>
  <entry>
    <title>DockerFiles_alpine</title>
    <url>/post/9693aef8.html</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t nginx_alpine:v1 .</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">###alpine-bash</span><br><span class="line">from alpine:latest</span><br><span class="line"></span><br><span class="line">MAINTAINER RinySaint aichn.cn</span><br><span class="line"></span><br><span class="line">RUN alpine_version=`cat /etc/issue | head -1 | awk &#x27;&#123;print $5&#125;&#x27;` \</span><br><span class="line">    &amp;&amp; echo &quot;https://mirrors.aliyun.com/alpine/v$&#123;alpine_version&#125;/main/&quot; &gt; /etc/apk/repositories   \</span><br><span class="line">    &amp;&amp; apk update &amp;&amp; apk upgrade &amp;&amp; apk add --no-cache bash bash-doc bash-completion \</span><br><span class="line">    &amp;&amp; rm -rf /var/cache/apk/*</span><br><span class="line"></span><br><span class="line">CMD [&quot;/bin/bash&quot;]</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">###alpine-sshd (arm安装tzdata 必须3.12)</span><br><span class="line">FROM alpine:latest</span><br><span class="line"></span><br><span class="line">MAINTAINER RinySaint aichn.cn</span><br><span class="line"></span><br><span class="line">RUN sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#x27; /etc/apk/repositories \ </span><br><span class="line">&amp;&amp; apk update \ </span><br><span class="line">&amp;&amp; apk add --no-cache openssh tzdata \ </span><br><span class="line">&amp;&amp; cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \ </span><br><span class="line">&amp;&amp; sed -i &quot;s/#PermitRootLogin.*/PermitRootLogin yes/g&quot; /etc/ssh/sshd_config \ </span><br><span class="line">&amp;&amp; ssh-keygen -t dsa -P &quot;&quot; -f /etc/ssh/ssh_host_dsa_key \ </span><br><span class="line">&amp;&amp; ssh-keygen -t rsa -P &quot;&quot; -f /etc/ssh/ssh_host_rsa_key \ </span><br><span class="line">&amp;&amp; ssh-keygen -t ecdsa -P &quot;&quot; -f /etc/ssh/ssh_host_ecdsa_key \ </span><br><span class="line">&amp;&amp; ssh-keygen -t ed25519 -P &quot;&quot; -f /etc/ssh/ssh_host_ed25519_key \ </span><br><span class="line">&amp;&amp; echo &quot;root:root&quot; | chpasswd </span><br><span class="line"></span><br><span class="line">EXPOSE 22 </span><br><span class="line"></span><br><span class="line">CMD [&quot;/usr/sbin/sshd&quot;, &quot;-D&quot;]</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">###alpine-nginx</span><br><span class="line">FROM alpine:latest</span><br><span class="line">maintainer RinySaint aichn.cn</span><br><span class="line">COPY repositories /etc/apk/repositories</span><br><span class="line">RUN apk update &amp;&amp; apk add iotop gcc libgcc libc-dev libcurl libc-utils pcre-dev zlib-dev libnfs make pcre pcre2 zip unzip net-tools pstree wget libevent libevent-dev iproute2 </span><br><span class="line"></span><br><span class="line">ADD nginx-1.16.1.tar.gz /opt/ </span><br><span class="line">RUN cd /opt/nginx-1.16.1 &amp;&amp; ./configure --prefix=/apps/nginx &amp;&amp; make &amp;&amp; make install &amp;&amp; ln -sv /apps/nginx/sbin/nginx /usr/bin/ </span><br><span class="line"></span><br><span class="line">RUN addgroup -g 2019 -S nginx &amp;&amp; adduser -s /sbin/nologin -S -D -u 2019 -G nginx nginx </span><br><span class="line"></span><br><span class="line">COPY nginx.conf /apps/nginx/conf/nginx.conf </span><br><span class="line">ADD linux37.tar.gz /data/nginx/html </span><br><span class="line"></span><br><span class="line">RUN chown nginx.nginx /data/nginx/ /apps/nginx/ -R </span><br><span class="line"></span><br><span class="line">EXPOSE 80 443 </span><br><span class="line">CMD [&quot;nginx&quot;]</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### alpine-sshd-git(arm安装tzdata 必须3.12)</span><br><span class="line"></span><br><span class="line">FROM alpine:3.12</span><br><span class="line"></span><br><span class="line">MAINTAINER RinySaint aichn.cn</span><br><span class="line"></span><br><span class="line">RUN sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g&#x27; /etc/apk/repositories</span><br><span class="line"></span><br><span class="line">RUN apk update &amp;&amp; apk add git &amp;&amp; apk add openssh</span><br><span class="line">RUN sed -i &quot;s/#PermitRootLogin.*/PermitRootLogin yes/g&quot; /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">RUN mkdir -p ~/.ssh &amp;&amp; chmod 700 ~/.ssh &amp;&amp; \</span><br><span class="line">	ssh-keygen -A &amp;&amp; \</span><br><span class="line">    touch ~/.ssh/authorized_keys &amp;&amp; chmod 600 ~/.ssh/authorized_keys &amp;&amp; \</span><br><span class="line">    echo &quot;root:root&quot; |chpasswd</span><br><span class="line"></span><br><span class="line">RUN apk add tzdata &amp;&amp; cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo &#x27;Asia/Shanghai&#x27; &gt; /etc/timezone &amp;&amp; \</span><br><span class="line">    apk del tzdata</span><br><span class="line"></span><br><span class="line">WORKDIR /www</span><br><span class="line">VOLUME [&quot;/www&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 22</span><br><span class="line"></span><br><span class="line">CMD [&quot;/usr/sbin/sshd&quot;, &quot;-D&quot;]</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### alpine-frpc</span><br><span class="line">FROM alpine:latest</span><br><span class="line"></span><br><span class="line">MAINTAINER RinySaint aichn.cn</span><br><span class="line"></span><br><span class="line">WORKDIR /</span><br><span class="line">ENV FRP_VERSION 0.27.0</span><br><span class="line"></span><br><span class="line">RUN set -x &amp;&amp; \</span><br><span class="line">    wget --no-check-certificate https://download.fastgit.org/fatedier/frp/releases/download/v$&#123;FRP_VERSION&#125;/frp_$&#123;FRP_VERSION&#125;_linux_amd64.tar.gz &amp;&amp; \ </span><br><span class="line">    tar xzf frp_$&#123;FRP_VERSION&#125;_linux_amd64.tar.gz &amp;&amp; \</span><br><span class="line">    cd frp_$&#123;FRP_VERSION&#125;_linux_amd64 &amp;&amp; \</span><br><span class="line">    mkdir -p /home &amp;&amp; \</span><br><span class="line">    mv frpc /home &amp;&amp; \</span><br><span class="line">    mv frpc.ini /home/frpc.ini &amp;&amp; \</span><br><span class="line">    cd / &amp;&amp; \</span><br><span class="line">    rm -rf *.tar.gz &amp;&amp; \</span><br><span class="line">    rm -rf frp_$&#123;FRP_VERSION&#125;_linux_amd64</span><br><span class="line"></span><br><span class="line">WORKDIR /home</span><br><span class="line"></span><br><span class="line">CMD [&quot;/home/frpc&quot;, &quot;-c&quot;, &quot;/home/frpc.ini&quot;]</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">###nginx-php7-sshd-git-frpc-alpine</span><br><span class="line">FROM alpine:latest</span><br><span class="line"></span><br><span class="line">MAINTAINER RinySaint aichn.cn</span><br><span class="line"></span><br><span class="line">ENV TIMEZONE            Asia/Shanghai</span><br><span class="line">ENV PHP_MEMORY_LIMIT    512M</span><br><span class="line">ENV MAX_UPLOAD          50M</span><br><span class="line">ENV PHP_MAX_FILE_UPLOAD 200</span><br><span class="line">ENV PHP_MAX_POST        100M</span><br><span class="line"></span><br><span class="line">ADD [&quot;frpc&quot;,&quot;frpc.ini&quot;,&quot;frpcwatch.sh&quot;, &quot;start.sh&quot;, &quot;/home/&quot;] </span><br><span class="line"></span><br><span class="line">RUN sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g&#x27; /etc/apk/repositories &amp;&amp; \</span><br><span class="line">    apk update &amp;&amp; apk add git &amp;&amp; apk add openssh  &amp;&amp; \</span><br><span class="line">    sed -i &quot;s/#PermitRootLogin.*/PermitRootLogin yes/g&quot; /etc/ssh/sshd_config &amp;&amp; \</span><br><span class="line">    sed -i &quot;s/#Port.*/Port 22/g&quot; /etc/ssh/sshd_config &amp;&amp; \</span><br><span class="line">    mkdir -p ~/.ssh &amp;&amp; chmod 700 ~/.ssh &amp;&amp; \</span><br><span class="line">	ssh-keygen -A &amp;&amp; \</span><br><span class="line">    touch ~/.ssh/authorized_keys &amp;&amp; chmod 600 ~/.ssh/authorized_keys &amp;&amp; \</span><br><span class="line">    echo &quot;root:a111111&quot; |chpasswd &amp;&amp; \</span><br><span class="line">    apk add tzdata &amp;&amp; cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo &#x27;Asia/Shanghai&#x27; &gt; /etc/timezone &amp;&amp; \</span><br><span class="line">    apk del tzdata &amp;&amp; \</span><br><span class="line">    chmod +x /home/frpc &amp;&amp; chmod +x /home/frpcwatch.sh &amp;&amp; chmod +x /home/start.sh &amp;&amp; \</span><br><span class="line">    apk add nginx &amp;&amp; \</span><br><span class="line">    apk add php7-fpm\</span><br><span class="line">        php7 \</span><br><span class="line">        php7-dev \</span><br><span class="line">        php7-apcu \</span><br><span class="line">        php7-bcmath \</span><br><span class="line">        php7-xmlwriter \</span><br><span class="line">        php7-ctype \</span><br><span class="line">        php7-curl \</span><br><span class="line">        php7-exif \</span><br><span class="line">        php7-iconv \</span><br><span class="line">        php7-intl \</span><br><span class="line">        php7-json \</span><br><span class="line">        php7-mbstring\</span><br><span class="line">        php7-opcache \</span><br><span class="line">        php7-openssl \</span><br><span class="line">        php7-pcntl \</span><br><span class="line">        php7-pdo \</span><br><span class="line">        php7-mysqlnd \</span><br><span class="line">        php7-mysqli \</span><br><span class="line">        php7-pdo_mysql \</span><br><span class="line">        php7-pdo_pgsql \</span><br><span class="line">        php7-phar \</span><br><span class="line">        php7-posix \</span><br><span class="line">        php7-session \</span><br><span class="line">        php7-xml \</span><br><span class="line">        php7-simplexml \</span><br><span class="line">        php7-mcrypt \</span><br><span class="line">        php7-xsl \</span><br><span class="line">        php7-zip \</span><br><span class="line">        php7-zlib \</span><br><span class="line">        php7-dom \</span><br><span class="line">        php7-redis\</span><br><span class="line">        php7-tokenizer \</span><br><span class="line">        php7-gd \</span><br><span class="line">        php7-mongodb\</span><br><span class="line">        php7-fileinfo \</span><br><span class="line">        php7-zmq \</span><br><span class="line">        php7-memcached \</span><br><span class="line">        php7-xmlreader &amp;&amp; \</span><br><span class="line">        sed -i &quot;s|;*date.timezone =.*|date.timezone = $&#123;TIMEZONE&#125;|i&quot; /etc/php7/php.ini &amp;&amp; \</span><br><span class="line">        sed -i &quot;s|;*memory_limit =.*|memory_limit = $&#123;PHP_MEMORY_LIMIT&#125;|i&quot; /etc/php7/php.ini &amp;&amp; \</span><br><span class="line">        sed -i &quot;s|;*upload_max_filesize =.*|upload_max_filesize = $&#123;MAX_UPLOAD&#125;|i&quot; /etc/php7/php.ini &amp;&amp; \</span><br><span class="line">        sed -i &quot;s|;*max_file_uploads =.*|max_file_uploads = $&#123;PHP_MAX_FILE_UPLOAD&#125;|i&quot; /etc/php7/php.ini &amp;&amp; \</span><br><span class="line">        sed -i &quot;s|;*post_max_size =.*|post_max_size = $&#123;PHP_MAX_POST&#125;|i&quot; /etc/php7/php.ini &amp;&amp; \</span><br><span class="line">        sed -i &quot;s|;*cgi.fix_pathinfo=.*|cgi.fix_pathinfo= 0|i&quot; /etc/php7/php.ini &amp;&amp; \</span><br><span class="line">        rm -rf /var/cache/apk/* </span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;/home/start.sh&quot;]</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM alpine:3.12</span><br><span class="line"></span><br><span class="line">MAINTAINER RinySaint aichn.cn</span><br><span class="line"></span><br><span class="line">ADD [&quot;frpc&quot;, &quot;frpc.ini&quot;,&quot;frpcwatch.sh&quot;, &quot;start.sh&quot;, &quot;/home/&quot;] </span><br><span class="line"></span><br><span class="line"># sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g&#x27; /etc/apk/repositories \ </span><br><span class="line">RUN sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#x27; /etc/apk/repositories &amp;&amp; \</span><br><span class="line">    apk update &amp;&amp; apk add git &amp;&amp; apk add openssh  &amp;&amp; \</span><br><span class="line">    sed -i &quot;s/#PermitRootLogin.*/PermitRootLogin yes/g&quot; /etc/ssh/sshd_config &amp;&amp; \</span><br><span class="line">    sed -i &quot;s/#Port.*/Port 22/g&quot; /etc/ssh/sshd_config &amp;&amp; \</span><br><span class="line">    mkdir -p ~/.ssh &amp;&amp; chmod 700 ~/.ssh &amp;&amp; \</span><br><span class="line">	ssh-keygen -A &amp;&amp; \</span><br><span class="line">    touch ~/.ssh/authorized_keys &amp;&amp; chmod 600 ~/.ssh/authorized_keys &amp;&amp; \</span><br><span class="line">    echo &quot;root:a111111&quot; |chpasswd &amp;&amp; \</span><br><span class="line">    apk add tzdata &amp;&amp; cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo &#x27;Asia/Shanghai&#x27; &gt; /etc/timezone &amp;&amp; \</span><br><span class="line">    apk del tzdata &amp;&amp; \</span><br><span class="line">    chmod +x /home/frpc &amp;&amp; chmod +x /home/frpcwatch.sh &amp;&amp; chmod +x /home/start.sh &amp;&amp; \</span><br><span class="line">    apk add nginx &amp;&amp; \</span><br><span class="line">    apk add php7 php7-fpm php7-opcache php7-curl php7-gd php7-mbstring php7-mysqli php7-json php7-mcrypt php7-redis php7-pdo php7-xml &amp;&amp; \</span><br><span class="line">    apk add --no-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing gnu-libiconv &amp;&amp; \</span><br><span class="line">        sed -i &quot;s|;*date.timezone =.*|date.timezone = Asia/Shanghai |i&quot; /etc/php7/php.ini &amp;&amp; \</span><br><span class="line">        sed -i &quot;s|;*memory_limit =.*|memory_limit = 512M|i&quot; /etc/php7/php.ini &amp;&amp; \</span><br><span class="line">        sed -i &quot;s|;*upload_max_filesize =.*|upload_max_filesize = 50M|i&quot; /etc/php7/php.ini &amp;&amp; \</span><br><span class="line">        sed -i &quot;s|;*max_file_uploads =.*|max_file_uploads = 200|i&quot; /etc/php7/php.ini &amp;&amp; \</span><br><span class="line">        sed -i &quot;s|;*post_max_size =.*|post_max_size = 100M|i&quot; /etc/php7/php.ini &amp;&amp; \</span><br><span class="line">        sed -i &quot;s|;*cgi.fix_pathinfo=.*|cgi.fix_pathinfo= 1|i&quot; /etc/php7/php.ini &amp;&amp; \</span><br><span class="line">        rm -rf /var/cache/apk/* </span><br><span class="line">        </span><br><span class="line">ENV LD_PRELOAD /usr/lib/preloadable_libiconv.so php</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;/home/start.sh&quot;]</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">mkdir -p /run/nginx</span><br><span class="line">/usr/sbin/nginx</span><br><span class="line">/usr/sbin/php-fpm7</span><br><span class="line">/home/frpcwatch.sh</span><br><span class="line">tail -f /etc/hosts</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>EFI系统分区设定盘符 取消盘符</title>
    <url>/post/7f94f96a.html</url>
    <content><![CDATA[<p>给EFI系统分区设定盘符Win7 64bit安装后的出现EFI分区，在磁盘管理中右键点击无法指定盘符，可以进行下面的操作。</p>
<h2 id="工具-原料"><a href="#工具-原料" class="headerlink" title="工具/原料"></a>工具/原料</h2><ul>
<li>efi分区格式硬盘</li>
<li>64位系统</li>
</ul>
<h2 id="方法-步骤"><a href="#方法-步骤" class="headerlink" title="方法/步骤"></a>方法/步骤</h2><ol>
<li>—-以管理员身份运行cmd，输入： diskpart sel disk M(M为你的efi分区所在磁盘号，一般为数字0) list part sel part x (x为EFI分区分区号，我的是分区1，类型为“主要”) set id=ebd0a0a2-b9e5-4433-87c0-68b6b72699c7 assign letter=y (y为分配的盘符，任意)</li>
<li>返回EFI系统分区隐藏 —-以管理员身份运行cmd，输入： diskpart sel disk M(M为你的efi分区所在磁盘号，一般为数字0) list part sel part x (x为EFI分区分区号，我的是分区1，类型为“主要”) set id=c12a7328-f81f-11d2-ba4b-00a0c93ec93b （EFI系统分区ID）</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>-技术</tag>
      </tags>
  </entry>
  <entry>
    <title>FFmpeg实战 保存网络流</title>
    <url>/post/e0a5caa6.html</url>
    <content><![CDATA[<p>今天我们开始正式进入FFmpeg的篇章，FFmpeg作为著名的开源框架，可以生成用于处理多媒体框架的库和程序，是音视频界内的圣经，市面上直播开发99%都是基于FFmpeg来开发的，这足以证明FFmpeg的强大。关于FFmpeg的源码和官方文档可以去<a href="https://link.jianshu.com/?t=http://ffmpeg.org/doxygen/trunk/index.html">FFmpeg</a>下载源码和编译好的库。<br>  闲话不多说，下面就开始今天的主要内容，FFmpeg保存网络流到本地<br>  直播不像点播，当我们看到想看的内容时，我们不能倒退回去，但是我们可以保存直播流为本地文件，这样我们想看随时都可以。</p>
<p>保存网络流的流程主要有以下步骤：<br>   第一步：注册所有的组件（编解码、滤镜特效处理库、封装格式处理库、工具库、音频采样数据格式转换库、视频像素数据格式转换等等…）<br>  第二步：获取视频流的封装信息，查找视频和音频流的位置<br>  第三步：查找视频和音频解码器id，根据解码器id打开解码器<br>  第四步：创建输出流并拷贝流上下文信息<br>  第五步：循环读取网络流，解码packet并写入本地<br>  第六步：关闭解码器释放内存</p>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">AVFormatContext *inputContext = <span class="literal">nullptr</span>;</span><br><span class="line">AVFormatContext * outputContext;</span><br><span class="line"><span class="type">int64_t</span> lastReadPacktTime ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">interrupt_cb</span><span class="params">(<span class="type">void</span> *ctx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span>  timeout  = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">av_gettime</span>() - lastReadPacktTime &gt; timeout *<span class="number">1000</span> *<span class="number">1000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">OpenInput</span><span class="params">(string inputUrl)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    inputContext = <span class="built_in">avformat_alloc_context</span>();    </span><br><span class="line">    lastReadPacktTime = <span class="built_in">av_gettime</span>();</span><br><span class="line">    inputContext-&gt;interrupt_callback.callback = interrupt_cb;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">avformat_open_input</span>(&amp;inputContext, inputUrl.<span class="built_in">c_str</span>(), <span class="literal">nullptr</span>,<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;Input file open input failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>  ret;</span><br><span class="line">    &#125;</span><br><span class="line">    ret = <span class="built_in">avformat_find_stream_info</span>(inputContext,<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;Find input file stream inform failed\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_FATAL, <span class="string">&quot;Open input file  %s success\n&quot;</span>,inputUrl.<span class="built_in">c_str</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">shared_ptr&lt;AVPacket&gt; <span class="title">ReadPacketFromSource</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;AVPacket&gt; <span class="title">packet</span><span class="params">(<span class="keyword">static_cast</span>&lt;AVPacket*&gt;(av_malloc(<span class="keyword">sizeof</span>(AVPacket))), [&amp;](AVPacket *p) &#123; av_packet_free(&amp;p); av_freep(&amp;p);&#125;)</span></span>;</span><br><span class="line">    <span class="built_in">av_init_packet</span>(packet.<span class="built_in">get</span>());</span><br><span class="line">    lastReadPacktTime = <span class="built_in">av_gettime</span>();</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">av_read_frame</span>(inputContext, packet.<span class="built_in">get</span>());</span><br><span class="line">    <span class="keyword">if</span>(ret &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> packet;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">av_packet_rescale_ts</span><span class="params">(AVPacket *pkt, AVRational src_tb, AVRational dst_tb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pkt-&gt;pts != AV_NOPTS_VALUE)</span><br><span class="line">        pkt-&gt;pts = <span class="built_in">av_rescale_q</span>(pkt-&gt;pts, src_tb, dst_tb);</span><br><span class="line">    <span class="keyword">if</span> (pkt-&gt;dts != AV_NOPTS_VALUE)</span><br><span class="line">        pkt-&gt;dts = <span class="built_in">av_rescale_q</span>(pkt-&gt;dts, src_tb, dst_tb);</span><br><span class="line">    <span class="keyword">if</span> (pkt-&gt;duration &gt; <span class="number">0</span>)</span><br><span class="line">        pkt-&gt;duration = <span class="built_in">av_rescale_q</span>(pkt-&gt;duration, src_tb, dst_tb);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">WritePacket</span><span class="params">(shared_ptr&lt;AVPacket&gt; packet)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> inputStream = inputContext-&gt;streams[packet-&gt;stream_index];</span><br><span class="line">    <span class="keyword">auto</span> outputStream = outputContext-&gt;streams[packet-&gt;stream_index];               </span><br><span class="line">    <span class="built_in">av_packet_rescale_ts</span>(packet.<span class="built_in">get</span>(),inputStream-&gt;time_base,outputStream-&gt;time_base);<span class="comment">//时间戳转换，输入上下文与输出上下文时间基准不同</span></span><br><span class="line">    <span class="comment">//也可以用av_write_frame</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">av_interleaved_write_frame</span>(outputContext, packet.<span class="built_in">get</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">OpenOutput</span><span class="params">(string outUrl)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> ret  = <span class="built_in">avformat_alloc_output_context2</span>(&amp;outputContext, <span class="literal">nullptr</span>, <span class="string">&quot;mpegts&quot;</span>, outUrl.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;open output context failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> Error;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">avio_open2</span>(&amp;outputContext-&gt;pb, outUrl.<span class="built_in">c_str</span>(), AVIO_FLAG_WRITE,<span class="literal">nullptr</span>, <span class="literal">nullptr</span>); </span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;open avio failed&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> Error;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; inputContext-&gt;nb_streams; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//输出依赖于输入</span></span><br><span class="line">        AVStream * stream = <span class="built_in">avformat_new_stream</span>(outputContext, inputContext-&gt;streams[i]-&gt;codec-&gt;codec);             </span><br><span class="line">        ret = <span class="built_in">avcodec_copy_context</span>(stream-&gt;codec, inputContext-&gt;streams[i]-&gt;codec); </span><br><span class="line">        <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;copy coddec context failed&quot;</span>);</span><br><span class="line">            <span class="keyword">goto</span> Error;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">avformat_write_header</span>(outputContext, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;format write header failed&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> Error;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_FATAL, <span class="string">&quot; Open output file success %s\n&quot;</span>,outUrl.<span class="built_in">c_str</span>());            </span><br><span class="line">    <span class="keyword">return</span> ret ;</span><br><span class="line">Error:</span><br><span class="line">    <span class="keyword">if</span>(outputContext)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; outputContext-&gt;nb_streams; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">avcodec_close</span>(outputContext-&gt;streams[i]-&gt;codec);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">avformat_close_input</span>(&amp;outputContext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CloseInput</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(inputContext != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">avformat_close_input</span>(&amp;inputContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CloseOutput</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(outputContext != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; outputContext-&gt;nb_streams; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            AVCodecContext *codecContext = outputContext-&gt;streams[i]-&gt;codec;</span><br><span class="line">            <span class="built_in">avcodec_close</span>(codecContext);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">avformat_close_input</span>(&amp;outputContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">av_register_all</span>();</span><br><span class="line">    <span class="built_in">avfilter_register_all</span>();</span><br><span class="line">    <span class="built_in">avformat_network_init</span>();</span><br><span class="line">    <span class="built_in">av_log_set_level</span>(AV_LOG_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Init</span>();</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">OpenInput</span>(<span class="string">&quot;rtmp://v1.one-tv.com/live/mpegts.stream&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//rtmp://192.168.1.107/oflaDemo/test</span></span><br><span class="line">        <span class="comment">//ret = OpenOutput(&quot;rtmp://127.0.0.1:1935/live/stream0&quot;); //播放地址为rtmp://127.0.0.1/live/stream0 live=1</span></span><br><span class="line">        ret = <span class="built_in">OpenOutput</span>(<span class="string">&quot;D:\\test.ts&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ret &lt;<span class="number">0</span>) <span class="keyword">goto</span> Error;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> packet = <span class="built_in">ReadPacketFromSource</span>();</span><br><span class="line">        <span class="keyword">if</span>(packet)</span><br><span class="line">        &#123;</span><br><span class="line">            ret = <span class="built_in">WritePacket</span>(packet);</span><br><span class="line">            <span class="keyword">if</span>(ret &gt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;WritePacket Success!&quot;</span>&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;WritePacket failed!&quot;</span>&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">Error:</span><br><span class="line">    <span class="built_in">CloseInput</span>();</span><br><span class="line">    <span class="built_in">CloseOutput</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">seconds</span>(<span class="number">100</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  在上面代码函数里面有个函数av_packet_rescale_ts是不是看不懂，其实这里是跳调整时间戳，因为输入和输出流的时间基准不一定相同，所有这里需要进行时间戳转换。</p>
<p>  interrupt_cb这个函数的官方解释是为I/O层自定义中断回调，在avformat_open_input之前设置，其实就是读取输入数据时的一个回调，在这里我们稍微做一个超时处理，如果读取超过3秒就返回一个错误码中断读取流数据。</p>
<p>  好了，利用FFmpeg保存网络流就是这么简单，这里留个扩展，你可以试试利用FFmpeg保存网络图片。</p>
]]></content>
      <categories>
        <category>图像处理</category>
      </categories>
      <tags>
        <tag>图像处理,FFmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>FreeNas发布共享存储的三种方法</title>
    <url>/post/cde4f897.html</url>
    <content><![CDATA[<p>使用多块磁盘建立raid</p>
<p>Freenas的raid级别定义</p>
<p>raid 0 ———————— stripe</p>
<p>raid 1 ————————mirror</p>
<p>raid 5 ———————– RAID-Z</p>
<p>raid 10 \ raid 6 ————RAID-Z2</p>
<p>\1. 使用多块磁盘建立raid</p>
<p>Freenas的raid级别定义</p>
<p>raid 0 ———————— stripe raid 1 ————————mirror raid 5 ———————– RAID-Z raid 10 \ raid 6 ————RAID-Z2</p>
<p>UFS Volume manager（UFS卷管理）模式下，只能建立raid 0,1,3</p>
<p>ZFS Volume manager（动态文件系统卷管理）模式下，可以建立raid 0,1,5,6,1+0，还可以将磁盘设为备份模式</p>
<p>现在使用ZFS模式，利用4块硬盘建立一个raid 5</p>
<p>这个raid5建好了，少了30G的空间，也就是1.5块磁盘空间（理论上是只少一块盘的空间）</p>
<p>\2. 在新建的raid磁盘上建立2个目录，其中nfs目录等下做NFS共享，cifs目录等下做CIFS共享给windows</p>
<p>\3. 发布NFS共享</p>
<p>选择NFS共享的目录路径 /mnt/raid-5/nfs，然后点击确定</p>
<p>发布出去的NFS共享如下图</p>
<p>由于nfs目录没有给other用户增加写入权限，所以客户端连接过来后是不能写入数据的，需要更改目录权限</p>
<p>\4. 使用esxi进行挂载</p>
<p>成功挂载，如下图</p>
<p>进行写入测试</p>
<p>\5. 发布CIFS共享给windows客户端</p>
<p>发布出去的CIFS共享如下图</p>
<p>由于cifs目录没有给other用户增加写入权限，所以客户端连接过来后是不能写入数据的，需要更改目录权限</p>
<p>\6. 在win 7上进行访问测试</p>
<p>写入测试</p>
<p>\7. 发布iscsi共享存储</p>
<p>小知识：</p>
<p>iSCSI的主要功能是在 TCP/IP 网络上的主机系统（启动器 initiator）和存储设备（目标器 target）之间进行大量数据封装和可靠传输。此外，iSCSI在IP网络封装 SCSI 命令，且运行在TCP上。</p>
<ol>
<li>划分LUN</li>
</ol>
<ol start="2">
<li>启动ISCISI服务，并进入ISCSI配置模式</li>
</ol>
<ol start="3">
<li>配置入口（Portals）</li>
</ol>
<p>4)配置哪些iscsi发起端（Initiator；或者这样；5)配置iscsitarget；6)配置要发布共享的存储资源的范围（也就是第一步；7)将iscsitarget与存储资源的范围进行；8)使用win7自带的iscsi发起程序进行测试；先手动启动iscsiInitiator服务；打开iscsi发起程序，使用快速连接；连接成功后，“磁盘管理”下多了一块2</p>
<hr>
<ol start="4">
<li>配置哪些iscsi发起端（Initiator）可以连接存储服务器</li>
</ol>
<p>或者这样</p>
<ol start="5">
<li>配置iscsi target</li>
</ol>
<ol start="6">
<li>配置要发布共享的存储资源的范围（也就是第一步划分的LUN）</li>
</ol>
<ol start="7">
<li>将iscsi target 与存储资源的范围进行关联，即完成了iscsi的发布</li>
</ol>
<ol start="8">
<li>使用win 7自带的iscsi发起程序进行测试</li>
</ol>
<p>先手动启动iscsi Initiator服务</p>
<p>打开iscsi发起程序，使用快速连接</p>
<p>连接成功后，“磁盘管理”下多了一块20G的硬盘</p>
<p>将硬盘联机 — 初始化（MBR） — 格式化</p>
<p>正在格式化</p>
<p>资源管理里出现了一块20G的新硬盘</p>
<ol start="9">
<li>在ESXI上挂载iscsi资源（需要把刚才已经格式化的硬盘先做“删除卷”操作，然后再把iscsi连接断开。</li>
</ol>
<p>因为ESXI和win 7使用的文件系统不一样，esxi无法识别NTFS的分区，win 7也无法操作ESXI使用的VMFS文件系统，所以这两个无法互操作的主机最好不要同时连接相同的LUN，即使连接上了也无法做任何操作！但是相同的主机类型是可以同时连接的，比如多台esxi主机可以同时连接相同的LUN，这就是虚拟化中所说的共享存储。）</p>
<p>首先配置vswitch，在现有的物理网卡下增加一个端口（port），专门用于esxi和存储服务器通信</p>
<p>给这个端口配置IP地址，最后完成port的创建</p>
<p>配置存储适配器</p>
<p>添加vmkernel端口绑定</p>
<p>选择要与iscsi适配器绑定的vmkernel适配器</p>
<p>绑定成功</p>
<p>使用动态发现搜索iscsi资源（当然也可以使用静；点关闭后提示是否重新扫描适配器，点“是”；再到“存储器”选项卡中去“添加存储器”；最后无脑下一步，填入数据存储名称，再无脑下一步即；浏览数据并进行写入测试，全部OK！；到这里，使用FreeNas发布三种共享（NFS,；</p>
<hr>
<p>使用动态发现搜索iscsi资源（当然也可以使用静态发现输入IP和目标名称来连接存储服务器）</p>
<p>点关闭后提示是否重新扫描适配器，点“是”</p>
<p>再到“存储器”选项卡中去“添加存储器”</p>
<p>最后无脑下一步，填入数据存储名称，再无脑下一步即完成了和iscsi target的连接</p>
<p>浏览数据并进行写入测试，全部OK！</p>
<p>到这里，使用FreeNas发布三种共享（NFS,CIFS,ISCSI）的方法全部over！</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>-linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GAN生成对抗式神经网络实际操作</title>
    <url>/post/22f26062.html</url>
    <content><![CDATA[<p><a href="https://aichn.cn/post/5b91f628.html">上一篇文章</a>我们强力推导了GAN的数学公式，它就是：<br>$$<br>V = E _ { x \sim P _ { \text {data} } } [ \log D ( x ) ] + E _ { x \sim P _ { G } } [ \log ( 1 - D ( x ) ) ]<br>$$<br>在我们训练D网络的时候，我们要让V最大化，当我们训练G网络的时候我们要让V最小化，就是这么简单。因此哪怕数学推导那篇五六千字的博客不想看，实做也可以做。</p>
<p>实做上比较大的一个问题是我们实际上不能获取到全部真实图像样本和全部拟合图像样本。因此上面这道公式在实做上是搞不成的。</p>
<p>我们采取的方法是抽样。也就是从<br>$$<br>P _ { \text {data} }(x)<br>$$<br>中抽出m个样本，写作<br>$$<br>{ x ^ { 1 } , x ^ { 2 } , \ldots , x ^ { m } }，<br>$$<br>再从<br>$$<br>P _ { \text {G} }(x)<br>$$<br>中抽出m个样本，写作<br>$$<br>{ \tilde { x } ^ { 1 } , \tilde { x } ^ { 2 } , \ldots , \tilde { x } ^ { m } }，<br>$$<br>然后我们认为这m个样本的分布和总体的分布就差不多了。那么上面的公式就变成下面这个样子：<br>$$<br>\tilde { V } = \frac { 1 } { m } \sum _ { i = 1 } ^ { m } \log D \left( x ^ { i } \right) + \frac { 1 } { m } \sum _ { i = 1 } ^ { m } \log \left( 1 - D \left( \tilde { x } ^ { i } \right) \right)<br>$$<br>当然可能有人会说，这样不就存在着误差吗？</p>
<p>是的，但这个误差会随着样本的增多和样本分布的合理化而减小，因此我们在选样本的时候还是要注意样本的数量和分布的合理性。不要搞10张样本就拿来训练，起码是“万”级别的，且如果你想生成的是猫的图像，不要选几万张“白”猫，因为那样生成网络和判别网络均会认为猫就是白色的，没有别的颜色。</p>
<p>OK，分析完误差之后我们假定样本是十分给力的，那么我们就能根据面这道公式来做计算。</p>
<p>首先看到D网络，我们要做的是最大化上面这个<br>$$<br>\tilde { V }<br>$$<br>，先来看看logx长什么样。<br><img src="/../images/GAN%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E5%BC%8F%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%99%85%E6%93%8D%E4%BD%9C/20181228105228842.png" alt="在这里插入图片描述"><br>可以看出它是一个单调递增的函数，因此要<br>$$<br>\tilde { V }<br>$$<br>取得最大值，其实就是要<br>$$<br>\frac { 1 } { m } \sum _ { i = 1 } ^ { m } \log D \left( x ^ { i } \right)和\frac { 1 } { m } \sum _ { i = 1 } ^ { m } \log \left( 1 - D \left( \tilde { x } ^ { i } \right) \right)<br>$$<br>分别取得最大值。也就是要<br>$$<br>D \left( x ^ { i } \right)<br>$$<br>取得最大值，<br>$$<br>1 - D \left( \tilde { x } ^ { i } \right)<br>$$<br>取得最大值。因此，我们只需要在输入真实样本的时候尽量让D网络输出1，而输入拟合样本的时候让网络尽量输出0就搞定了。</p>
<p>这里有个非常神奇的地方，就是我们要求的这道式子跟二分类问题的交叉熵损失函数居然长的是一样的。我们先看看二分类问题的交叉熵损失函数长什么样：<br>$$<br>-\sum _ { i = 1 } ^ { m }p \left( x _ { i } \right)\log q \left( x _ { i } \right)-\sum _ { i = 1 } ^ { m }(1-p \left( x _ { i } \right))\log (1-q \left( \tilde { x } _ { i } \right))<br>$$<br>这里因为是二分问题，因此<br>$$<br>p \left( x _ { i } \right)<br>$$<br>在正样本中等于1，在负样本中等于0，这个时候上面的式子变成：<br>$$<br>-\sum _ { i = 1 } ^ { m }\log q \left( x _ { i } \right)-\sum _ { i = 1 } ^ { m }\log (1-q \left( \tilde { x } _ { i } \right))<br>$$<br>这道式子忽略掉常数项刚刚好是V取反。而我们本来求D网络就是求V取最大值的情况，一旦给V取反，则变成求最小值，直接等于损失函数的目标！真是不要太方便！</p>
<p>那么具体流程是什么呢？</p>
<p>1.从<br>$$<br>P _ { \text {data} }(x)<br>$$<br>中抽出m个样本，写作<br>$$<br>{ x ^ { 1 } , x ^ { 2 } , \ldots , x ^ { m } }，<br>$$<br>再从<br>$$<br>P _ { \text {G} }(x)<br>$$<br>中抽出m个样本（也就是让G网络生成m个样本），写作<br>$$<br>{ \tilde { x } ^ { 1 } , \tilde { x } ^ { 2 } , \ldots , \tilde { x } ^ { m } }<br>$$<br>2.用二分问题的交叉熵损失函数作为损失函数，然后用样本对网络进行训练，完事，就是这么简单。</p>
<p>再来看看G网络，我们从前面已经知道G网络的目标是最小化：<br>$$<br>\tilde { V } = \frac { 1 } { m } \sum _ { i = 1 } ^ { m } \log D \left( x ^ { i } \right) + \frac { 1 } { m } \sum _ { i = 1 } ^ { m } \log \left( 1 - D \left( \tilde { x } ^ { i } \right) \right)<br>$$<br>因为在训练G网络的时候，D网络是不变的，因此上面式子左边的一项是不变的，相当于一个常数。而对于最小化问题来说，常数是不影响结果的，因此我们其实是在最小化：<br>$$<br>\tilde { V }_G= \frac { 1 } { m } \sum _ { i = 1 } ^ { m } \log \left( 1 - D \left( \tilde { x } ^ { i } \right) \right)<br>$$<br>按理说按照上面所述已经可以开始写代码了。但实际上还有个操作上的问题，这个问题出在log(1−x)这个函数上，它长这样：<br><img src="/../images/GAN%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E5%BC%8F%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%99%85%E6%93%8D%E4%BD%9C/20181228105242348.png" alt="在这里插入图片描述"><br>可以看到当x接近1的时候该函数相当的陡峭，而在0附近它却不是很陡（其实对log(1−x)求下导就可以知道它的导数的绝对值是逐步增大的，也就是它渐渐变陡）。这有什么问题呢？</p>
<p>问题就在于一开始的时候因为G网络的参数是接近随机的，基本上骗不过D网络，因此<br>$$<br>D \left( \tilde { x } ^ { i } \right)<br>$$<br>这个东西在一开始的时候总会输出接近0的数。而从上面我们知道，如果越接近0，那么log(1−x)这个损失函数就越平。而在训练后期，<br>$$<br>D \left( \tilde { x } ^ { i } \right)<br>$$<br>会慢慢增加（最理想是0.5），这个时候log(1−x)损失函数却越变越陡。这跟我们需要的是完全相反的！我们希望的是一开始训练快速收缩到最优解附近，然后慢慢调整找到最优解，而它反过来。因此虽然理论上那么列式是完全合理的，但实际上用这么一个损失函数会使得训练比较崩溃，十分的反直觉。因此为了解决这个问题，GAN用的损失函数并不是log(1−x)，而是−log(x)：<br><img src="/../images/GAN%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E5%BC%8F%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%99%85%E6%93%8D%E4%BD%9C/20181228112241677.png" alt="在这里插入图片描述"><br>这个损失函数就牛逼了，单调性和log(1−x)一样，且陡峭程度变化完全符合我们的要求。因此我们真正训练G网络的时候用的是它。但这么改有个问题，就是我们本来G网络训练的是一个JS距离，现在训练的却不知道是个啥，只知道它大致等价于JS距离。不过这个问题好像也不是很要紧，总之我们训练的是这个式子：<br>$$<br>\tilde { V }_G= -\frac { 1 } { m } \sum _ { i = 1 } ^ { m } \log \left(D \left( \tilde { x } ^ { i } \right) \right)<br>$$<br>看到这个式子再联系上面的D网络，聪明的你可能发现它长得和二分类问题的交叉熵损失函数输入正样本的情况又是一模一样的（除了个没多大所谓的常数项）。这在我们实际操作中简直不要太方便！具体流程是：</p>
<p>1.从z中抽出m个样本，写作<br>$$<br>{ \tilde { z } ^ { 1 } , \tilde { z } ^ { 2 } , \ldots , \tilde { z } ^ { m } }<br>$$<br>2.用二分问题的交叉熵损失函数作为损失函数，然后用样本对网络进行训练，大功告成！</p>
<p>那么具体的训练过程大概总结下是这个样子的，先定住G网络训练几次D网络，再定住D网络训练一次G网络，循环往复就行了。为什么是几次和一次呢？</p>
<p>首先，因为我们希望D网络这把尺子准一点，最好每次都找到全局最优解，这样能更好的指导G网络。</p>
<p>其次，我们希望G网络每次不要更新太多，具体可见下图：<br><img src="/../images/GAN%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E5%BC%8F%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%99%85%E6%93%8D%E4%BD%9C/20181228105313523.png" alt="在这里插入图片描述"><br>如果更新太多，G网络的形状可能会从左边变到右边，这样D网络的最大值点会到处飘，比较难训练。</p>
<p>下面放上实现代码，非常简单。主要参考的《深度学习框架PyTorch：入门与实践》这本书的代码，本人把其他复杂的东西删掉了，就剩下最简单的实现部分，这样看起来清楚点。</p>
<p><a href="http://model.py/">model.py</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line">from torch import nn</span><br><span class="line"></span><br><span class="line">class NetG(nn.Module):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    生成器定义</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, opt):</span><br><span class="line">        super(NetG, self).__init__()</span><br><span class="line">        ngf = opt.ngf  # 生成器feature map数</span><br><span class="line"></span><br><span class="line">        self.main = nn.Sequential(</span><br><span class="line">            # 输入是一个nz维度的噪声，我们可以认为它是一个1*1*nz的feature map</span><br><span class="line">            nn.ConvTranspose2d(opt.nz, ngf * 8, 4, 1, 0, bias=False),</span><br><span class="line">            nn.BatchNorm2d(ngf * 8),</span><br><span class="line">            nn.ReLU(True),</span><br><span class="line">            # 上一步的输出形状：(ngf*8) x 4 x 4</span><br><span class="line"></span><br><span class="line">            nn.ConvTranspose2d(ngf * 8, ngf * 4, 4, 2, 1, bias=False),</span><br><span class="line">            nn.BatchNorm2d(ngf * 4),</span><br><span class="line">            nn.ReLU(True),</span><br><span class="line">            # 上一步的输出形状： (ngf*4) x 8 x 8</span><br><span class="line"></span><br><span class="line">            nn.ConvTranspose2d(ngf * 4, ngf * 2, 4, 2, 1, bias=False),</span><br><span class="line">            nn.BatchNorm2d(ngf * 2),</span><br><span class="line">            nn.ReLU(True),</span><br><span class="line">            # 上一步的输出形状： (ngf*2) x 16 x 16</span><br><span class="line"></span><br><span class="line">            nn.ConvTranspose2d(ngf * 2, ngf, 4, 2, 1, bias=False),</span><br><span class="line">            nn.BatchNorm2d(ngf),</span><br><span class="line">            nn.ReLU(True),</span><br><span class="line">            # 上一步的输出形状：(ngf) x 32 x 32</span><br><span class="line"></span><br><span class="line">            nn.ConvTranspose2d(ngf, 3, 5, 3, 1, bias=False),</span><br><span class="line">            nn.Tanh()  # 输出范围 -1~1 故而采用Tanh</span><br><span class="line">            # 输出形状：3 x 96 x 96</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    def forward(self, input):</span><br><span class="line">        return self.main(input)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class NetD(nn.Module):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    判别器定义</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, opt):</span><br><span class="line">        super(NetD, self).__init__()</span><br><span class="line">        ndf = opt.ndf</span><br><span class="line">        self.main = nn.Sequential(</span><br><span class="line">            # 输入 3 x 96 x 96</span><br><span class="line">            nn.Conv2d(3, ndf, 5, 3, 1, bias=False),</span><br><span class="line">            nn.LeakyReLU(0.2, inplace=True),</span><br><span class="line">            # 输出 (ndf) x 32 x 32</span><br><span class="line"></span><br><span class="line">            nn.Conv2d(ndf, ndf * 2, 4, 2, 1, bias=False),</span><br><span class="line">            nn.BatchNorm2d(ndf * 2),</span><br><span class="line">            nn.LeakyReLU(0.2, inplace=True),</span><br><span class="line">            # 输出 (ndf*2) x 16 x 16</span><br><span class="line"></span><br><span class="line">            nn.Conv2d(ndf * 2, ndf * 4, 4, 2, 1, bias=False),</span><br><span class="line">            nn.BatchNorm2d(ndf * 4),</span><br><span class="line">            nn.LeakyReLU(0.2, inplace=True),</span><br><span class="line">            # 输出 (ndf*4) x 8 x 8</span><br><span class="line"></span><br><span class="line">            nn.Conv2d(ndf * 4, ndf * 8, 4, 2, 1, bias=False),</span><br><span class="line">            nn.BatchNorm2d(ndf * 8),</span><br><span class="line">            nn.LeakyReLU(0.2, inplace=True),</span><br><span class="line">            # 输出 (ndf*8) x 4 x 4</span><br><span class="line"></span><br><span class="line">            nn.Conv2d(ndf * 8, 1, 4, 1, 0, bias=False),</span><br><span class="line">            nn.Sigmoid()  # 输出一个数(概率)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    def forward(self, input):</span><br><span class="line">        return self.main(input).view(-1)</span><br></pre></td></tr></table></figure>
<p><a href="http://main.py/">main.py</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line">import os</span><br><span class="line">import torch as t</span><br><span class="line">import torchvision as tv</span><br><span class="line">import tqdm</span><br><span class="line">from model import NetG, NetD</span><br><span class="line"></span><br><span class="line">class Config(object):</span><br><span class="line">    data_path = &#x27;data/&#x27;  # 数据集存放路径</span><br><span class="line">    num_workers = 4  # 多进程加载数据所用的进程数</span><br><span class="line">    image_size = 96  # 图片尺寸</span><br><span class="line">    batch_size = 256  #一次训练样本数</span><br><span class="line">    max_epoch = 200  #最大训练次数</span><br><span class="line">    lr1 = 2e-4  # 生成器的学习率</span><br><span class="line">    lr2 = 2e-4  # 判别器的学习率</span><br><span class="line">    beta1 = 0.5  # Adam优化器的beta1参数</span><br><span class="line">    gpu = True  # 是否使用GPU</span><br><span class="line">    nz = 100  # 噪声维度</span><br><span class="line">    ngf = 64  # 生成器feature map数</span><br><span class="line">    ndf = 64  # 判别器feature map数</span><br><span class="line"></span><br><span class="line">    save_path = &#x27;imgs/&#x27;  # 生成图片保存路径</span><br><span class="line">    d_every = 1  # 每1个batch训练一次判别器</span><br><span class="line">    g_every = 5  # 每5个batch训练一次生成器</span><br><span class="line">    save_every = 1  # 每1个epoch保存一次模型</span><br><span class="line">    #netd_path = &#x27;checkpoints/netd.pth&#x27;</span><br><span class="line">    #netg_path = &#x27;checkpoints/netg.pth&#x27;</span><br><span class="line">    netd_path = None</span><br><span class="line">    netg_path = None</span><br><span class="line"></span><br><span class="line">opt = Config()</span><br><span class="line"></span><br><span class="line">def train():</span><br><span class="line">    device=t.device(&#x27;cuda&#x27;) if opt.gpu else t.device(&#x27;cpu&#x27;)</span><br><span class="line"></span><br><span class="line">    # 读入数据格式转换</span><br><span class="line">    transforms = tv.transforms.Compose([</span><br><span class="line">        tv.transforms.Resize(opt.image_size),#图像尺寸缩放</span><br><span class="line">        tv.transforms.ToTensor(),</span><br><span class="line">        tv.transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))#先将数据归一化到（0,1），再用公式(x-mean)/std将每个元素分布到（-1,1）</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    dataset = tv.datasets.ImageFolder(opt.data_path, transform=transforms)</span><br><span class="line">    dataloader = t.utils.data.DataLoader(dataset,</span><br><span class="line">                                         batch_size=opt.batch_size,</span><br><span class="line">                                         shuffle=True,</span><br><span class="line">                                         num_workers=opt.num_workers,</span><br><span class="line">                                         drop_last=True</span><br><span class="line">                                         )</span><br><span class="line"></span><br><span class="line">    # 网络初始化，如有预训练模型则读入</span><br><span class="line">    netg, netd = NetG(opt), NetD(opt)</span><br><span class="line">    map_location = lambda storage, loc: storage</span><br><span class="line">    if opt.netd_path:</span><br><span class="line">        netd.load_state_dict(t.load(opt.netd_path, map_location=map_location))</span><br><span class="line">    if opt.netg_path:</span><br><span class="line">        netg.load_state_dict(t.load(opt.netg_path, map_location=map_location))</span><br><span class="line">    netd.to(device)</span><br><span class="line">    netg.to(device)</span><br><span class="line"></span><br><span class="line">    # 定义优化器和损失函数</span><br><span class="line">    optimizer_g = t.optim.Adam(netg.parameters(), opt.lr1, betas=(opt.beta1, 0.999))</span><br><span class="line">    optimizer_d = t.optim.Adam(netd.parameters(), opt.lr2, betas=(opt.beta1, 0.999))</span><br><span class="line">    criterion = t.nn.BCELoss().to(device)</span><br><span class="line"></span><br><span class="line">    # 真图片label为1，假图片label为0</span><br><span class="line">    # noises为生成网络的输入</span><br><span class="line">    true_labels = t.ones(opt.batch_size).to(device)</span><br><span class="line">    fake_labels = t.zeros(opt.batch_size).to(device)</span><br><span class="line">    fix_noises = t.randn(opt.batch_size, opt.nz, 1, 1).to(device)#产生正态分布的随机数，也就是G网络的z</span><br><span class="line">    noises = t.randn(opt.batch_size, opt.nz, 1, 1).to(device)</span><br><span class="line"></span><br><span class="line">    epochs = range(opt.max_epoch)</span><br><span class="line">    for epoch in iter(epochs):</span><br><span class="line">        for ii, (img, _) in tqdm.tqdm(enumerate(dataloader)):</span><br><span class="line">            real_img = img.to(device)</span><br><span class="line"></span><br><span class="line">            if ii % opt.d_every == 0:</span><br><span class="line">                # 训练判别器</span><br><span class="line">                optimizer_d.zero_grad()#清空节点值</span><br><span class="line">                ## 尽可能的把真图片判别为正确</span><br><span class="line">                output = netd(real_img)</span><br><span class="line">                error_d_real = criterion(output, true_labels)</span><br><span class="line">                error_d_real.backward()</span><br><span class="line"></span><br><span class="line">                ## 尽可能把假图片判别为错误</span><br><span class="line">                noises.data.copy_(t.randn(opt.batch_size, opt.nz, 1, 1))</span><br><span class="line">                fake_img = netg(noises).detach()  # 根据噪声生成假图</span><br><span class="line">                output = netd(fake_img)</span><br><span class="line">                error_d_fake = criterion(output, fake_labels)</span><br><span class="line">                error_d_fake.backward()</span><br><span class="line">                optimizer_d.step()</span><br><span class="line"></span><br><span class="line">            if ii % opt.g_every == 0:</span><br><span class="line">                # 训练生成器</span><br><span class="line">                optimizer_g.zero_grad()</span><br><span class="line">                noises.data.copy_(t.randn(opt.batch_size, opt.nz, 1, 1))</span><br><span class="line">                fake_img = netg(noises)</span><br><span class="line">                output = netd(fake_img)</span><br><span class="line">                error_g = criterion(output, true_labels)</span><br><span class="line">                error_g.backward()</span><br><span class="line">                optimizer_g.step()</span><br><span class="line"></span><br><span class="line">        if (epoch+1) % opt.save_every == 0:</span><br><span class="line">            # 保存模型、图片</span><br><span class="line">            fix_fake_imgs = netg(fix_noises)</span><br><span class="line">            tv.utils.save_image(fix_fake_imgs.data[:64], &#x27;%s/%s.png&#x27; % (opt.save_path, epoch), normalize=True,range=(-1, 1))</span><br><span class="line">            t.save(netd.state_dict(), &#x27;checkpoints/netd.pth&#x27;)</span><br><span class="line">            t.save(netg.state_dict(), &#x27;checkpoints/netg.pth&#x27;)</span><br><span class="line">            t.save(netd.state_dict(), &#x27;checkpoints/netd_%s.pth&#x27; % epoch)</span><br><span class="line">            t.save(netg.state_dict(), &#x27;checkpoints/netg_%s.pth&#x27; % epoch)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    train()</span><br></pre></td></tr></table></figure>
<p>一开始训练得到的图如下的一坨：<br><img src="/../images/GAN%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E5%BC%8F%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%99%85%E6%93%8D%E4%BD%9C/20181228105416232.png" alt="在这里插入图片描述"><br>后面训练了一百多个轮次之后渐渐好了起来：<br><img src="/../images/GAN%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E5%BC%8F%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%99%85%E6%93%8D%E4%BD%9C/20181228105426838.png" alt="在这里插入图片描述"><br><img src="/../images/GAN%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E5%BC%8F%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%99%85%E6%93%8D%E4%BD%9C/20190210180619325.png" alt="在这里插入图片描述"><br><img src="/../images/GAN%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E5%BC%8F%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%99%85%E6%93%8D%E4%BD%9C/20190210180625909.png" alt="在这里插入图片描述"><br>可以看到有些图片已经有模有样了，但有些还蛮崩坏的。这跟原生GAN的一些缺陷有关系，比如说DD网络容易过拟合，或者GG网络分布远远不足以覆盖目标子集，距离一直很大等等。这个在后面的改进版本逐步得到解决，会在以后研究到的时候跟大家分享。当然也可以直接去Bilibili看看李宏毅教授的视频，讲得非常给力！</p>
<p>另外如果希望用可视化工具visdom，可以将main.py的代码修改如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line">import os</span><br><span class="line">import torch as t</span><br><span class="line">import torchvision as tv</span><br><span class="line">import tqdm</span><br><span class="line">from model import NetG, NetD</span><br><span class="line">import visdom</span><br><span class="line"></span><br><span class="line">class Config(object):</span><br><span class="line">    data_path = &#x27;data/&#x27;  # 数据集存放路径</span><br><span class="line">    num_workers = 4  # 多进程加载数据所用的进程数</span><br><span class="line">    image_size = 96  # 图片尺寸</span><br><span class="line">    batch_size = 256  #一次训练样本数</span><br><span class="line">    max_epoch = 200  #最大训练次数</span><br><span class="line">    lr1 = 2e-4  # 生成器的学习率</span><br><span class="line">    lr2 = 2e-4  # 判别器的学习率</span><br><span class="line">    beta1 = 0.5  # Adam优化器的beta1参数</span><br><span class="line">    gpu = True  # 是否使用GPU</span><br><span class="line">    nz = 100  # 噪声维度</span><br><span class="line">    ngf = 64  # 生成器feature map数</span><br><span class="line">    ndf = 64  # 判别器feature map数</span><br><span class="line"></span><br><span class="line">    save_path = &#x27;imgs/&#x27;  # 生成图片保存路径</span><br><span class="line">    d_every = 1  # 每1个batch训练一次判别器</span><br><span class="line">    g_every = 5  # 每5个batch训练一次生成器</span><br><span class="line">    save_every = 1  # 每1个epoch保存一次模型</span><br><span class="line">    #netd_path = &#x27;checkpoints/netd.pth&#x27;</span><br><span class="line">    #netg_path = &#x27;checkpoints/netg.pth&#x27;</span><br><span class="line">    netd_path = None</span><br><span class="line">    netg_path = None</span><br><span class="line"></span><br><span class="line">opt = Config()</span><br><span class="line"></span><br><span class="line">def train():</span><br><span class="line">    device=t.device(&#x27;cuda&#x27;) if opt.gpu else t.device(&#x27;cpu&#x27;)</span><br><span class="line"></span><br><span class="line">    # 读入数据格式转换</span><br><span class="line">    transforms = tv.transforms.Compose([</span><br><span class="line">        tv.transforms.Resize(opt.image_size),#图像尺寸缩放</span><br><span class="line">        tv.transforms.ToTensor(),</span><br><span class="line">        tv.transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))#先将数据归一化到（0,1），再用公式(x-mean)/std将每个元素分布到（-1,1）</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    dataset = tv.datasets.ImageFolder(opt.data_path, transform=transforms)</span><br><span class="line">    dataloader = t.utils.data.DataLoader(dataset,</span><br><span class="line">                                         batch_size=opt.batch_size,</span><br><span class="line">                                         shuffle=True,</span><br><span class="line">                                         num_workers=opt.num_workers,</span><br><span class="line">                                         drop_last=True</span><br><span class="line">                                         )</span><br><span class="line"></span><br><span class="line">    # 网络初始化，如有预训练模型则读入</span><br><span class="line">    netg, netd = NetG(opt), NetD(opt)</span><br><span class="line">    map_location = lambda storage, loc: storage</span><br><span class="line">    if opt.netd_path:</span><br><span class="line">        netd.load_state_dict(t.load(opt.netd_path, map_location=map_location))</span><br><span class="line">    if opt.netg_path:</span><br><span class="line">        netg.load_state_dict(t.load(opt.netg_path, map_location=map_location))</span><br><span class="line">    netd.to(device)</span><br><span class="line">    netg.to(device)</span><br><span class="line"></span><br><span class="line">    # 定义优化器和损失函数</span><br><span class="line">    optimizer_g = t.optim.Adam(netg.parameters(), opt.lr1, betas=(opt.beta1, 0.999))</span><br><span class="line">    optimizer_d = t.optim.Adam(netd.parameters(), opt.lr2, betas=(opt.beta1, 0.999))</span><br><span class="line">    criterion = t.nn.BCELoss().to(device)</span><br><span class="line"></span><br><span class="line">    # 真图片label为1，假图片label为0</span><br><span class="line">    # noises为生成网络的输入</span><br><span class="line">    true_labels = t.ones(opt.batch_size).to(device)</span><br><span class="line">    fake_labels = t.zeros(opt.batch_size).to(device)</span><br><span class="line">    fix_noises = t.randn(opt.batch_size, opt.nz, 1, 1).to(device)#产生正态分布的随机数，也就是G网络的z</span><br><span class="line">    noises = t.randn(opt.batch_size, opt.nz, 1, 1).to(device)</span><br><span class="line"></span><br><span class="line">    #可视化</span><br><span class="line">    vis = visdom.Visdom()</span><br><span class="line"></span><br><span class="line">    epochs = range(opt.max_epoch)</span><br><span class="line">    for epoch in iter(epochs):</span><br><span class="line">        for ii, (img, _) in tqdm.tqdm(enumerate(dataloader)):</span><br><span class="line">            real_img = img.to(device)</span><br><span class="line"></span><br><span class="line">            if ii % opt.d_every == 0:</span><br><span class="line">                # 训练判别器</span><br><span class="line">                optimizer_d.zero_grad()#清空节点值</span><br><span class="line">                ## 尽可能的把真图片判别为正确</span><br><span class="line">                output = netd(real_img)</span><br><span class="line">                error_d_real = criterion(output, true_labels)</span><br><span class="line">                error_d_real.backward()</span><br><span class="line"></span><br><span class="line">                ## 尽可能把假图片判别为错误</span><br><span class="line">                noises.data.copy_(t.randn(opt.batch_size, opt.nz, 1, 1))</span><br><span class="line">                fake_img = netg(noises).detach()  # 根据噪声生成假图</span><br><span class="line">                output = netd(fake_img)</span><br><span class="line">                error_d_fake = criterion(output, fake_labels)</span><br><span class="line">                error_d_fake.backward()</span><br><span class="line">                optimizer_d.step()</span><br><span class="line"></span><br><span class="line">            if ii % opt.g_every == 0:</span><br><span class="line">                # 训练生成器</span><br><span class="line">                optimizer_g.zero_grad()</span><br><span class="line">                noises.data.copy_(t.randn(opt.batch_size, opt.nz, 1, 1))</span><br><span class="line">                fake_img = netg(noises)</span><br><span class="line">                output = netd(fake_img)</span><br><span class="line">                error_g = criterion(output, true_labels)</span><br><span class="line">                error_g.backward()</span><br><span class="line">                optimizer_g.step()</span><br><span class="line"></span><br><span class="line">        if (epoch+1) % opt.save_every == 0:</span><br><span class="line">            # 保存模型、图片</span><br><span class="line">            fix_fake_imgs = netg(fix_noises)</span><br><span class="line">            tv.utils.save_image(fix_fake_imgs.data[:64], &#x27;%s/%s.png&#x27; % (opt.save_path, epoch), normalize=True,range=(-1, 1))</span><br><span class="line">            vis.images(fix_fake_imgs.detach().cpu().numpy()[:64] * 0.5 + 0.5, win=&#x27;fixfake&#x27;)</span><br><span class="line">            t.save(netd.state_dict(), &#x27;checkpoints/netd.pth&#x27;)</span><br><span class="line">            t.save(netg.state_dict(), &#x27;checkpoints/netg.pth&#x27;)</span><br><span class="line">            t.save(netd.state_dict(), &#x27;checkpoints/netd_%s.pth&#x27; % epoch)</span><br><span class="line">            t.save(netg.state_dict(), &#x27;checkpoints/netg_%s.pth&#x27; % epoch)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    train()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>-神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Git系列自动化部署</title>
    <url>/post/b6d9bd80.html</url>
    <content><![CDATA[<h1 id="Git服务器搭建"><a href="#Git服务器搭建" class="headerlink" title="Git服务器搭建"></a>Git服务器搭建</h1><p>这篇教程的前提是你的服务器已经安装了Git环境，在终端中输入</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>git --version</span><br></pre></td></tr></table></figure>
<p>如果没有报错，并且显示了</p>
<p><code>git version 1.7.1</code></p>
<p> 则是已经安装了，我的服务器上的git版本是1.7.1，若没有，请自己部署git环境。这里不做赘述。</p>
<blockquote>
<p>开始搭建</p>
</blockquote>
<ul>
<li>第一步，创建git管理用户：</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo adduser git</span><br></pre></td></tr></table></figure>
<ul>
<li>第二步，创建证书登录：</li>
</ul>
<p>在<code>/home/git/</code>目录下新建<code>.ssh</code></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>cd /home/git</span><br><span class="line"><span class="variable">$ </span>mkdir .ssh</span><br><span class="line"><span class="variable">$ </span>cd .ssh</span><br></pre></td></tr></table></figure>
<p>然后手动生成证书</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>
<p>将生成的.pub文件内容copy到<code>/root/.ssh/authorized_keys</code>文件中，一行一个。</p>
<ul>
<li>第三步，初始化git仓库：</li>
</ul>
<p>选定一个目录作为git仓库，例如<code>/git/sample.git</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">$ sudo git <span class="keyword">init</span> --bare sample.git</span><br></pre></td></tr></table></figure>
<p>Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以<code>.git</code>结尾。然后，把owner改为<code>git</code>：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo chown -R <span class="symbol">git:</span>git sample.git</span><br></pre></td></tr></table></figure>
<ul>
<li>第四步，禁用shell登录：</li>
</ul>
<p>出于安全考虑，创建的git用户不允许登录shell，这可以通过编辑<code>/etc/passwd</code>文件完成。找到类似下面的一行：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git:</span><span class="symbol">x:</span><span class="number">505</span><span class="symbol">:</span><span class="number">505</span><span class="symbol">:</span><span class="symbol">:/home/git</span><span class="symbol">:/bin/bash</span></span><br></pre></td></tr></table></figure>
<p>改为：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git:</span><span class="symbol">x:</span><span class="number">505</span><span class="symbol">:</span><span class="number">505</span><span class="symbol">:</span><span class="symbol">:/home/git</span><span class="symbol">:/usr/bin/git-shell</span></span><br></pre></td></tr></table></figure>
<p>具体命令：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>usermod -s /usr/bin/git-shell git</span><br></pre></td></tr></table></figure>
<p>这样，git用户可以正常通过ssh使用git，但无法登录<code>shell</code>，因为我们为git用户指定的<code>git-shell</code>每次一登录就自动退出。</p>
<ul>
<li>第五步，克隆远程仓库：</li>
</ul>
<p>现在，可以通过<code>git clone</code>命令克隆远程仓库了，在各自的电脑上运行：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>git clone git<span class="variable">@server</span><span class="symbol">:/git/sample</span>.git</span><br><span class="line"><span class="title class_">Cloning</span> into <span class="string">&#x27;sample&#x27;</span>...</span><br><span class="line"><span class="symbol">warning:</span> <span class="title class_">You</span> appear to have cloned an empty repository.</span><br></pre></td></tr></table></figure>
<p>剩下的就是git操作了，具体查看git命令。</p>
<p>对于已经搭建好了的git服务器，现在需要实现在用户push时，将项目自动部署到服务器上，例如将上个教程中的<code>/git/sample.git</code>部署到<code>/public/sample/</code>下，这就要利用git的hooks中的<code>post-receive</code>来实现代码提交完成之后的动作。将仓库指定一个<code>--work-tree</code>然后进行检出操作<code>checkout --force</code>。</p>
<blockquote>
<p>具体步骤：</p>
</blockquote>
<p>新建sample文件夹，并给777权限。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>cd /<span class="keyword">public</span></span><br><span class="line"><span class="variable">$ </span>mkdir sample</span><br><span class="line"><span class="variable">$ </span>chmod -R <span class="number">777</span> sample/</span><br></pre></td></tr></table></figure>
<p>进入<code>/git/sample.git/hooks</code>，并将<code>post-receive.sample</code>复制一份<code>post-receive</code>，并且编写代码如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定我的代码检出目录</span></span><br><span class="line">DIR=/public/sample/</span><br><span class="line">git --work-tree=<span class="variable">$&#123;DIR&#125;</span> clean -fd</span><br><span class="line"><span class="comment"># 直接强制检出</span></span><br><span class="line">git --work-tree=<span class="variable">$&#123;DIR&#125;</span> checkout --force</span><br></pre></td></tr></table></figure>
<p>保存退出即可。</p>
<blockquote>
<p>注意点</p>
</blockquote>
<ol>
<li>如果我们没有配置<code>ssh免密码登陆</code>的话，我们需要在<code>push</code>代码的时候输入密码</li>
<li>如果我们添加的远程仓库不是<code>root@xxx.xxx.xx.xx</code>，例如是<code>abc@xx.xx.xx.xx</code>，那么我们要确保<code>abc</code>用户对<code>wx.git</code>目录下的文件有<code>777</code>权限。</li>
</ol>
<p>由于<code>Git系列（一）Git服务器搭建</code>已经设置了免密登陆，所以大胆push吧</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git,git服务器,自动化部署</tag>
      </tags>
  </entry>
  <entry>
    <title>GAN生成对抗式神经网络数学推导</title>
    <url>/post/5b91f628.html</url>
    <content><![CDATA[<p>由<a href="https://aichn.cn/post/fbf175a6.html">上面一篇文章</a>我们已经知道了，如果我们从真实数据分布里面取n个样本，根据给定样本我们可以列出其出现概率的表达式，那么生成这N个样本数据的似然(likelihood)就是<br>$$<br>l ( \theta )= \prod _ { i = 1 } ^ { N } p \left( x _ { i } | \theta \right)<br>$$<br>我们要找到\thetaθ来最大化这个函数，便是极大似然估计，公式如下：<br>$$<br>\hat { \theta } = \arg \max _ { \theta } H ( \theta ) = \arg \max _ { \theta } \ln l ( \theta ) = \arg \max _ { \theta } \sum _ { i = 1 } ^ { N } \ln p \left( x _ { i } | \theta \right)<br>$$<br>那么下面我们来看看GAN的推导。</p>
<p>在极大似然估计中，我们假定要求的事物有一个固定的模型，写作<br>$$<br>P_{data}(x)Pdata(x)<br>$$<br>，但这个模型十分复杂，我们无法完全彻底的去刻画它，只能列一个带有参数的式子，然后用模型抽样出来的样本去估计出这个参数到底最有可能是什么。</p>
<p>打个比方，有一个箱子，里面有一百多亿个球，球的颜色分别是红橙黄绿蓝靛紫七种，那么问从里面拿一个球出来是红色的概率。</p>
<p>面对这样一个问题。如果“一百多”后面没有跟着个“亿”，我们可以直接把不同颜色的球数出来，这样概率就有了。但有个”亿”要去数就比较要命了。因此我们知道这个系统肯定是存在着一个固定分布的参数，但不知道这个参数是个什么鬼，就只能把分布模型写成<br>$$<br>P_{data}(x)<br>$$<br>，然后用别的方式来想办法逼近这个模型。</p>
<p>我们从模型中抽出m个样本，记为<br>$$<br>{ x _{ 1 } , x _ { 2 } , \ldots , x _ { m }}<br>$$<br>然后用这些样本来估计我们模型的参数，列式如下（这里式子用李宏毅教授视频写法，和之前的有些许差异，但所表述东西是一样的）：<br>$$<br>\theta ^ { * } = \arg \max _ { \theta } \prod _ { i = 1 } ^ { m } P _ { G } \left( x ^ { i } ; \theta \right) = \arg \max _ { \theta } \log \prod _ { i = 1 } ^ { m } P _ { G } \left( x ^ { i } ; \theta \right)<br>$$</p>
<p>$$<br>= \arg \max _ { \theta } \sum _ { i = 1 } ^ { m } \log P _ { G } \left( x ^ { i } ; \theta \right)  \quad\left{ x <em>{ 1 } , x _ { 2 } , \ldots , x _ { m } \right} , from ,P</em>{data}(x)<br>$$</p>
<p>$$<br>\approx \arg \max _ { \theta } E _ { x \sim P _ { \text {data} } } \left[ \log P _ { G } ( x ; \theta ) \right]<br>$$</p>
<p>这里的≈可能需要稍微看看，中间一道式子的意思是我们利用抽样得到的样本列出极大似然估计式子，在这个之间会对所有样本概率做处理之后进行累加。假设我们取的样本就是全部样本空间（也就是我们完整取了一百多亿个球），那么它将等于<br>$$<br>\arg \max _ { \theta } m\times E _ { x \sim P _ { \text {data} } } \left[ \log P _ { G } ( x ; \theta ) \right]<br>$$<br>这里的m是样本个数，也就是一个正整数，而我们式子求的是最大值点，因此上面的式子m写不写是一样的，式子变成<br>$$<br>\arg \max _ { \theta } E _ { x \sim P _ { \text {data} } } \left[ \log P _ { G } ( x ; \theta ) \right]<br>$$<br>但因为我们取的样本并不是整个样本空间（如果我们能取整个样本空间那还聊个屁啊），我们只能尽可能的让样本分布与整个样本空间近似，因此才有了这个约定于号。</p>
<p>如果<br>$$<br>P_{data}(x)<br>$$<br>这东西是连续型的，那么上面的式子可以写成积分的形式，如下：<br>$$<br>\arg \max _ { \theta } \int _ { x } P _ { d a t a } ( x ) \log P _ { G } ( x ; \theta )\ dx<br>$$<br>又因为对于求最大值而言，对式子加上一个固定常数和减掉一个固定常数都不会影响最后的结果，因此我们可以再给上面的式子凑一个常数进去。变成如下形式：<br>$$<br>\arg \max _ { \theta } \int _ { x } P _ { d a t a } ( x ) \log P _ { G } ( x ; \theta ) d x - \int _ { x } P _ { d a t a } ( x ) \log P _ { d a t a } ( x ) d x<br>$$<br>这里这样凑是很巧妙的！！！因为要把公式凑成KLKL散度的样子。至于是怎么想到的这件事情。。。我也不知道，依稀记得初中参加奥数班的时候，老师在空间中取一个点，然后做了快十条辅助线来求解几何问题，那个时候我就觉得智商不够用了。。。</p>
<p>将上面式子整理如下：<br>$$<br>\arg \max _ { \theta } \int _ { x }[ P _ { d a t a } ( x ) \log P _ { G } ( x ; \theta ) -P _ { d a t a } ( x ) \log P _ { d a t a } ( x ) ]d x<br>$$</p>
<p>$$<br>=\arg \max _ { \theta } \int _ { x } P _ { d a t a } ( x ) \log \frac{P _ { G } ( x ; \theta )}{P _ { d a t a } ( x )} d x<br>$$</p>
<p>$$<br>=\arg \min _ { \theta } \int _ { x } P _ { d a t a } ( x ) \log \frac{P _ { d a t a } ( x )}{P _ { G } ( x ; \theta )} d x<br>$$</p>
<p>$$<br>=\arg \min _ { \theta } K L \left( P _ { d a t a } ( x ) | P _ { G } ( x ; \theta ) \right)<br>$$</p>
<p>中间最大值变最小值的步骤其实就相当于在公式前面乘一个负号，那么最大值自然就变成最小值。</p>
<p>好了，公式推到这里我们知道了，如果要去做一个模型的极大似然估计，那么相当于求真实模型和拟合模型之间的KL散度取最小值时的θ取值。</p>
<p>当然进一步想，假设这里求的不是KL散度，而是另外的一种距离，应该也是差不多的。</p>
<p>到了这一步，相信明眼人早已经看出来了，上面的推理不过就是对极大似然估计的式子做进一步的推导，其实还是跟GAN没什么关系。但那是基础，只能先推一推，然后再抛出一个问题：假设我们连带参数的式子都列不出来呢？</p>
<p>比如图像的生成问题。或许你现在还没意识到这个问题的难度，那么请你用一道公式写出世界上所有美女在图像中的表达式，那道公式就是：“我以后的女朋友”。恩，说远了，其实那道公式是，，，列不出来。。。</p>
<p>一脸懵逼了吧，哈哈，说实在的，本人以前做图像处理的时候遇到这种问题都是充满绝望的。</p>
<p>依照李教授视频的说法，有人尝试用高斯混合模型来做这件事情，但是效果很悲剧，就是因为高斯混合模型的复杂度和图像的复杂度比起来还是太小儿科了。可以做个简单的比较，曾经很流行的一个说法形容围棋的复杂度，说它的可能性比天上的星体还要多。而围棋也就19*19的361个交叉点，每个交叉点3种可能。图像哪怕是200 * 200的灰度图，每个点都有256种可能，这个数量级远非围棋可比！那么围棋用传统方法都解决不好的，图像怎么可能解决的好呢？</p>
<p>是的，要用传统方法在图像上解决问题一般限制比较多，最大的问题就是这里的这道模型公式真的很难列出来，除非你人为去加了很多限制，但这样做出来的模型泛化性又很差。而神经网络则不然，简单的讲，假设神经网络够复杂且训练的好，它可以拟合世间所有能拟合的东西，注意，是所有！因此有大神就想，要不就用神经网络来表述图像的模型好啦，于是GAN神经网络中的G(Gernerator)网络就诞生了，平地一声雷，逻辑图如下：<br><img src="/../images/GAN%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E5%BC%8F%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%95%B0%E5%AD%A6%E6%8E%A8%E5%AF%BC/20181224170233872.png" alt="在这里插入图片描述"></p>
<p>看到这个图，相信很多人一开始也跟我一样是崩溃的。没事，崩溃是我们这一行的常态嘛。首先我们要搞清楚我们要用G来做什么，前面我们讲对于图像来说，哪怕你手头上有一类图像（比如说美女图片啥的），你也很难去刻画出美女的公式是什么，而G正是来帮我们列式的。我们让它去看遍天下所有美女的图片，不断通过与真实图像进行分布差距对比来优化自己学到的规律，最终学到炉火纯青，基本上可以做到手中无片，心中有片的最高境界，可能它看到远山娥黛，便画出了王语嫣，看到绝世出尘，便画出了小龙女（李若彤版）。总之你要什么它就来什么。</p>
<p>那么对于一个神经网络，它学的是什么呢？自然是里面的权重嘛，我们可以把它写作θ。</p>
<p>一般来讲我们人如果要去学习美女图片的规律，首先会真的去看各种美女图片然后总结规律。但对于科学推理它不是这个样子的，我们要假定美女图片是一种图片的分布形式，然后列一道式子让其输出符合这个分布，那么这个式子就是美女图片的模型。这里的式子是G定义的，而因为它一开始的参数是随机的，基本不可能刚刚好就符合输出是美女这一分布。因此我们要让它批量的输出一堆的图片，然后算这些图片的分布<br>$$<br>P _ { G } ( x ; \theta )<br>$$<br>和实际的分布<br>$$<br>P _ { d a t a } ( x )<br>$$<br>之间到底差了多少，以此来调整参数θ。也就是你不给它看美女的图片，而是让它直接画，然后每次都把它画的东西撕了，骂它画的是什么屎，然后告诉他美女并不是长这样的，回去慢慢悟。经过千锤百炼，沧海桑田，它终于有一天总结出了美女的规律，功成之日仰天长啸，哈哈哈哈哈。</p>
<p>那么，前面的z又是个什么鬼？它是一个分布函数，我们每次从这个函数中取出一个样本扔进去神经网络，然后让他输出一个样本。假设我们遍历完整个z的样本空间输出了全部对应的x，而对应的x的分布又跟真实数据的分布一样，那么我们的美女生成器就做成了！</p>
<p>这里这样解释是OK的，但有点不清楚。首先是为什么用z而不用x，我们知道当神经网络的参数固定住，你扔一个东西它必然会对应一个输出。假设x的可能空间比z大，那么这个网络不就无法完全拟合整个x空间了吗？是的，但我们本来也没有想拟合整个x空间，我们需要拟合的是x空间下美女这个子集，而只要z的复杂度足够，那么经过神经网络之后出来的xx应该就可以非常近似于这个子集。当然我们这么做，主要也是不想输入太复杂。</p>
<p>如果上面关于z的解释你完全看不懂，那么除了回去看数学之外，你还能这样理解。这里的z就是前面的“远山娥黛”、“绝世出尘”、“风华绝代”、“沉鱼落雁”、“闭月羞花”、“明眸善睐”等等等等，突然想去看一遍《洛神赋》哇槽。</p>
<p>推到这里我们就把逻辑图推完了，嘴角上扬，发出得意的奸笑。然后下一秒就僵硬了，因为这个看似天衣无缝的推导有个致命的问题，就是，算不了。。。</p>
<p>我们可以看看里面的<br>$$<br>P _ { G } ( x ; \theta )<br>$$<br>长什么样：<br>$$<br>P _ { G } ( x ) = \int _ { z } P _ { \text {prior} } ( z ) I _ { [ G ( z ) = x ] } d z<br>$$<br>长这样，这个公式的x是样本给的，z是一个随机分布，整体的意思是说我们对z进行积分，积分里面是z出现的可能性乘以z经过神经网络生出来的这个东西的分布与样本的比较结果（相同为1不同为0）。为什么是这样的？</p>
<p>因为我们前面说过，我们要用z来映射到x，假设映射关系已经确定，那么z出现的可能性就直接对应于x分布的可能性，当然也可能出现多个z对应一个x的映射。<br>$$<br> I _{ [ G ( z ) = x ]}<br>$$<br>就是我们判定z映射到x的标准。</p>
<p>但这公式算不了。因为这样我们给定一个样本，要做的是遍历整个z空间来找到映射关系，而G网络又是个很复杂的东西，基本上无法算出来（再说，我们之所以用G网络也就看中了它的复杂性）。因此推到这里就推死了！原因就是算不出来。</p>
<p>那么能不能通过一个神经网络来拟合<br>$$<br>P _ { G } ( x ; \theta )<br>$$<br>呢？可以应该是可以的，但问题是拟合出来的<br>$$<br>P _ { G } ( x ; \theta )<br>$$<br>哪怕比这货<br>$$<br>P _ { G } ( x ) = \int _ { z } P _ { \text {prior} } ( z ) I _ { [ G ( z ) = x ] } d z<br>$$<br>简单一点，但也是个很复杂的神经网络啊！这样后面拿它去算KL散度也没得算。因此进一步，能不能直接用神经网络来帮忙评估各个分布之间的距离呢？</p>
<p>D（Discriminator）网络就这么诞生了。这个D网络干的事情就是输入一个x来自真实样本或者拟合样本，然后分析它们来自哪里，并输出一个标量。这个标量你可以训练它为一个判定标准，就是如果是真实样本就输出接近1的数，拟合样本就输出接近0的数这样子。这样我们的判别器也就有了，把判别器对于真实样本和拟合样本的所有判别做比较处理，则我们G网络需要的分布距离也就有了。</p>
<p>上面说了那么多，其实实际上，GAN论文告诉我们只要让G和D各自来解下面这道式子就完事了（牛逼的人从来就是这样，不啰嗦，人狠话不多）。<br>$$<br>G ^ { * } = \arg \min _ { G } \max _ { D } V ( G , D )<br>$$<br>右边的<br>$$<br>\max _ { D } V ( G , D )<br>$$<br>假定G已经是确定的，那么就变成<br>$$<br>\arg\max _ { D } V ( D )<br>$$<br>。V这个函数算的是<br>$$<br>P _ { d a t a } ( x )<br>$$<br> 和<br>$$<br>P _ { G }<br>$$<br>之间的距离。那么我们这个时候就是要训练D网络来最大化这个距离，因为只有这样我们的判别器才是给力的。然后一旦我们的判别器非常给力了，那么我们只要定住它，训练G来使得<br>$$<br>\arg\min _ { G } V ( G )<br>$$<br>这道公式最小就可以了。因为这道公式最小说明我们通过神经网络实现了类似于极大似然法，找到了网络的最优解<br>$$<br>\theta  ^ { * }<br>$$<br>。</p>
<p>现在剩下的最后一个问题就是V这个算<br>$$<br>P _ { d a t a } ( x )<br>$$<br> 和<br>$$<br>P _ { G }<br>$$<br>之间距离的函数到底长什么样了。原生GAN的论文告诉我们V长这样：<br>$$<br>V = E _ { x \sim P _ { \text {data} } } [ \log D ( x ) ] + E _ { x \sim P _ { G } } [ \log ( 1 - D ( x ) ) ]<br>$$<br>看到这里我满脑子的“哇槽”，为什么啊！这为什么就是<br>$$<br>P _ { d a t a } ( x )<br>$$<br>和<br>$$<br>P _ { G }<br>$$<br>之间的距离啊？？？</p>
<p>想到头发白了之后终于明白了。假设我们训练出来的这个D网络输出的是样本是真样本的概率，那么公式第一项我们肯定希望这个D(x)越接近于1越好，而第二项希望它越接近于0越好，这样整个V取得最大值（注意这里两项的x不是同一个，李教授的视频这样写感觉不如原论文区分开来清楚），如果是一个真的无敌的神经网络上面这个区分它是做的到的（当然随着拟合越来越好要区分则越来越难，如果有拟合的数据和实际的数据重叠了，则无法取得理想的最大值）。反之，如果网络判断能力越差，则这个式子越小。因此它就是一个衡量<br>$$<br>P _ { d a t a } ( x )<br>$$<br>和<br>$$<br> P _ { G }<br>$$<br>之间的距离的公式。另外这里最妙的还在于后面，我们对公式做展开。<br>$$<br>V = E _ { x \sim P _ { d a t a } } [ \log D ( x ) ] + E _ { x \sim P _ { G } } [ \log ( 1 - D ( x ) ) ]<br>$$</p>
<p>$$<br>= \int _ { x } P _ { d a t a } ( x ) \log D ( x ) d x + \int _ { x } P _ { G } ( x ) \log ( 1 - D ( x ) ) d x<br>$$</p>
<p>$$<br>= \int_ { x }  \left[ P _ { d a t a } ( x ) \log D ( x ) + P _ { G } ( x ) \log ( 1 - D ( x ) ) \right] d x<br>$$</p>
<p>这里我们假设D(x)是无敌的，对于每个积分中的积分的x都能找到一个D(x)使得积分里面的式子最大，那么最后积分出来的值肯定就是最大的。所以我们现在如果要求使得上面这个式子最大的D(x)，就相当于求使得下面这个式子最大的D(x)<br>$$<br>P _ { d a t a } ( x ) \log D ( x ) + P _ { G } ( x ) \log ( 1 - D ( x ) )<br>$$<br>这里的计算就极其简单了（李教授表示小学生都会算），就是求导然后让式子等于0，求出这个时候D(x)是多少就行。最后求出来：<br>$$<br>D ^ { * } ( x ) = \frac { P _ { d a t a } ( x ) } { P _ { d a t a } ( x ) + P _ { G } ( x ) }<br>$$<br>可以看出<br>$$<br>D ^ { * } ( x )<br>$$<br>是大于0小于1的数，符合我们刚刚对D(x)的定义。</p>
<p>这样我们这道神话般的公式：<br>$$<br>G ^ { * } = \arg \min _ { G } \max _ { D } V ( G , D )<br>$$<br>的右边部分就有了。我们把<br>$$<br>D ^ { * } ( x )<br>$$<br>往公式V代入：<br>$$<br>V = E _ { x \sim P _ { d a t a } } [ \log D ( x ) ] + E _ { x \sim P _ { G } } [ \log ( 1 - D ( x ) ) ]<br>$$</p>
<p>$$<br>= E _ { x \sim P _ { d a t a } } \left[ \log \frac { P _ { d a t a } ( x ) } { P _ { d a t a } ( x ) + P _ { G } ( x ) } \right]+ E _ { x \sim P _ { G } } \left[ \log \frac { P _ { G } ( x ) } { P _ { d a t a } ( x ) + P _ { G } ( x ) } \right]<br>$$</p>
<p>$$<br>= \int _ { x } P _ { d a t a } ( x ) \log \frac { \frac { 1 } { 2 } P _ { d a t a } ( x ) } { \frac { P _ { d a t a } ( x ) + P _ { G } ( x ) } { 2 } } d x+ \int _ { x } P _ { G } ( x ) \log \frac { \frac { 1 } { 2 }P _ { G } ( x ) } { \frac { d a t a ( x ) + P _ { G } ( x ) } { 2 } } d x<br>$$</p>
<p>$$<br>=  2 \log \frac { 1 } { 2 }+\int _ { x } P _ { d a t a } ( x ) \log \frac {P _ { d a t a } ( x ) } { \frac { P _ { d a t a } ( x ) + P _ { G } ( x ) } { 2 } } d x+ \int _ { x } P _ { G } ( x ) \log \frac { P _ { G } ( x ) } { \frac { d a t a ( x ) + P _ { G } ( x ) } { 2 } } d x<br>$$</p>
<p>上面的<br>$$<br>2 \log \frac { 1 } { 2 }<br>$$<br>是把两项分子的<br>$$<br>\frac { 1 } { 2 }<br>$$<br>拿出来的结果，因为log里面相乘就等于外面相加，然后对<br>$$<br>P _ { d a t a } ( x )<br>$$<br>或<br>$$<br>P _ { G }( x )<br>$$<br>的整个空间进行积分结果都等于1。推导比较简单，就不写了。<br>$$<br>=  -2 \log 2+\int _ { x } P _ { d a t a } ( x ) \log \frac {P _ { d a t a } ( x ) } { \frac { P _ { d a t a } ( x ) + P _ { G } ( x ) } { 2 } } d x+ \int _ { x } P _ { G } ( x ) \log \frac { P _ { G } ( x ) } { \frac { d a t a ( x ) + P _ { G } ( x ) } { 2 } } d x<br>$$</p>
<p>$$<br>= - 2 \log 2 + \mathrm { KL } \left( \mathrm { P } _ { \text { data } } ( \mathrm { x } ) | \frac { \mathrm { P } _ { \mathrm { data } } ( \mathrm { x } ) + \mathrm { P } _ { \mathrm { G } } ( \mathrm { x } ) } { 2 } \right)+ \mathrm { KL } \left( \mathrm { P } _ { \mathrm { G } } ( \mathrm { x } ) | \frac { \mathrm { P } _ { \mathrm { data } } ( \mathrm { x } ) + \mathrm { P } _ { \mathrm { G } } ( \mathrm { x } ) } { 2 } \right)<br>$$</p>
<p>$$<br>= - 2 \log 2 + 2 J S  \left( P _ { \text {data} } ( x ) | P _ { G } ( x ) \right)<br>$$</p>
<p>推到这一步基本上没什么难度，当看到<br>$$<br>J S  \left( P _ { \text {data} } ( x ) | P _ { G } ( x ) \right)<br>$$<br>这一项出来的时候差点跪了下去，牛逼啊哇槽！因为这一项告诉我们，如果<br>$$<br>D ^ { * } ( x )<br>$$<br>取得最大值，那么V这个公式将直接变成衡量<br>$$<br>P _ { \text {data} } ( x )<br>$$<br>和<br>$$<br>P _ { G } ( x )<br>$$<br>之间差距的公式。这个时候只要我们求出对应的G的最小值就搞定了，巧得不要不要的。</p>
<p>还有更牛逼的，假设<br>$$<br>G ^ { * } = \arg \min _ { G } \max _ { D } V ( G , D )<br>$$<br>这倒公式的D定住了，我们可以把<br>$$<br>\max _ { D } V ( G , D )<br>$$<br>写成L(G)，它牛逼在哪？牛逼在于L(G)直接就是我们G网络的损失函数，我们要让L(G)取得最小值，不就是我们神经网络的目标吗！？完美！每每看到这里就不禁感慨大自然的神奇，数学的伟大和人类的渺小啥的。。。</p>
<p>到此我们就把全部数学推导过程全部做完了，感觉真是一把老泪掉下来，不知不觉写了五千多字，应该是写过的最长的一篇博客了。到此你可能已经明白了数学怎么来的了，但其实还有另外一半，那就是实际该怎么实现，<a href="https://aichn.cn/index/article/show/id/87.html">下篇文章</a>将讨论这个问题。</p>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>-神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>JS散度</title>
    <url>/post/c7d146d6.html</url>
    <content><![CDATA[<p>前面我们介绍了<a href="https://aichn.cn/index/article/show/id/81.html">相对熵（KL散度）</a>的概念，知道了它可以用来表示两个概率分布之间的差异，但有个不大好的地方是它并不是对称的，因此有时用它来训练神经网络会有顺序不同造成不一样的训练结果的情况（其实个人觉得也就是训练时间差异罢了，也没那么严重）。为了克服这个问题，有人就提出了一个新的衡量公式，叫做JS散度，式子如下：<br>$$<br>J S \left( P _ { 1 } | P _ { 2 } \right) = \frac { 1 } { 2 } K L \left( P _ { 1 } | \frac { P _ { 1 } + P _ { 2 } } { 2 } \right) + \frac { 1 } { 2 } K L \left( P _ { 2 } | \frac { P _ { 1 } + P _ { 2 } } { 2 } \right)JS(P1∥P2)=21KL(P1∥2P1+P2)+21KL(P2∥2P1+P2)<br>$$<br>如果有一点数学功底的人可以轻易看出这个公式对于<br>$$<br>P _ { 1 }和P _ { 2 }<br>$$<br>是对称的，而且因为是两个KL的叠加，由相对熵的文章我们知道KL的值一定是大于等于0的，因此这个公式也一定大于等于0。</p>
<p>现在只剩下一个关键问题，就是什么时候等于0的问题了。同样参考相对熵的文章我们知道当两个分布相同的时候等于0，那么换到这里，也就是：<br>$$<br>P _ { 1 }=\frac { P _ { 1 } + P _ { 2 } }{ 2 }\ \qquad 且 \qquad P _ { 2 }=\frac { P _ { 1 } + P _ { 2 } } { 2 }P_ { 1 }=2P_ { 1 }+P_ { 2 } 且P_ { 2 }=2P_ { 1 }+P_ { 2 }<br>$$<br>的时候。可以轻易看出来，JS散度等于0的时候跟KL散度一样，就是<br>$$<br>P _ { 1 }和P _ { 2 }<br>$$<br>完全一样的时候。那么推到这里，用JS散度来表达两个概率分布的差异就问题不大了。</p>
<p>其实本人在看相对熵和JS散度的时候一直有疑问，就是当两个概率分布不一样的时候，它们的值是不是会随着距离的变大而变大，也就是说这两个公式跟概率分布的距离到底是不是一个单调的关系，但我没有看到别人在说这件事情。我自己想了半天之后得出的结论是不一定，可能随着概率分布的表达式不一样而有所变化。</p>
<p>当然因为没有人讲这件事我至今也不知道这样想是不是对的，因此有老哥想明白了麻烦留个言告诉我。</p>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>-人工智能 -大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>GAN的数学推导和案例应用</title>
    <url>/post/2379.html</url>
    <content><![CDATA[<blockquote>
<p>本章涉及到的知识点清单：</p>
<p><strong>1、数学期望的定义</strong></p>
<p><strong>2、KL散度的定义</strong></p>
<p><strong>3、零和博弈</strong></p>
<p><strong>4、GAN的工作原理</strong></p>
<p><strong>5、GAN的目标函数</strong></p>
<p><strong>6、求解D的最优解</strong></p>
<p><strong>7、反求解G使得G和D的概率分布差异最小</strong></p>
<p><strong>8、案例之GAN实现拟合二次函数</strong></p>
</blockquote>
<p>在推导GAN公式之前，需要预备一些数学期望和KL散度的知识点</p>
<p>一、数学期望的定义</p>
<p>期望：在概率论中，将实验中<strong>每次可能产生的结果的概率乘以其结果的总和，反映随机变量平均取值的大小</strong>。根据其随机变量的取值范围不同，分为离散型和连续型</p>
<p>对于连续型随机变量x，其概率密度函数为f(x)，则X的数学期望E(x)可以表示成微积分的形式</p>
<p><img src="/../images/GAN%E7%9A%84%E6%95%B0%E5%AD%A6%E6%8E%A8%E5%AF%BC%E5%92%8C%E6%A1%88%E4%BE%8B%E5%BA%94%E7%94%A8/20181226194302590.png" alt="img"></p>
<p>二、KL散度的定义</p>
<p>KL散度：在信息论中，<strong>用生成的概率分布Q来拟合逼近真实的概率分布P时，所产生的信息损耗</strong>，即描述两个概率分布的差异，其本身是非对称的</p>
<p>设x是连续型随机变量，其真实概率分布为P(x)，拟合分布概率为Q(x)，则P对Q的KL散度为</p>
<p><img src="/../images/GAN%E7%9A%84%E6%95%B0%E5%AD%A6%E6%8E%A8%E5%AF%BC%E5%92%8C%E6%A1%88%E4%BE%8B%E5%BA%94%E7%94%A8/20181226194324640.png" alt="img"></p>
<p>三、零和博弈</p>
<p><strong>GAN被称为对抗式神经网络，启发自博弈论中的二人零和博弈</strong></p>
<p>零和博弈：<strong>指参与博弈的双方，在严格的竞争下，一方的收益必然意味着另一方的损失，博弈过程中，双方的各自收益和损失的相加总和永远为零，双方完全不存在合作的可能</strong>。就好比下棋一样，你和对手的每一步棋都是向着自己最有利的方向走，最终只有一方赢一方输，而下棋的总成绩永远为零</p>
<p>显然，GAN也是由博弈双方组成，分别为<strong>生成网络G（Generator）和判别网络D（Discriminator）</strong></p>
<p>四、GAN的工作原理</p>
<p><img src="/../images/GAN%E7%9A%84%E6%95%B0%E5%AD%A6%E6%8E%A8%E5%AF%BC%E5%92%8C%E6%A1%88%E4%BE%8B%E5%BA%94%E7%94%A8/20181226194349495.jpg" alt="img"></p>
<p>GAN的工作过程</p>
<p>上图中，x是真实数据，Pdata(x)是x的概率分布，z是噪点数据，P(z)是z的概率分布，其工作过程为：</p>
<blockquote>
<p><strong>(1)：从噪声z进行随机抽样，传入G网络，生成新数据G(z)和其概率分布Pg(G(z))</strong></p>
<p><strong>(2)：将真实数据和G生成的新数据一起传入D网络进行真假判别，通过sigmoid函数来输出判定类别</strong></p>
<p><strong>(3)：迭代优化D和G损失函数，根据D来调整G</strong></p>
<p><strong>(4)：直到D和G达到收敛，即D无法判断G产生数据的真假性，即Pg(G(z))已经非常逼近Pdata(x)</strong></p>
</blockquote>
<p>至此，我们可以抽象看出GAN的目的，<strong>将随机噪声z通过G网络得到一个和真实数据分布Pdata(x)差不多的生成分布Pg(G(z))，这个过程就是G和D相互博弈的过程</strong></p>
<p>五、GAN的目标函数</p>
<p>定义GAN的目标函数为V(G，D)，在博弈过程中，G希望减少V的值让自己生成的分布无法识别，而D希望增大V的值让自己可以高效的判别出数据的真假类别，则V(G，D)的表达式为</p>
<p><img src="/../images/GAN%E7%9A%84%E6%95%B0%E5%AD%A6%E6%8E%A8%E5%AF%BC%E5%92%8C%E6%A1%88%E4%BE%8B%E5%BA%94%E7%94%A8/20181226194407390.png" alt="img"></p>
<p>目标函数</p>
<p>其中E表示真实数据x和噪点数据z的数学期望</p>
<p>G网络是一个生成器，可以是全连接神经网络、卷积神经网络等等，通过噪点分布P(z)，一般是高斯分布，得到一个生成数据的分布Pg(x)，我们希望Pg(x)非常靠近Pdata(x)，来拟合逼近真实分布</p>
<p>D网络是一个判别函数，需要解决传统的二分类问题，其职责就是有效的区分真实分布和生成分布，即衡量Pg(x)和Pdata(x)之间的差距，并通过反复的迭代训练</p>
<p>六、求解D的最优解</p>
<p>从目标函数出发，由于V是连续的，我们将V写成微积分的形式来表示期望</p>
<p><img src="/../images/GAN%E7%9A%84%E6%95%B0%E5%AD%A6%E6%8E%A8%E5%AF%BC%E5%92%8C%E6%A1%88%E4%BE%8B%E5%BA%94%E7%94%A8/2018122619450691.png" alt="img"></p>
<p>目标函数的积分形式1</p>
<p>设G(z)生成的数据是x，分别求出噪点z和噪点的微分dz表达式</p>
<p><img src="/../images/GAN%E7%9A%84%E6%95%B0%E5%AD%A6%E6%8E%A8%E5%AF%BC%E5%92%8C%E6%A1%88%E4%BE%8B%E5%BA%94%E7%94%A8/20181226194521503.png" alt="img"></p>
<p>z和dz关于x的表达式</p>
<p>带入z和dz，可以得到</p>
<p><img src="/../images/GAN%E7%9A%84%E6%95%B0%E5%AD%A6%E6%8E%A8%E5%AF%BC%E5%92%8C%E6%A1%88%E4%BE%8B%E5%BA%94%E7%94%A8/20181226194659286.png" alt="img"></p>
<p>目标函数的积分形式2</p>
<p>我们定义Pg(x)表示z的生成分布，则</p>
<p><img src="/../images/GAN%E7%9A%84%E6%95%B0%E5%AD%A6%E6%8E%A8%E5%AF%BC%E5%92%8C%E6%A1%88%E4%BE%8B%E5%BA%94%E7%94%A8/2018122619474799.png" alt="img"></p>
<p>生成分布Pg(x)</p>
<p>带入目标函数可得</p>
<p><img src="/../images/GAN%E7%9A%84%E6%95%B0%E5%AD%A6%E6%8E%A8%E5%AF%BC%E5%92%8C%E6%A1%88%E4%BE%8B%E5%BA%94%E7%94%A8/20181226194811812.png" alt="img"></p>
<p>目标函数的积分形式3</p>
<p>现在要求V(D，G)关于D的最大值，则固定G来求D的偏导数</p>
<p><img src="/../images/GAN%E7%9A%84%E6%95%B0%E5%AD%A6%E6%8E%A8%E5%AF%BC%E5%92%8C%E6%A1%88%E4%BE%8B%E5%BA%94%E7%94%A8/20181226194831825.png" alt="img"></p>
<p>求解D的最大值</p>
<p>七、反求解G使得G和D的概率分布差异最小</p>
<p>从D(x)的最优解D*(X)的表达式可以看到，我们期望当G产生出来的拟合分布和真实分布一致时，即</p>
<p><img src="/../images/GAN%E7%9A%84%E6%95%B0%E5%AD%A6%E6%8E%A8%E5%AF%BC%E5%92%8C%E6%A1%88%E4%BE%8B%E5%BA%94%E7%94%A8/2018122619485130.png" alt="img"></p>
<p>拟合分布和真实分布一致</p>
<p>在这个条件下，D*(x)=1/2，<strong>即此时D网络已经无法直接分辨出G产生出来的数据的真假性了</strong></p>
<p>那么当D满足最优解后，此时的G的解是什么呢？我们只需要带入D*(x)反过来求解G即可</p>
<p><img src="/../images/GAN%E7%9A%84%E6%95%B0%E5%AD%A6%E6%8E%A8%E5%AF%BC%E5%92%8C%E6%A1%88%E4%BE%8B%E5%BA%94%E7%94%A8/20181226194914915.png" alt="img"></p>
<p>带入D*(x)求出C(G)积分式</p>
<p>我们对上述积分表达式进行等效处理，在log里面的分式上，分子分母同时除以2（分式不变原理），然后保持分母不变，将分子的1/2利用对数的乘法原理提到外面，则上式可以等效变形为</p>
<p><img src="/../images/GAN%E7%9A%84%E6%95%B0%E5%AD%A6%E6%8E%A8%E5%AF%BC%E5%92%8C%E6%A1%88%E4%BE%8B%E5%BA%94%E7%94%A8/20181226195008106.png" alt="img"></p>
<p>等效变化C(G)积分式</p>
<p>我们引入连续函数的KL散度将上式积分式整理成散度表达式</p>
<p><img src="/../images/GAN%E7%9A%84%E6%95%B0%E5%AD%A6%E6%8E%A8%E5%AF%BC%E5%92%8C%E6%A1%88%E4%BE%8B%E5%BA%94%E7%94%A8/20181226195102873.png" alt="img"></p>
<p>C(G)散度表达式</p>
<p>根据KL散度的定义，当拟合分布Pg(x)完全等于真实分布Pdata(x)时，KL=0，所以G网络的最小值是-log4</p>
<p>由此证明了当D网络逼近其最优解的同时，G网络也无限逼近其最小值</p>
<p>八、案例之GAN实现拟合二次函数</p>
<p>有G网络和D网络的意义，我们编写如下代码来拟合二次函数，其中G网络只是一个全连接网络，利用梯度下降来反向传播更新其权重</p>
<p><img src="/../images/GAN%E7%9A%84%E6%95%B0%E5%AD%A6%E6%8E%A8%E5%AF%BC%E5%92%8C%E6%A1%88%E4%BE%8B%E5%BA%94%E7%94%A8/20181226194020811.png" alt="img"></p>
<p>G网络和D网络</p>
<p>迭代5000次后的博弈结果为</p>
<p>训练开始的生成分布</p>
<p><img src="/../images/GAN%E7%9A%84%E6%95%B0%E5%AD%A6%E6%8E%A8%E5%AF%BC%E5%92%8C%E6%A1%88%E4%BE%8B%E5%BA%94%E7%94%A8/20181226194108608.png" alt="img"></p>
<p>训练结束的生成分布</p>
<p><img src="/../images/GAN%E7%9A%84%E6%95%B0%E5%AD%A6%E6%8E%A8%E5%AF%BC%E5%92%8C%E6%A1%88%E4%BE%8B%E5%BA%94%E7%94%A8/2018122619412674.png" alt="img"></p>
<p>从结果上可以看到，G网络生成的分布(绿色)已经非常逼近真实分布(蓝色)，且D网络的判别能力逼近50%，G网络的最优值逼近-log4=1.38629达到了很好的收敛效果</p>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>-人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo部署到个人服务器</title>
    <url>/post/6d0bc8dc.html</url>
    <content><![CDATA[<h1 id="在CentOS-7中搭建Git服务器"><a href="#在CentOS-7中搭建Git服务器" class="headerlink" title="在CentOS 7中搭建Git服务器"></a>在CentOS 7中搭建Git服务器</h1><p>环境说明</p>
<ul>
<li>CentOS 7.x 最小安装</li>
<li>配置网络连接</li>
</ul>
<ol>
<li>安装Git及创建用户<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装Git </span><br><span class="line">$ yum install git </span><br><span class="line"></span><br><span class="line"># 创建一个git用户组和用户，用来运行git服务 </span><br><span class="line">$ groupadd git </span><br><span class="line">$ adduser git -g git</span><br></pre></td></tr></table></figure>
禁止git用户登录:</li>
</ol>
<p>修改/etc/passwd文件，修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 找到这句： </span><br><span class="line">git:x:503:503::/home/git:/bin/bash</span><br><span class="line"></span><br><span class="line"># 改为： </span><br><span class="line">git:x:503:503::/home/git:/bin/git-shell</span><br></pre></td></tr></table></figure>


<ol start="2">
<li><p>创建证书登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkdir /home/git/.ssh </span><br><span class="line">$ chmod 700 /home/git/.ssh </span><br><span class="line">$ touch 700 /home/git/.ssh/authorized_keys </span><br><span class="line">$ chmod 644 /home/git/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<p>注意，如果是采用的sudo方式来创建git和相应的文件的，需要设置/home/git/.ssh/的owner为git，否则还是每次要输入密码的。</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># owner改为git </span><br><span class="line">$ sudo chown -R git:git /home/git/.ssh/</span><br></pre></td></tr></table></figure>
<p>编辑/home/git/.ssh/authorized_keys，把客户端的公钥放进去，1个公钥1行。</p>
<p>附：如何创建私钥：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建私钥，文件位于用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件 </span><br><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure>
<p>3.初始化Git仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd /srv </span><br><span class="line">$ mkdir gitrepo </span><br><span class="line">$ chown git:git gitrepo/ </span><br><span class="line">$ cd gitrepo </span><br><span class="line"></span><br><span class="line"># 创建一个空的Git仓库，服务器上的Git仓库通常都以.git结尾 </span><br><span class="line">$ git init --bare project.git </span><br><span class="line"></span><br><span class="line"># 将仓库所属用户改为git </span><br><span class="line">$ chown -R git:git project.git</span><br></pre></td></tr></table></figure>


<ol start="4">
<li>克隆仓库<br>在另一台电脑上（下面称为：Client），安装git，并且运行下面的命令：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone git@10.123.123.123:/srv/gitrepo/project.git</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>验证安装</li>
<li><ol>
<li>推送到远程服务器<br>在本地Client的project目录下，创建一个文件：text.txt，内容随意，然后上传到远端：</li>
</ol>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>
<p>5.2. 检验<br>在本地Client的另外一个目录下，克隆一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone git@10.123.123.123:/srv/gitrepo/project.git</span><br></pre></td></tr></table></figure>
<p>看看text.txt文件是否存在，内容是否对。</p>
<p>5.3. 常用的Git命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git add . 添加所有文件  注意有个 . </span><br><span class="line">$ git commit -m &#x27;注释&#x27; 提交本地</span><br><span class="line">$ git push origin master提交给默认分支</span><br><span class="line">$ git -rm 删除</span><br><span class="line">$ git pull origin master 从默认分支下载</span><br><span class="line">$ git branch -v 查看所有分支</span><br></pre></td></tr></table></figure>


<h3 id="Hexo是一个快速、简洁且高效的博客框架。"><a href="#Hexo是一个快速、简洁且高效的博客框架。" class="headerlink" title="Hexo是一个快速、简洁且高效的博客框架。"></a>Hexo是一个快速、简洁且高效的博客框架。</h3><p>Hexo基于JS脚本语言结合Markdown文本解析生成静态的HTML页面；本地基于Node环境就可初始化一个带有简单主题的博客网站；<a href="https://hexo.io/">Hexo</a>官网对Hexo的介绍也比较清楚。推荐个<a href="https://www.youtube.com/watch?v=Ud1xAhu7t2Y&index=1&list=PLXbU-2B80FvDjD_RiuNwsSQ4eF8pkwAIa">Hexo视频讲解地址</a>。</p>
<p>Hexo+Github Pages 是大部分博主选择部署Hexo的方式，得到Github pages分配的IP地址然后再和自己申请的域名进行绑定；这种方式相对简单；官方和网上介绍也有很多。</p>
<p>将个人项目放在别人的服务器上，这种寄人篱下的感觉你懂得；并且Github服务器上的项目响应速度国内也并不是太好；所以还是决定在自己服务器上搭建Hexo。</p>
<p>准备工作：</p>
<ul>
<li>需要一台自己的云服务器(本站CentOS)</li>
<li>具备生成Hexo个人博客网站计算机一台</li>
</ul>
<p>介绍下实现的思路：</p>
<ul>
<li>浏览器访问的地址需要映射到项目的静态文件，也就是Hexo g运行后在项目中生成的public文件夹。</li>
<li>官方文档<a href="https://hexo.io/zh-cn/docs/deployment">部署</a>介绍了，配置文件_config.yml中的deploy配置选项可以将项目在运行hexo d的时候；推送到指定的Gitlab仓库中。</li>
<li>在个人服务器上搭建一个Git服务端-<a href="https://blog.csdn.net/martinwangjun/article/details/78780885">传送门</a>。</li>
<li>域名或IP访问内容服务器上需要Nginx配置映射。</li>
</ul>
<h4 id="具体实现："><a href="#具体实现：" class="headerlink" title="具体实现："></a>具体实现：</h4><h4 id="本地-config-yml配置"><a href="#本地-config-yml配置" class="headerlink" title="本地_config.yml配置"></a>本地_config.yml配置</h4><p>本地已生成了一个自己满意的网站后；将_config.yml中deploy配置修改为服务器自己生成的个人仓库地址；例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    <span class="built_in">type</span>: git</span><br><span class="line">    message: update</span><br><span class="line">    repo: git@服务器IP:/srv/blog.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure>
<h4 id="Git脚本"><a href="#Git脚本" class="headerlink" title="Git脚本"></a>Git脚本</h4><p>成功推送到自己的仓库后；需要利用脚本将仓库的public资源拉取到一个文件夹下，作为Nginx后面在配置的映射地址；进入配置的仓库下的Hooks文件夹;例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /srv/blog.git/hooks</span><br><span class="line"></span><br><span class="line"><span class="built_in">touch</span> post-receive</span><br><span class="line"></span><br><span class="line">vim post-receive</span><br></pre></td></tr></table></figure>
<p>写入以下脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">GIT_REPO=/srv/blog.git</span><br><span class="line">TMP_GIT_CLONE=/srv/tmp/blog</span><br><span class="line">PUBLIC_WWW=/srv/project/blog</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf <span class="variable">$&#123;TMP_GIT_CLONE&#125;</span></span><br><span class="line">git <span class="built_in">clone</span> <span class="variable">$GIT_REPO</span> <span class="variable">$TMP_GIT_CLONE</span></span><br><span class="line"><span class="built_in">rm</span> -rf <span class="variable">$&#123;PUBLIC_WWW&#125;</span></span><br><span class="line"><span class="built_in">cp</span> -rf <span class="variable">$&#123;TMP_GIT_CLONE&#125;</span> <span class="variable">$&#123;PUBLIC_WWW&#125;</span></span><br></pre></td></tr></table></figure>
<p>脚本内容是为了让Git仓库每次检测到push行为后，将最新的资源文件Git clone在你要访问的文件夹下。</p>
<p>并且需要修改文件夹的读写权限，不然是无法自动执行该脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> -R root:git /srv/tmp/</span><br><span class="line"><span class="built_in">chmod</span> -R g+w /srv/tmp/</span><br></pre></td></tr></table></figure>
<h4 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h4><p>Nginx怎么搭建，网上有很多。<br> 配置修改，例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;                                                                               </span><br><span class="line">    listen 80 default_server;</span><br><span class="line">    listen [::]:80 default_server ipv6only=on;</span><br><span class="line"></span><br><span class="line">    root /srv/project/blog;    </span><br><span class="line">                                                    </span><br><span class="line">    server_name 域名或IP;    </span><br><span class="line">                                             </span><br><span class="line">    access_log  /srv/nginxlog/blog_access.log;                                    </span><br><span class="line">    error_log   /srv/nginxlog/blog_error.log;                                            </span><br><span class="line">    location ~* ^.+\.(ico|gif|jpg|jpeg|png)$ &#123;                            </span><br><span class="line">            root /srv/project/blog;                                    </span><br><span class="line">            access_log   off;                 </span><br><span class="line">            expires      1d;                            </span><br><span class="line">    &#125;                                                                              </span><br><span class="line">    location ~* ^.+\.(css|js|txt|xml|swf|wav)$ &#123;                                   </span><br><span class="line">        root /srv/project/blog;                                                        </span><br><span class="line">        access_log   off;                                                          </span><br><span class="line">        expires      10m;                                                          </span><br><span class="line">    &#125;                                                                              </span><br><span class="line">    location / &#123;                                                                   </span><br><span class="line">        root /srv/project/blog;                                                </span><br><span class="line">        <span class="keyword">if</span> (-f <span class="variable">$request_filename</span>) &#123;                                            </span><br><span class="line">            rewrite ^/(.*)$  /<span class="variable">$1</span> <span class="built_in">break</span>;                                    </span><br><span class="line">        &#125;                                                                      </span><br><span class="line">    &#125;                      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样本地执行hexo g;hexo d后浏览器就可以通过访问服务器进行hexo博客访问~~~<br> 个人网站地址：<a href="https://blog.aichn.cn/">https://blog.aichn.cn</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo,个人服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>K1/K2刷华硕固件开OpenVPN安装HTTP透明代理搭建手机云免流服务器(苹果未越狱免流量)</title>
    <url>/post/72ee8144.html</url>
    <content><![CDATA[<p>第1步：打开<a href="http://www.ip138.com检查你的ip是否与路由器的WAN口IP一样，如果不一样，请跳过第2-4步，参考：[华硕老毛子固件Ngrok内网穿透教程](http://www.ittel.cn/archives/494.html)。">www.ip138.com检查你的ip是否与路由器的WAN口IP一样，如果不一样，请跳过第2-4步，参考：[华硕老毛子固件Ngrok内网穿透教程](http://www.ittel.cn/archives/494.html)。</a></p>
<p><img src="/../images/K1K2%E5%88%B7%E5%8D%8E%E7%A1%95%E5%9B%BA%E4%BB%B6%E5%BC%80OpenVPN%E5%AE%89%E8%A3%85HTTP%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E6%90%AD%E5%BB%BA%E6%89%8B%E6%9C%BA%E4%BA%91%E5%85%8D%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8(%E8%8B%B9%E6%9E%9C%E6%9C%AA%E8%B6%8A%E7%8B%B1%E5%85%8D%E6%B5%81%E9%87%8F)/11b7b531f931d92ef630812af5a8b895.png" alt="img"></p>
<p>第2步：注册花生壳帐号，<a href="http://hsk.oray.com/">http://hsk.oray.com</a></p>
<p>第3步：到域名管理，注册一个花生壳域名：<a href="http://hsk.oray.com/bang/domain/">http://hsk.oray.com/bang/domain/</a></p>
<p>不会注册的请参考：<a href="http://www.ittel.cn/archives/498.html">怎么注册花生壳免费域名</a>。</p>
<p>温馨提醒：每一步设置完之后都要在最下面点一下“应用本页面配置”。</p>
<p>第4步：在华硕固件中填写你的花生壳帐号和密码以及刚申请的花生壳域名（记得删除前面的#号）。</p>
<p><img src="/../images/K1K2%E5%88%B7%E5%8D%8E%E7%A1%95%E5%9B%BA%E4%BB%B6%E5%BC%80OpenVPN%E5%AE%89%E8%A3%85HTTP%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E6%90%AD%E5%BB%BA%E6%89%8B%E6%9C%BA%E4%BA%91%E5%85%8D%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8(%E8%8B%B9%E6%9E%9C%E6%9C%AA%E8%B6%8A%E7%8B%B1%E5%85%8D%E6%B5%81%E9%87%8F)/e05172123ae95a75e469f4a53ebadfc1.png" alt="img"></p>
<p>第5步：启用华硕固件VPN服务器，VPN服务器协议选择OpenVPN，交通选择TCP，如下图。</p>
<p><img src="/../images/K1K2%E5%88%B7%E5%8D%8E%E7%A1%95%E5%9B%BA%E4%BB%B6%E5%BC%80OpenVPN%E5%AE%89%E8%A3%85HTTP%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E6%90%AD%E5%BB%BA%E6%89%8B%E6%9C%BA%E4%BA%91%E5%85%8D%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8(%E8%8B%B9%E6%9E%9C%E6%9C%AA%E8%B6%8A%E7%8B%B1%E5%85%8D%E6%B5%81%E9%87%8F)/b8e950f260b4778fabb6e47f1fd36b01.png" alt="img"></p>
<p>第6步：生成OpenVPN的证书及密钥，点击生成即可，这里生成时间较长，请耐心等待一会，然后保存。</p>
<p><img src="/../images/K1K2%E5%88%B7%E5%8D%8E%E7%A1%95%E5%9B%BA%E4%BB%B6%E5%BC%80OpenVPN%E5%AE%89%E8%A3%85HTTP%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E6%90%AD%E5%BB%BA%E6%89%8B%E6%9C%BA%E4%BA%91%E5%85%8D%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8(%E8%8B%B9%E6%9E%9C%E6%9C%AA%E8%B6%8A%E7%8B%B1%E5%85%8D%E6%B5%81%E9%87%8F)/f705d09c6ac051792b6edb547ac17930.png" alt="img"></p>
<p>第7步：添加OpenVPN用户，切换到设置页面，VPN服务器协议选择PPTP，这里是临时切换，不要保存本页面，然后到客户帐户里添加。</p>
<p><img src="/../images/K1K2%E5%88%B7%E5%8D%8E%E7%A1%95%E5%9B%BA%E4%BB%B6%E5%BC%80OpenVPN%E5%AE%89%E8%A3%85HTTP%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E6%90%AD%E5%BB%BA%E6%89%8B%E6%9C%BA%E4%BA%91%E5%85%8D%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8(%E8%8B%B9%E6%9E%9C%E6%9C%AA%E8%B6%8A%E7%8B%B1%E5%85%8D%E6%B5%81%E9%87%8F)/7cbd716a6cc92bdaf74fb74ee9be3140.png" alt="img"></p>
<p>第8步：切换到VPN服务器设置页面，找到VPN隧道设置如下两项。</p>
<p><img src="/../images/K1K2%E5%88%B7%E5%8D%8E%E7%A1%95%E5%9B%BA%E4%BB%B6%E5%BC%80OpenVPN%E5%AE%89%E8%A3%85HTTP%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E6%90%AD%E5%BB%BA%E6%89%8B%E6%9C%BA%E4%BA%91%E5%85%8D%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8(%E8%8B%B9%E6%9E%9C%E6%9C%AA%E8%B6%8A%E7%8B%B1%E5%85%8D%E6%B5%81%E9%87%8F)/12f86fac7248b0492abae79477b0e6c8.png" alt="img"></p>
<p>第9步：导出OpenVPN配置文件，点击出口client.ovpn，如果无法导出换个浏览器即可。</p>
<p><img src="/../images/K1K2%E5%88%B7%E5%8D%8E%E7%A1%95%E5%9B%BA%E4%BB%B6%E5%BC%80OpenVPN%E5%AE%89%E8%A3%85HTTP%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E6%90%AD%E5%BB%BA%E6%89%8B%E6%9C%BA%E4%BA%91%E5%85%8D%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8(%E8%8B%B9%E6%9E%9C%E6%9C%AA%E8%B6%8A%E7%8B%B1%E5%85%8D%E6%B5%81%E9%87%8F)/06056c18e852096797271e963819c445.png" alt="img"></p>
<p>设置完成后点击右上角注销右边的重启按钮重启路由器，切勿断电再开机，否则就前功尽弃了。</p>
<p>第10步：到花生壳域名列表中点击域名诊断看是否与自己的宽带拨号WAN口IP一致，如果不一致就是第4步没有配置好。</p>
<p><img src="/../images/K1K2%E5%88%B7%E5%8D%8E%E7%A1%95%E5%9B%BA%E4%BB%B6%E5%BC%80OpenVPN%E5%AE%89%E8%A3%85HTTP%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E6%90%AD%E5%BB%BA%E6%89%8B%E6%9C%BA%E4%BA%91%E5%85%8D%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8(%E8%8B%B9%E6%9E%9C%E6%9C%AA%E8%B6%8A%E7%8B%B1%E5%85%8D%E6%B5%81%E9%87%8F)/05cc13d35b54903bf967367198a1a56a.png" alt="img"></p>
<p>第11步：修改刚才导出的client.ovpn，如下图所示，这里的难点在于你们地区的免流代码。</p>
<p><img src="/../images/K1K2%E5%88%B7%E5%8D%8E%E7%A1%95%E5%9B%BA%E4%BB%B6%E5%BC%80OpenVPN%E5%AE%89%E8%A3%85HTTP%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E6%90%AD%E5%BB%BA%E6%89%8B%E6%9C%BA%E4%BA%91%E5%85%8D%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8(%E8%8B%B9%E6%9E%9C%E6%9C%AA%E8%B6%8A%E7%8B%B1%E5%85%8D%E6%B5%81%E9%87%8F)/246b1da1b22a015a00df6ae51751d8c2.png" alt="img"></p>
<p>第12步：然后将client.ovpn配置文件导入你的手机即可。</p>
<p>总结搭建OpenVPN免流失败的原因：</p>
<p>①路由器WAN口地址不是外网IP。</p>
<p>②没有严格按照以上教程配置OpenVPN。</p>
<p>③免流代码无效。</p>
<p>视频教程观看地址：<a href="https://pan.baidu.com/s/1pyxNNQF0Cpj6ksmImOMFuw">http://pan.baidu.com/s/1mhQhPig</a></p>
<p>安卓OpenVPN客户端现在基本度已经自带里，或者百度搜索。</p>
<p><img src="/../images/K1K2%E5%88%B7%E5%8D%8E%E7%A1%95%E5%9B%BA%E4%BB%B6%E5%BC%80OpenVPN%E5%AE%89%E8%A3%85HTTP%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E6%90%AD%E5%BB%BA%E6%89%8B%E6%9C%BA%E4%BA%91%E5%85%8D%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8(%E8%8B%B9%E6%9E%9C%E6%9C%AA%E8%B6%8A%E7%8B%B1%E5%85%8D%E6%B5%81%E9%87%8F)/q-300x300.jpg" alt="img"></p>
<p>扫描加入群<a href="https://jq.qq.com/?_wv=1027&k=5xodyNl">点此加入刷机交流群：773721392</a></p>
<blockquote>
<p>二、接下来是如何安装TinyProxy透明代理+免流代码</p>
</blockquote>
<p><em>因为对Linux不熟悉，通过一定的学习和研究，已经请教了原帖作者bigandy（在此表示感谢），基本搞定TinyProxy代理安装（高手略过）</em><br>第一步：下载TinyProxy，地址</p>
<p><a href="https://coding.net/u/bigandy/p/rt-n56u-ext-bin/git/tree/master/bin">https://coding.net/u/bigandy/p/rt-n56u-ext-bin/git/tree/master/bin</a></p>
<p> 作者已修改的支持 sock4/5 的编译版本。<br>第二步：修改配置文件，将Port改为自己需要的，这里我保留作者的9999不动（当然这一步可以省略）<br>第三步：路由器开启SSH的情况下用WinSCP将下好的文件传到路由的 /etc/storage/bin 文件夹里面，没有的创建，不要改路径。<br>第四步：赋予bin文件夹7777权限，并在命令行中运行./tinyproxy -c /etc/storage/bin/tinyproxy.conf （确认当前运行路径是/etc/storage/bin）<br>第五步：如果运行后没有任何提示，则自己改IE代理验证是否成功。</p>
<p>如果运行后有如下错误<br>/etc/storage/bin$ tinyproxy<br>-sh: tinyproxy: not found</p>
<h1 id="请重启路由再试。如果需要长久运行，可以在路由后台改自定义脚本加入以上命令。"><a href="#请重启路由再试。如果需要长久运行，可以在路由后台改自定义脚本加入以上命令。" class="headerlink" title="请重启路由再试。如果需要长久运行，可以在路由后台改自定义脚本加入以上命令。"></a>请重启路由再试。如果需要长久运行，可以在路由后台改自定义脚本加入以上命令。</h1><p>三、部分核心免流代码简介<br>那么如何能手机免流呢？免流代码是关键！至于原理自己李彦宏，至于是否能成功，必须亲自测试，请看好是必须！<br>以下代码是用于替换或添加openvpn配置文件里的免流代码的，具体看第一部分最后的截图。<br>#########免流代码############<br>这是免流代码之前必须添加的部分<br>dev tun<br>connect-retry-max 5<br>connect-retry 5<br>resolv-retry 60<br>下面是核心免流代码，能否免流就看这儿的了！<br>移动免流代码举例：<br>一、4 G<br>http-proxy-option EXT1 “POST <a href="http://mmsc.monternet.com/">http://mmsc.monternet.com</a>“<br>二、<br>http-proxy-option EXT1 “POST <a href="http://wap.sc.10086.cn/">http://wap.sc.10086.cn</a>“<br>http-proxy-option EXT1 “GET <a href="http://wap.sc.10086.cn/">http://wap.sc.10086.cn</a>“<br>http-proxy-option EXT1 “X-Online-Host: wap.sc.10086.cn”<br>http-proxy-option EXT1 “POST <a href="http://wap.sc.10086.cn/">http://wap.sc.10086.cn</a>“<br>http-proxy-option EXT1 “X-Online-Host: wap.sc.10086.cn”<br>http-proxy-option EXT1 “POST <a href="http://wap.sc.10086.cn/">http://wap.sc.10086.cn</a>“<br>http-proxy-option EXT1 “Host: wap.sc.10086.cn”<br>http-proxy-option EXT1 “GET <a href="http://wap.sc.10086.cn/">http://wap.sc.10086.cn</a>“<br>http-proxy-option EXT1 “Host: wap.sc.10086.cn”<br>http-proxy 10.0.0.172 80<br>（记得把wap.sc.10086.cn换成所在地区的wap掌厅）<br>三、<br>http-proxy-option EXT1 “POST <a href="http://wap.cmvideo.cn/">http://wap.cmvideo.cn</a>“<br>http-proxy-option EXT1 “GET <a href="http://wap.cmvideo.cn/">http://wap.cmvideo.cn</a>“<br>http-proxy-option EXT1 “X-Online-Host: wap.cmvideo.cn”<br>http-proxy-option EXT1 “POST <a href="http://wap.cmvideo.cn/">http://wap.cmvideo.cn</a>“<br>http-proxy-option EXT1 “X-Online-Host: wap.cmvideo.cn”<br>http-proxy-option EXT1 “POST <a href="http://wap.cmvideo.cn/">http://wap.cmvideo.cn</a>“<br>http-proxy-option EXT1 “Host: wap.cmvideo.cn”<br>http-proxy-option EXT1 “GET <a href="http://wap.cmvideo.cn/">http://wap.cmvideo.cn</a>“<br>http-proxy-option EXT1 “Host: wap.cmvideo.cn”<br>http-proxy 106.2.108.242 80</p>
<p>常用移动免流host有：wap.xx.10086.cn (xx是代表地区，比如广西就是wap.gx.10086.cn) wap.cmvideo.cn rd.go.10086.cn<br>联通免流host有：wap.10010.com<br>电信免流host有：ltetp.tv189.com<br>以上代码任选，以能够实现免流为准！是否免流可以下载个大文件过10分钟到一小时后查询流量，如果只跑了几个k则是免流成功！<br>如果跑了你那个大文件的流量就是不免，不要来找我，自己悠着点！<br>亲测sd地区必须加http-proxy 10.0.0.172 80这句代码才可以免，4G峰值也很快哦！ </p>
<p>联通免流代码举例：<br>一、虾米模式<br>http-proxy-option EXT1 “Proxy-Authorization: Basic MzAwMDAwNDU5MDpGRDYzQTdBNTM0NUMxMzFF”<br>http-proxy xiami.gzproxy.10155.com 8143<br>二、<br>http-proxy-option EXT1 “Proxy-Authorization: Basic MzAwMDAwNDU5MDpGRDYzQTdBNTM0NUMxMzFF”<br>http-proxy kugou.gzproxy.10155.com 8143<br>三、<br>http-proxy-option EXT1 Proxy-Authorization:Basic YWs0NDc5OjZjOGJlMmRkYzU3MjM4MmYxNzMyMmJiMjlhNDNkZjJi<br>http-proxy 123.138.56.20 81439 </p>
<p>四、<br>http-proxy-option EXT1 “Proxy-Authorization:Basic YWs0NDc5OjZjOGJlMmRkYzU3MjM4MmYxNzMyMmJiMjlhNDNkZjJi”<br>http-proxy 10.0.0.172 80</p>
<p>五、<br>http-proxy-option EXT1 “POST <a href="http://wap.10010.com/">http://wap.10010.com</a>“<br>http-proxy-option EXT1 “GET <a href="http://wap.10010.com/">http://wap.10010.com</a>“<br>http-proxy-option EXT1 “X-Online-Host: wap.10010.com”<br>http-proxy-option EXT1 “POST <a href="http://wap.10010.com/">http://wap.10010.com</a>“<br>http-proxy-option EXT1 “X-Online-Host: wap.10010.com”<br>http-proxy-option EXT1 “POST <a href="http://wap.10010.com/">http://wap.10010.com</a>“<br>http-proxy-option EXT1 “Host: wap.10010.com”<br>http-proxy-option EXT1 “GET <a href="http://wap.10010.com/">http://wap.10010.com</a>“<br>http-proxy-option EXT1 “Host: wap.10010.com”<br>http-proxy 106.2.108.242 80</p>
<p>使用自己服务器建立透明代理，如Squid、TinyProxy、Mproxy等的免流代码最后一行改为<br>http-proxy 你的服务器ip 端口号<br>电信没有测试，在此没有发言权，请测试了的朋友自己开贴发教程，谢谢！</p>
<p>四、内网IP用户突破限制架设云免服务器有关内网用户，可能以为云免与其无缘，其实华硕固件自带了穿透模式，即ngrokc服务！<br>请先去<a href="http://www.ngrok.cc/">www.ngrok.cc</a>网站注册一下，然后设定一个域名和tcp转发端口</p>
<p><img src="/../images/K1K2%E5%88%B7%E5%8D%8E%E7%A1%95%E5%9B%BA%E4%BB%B6%E5%BC%80OpenVPN%E5%AE%89%E8%A3%85HTTP%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E6%90%AD%E5%BB%BA%E6%89%8B%E6%9C%BA%E4%BA%91%E5%85%8D%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8(%E8%8B%B9%E6%9E%9C%E6%9C%AA%E8%B6%8A%E7%8B%B1%E5%85%8D%E6%B5%81%E9%87%8F)/forum.php" alt="img"></p>
<p>路由器里设置的命令 按要求修改  记得系统域名和端口要和ngrok.cc服务器设置的一样 有很多在这一步设置错误</p>
<p>代码1<br>ngrokc -SER[Shost:server.ngrok.cc,Sport:4443,Atoken:0*<strong>这个是你自己的token**</strong>e]*</p>
<p>-*AddTun[Type:tcp,Lhost:192.168.X.1,Lport:1194,Rport:<em>你自己的端口</em>] </p>
<p>*-AddTun[Type:http,Lhost:192.168.0.1,Lport:80,Sdname:<em>你自己的系统域名</em>]</p>
<p>代码2<br>ngrokc -SER[Shost:server.ngrok.cc,Sport:4443,Atoken:0*<strong>这个是你自己的token**</strong>e] -AddTun[Type:http,Lhost:192.168.X.1,Lport:80,Sdname:<em>你自己的系统域名</em>]<br>ngrokc -SER[Shost:server.ngrok.cc,Sport:4443,Atoken:0*<strong>这个是你自己的token**</strong>e] </p>
<p>*-AddTun[Type:tcp,Lhost:192.168.X.1,Lport:1194,Rport:<em>你自己的端口</em>] &amp;</p>
<p>这2种代码自选一个测试 楼主只能用代码1 群内很多群友用的代码2 应该都能使用 使用方法看下图 点击图片放大</p>
<p><img src="https://www.anywlan.com/forum.php?mod=attachment&aid=NjM1Mzk3fDE0Mzg4ZjNjfDE2MDkyMTEzMTZ8MHwzOTU4MzQ=&noupdate=yes" alt="img"> </p>
<p>如何检查是否穿透成功呢<br>比如我<a href="http://www.ngrok.cc/">ngrok.cc</a>设置的系统域名:admin TCP转发端口:8888</p>
<p>例如：<br>这个代码和路由自带的不一样  会多出-Addtun什么 后边的一部分是路由远程域名<br>一切设置好了登录admin.ngrok.cc 可以登录路由器管理界面就算穿透了<br>这个admin是你自己在<a href="http://www.ngrok.cc/">ngrok.cc</a>设置的系统域名 自己设置什么请对应填写什么 端口同样</p>
<p><img src="https://www.anywlan.com/forum.php?mod=attachment&aid=NjM1Mzk4fGY5YjBmMjdkfDE2MDkyMTEzMTZ8MHwzOTU4MzQ=&noupdate=yes" alt="img"></p>
<p>关于ngrokc更新问题 我用的是华硕5.26版本 没有更新ngrok插件写入代码直接可以用<br>内网也可以使用花生壳但是花生壳不出SN码 没办法  出SN码的自己实验提供一行代码<br>原贴地址:<a href="http://www.right.com.cn/forum/thread-161324-1-1.html">http://www.right.com.cn/forum/thread-161324-1-1.html</a>      6楼</p>
<p>我改了一份花生壳内网版的脚本，和adbyby一样独立运行在tmp下的脚本，麻烦楼主帮忙看看能不能合入到固件里，这样和ss分开，一些低内存没有usb口的机器也可以用了。此代码不用开启花生壳拓展  也不需要opt环境   只需一行代码就可以开启了</p>
<p>wget -t 10 -O /tmp/install_oray.sh <a href="http://code.taobao.org/svn/test43/phddns2/tmp/install_oray.sh">http://code.taobao.org/svn/test43/phddns2/tmp/install_oray.sh</a> &amp;&amp; sh /tmp/install<br>sleep 30<br>sh /home/root/startss.sh” </p>
<p>直接加在自定义脚本 运行路由启动后的脚本最下面<br>ngrok服务器映射没有想象中的稳定，要重复多次，大家可以多换几个服务器试试</p>
<p>如果有想法，也可以用小主机、树莓派搭建，效果要比路由器好，而且能够一次集成透明代理服务。<br>有关路由器的搭建方法到此结束，云主机、小主机搭建方法很多，网上有很多一键脚本，具体可以看如下链接，在此不再赘述。<br><a href="http://www.aeink.com/42.html0">http://www.aeink.com/42.html0</a> </p>
<p>贴中引用了部分作者的原创，在此表示感谢<a href="http://www.92zuanke.com/">www.92zuanke.com</a>（就爱赚客）、4G免流社区（<a href="http://www.4gml.com/">www.4gml.com</a>）、百度相关贴吧（云免、免流、移动免流、免流破解等等）</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>-技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker中部署Kubernetes</title>
    <url>/post/43a20585.html</url>
    <content><![CDATA[<p>Kubernetes为Google开源的容器管理框架，提供了<strong>Docker容器的夸主机、集群管理、容器部署、高可用、弹性伸缩</strong>等一系列功能；Kubernetes的设计目标包括使容器集群任意时刻都处于用户期望的状态，因而建立了一整套集群管理机制：容器自动重启、自动备份、容器自动伸缩等；Kubernetes设计了<strong>pod、replication controller、service</strong>用于管理容器的了组件，并提供了RESTful格式接口用于操作他们；由于本篇文章主要是Kubernetes所以就不对理论相关进行过多介绍了；<br>　　本篇文章把<strong>Kubernetes部署到Docker</strong>中，使用三个节点192.168.2.143同时为Master和minion节点，另外还有192.168.2.144、192.168.2.145两个minion节点；</p>
<p><strong>1、master节点启动etcd容器</strong><br>启动etcd容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> --绑定4001端口</span><br><span class="line">docker run -d --net=host --restart=always --name=etcd -v /project/kubernetes/etc/etcd/data:/var/etcd/data k8s.gcr.io/etcd:3.5.0-0 /usr/local/bin/etcd --addr=192.168.99.106:4001 --bind-addr=0.0.0.0:4001 --data-dir=/var/etcd/data</span><br></pre></td></tr></table></figure>
<p>　　在etcd里插入flannel配置信息，指定flannel使用10.0.0.0/8区间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it etcd etcdctl set /solinx.co/network/config &#x27;&#123;&quot;Network&quot;:&quot;10.0.0.0/8&quot;&#125;&#x27;  </span><br></pre></td></tr></table></figure>
<p><strong>2、在master、minion1、minion2节点配置flanneld</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">启动flanneld, wget -c https://github.com/coreos/flannel/releases/download/v0.5.5/flannel-0.5.5-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">./flanneld --etcd-endpoints=http://192.168.2.143:4001 --etcd-prefix=/solinx.co/network --iface=ens33 &gt; flannel.log  2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<p>　　flannel启动后获得可用于分配的IP集合，存放于/run/flannel/subnet.env中，需要配置docker可用与分配的IP</p>
<p>　　Ubuntu下修改Docker配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 在/etc/systemd/system/docker.service  增加EnvironmentFile=-/etc/default/docker</span><br><span class="line">修改ExecStart=/usr/bin/docker -d -H fd://  ,改成:  ExecStart=/usr/bin/docker -d -H fd:// $DOCKER_OPTS</span><br><span class="line"></span><br><span class="line">source /run/flannel/subnet.env</span><br><span class="line">sh -c &quot;echo DOCKER_OPTS=\\\&quot;--bip=$FLANNEL_SUBNET --mtu=$FLANNEL_MTU\\\&quot; &gt;&gt; /etc/default/docker&quot;</span><br><span class="line"></span><br><span class="line">service docker restart</span><br></pre></td></tr></table></figure>
<p><strong>3、Kubernetes部署</strong><br>下载kubernetes.tar.gz到master、minion节点中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -c https://github.com/kubernetes/kubernetes/releases/download/v1.2.5/kubernetes.tar.gz</span><br></pre></td></tr></table></figure>
<p>　　tar -zxvf 解压kubernetes.tar.gz文件后在kubernetes/server目录中找到kubernetes-server-linux-amd64.tar.gz将其解压，然后在kubernetes/server/bin目录下找到：kube-apiserver.tar、kube-controller-manager.tar、kube-scheduler.tar；<br>　　在master节点中导入kubernetes Docker镜像文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker load -i kube-apiserver.tar</span><br><span class="line">docker load -i kube-controller-manager.tar</span><br><span class="line">docker load -i kube-scheduler.tar</span><br></pre></td></tr></table></figure>
<p><strong>这里flannel与kubernetes使用同一个etcd</strong></p>
<p><strong>master节点启动apiServer</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name=apiserver --net=host gcr.io/google_containers/kube-apiserver:7bf05b2d35172296e4fbd2604362456f kube-apiserver --insecure-bind-address=192.168.2.143 --service-cluster-ip-range=10.0.0.0/16 --etcd-servers=http://192.168.2.143:4001  </span><br></pre></td></tr></table></figure>
<p><strong>master节点启动ControllerManager</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name=ControllerM gcr.io/google_containers/kube-controller-manager:6c95ef0b57ac9deda34ae1a4a40baa0a kube-controller-manager --master=192.168.2.143:8080</span><br></pre></td></tr></table></figure>
<p><strong>master节点启动Scheduler</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name=scheduler gcr.io/google_containers/kube-scheduler:e5342c3d8ced06850af97347daf6ae4b kube-scheduler --master=192.168.2.143:8080</span><br></pre></td></tr></table></figure>
<p>服务端启动完成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./kubectl -s 192.168.2.143:8080 version 查看kubernetes版本信息</span><br><span class="line"></span><br><span class="line">Client Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;2&quot;, GitVersion:&quot;v1.2.5&quot;, GitCommit:&quot;25eb53b54e08877d3789455964b3e97bdd3f3bce&quot;, GitTreeState:&quot;clean&quot;&#125;</span><br><span class="line">Server Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;2&quot;, GitVersion:&quot;v1.2.5&quot;, GitCommit:&quot;25eb53b54e08877d3789455964b3e97bdd3f3bce&quot;, GitTreeState:&quot;clean&quot;&#125;</span><br></pre></td></tr></table></figure>
<p>在Master节点查看服务Container启动情况：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps  </span><br></pre></td></tr></table></figure>
<p><img src="/../images/Docker%E4%B8%AD%E9%83%A8%E7%BD%B2Kubernetes/84976-20160710075936796-151862777.png" alt="img"></p>
<p><strong>在143、144、145 minion节点启动kubelet</strong></p>
<p>取得minion节点IP</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NODE_IP=`ifconfig ens33 | grep &#x27;inet addr:&#x27; | cut -d: -f2 | cut -d&#x27; &#x27; -f1`</span><br><span class="line"></span><br><span class="line">./kubelet --api-servers=192.168.2.143:8080 --node-ip=$NODE_IP --hostname_override=192.168.2.144 &gt; kubelet.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<p>注意如果当前两个几点的主机名相同则一定要使用hostname_override参数，否则需要把主机名改为不同的；</p>
<p><strong>在master上查看节点信息</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./kubectl -s 192.168.2.143:8080 get no</span><br></pre></td></tr></table></figure>
<p><img src="/../images/Docker%E4%B8%AD%E9%83%A8%E7%BD%B2Kubernetes/84976-20160710075959092-1976731983.png" alt="节点状态"></p>
<p><strong>在143、144、145节点启动kube-proxy</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./kube-proxy --master=192.168.2.143:8080 &gt; proxy.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<p><strong>下面的命令来查看pod、replication controller、service和endpoint：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./kubectl -s 192.168.1.143:8080 get po</span><br><span class="line">./kubectl -s 192.168.1.143:8080 get rc</span><br><span class="line">./kubectl -s 192.168.1.143:8080 get svc</span><br><span class="line">./kubectl -s 192.168.1.143:8080 get ep  </span><br></pre></td></tr></table></figure>
<p><strong>参考资料：</strong><br><a href="http://kubernetes.io/docs/user-guide/">http://kubernetes.io/docs/user-guide/</a><br>文章首发地址：<a href="http://www.solinx.co/archives/620">Solinx</a><br><a href="http://www.solinx.co/archives/620">http://www.solinx.co/archives/620</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>K8S命令</title>
    <url>/post/c34d48be.html</url>
    <content><![CDATA[<h1 id="服务器1"><a href="#服务器1" class="headerlink" title="服务器1"></a>服务器1</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在本地服务器打包镜像</span><br><span class="line">docker save -o my_image.tar /my_image:v3 （打包）</span><br><span class="line">docker save my_image:v3 | gzip &gt; my_image.tar.gz（打包压缩）</span><br></pre></td></tr></table></figure>
<h1 id="服务器2-打开窗口1"><a href="#服务器2-打开窗口1" class="headerlink" title="服务器2 - 打开窗口1"></a>服务器2 - 打开窗口1</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将打包好的容器，load到新的服务器</span><br><span class="line"># docker load -i my_image.tar.gz </span><br><span class="line"># 运行镜像成容器</span><br><span class="line">docker run -i -d my_image:v3</span><br><span class="line"># 查询容器Id</span><br><span class="line">docker ps | grep my_image</span><br><span class="line"># 进入容器内部</span><br><span class="line">docker exec -it  容器Id bash</span><br><span class="line"># 修改需要修改的内容</span><br><span class="line"># 方法一内部修改  &gt;直接取代  &gt;&gt;追加</span><br><span class="line">echo &quot;text&quot; &gt; filename</span><br><span class="line"># 方法二 外部送入， ！！！得另开一个窗口, 在正常服务器路径下不在docker容器内部</span><br><span class="line">docker  cp /newfile.xx 容器Id:/needDir/newfile.xx</span><br><span class="line"># 返回窗口1查看效果 cat newfile.xx, 然后可以退出容器</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
<h1 id="服务器2-打开窗口2"><a href="#服务器2-打开窗口2" class="headerlink" title="服务器2 - 打开窗口2"></a>服务器2 - 打开窗口2</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 打包成新的镜像</span><br><span class="line">docker commit -m &quot;des&quot; -a &quot;name&quot; 容器Id newImageName:v1</span><br><span class="line">docker images | grep newImageName</span><br><span class="line"># 加载到k8s的镜像集</span><br><span class="line">docker tag newImageName:v1 docker.oa.com:8080/tce/newImageName:v1</span><br><span class="line">docker push docker.oa.com:8080/tce/newImageName:v1</span><br></pre></td></tr></table></figure>
<h1 id="服务器2-进入yml文件路径下"><a href="#服务器2-进入yml文件路径下" class="headerlink" title="服务器2 - 进入yml文件路径下"></a>服务器2 - 进入yml文件路径下</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看端口</span><br><span class="line">netstat -lntup | grep 8000</span><br><span class="line"># 创建</span><br><span class="line">kubectl create -f xxx.yml</span><br><span class="line"># 删除</span><br><span class="line">kubectl delete -f xxx.yml</span><br><span class="line"># 更新配置文件，重载</span><br><span class="line">kubectl apply -f xxx.yml</span><br><span class="line"># 获取命名空间</span><br><span class="line">kubectl get ns</span><br><span class="line"># 获取pod容器</span><br><span class="line">kubectl get pod -n 命名空间</span><br><span class="line"># 获取pod状态</span><br><span class="line">kubectl get pod -n  命名空间 -o wide</span><br><span class="line"># 查看pod详细状态</span><br><span class="line">kubectl describe pod pod容器name -n namespace -o wide</span><br><span class="line"># 获取service</span><br><span class="line">kubectl get svc -n  命名空间</span><br><span class="line">kubectl get svc,pod -n  命名空间</span><br><span class="line"># 进入内部, 可以直接用curl命令直接访问容器内部的连接，看是否有返回的页面数据，可以ping外部的ip等等检测</span><br><span class="line">kubectl exec -it pod容器name -n  命名空间 bash</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S,命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka与Flink集成</title>
    <url>/post/a3a76214.html</url>
    <content><![CDATA[<h3 id="阅读目录"><a href="#阅读目录" class="headerlink" title="阅读目录"></a>阅读目录</h3><ul>
<li><a href="#_label0">1. 目标</a></li>
<li><a href="#_label1"> 2. 环境准备</a></li>
<li><a href="#_label2">3. 创建Flink Streaming工程</a></li>
<li><a href="#_label3">4. 增加kafka和kafka-connector依赖</a></li>
<li><a href="#_label4">5. 启动Flink环境（本例使用local测试环境）</a></li>
<li><a href="#_label5">6. 启动Kafka单节点集群</a></li>
<li><a href="#_label6">7. 代码开发</a></li>
<li><a href="#_label7">8. 部署Flink jar包</a></li>
<li><a href="#_label8">8. 运行KafkaProducerTest</a></li>
<li><a href="#_label9">9. 总结</a></li>
</ul>
<p><a href="http://flink.apache.org/">Apache Flink</a>是新一代的分布式流式数据处理框架，它统一的处理引擎既可以处理批数据(batch data)也可以处理流式数据(streaming data)。在实际场景中，Flink利用Apache Kafka作为上下游的输入输出十分常见，本文将给出一个可运行的实际例子来集成两者。</p>
<h3 id="1-目标"><a href="#1-目标" class="headerlink" title="1. 目标"></a>1. 目标</h3><p>本例模拟中将集成Kafka与Flink：Flink实时从Kafka中获取消息，每隔10秒去统计机器当前可用的内存数并将结果写入到本地文件中。</p>
<h3 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2. 环境准备"></a>2. 环境准备</h3><ul>
<li>Apache Kafka 0.11.0.0</li>
<li>Apache Flink 1.3.1</li>
<li>Gradle 3.5 （版本号不是强要求）</li>
</ul>
<p>本例运行在Windows环境，但可以很容易地移植到其他平台上。</p>
<h3 id="3-创建Flink-Streaming工程"><a href="#3-创建Flink-Streaming工程" class="headerlink" title="3. 创建Flink Streaming工程"></a>3. 创建Flink Streaming工程</h3><p>本例使用Intellij IDEA作为项目开发的IDE。首先创建Gradle project，group为’huxihx.flink.demo’，artifact id为‘flink-kafka-demo’，version为‘1.0-SNAPSHOT’。整个项目结构如图所示：</p>
<p><img src="/../images/Kafka%E4%B8%8EFlink%E9%9B%86%E6%88%90/735367-20170723184435080-1609686829.png" alt="img"></p>
<h3 id="4-增加kafka和kafka-connector依赖"><a href="#4-增加kafka和kafka-connector依赖" class="headerlink" title="4. 增加kafka和kafka-connector依赖"></a>4. 增加kafka和kafka-connector依赖</h3><p>增加下列gradle依赖：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">compile group: ``&#x27;org.apache.flink&#x27;``, name: ``&#x27;flink-connector-kafka-0.10_2.11&#x27;``, version: ``&#x27;1.3.1&#x27;``compile group: ``&#x27;org.apache.flink&#x27;``, name: ``&#x27;flink-streaming-java_2.11&#x27;``, version: ``&#x27;1.3.1&#x27;``compile group: ``&#x27;org.apache.kafka&#x27;``, name: ``&#x27;kafka-clients&#x27;``, version: ``&#x27;0.11.0.0&#x27;</span><br></pre></td></tr></table></figure>
<p>设置gradle打包依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jar &#123;``  ``manifest &#123;``    ``attributes(``        ``&quot;Manifest-Version&quot;``: ``1.0``,``        ``&quot;Main-Class&quot;``: ``&quot;huxihx.KafkaMessageStreaming&quot;``)``  ``&#125;``  ``from &#123; configurations.compile.``collect` `&#123; it.isDirectory() ? it : zipTree(it) &#125; &#125;``  ``into(``&#x27;assets&#x27;``) &#123;``    ``from ``&#x27;assets&#x27;``  ``&#125;``&#125;</span><br></pre></td></tr></table></figure>


<h3 id="5-启动Flink环境（本例使用local测试环境）"><a href="#5-启动Flink环境（本例使用local测试环境）" class="headerlink" title="5. 启动Flink环境（本例使用local测试环境）"></a>5. 启动Flink环境（本例使用local测试环境）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">F:\SourceCode\flink-1.3.1</span><br><span class="line">&gt; bin\start-local.bat</span><br><span class="line">Starting Flink job manager. Webinterface by default on http://localhost:8081/.</span><br><span class="line">Don&#x27;t close this batch window. Stop job manager by pressing Ctrl+C.</span><br></pre></td></tr></table></figure>


<h3 id="6-启动Kafka单节点集群"><a href="#6-启动Kafka单节点集群" class="headerlink" title="6. 启动Kafka单节点集群"></a>6. 启动Kafka单节点集群</h3><p>启动Zookeeper：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd F:\SourceCode\zookeeper</span><br><span class="line">&gt; bin\zkServer.cmd</span><br></pre></td></tr></table></figure>
<p>启动Kafka broker：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; cd F:\SourceCode\kafka_1</span><br><span class="line">&gt; set JMX_PORT=9999 </span><br><span class="line">&gt; bin\windows\kafka-server-start.bat F:\\SourceCode\\configs\\server.properties</span><br></pre></td></tr></table></figure>


<h3 id="7-代码开发"><a href="#7-代码开发" class="headerlink" title="7. 代码开发"></a>7. 代码开发</h3><p>代码主要由两部分组成：</p>
<ul>
<li>MessageSplitter类、MessageWaterEmitter类和KafkaMessageStreaming类：Flink streaming实时处理Kafka消息类</li>
<li>KafkaProducerTest类和MemoryUsageExtrator类：构建Kafka测试消息</li>
</ul>
<p>本例中，Kafka消息格式固定为：时间戳,主机名,当前可用内存数。其中主机名固定设置为machine-1，而时间戳和当前可用内存数都是动态获取。由于本例只会启动一个Kafka producer来模拟单台机器发来的消息，因此在最终的统计结果中只会统计machine-1这一台机器的内存。下面我们先来看flink部分的代码实现。</p>
<p><strong>MessageSplitter类（将获取到的每条Kafka消息根据“，”分割取出其中的主机名和内存数信息）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MessageSplitter implements FlatMapFunction&lt;String, Tuple2&lt;String, Long&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void flatMap(String value, Collector&lt;Tuple2&lt;String, Long&gt;&gt; out) throws Exception &#123;</span><br><span class="line">        if (value != null &amp;&amp; value.contains(&quot;,&quot;)) &#123;</span><br><span class="line">            String[] parts = value.split(&quot;,&quot;);</span><br><span class="line">            out.collect(new Tuple2&lt;&gt;(parts[1], Long.parseLong(parts[2])));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>MessageWaterEmitter类（根据Kafka消息确定Flink的水位）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MessageWaterEmitter implements AssignerWithPunctuatedWatermarks&lt;String&gt; &#123;</span><br><span class="line">    @Nullable</span><br><span class="line">    @Override</span><br><span class="line">    public Watermark checkAndGetNextWatermark(String lastElement, long extractedTimestamp) &#123;</span><br><span class="line">        if (lastElement != null &amp;&amp; lastElement.contains(&quot;,&quot;)) &#123;</span><br><span class="line">            String[] parts = lastElement.split(&quot;,&quot;);</span><br><span class="line">            return new Watermark(Long.parseLong(parts[0]));</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public long extractTimestamp(String element, long previousElementTimestamp) &#123;</span><br><span class="line">        if (element != null &amp;&amp; element.contains(&quot;,&quot;)) &#123;</span><br><span class="line">            String[] parts = element.split(&quot;,&quot;);</span><br><span class="line">            return Long.parseLong(parts[0]);</span><br><span class="line">        &#125;</span><br><span class="line">        return 0L;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>KafkaMessageStreaming类（Flink入口类，封装了对于Kafka消息的处理逻辑。本例每10秒统计一次结果并写入到本地文件）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class KafkaMessageStreaming &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.enableCheckpointing(5000); // 非常关键，一定要设置启动检查点！！</span><br><span class="line">        env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);</span><br><span class="line"></span><br><span class="line">        Properties props = new Properties();</span><br><span class="line">        props.setProperty(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span><br><span class="line">        props.setProperty(&quot;group.id&quot;, &quot;flink-group&quot;);</span><br><span class="line"></span><br><span class="line">        FlinkKafkaConsumer010&lt;String&gt; consumer =</span><br><span class="line">                new FlinkKafkaConsumer010&lt;&gt;(args[0], new SimpleStringSchema(), props);</span><br><span class="line">        consumer.assignTimestampsAndWatermarks(new MessageWaterEmitter());</span><br><span class="line"></span><br><span class="line">        DataStream&lt;Tuple2&lt;String, Long&gt;&gt; keyedStream = env</span><br><span class="line">                .addSource(consumer)</span><br><span class="line">                .flatMap(new MessageSplitter())</span><br><span class="line">                .keyBy(0)</span><br><span class="line">                .timeWindow(Time.seconds(10))</span><br><span class="line"></span><br><span class="line">                .apply(new WindowFunction&lt;Tuple2&lt;String, Long&gt;, Tuple2&lt;String, Long&gt;, Tuple, TimeWindow&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void apply(Tuple tuple, TimeWindow window, Iterable&lt;Tuple2&lt;String, Long&gt;&gt; input, Collector&lt;Tuple2&lt;String, Long&gt;&gt; out) throws Exception &#123;</span><br><span class="line">                        long sum = 0L;</span><br><span class="line">                        int count = 0;</span><br><span class="line">                        for (Tuple2&lt;String, Long&gt; record: input) &#123;</span><br><span class="line">                            sum += record.f1;</span><br><span class="line">                            count++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        Tuple2&lt;String, Long&gt; result = input.iterator().next();</span><br><span class="line">                        result.f1 = sum / count;</span><br><span class="line">                        out.collect(result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        keyedStream.writeAsText(args[1]);</span><br><span class="line">        env.execute(&quot;Flink-Kafka demo&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>实现了这些代码之后我们已然可以打包进行部署了，不过在其之前我们先看下Kafka producer测试类的实现——该类每1秒发送一条符合上面格式的Kafka消息供下游Flink集群消费。</p>
<p><strong>MemoryUsageExtrator类（很简单的工具类，提取当前可用内存字节数）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MemoryUsageExtrator &#123;</span><br><span class="line"></span><br><span class="line">    private static OperatingSystemMXBean mxBean =</span><br><span class="line">            (OperatingSystemMXBean) ManagementFactory.getOperatingSystemMXBean();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Get current free memory size in bytes</span><br><span class="line">     * @return  free RAM size</span><br><span class="line">     */</span><br><span class="line">    public static long currentFreeMemorySizeInBytes() &#123;</span><br><span class="line">        return mxBean.getFreePhysicalMemorySize();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>KafkaProducerTest类（发送Kafka消息）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class KafkaProducerTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        Properties props = new Properties();</span><br><span class="line">        props.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span><br><span class="line">        props.put(&quot;acks&quot;, &quot;all&quot;);</span><br><span class="line">        props.put(&quot;retries&quot;, 0);</span><br><span class="line">        props.put(&quot;batch.size&quot;, 16384);</span><br><span class="line">        props.put(&quot;linger.ms&quot;, 1);</span><br><span class="line">        props.put(&quot;buffer.memory&quot;, 33554432);</span><br><span class="line">        props.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line">        props.put(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class="line"></span><br><span class="line">        Producer&lt;String, String&gt; producer = new KafkaProducer&lt;&gt;(props);</span><br><span class="line">        int totalMessageCount = 10000;</span><br><span class="line">        for (int i = 0; i &lt; totalMessageCount; i++) &#123;</span><br><span class="line">            String value = String.format(&quot;%d,%s,%d&quot;, System.currentTimeMillis(), &quot;machine-1&quot;, currentMemSize());</span><br><span class="line">            producer.send(new ProducerRecord&lt;&gt;(&quot;test&quot;, value), new Callback() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onCompletion(RecordMetadata metadata, Exception exception) &#123;</span><br><span class="line">                    if (exception != null) &#123;</span><br><span class="line">                        System.out.println(&quot;Failed to send message with exception &quot; + exception);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            Thread.sleep(1000L);</span><br><span class="line">        &#125;</span><br><span class="line">        producer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static long currentMemSize() &#123;</span><br><span class="line">        return MemoryUsageExtrator.currentFreeMemorySizeInBytes();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h3 id="8-部署Flink-jar包"><a href="#8-部署Flink-jar包" class="headerlink" title="8. 部署Flink jar包"></a>8. 部署Flink jar包</h3><p><strong>8.1 打包Flink jar包</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; cd flink-kafka-demo``&gt; gradle clean build</span><br></pre></td></tr></table></figure>
<p>生成的jar包在项目目录下的build/libs/下，本例中是flink-kafka-demo-1.0-SNAPSHOT.jar</p>
<p><strong>8.2 部署jar包</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; bin\flink.bat run -c huxihx.KafkaMessageStreaming F:\\Projects\\flink-kafka-demo\\build\\libs\\flink-kafka-demo-``1.0``-SNAPSHOT.jar test F:\\temp\result.txt　　</span><br></pre></td></tr></table></figure>
<p>KafkaMessageStreaming类接收两个命令行参数，第一个是Kafka topic名字，第二个是输出文件路径</p>
<p>部署成功之后，可以在Flink控制台(本例中是<a href="http://localhost:8081/)%E4%B8%AD%E7%9C%8B%E5%88%B0job%E5%B7%B2%E6%88%90%E5%8A%9F%E9%83%A8%E7%BD%B2%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%EF%BC%9A">http://localhost:8081/)中看到job已成功部署，如下图所示：</a></p>
<p><img src="/../images/Kafka%E4%B8%8EFlink%E9%9B%86%E6%88%90/735367-20170723194509252-1922184474.png" alt="img"></p>
<h3 id="8-运行KafkaProducerTest"><a href="#8-运行KafkaProducerTest" class="headerlink" title="8. 运行KafkaProducerTest"></a>8. 运行KafkaProducerTest</h3><p>运行Kafka producer，给Flink job创建输入数据，然后启动一个终端，监控输出文件的变化，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; cd F:\temp</span><br><span class="line">&gt; tail -f result.txt</span><br><span class="line">(machine-1,3942129078)</span><br><span class="line">(machine-1,3934864179)</span><br><span class="line">(machine-1,4044071321)</span><br><span class="line">(machine-1,4091437056)</span><br><span class="line">(machine-1,3925701836)</span><br><span class="line">(machine-1,3753678438)</span><br><span class="line">(machine-1,3746314649)</span><br><span class="line">......</span><br></pre></td></tr></table></figure>


<p>可以看到，Flink每隔10s就会保存一条新的统计记录到result.txt文件中，该记录会统计主机名为machine-1的机器在过去10s的平均可用内存字节数。</p>
<h3 id="9-总结"><a href="#9-总结" class="headerlink" title="9. 总结"></a>9. 总结</h3><p> 本文给出了一个可运行的Flink + Kafka的项目配置及代码实现。值得注意的是，上面例子中用到的Flink Kafka connector使用了Kafka新版本consumer的API，因此不再需要连接Zookeeper信息。</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据,Kafka,Flink</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx高并发优化方案(血荐！)</title>
    <url>/post/8e3ef85d.html</url>
    <content><![CDATA[<p><strong>一、一般来说nginx 配置文件中对优化比较有作用的为以下几项：</strong></p>
<p><strong>1. worker_processes 8;</strong></p>
<p>nginx 进程数，建议按照cpu 数目来指定，一般为它的倍数 (如,2个四核的cpu计为8)。</p>
<p><strong>2. worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000;</strong></p>
<p>为每个进程分配cpu，上例中将8 个进程分配到8 个cpu，当然可以写多个，或者将一<br>个进程分配到多个cpu。</p>
<p><strong>3.</strong> <strong>worker_rlimit_nofile 65535;</strong></p>
<p>这个指令是指当一个nginx 进程打开的最多文件描述符数目，理论值应该是最多打开文<br>件数（ulimit -n）与nginx 进程数相除，但是nginx 分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</p>
<p>现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。</p>
<p>这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</p>
<p>查看linux系统文件描述符的方法：</p>
<p>[root@web001 ~]# sysctl -a | grep fs.file</p>
<p>fs.file-max = 789972</p>
<p>fs.file-nr = 510 0 789972</p>
<p><strong>4.</strong> <strong>use epoll;</strong></p>
<p>使用epoll 的I/O 模型</p>
<p>(</p>
<p>补充说明:</p>
<p>与apache相类，nginx针对不同的操作系统，有不同的事件模型</p>
<p>A）标准事件模型<br>Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll<br>B）高效事件模型<br><strong>Kqueue：</strong>使用于 FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X. 使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。<br><strong>Epoll:</strong> 使用于Linux内核2.6版本及以后的系统。</p>
<p>/dev/poll：使用于 Solaris 7 11/99+, HP/UX 11.22+ (eventport), IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</p>
<p>Eventport：使用于 Solaris 10. 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</p>
<p>)</p>
<p><strong>5.</strong> <strong>worker_connections 65535;</strong></p>
<p>每个进程允许的最多连接数， 理论上每台nginx 服务器的最大连接数为worker_processes*worker_connections。</p>
<p><strong>6.</strong> <strong>keepalive_timeout 60;</strong></p>
<p>keepalive 超时时间。</p>
<p><strong>7**</strong>.** <strong>client_header_buffer_size 4k;</strong></p>
<p>客户端请求头部的缓冲区大小，这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</p>
<p>分页大小可以用命令<strong>getconf PAGESIZE</strong> 取得。</p>
<p>[root@web001 ~]# getconf PAGESIZE</p>
<p>4096</p>
<p>但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为<strong>“系统分页大小”的整倍数。</strong></p>
<p><strong>8**</strong>.** <strong>open_file_cache max=65535 inactive=60s;</strong></p>
<p>这个将为打开文件指定缓存，默认是没有启用的，max 指定缓存数量，建议和打开文件数一致，inactive 是指经过多长时间文件没被请求后删除缓存。</p>
<p><strong>9**</strong>.** <strong>open_file_cache_valid 80s;</strong></p>
<p>这个是指多长时间检查一次缓存的有效信息。</p>
<p><strong>10**</strong>.** <strong>open_file_cache_min_uses 1;</strong></p>
<p>open_file_cache 指令中的inactive 参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive 时间内一次没被使用，它将被移除。</p>
<p><strong>二、关于内核参数的优化：</strong></p>
<p><strong>net.ipv4.tcp_max_tw_buckets = 6000</strong></p>
<p>timewait 的数量，默认是180000。</p>
<p><strong>net.ipv4.ip_local_port_range = 1024 65000</strong></p>
<p>允许系统打开的端口范围。</p>
<p><strong>net.ipv4.tcp_tw_recycle = 1</strong></p>
<p>启用timewait 快速回收。</p>
<p><strong>net.ipv4.tcp_tw_reuse = 1</strong></p>
<p>开启重用。允许将TIME-WAIT sockets 重新用于新的TCP 连接。</p>
<p><strong>net.ipv4.tcp_syncookies = 1</strong></p>
<p>开启SYN Cookies，当出现SYN 等待队列溢出时，启用cookies 来处理。</p>
<p><strong>net.core.somaxconn = 262144</strong></p>
<p>web 应用中listen 函数的backlog 默认会给我们内核参数的net.core.somaxconn 限制到128，而nginx 定义的NGX_LISTEN_BACKLOG 默认为511，所以有必要调整这个值。</p>
<p><strong>net.core.netdev_max_backlog = 262144</strong></p>
<p>每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。</p>
<p><strong>net.ipv4.tcp_max_orphans = 262144</strong></p>
<p>系统中最多有多少个TCP 套接字不被关联到任何一个用户文件句柄上。如果超过这个数字，孤儿连接将即刻被复位并打印出警告信息。这个限制仅仅是为了防止简单的DoS 攻击，不能过分依靠它或者人为地减小这个值，更应该增加这个值(如果增加了内存之后)。</p>
<p><strong>net.ipv4.tcp_max_syn_backlog = 262144</strong></p>
<p>记录的那些尚未收到客户端确认信息的连接请求的最大值。对于有128M 内存的系统而言，缺省值是1024，小内存的系统则是128。</p>
<p><strong>net.ipv4.tcp_timestamps = 0</strong></p>
<p>时间戳可以避免序列号的卷绕。一个1Gbps 的链路肯定会遇到以前用过的序列号。时间戳能够让内核接受这种“异常”的数据包。这里需要将其关掉。</p>
<p><strong>net.ipv4.tcp_synack_retries = 1</strong></p>
<p>为了打开对端的连接，内核需要发送一个SYN 并附带一个回应前面一个SYN 的ACK。也就是所谓三次握手中的第二次握手。这个设置决定了内核放弃连接之前发送SYN+ACK 包的数量。</p>
<p><strong>net.ipv4.tcp_syn_retries = 1</strong></p>
<p>在内核放弃建立连接之前发送SYN 包的数量。</p>
<p><strong>net.ipv4.tcp_fin_timeout = 1</strong></p>
<p>如 果套接字由本端要求关闭，这个参数决定了它保持在FIN-WAIT-2 状态的时间。对端可以出错并永远不关闭连接，甚至意外当机。缺省值是60 秒。2.2 内核的通常值是180 秒，3你可以按这个设置，但要记住的是，即使你的机器是一个轻载的WEB 服务器，也有因为大量的死套接字而内存溢出的风险，FIN- WAIT-2 的危险性比FIN-WAIT-1 要小，因为它最多只能吃掉1.5K 内存，但是它们的生存期长些。</p>
<p><strong>net.ipv4.tcp_keepalive_time = 30</strong></p>
<p>当keepalive 起用的时候，TCP 发送keepalive 消息的频度。缺省是2 小时。</p>
<p><strong>三、下面贴一个完整的内核优化设置:</strong></p>
<p><strong>vi /etc/sysctl.conf</strong> CentOS5.5中可以将所有内容清空直接替换为如下内容:</p>
<p>net.ipv4.ip_forward = 0<br>net.ipv4.conf.default.rp_filter = 1<br>net.ipv4.conf.default.accept_source_route = 0<br>kernel.sysrq = 0<br>kernel.core_uses_pid = 1<br>net.ipv4.tcp_syncookies = 1<br>kernel.msgmnb = 65536<br>kernel.msgmax = 65536<br>kernel.shmmax = 68719476736<br>kernel.shmall = 4294967296<br>net.ipv4.tcp_max_tw_buckets = 6000<br>net.ipv4.tcp_sack = 1<br>net.ipv4.tcp_window_scaling = 1<br>net.ipv4.tcp_rmem = 4096 87380 4194304<br>net.ipv4.tcp_wmem = 4096 16384 4194304<br>net.core.wmem_default = 8388608<br>net.core.rmem_default = 8388608<br>net.core.rmem_max = 16777216<br>net.core.wmem_max = 16777216<br>net.core.netdev_max_backlog = 262144<br>net.core.somaxconn = 262144<br>net.ipv4.tcp_max_orphans = 3276800<br>net.ipv4.tcp_max_syn_backlog = 262144<br>net.ipv4.tcp_timestamps = 0<br>net.ipv4.tcp_synack_retries = 1<br>net.ipv4.tcp_syn_retries = 1<br>net.ipv4.tcp_tw_recycle = 1<br>net.ipv4.tcp_tw_reuse = 1<br>net.ipv4.tcp_mem = 94500000 915000000 927000000<br>net.ipv4.tcp_fin_timeout = 1<br>net.ipv4.tcp_keepalive_time = 30<br>net.ipv4.ip_local_port_range = 1024 65000</p>
<p>使配置立即生效可使用如下命令：<br><strong>/sbin/sysctl -p</strong></p>
<p><strong>四、下面是关于系统连接数的优化</strong></p>
<p><strong>linux 默认值 open files 和 max user processes 为 1024</strong></p>
<p>#ulimit -n</p>
<p>1024</p>
<p>#ulimit Cu</p>
<p>1024</p>
<p><strong>问题描述：</strong> 说明 server 只允许同时打开 1024 个文件，处理 1024 个用户进程</p>
<p>使用ulimit -a 可以查看当前系统的所有限制值，使用ulimit -n 可以查看当前的最大打开文件数。</p>
<p>新装的linux 默认只有1024 ，当作负载较大的服务器时，很容易遇到error: too many open files 。因此，需要将其改大。</p>
<p><strong>解决方法：</strong></p>
<p>使用 ulimit Cn 65535 可即时修改，但重启后就无效了。（注ulimit -SHn 65535 等效 ulimit -n 65535 ，-S 指soft ，-H 指hard)</p>
<p>有如下三种修改方式：</p>
<p>\1. 在/etc/rc.local 中增加一行 ulimit -SHn 65535<br>\2. 在/etc/profile 中增加一行 ulimit -SHn 65535<br>\3. 在**/etc/security/limits.conf** 最后增加：</p>
<p><strong>* soft nofile 65535<br>* hard nofile 65535<br>* soft nproc 65535<br>* hard nproc 65535</strong></p>
<p>具体使用哪种，<strong>在 CentOS 中使用第1 种方式无效果，使用第3 种方式有效果</strong>，而在Debian 中使用第2 种有效果</p>
<p># ulimit -n</p>
<p>65535</p>
<p># ulimit -u</p>
<p>65535</p>
<p>备注：ulimit 命令本身就有分软硬设置，加-H 就是硬，加-S 就是软默认显示的是软限制</p>
<p>soft 限制指的是当前系统生效的设置值。 hard 限制值可以被普通用户降低。但是不能增加。 soft 限制不能设置的比 hard 限制更高。 只有 root 用户才能够增加 hard 限制值。</p>
<p><strong>五、下面是一个简单的nginx 配置文件：</strong></p>
<p>user www www;<br>worker_processes 8;<br>worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000<br>01000000;<br>error_log /www/log/nginx_error.log crit;<br>pid /usr/local/nginx/nginx.pid;<br>worker_rlimit_nofile 204800;<br>events<br>{<br>use epoll;<br>worker_connections 204800;<br>}<br>http<br>{<br>include mime.types;<br>default_type application/octet-stream;<br>charset utf-8;<br>server_names_hash_bucket_size 128;<br>client_header_buffer_size 2k;<br>large_client_header_buffers 4 4k;<br>client_max_body_size 8m;<br>sendfile on;<br>tcp_nopush on;<br>keepalive_timeout 60;<br>fastcgi_cache_path /usr/local/nginx/fastcgi_cache levels=1:2<br>keys_zone=TEST:10m<br>inactive=5m;<br>fastcgi_connect_timeout 300;<br>fastcgi_send_timeout 300;<br>fastcgi_read_timeout 300;<br>fastcgi_buffer_size 4k;<br>fastcgi_buffers 8 4k;<br>fastcgi_busy_buffers_size 8k;<br>fastcgi_temp_file_write_size 8k;<br>fastcgi_cache TEST;<br>fastcgi_cache_valid 200 302 1h;<br>fastcgi_cache_valid 301 1d;<br>fastcgi_cache_valid any 1m;<br>fastcgi_cache_min_uses 1;<br>fastcgi_cache_use_stale error timeout invalid_header http_500;<br>open_file_cache max=204800 inactive=20s;<br>open_file_cache_min_uses 1;<br>open_file_cache_valid 30s;<br>tcp_nodelay on;<br>gzip on;<br>gzip_min_length 1k;<br>gzip_buffers 4 16k;<br>gzip_http_version 1.0;<br>gzip_comp_level 2;<br>gzip_types text/plain application/x-javascript text/css application/xml;<br>gzip_vary on;<br>server<br>{<br>listen 8080;<br>server_name backup.aiju.com;<br>index index.php index.htm;<br>root /www/html/;<br>location /status<br>{<br>stub_status on;<br>}<br>location ~ .<em>/.(php|php5)?$<br>{<br>fastcgi_pass 127.0.0.1:9000;<br>fastcgi_index index.php;<br>include fcgi.conf;<br>}<br>location ~ .</em>/.(gif|jpg|jpeg|png|bmp|swf|js|css)$<br>{<br>expires 30d;<br>}<br>log_format access ‘$remote_addr — $remote_user [$time_local] “$request” ‘<br>‘$status $body_bytes_sent “$http_referer” ‘<br>‘”$http_user_agent” $http_x_forwarded_for’;<br>access_log /www/log/access.log access;<br>}<br>}</p>
<p><strong>六、关于FastCGI 的几个指令：</strong></p>
<p>fastcgi_cache_path /usr/local/nginx/fastcgi_cache levels=1:2 keys_zone=TEST:10minactive=5m;</p>
<p>这个指令为FastCGI 缓存指定一个路径，目录结构等级，关键字区域存储时间和非活动删除时间。</p>
<p><strong>fastcgi_connect_timeout 300;</strong></p>
<p>指定连接到后端FastCGI 的超时时间。</p>
<p><strong>fastcgi_send_timeout 300;</strong></p>
<p>向FastCGI 传送请求的超时时间，这个值是指已经完成两次握手后向FastCGI 传送请求的超时时间。</p>
<p><strong>fastcgi_read_timeout 300;</strong></p>
<p>接收FastCGI 应答的超时时间，这个值是指已经完成两次握手后接收FastCGI 应答的超时时间。</p>
<p><strong>fastcgi_buffer_size 4k;</strong></p>
<p>指定读取FastCGI 应答第一部分需要用多大的缓冲区，一般第一部分应答不会超过1k，由于页面大小为4k，所以这里设置为4k。</p>
<p><strong>fastcgi_buffers 8 4k;</strong></p>
<p>指定本地需要用多少和多大的缓冲区来缓冲FastCGI 的应答。</p>
<p><strong>fastcgi_busy_buffers_size 8k;</strong></p>
<p>这个指令我也不知道是做什么用，只知道默认值是fastcgi_buffers 的两倍。</p>
<p><strong>fastcgi_temp_file_write_size 8k;</strong></p>
<p>在写入fastcgi_temp_path 时将用多大的数据块，默认值是fastcgi_buffers 的两倍。</p>
<p><strong>fastcgi_cache TEST</strong></p>
<p>开启FastCGI 缓存并且为其制定一个名称。个人感觉开启缓存非常有用，可以有效降低CPU 负载，并且防止502 错误。</p>
<p><strong>fastcgi_cache_valid 200 302 1h;<br>fastcgi_cache_valid 301 1d;<br>fastcgi_cache_valid any 1m;</strong></p>
<p>为指定的应答代码指定缓存时间，如上例中将200，302 应答缓存一小时，301 应答缓存1 天，其他为1 分钟。</p>
<p><strong>fastcgi_cache_min_uses 1;</strong></p>
<p>缓存在fastcgi_cache_path 指令inactive 参数值时间内的最少使用次数，如上例，如果在5 分钟内某文件1 次也没有被使用，那么这个文件将被移除。</p>
<p><strong>fastcgi_cache_use_stale error timeout invalid_header http_500;</strong></p>
<p>不知道这个参数的作用，猜想应该是让nginx 知道哪些类型的缓存是没用的。以上为nginx 中FastCGI 相关参数，另外，FastCGI 自身也有一些配置需要进行优化，如果你使用php-fpm 来管理FastCGI，可以修改配置文件中的以下值：</p>
<p><strong><value name="”max_children”">60</value></strong></p>
<p>同时处理的并发请求数，即它将开启最多60 个子线程来处理并发连接。</p>
<p><strong><value name="”rlimit_files”">102400</value></strong></p>
<p>最多打开文件数。</p>
<p><strong><value name="”max_requests”">204800</value></strong></p>
<p>每个进程在重置之前能够执行的最多请求数。</p>
]]></content>
      <categories>
        <category>分布式架构</category>
      </categories>
      <tags>
        <tag>Nginx,高并发,优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Openvpn免流服务器搭建2客户端client.ovpn内容</title>
    <url>/post/d5a75aab.html</url>
    <content><![CDATA[<p>至于如何搭建openvpn服务器,请参考我之前的文章,主要注意以下几点<br>新建client.ovpn，内容为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">client</span><br><span class="line">dev tun</span><br><span class="line">proto tcp</span><br><span class="line">remote 服务器IP 443</span><br><span class="line">resolv-retry infinite</span><br><span class="line">nobind</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line">comp-lzo</span><br><span class="line">verb 3</span><br><span class="line"> </span><br><span class="line">########免流代码########</span><br><span class="line">http-proxy-option EXT1 &quot;POST http://rd.go.10086.cn&quot;</span><br><span class="line">http-proxy-option EXT1 &quot;GET http://rd.go.10086.cn&quot;</span><br><span class="line">http-proxy-option EXT1 &quot;X-Online-Host: rd.go.10086.cn&quot;</span><br><span class="line">http-proxy-option EXT1 &quot;POST http://rd.go.10086.cn&quot;</span><br><span class="line">http-proxy-option EXT1 &quot;X-Online-Host: rd.go.10086.cn&quot;</span><br><span class="line">http-proxy-option EXT1 &quot;POST http://rd.go.10086.cn&quot;</span><br><span class="line">http-proxy-option EXT1 &quot;Host: rd.go.10086.cn&quot;</span><br><span class="line">http-proxy-option EXT1 &quot;GET http://rd.go.10086.cn&quot;</span><br><span class="line">http-proxy-option EXT1 &quot;Host: rd.go.10086.cn&quot;</span><br><span class="line">http-proxy 10.0.0.172 80</span><br><span class="line">########免流代码########</span><br><span class="line"> </span><br><span class="line">&lt;ca&gt;</span><br><span class="line">ca.crt的内容粘贴到这里</span><br><span class="line">&lt;/ca&gt;</span><br><span class="line"> </span><br><span class="line">&lt;cert&gt;</span><br><span class="line">client.crt的内容粘贴到这里</span><br><span class="line">&lt;/cert&gt;</span><br><span class="line"> </span><br><span class="line">&lt;key&gt;</span><br><span class="line">client.key的内容粘贴到这里</span><br><span class="line">&lt;/key&gt;</span><br></pre></td></tr></table></figure>
<p>注意：需要修改服务器IP为自己的服务器，ca、cert、key的内容需要按里面要求粘贴进去<br>默认的免流代码为移动的代码<br>可以修改为其他的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">联通</span><br><span class="line"> </span><br><span class="line">http-proxy-retry</span><br><span class="line">http-proxy 10.0.0.172 80</span><br><span class="line">http-proxy-option EXT1 &quot;X-Online-Host: wap.10010.com&quot;</span><br><span class="line">http-proxy-option EXT2 &quot;Host: wap.10010.com&quot;</span><br><span class="line">电信</span><br><span class="line"> </span><br><span class="line">http-proxy-retry</span><br><span class="line">http-proxy 10.0.0.200 80</span><br><span class="line">http-proxy-option EXT1 &quot;X-Online-Host: ltetp.tv189.com&quot;</span><br><span class="line">http-proxy-option EXT2 &quot;Host: ltetp.tv189.com&quot;</span><br><span class="line">移动-默认</span><br><span class="line"> </span><br><span class="line">http-proxy-retry</span><br><span class="line">http-proxy 10.0.0.172 80</span><br><span class="line">http-proxy-option EXT1 &quot;POST http://rd.go.10086.cn&quot;</span><br><span class="line">http-proxy-option EXT1 &quot;GET http://rd.go.10086.cn&quot;</span><br><span class="line">http-proxy-option EXT1 &quot;X-Online-Host: rd.go.10086.cn&quot;</span><br><span class="line">http-proxy-option EXT1 &quot;POST http://rd.go.10086.cn&quot;</span><br><span class="line">http-proxy-option EXT1 &quot;X-Online-Host: rd.go.10086.cn&quot;</span><br><span class="line">http-proxy-option EXT1 &quot;POST http://rd.go.10086.cn&quot;</span><br><span class="line">http-proxy-option EXT1 &quot;Host: rd.go.10086.cn&quot;</span><br><span class="line">http-proxy-option EXT1 &quot;GET http://rd.go.10086.cn&quot;</span><br><span class="line">http-proxy-option EXT1 &quot;Host: rd.go.10086.cn&quot;</span><br><span class="line">移动-彩信</span><br><span class="line"> </span><br><span class="line">http-proxy-retry</span><br><span class="line">http-proxy 10.0.0.172 80</span><br><span class="line">http-proxy-option EXT1 &quot;POST http://mmsc.monternet.com&quot;</span><br><span class="line">http-proxy-option EXT1 &quot;GET http://mmsc.monternet.com&quot;</span><br><span class="line">http-proxy-option EXT1 &quot;X-Online-Host: mmsc.monternet.com&quot;</span><br><span class="line">http-proxy-option EXT1 &quot;CMCC: mmsc.monternet.com&quot;</span><br></pre></td></tr></table></figure>


<p><strong>免流原理</strong></p>
<p>移动公司为了用户方便，设置了浏览部分移动的网站不需要花流量，而移动公司识别访问的网址是否为这部分网址时，出现了问题，导致识别错误，主要是这个X-Online-Host字段上的问题。OpenVPN免流时，实际会先通过HTTP代理，然后再建立VPN，在建立HTTP代理时，让移动公司识别我们是和移动的免流网站建立的代理，这样就能免流了。</p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Openvpn,免流,服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes(K8S)集群管理Docker容器（部署篇）</title>
    <url>/post/c5c20dab.html</url>
    <content><![CDATA[<p>今天这篇文章教给大家如何快速部署一套Kubernetes集群。K8S集群部署有几种方式：kubeadm、minikube和二进制包。前两者属于自动部署，简化部署操作，并且minikube只是单机测试，而kubeadm还是beta版，强烈推荐初学者使用二进制包部署，因为自动部署屏蔽了很多细节，使得对各个模块感知很少，非常不利用学习。</p>
<p>所以，这篇文章也是使用二进制包部署Kubernetes集群。</p>
<p><strong>本章目录</strong></p>
<p><a href="https://s4.51cto.com/oss/201711/20/dfa248862503ddc2fef41329ff925866.png"><img src="/../images/Kubernetes(K8S)%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86Docker%E5%AE%B9%E5%99%A8%EF%BC%88%E9%83%A8%E7%BD%B2%E7%AF%87%EF%BC%89/dfa248862503ddc2fef41329ff925866.png" alt="Kubernetes(K8S)集群管理Docker容器（部署篇）_kubernetes"></a></p>
<p>一、架构拓扑图</p>
<p><a href="https://s5.51cto.com/oss/201711/20/53e0a846f89d2cdcd6b194b90e852f76.png"><img src="/../images/Kubernetes(K8S)%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86Docker%E5%AE%B9%E5%99%A8%EF%BC%88%E9%83%A8%E7%BD%B2%E7%AF%87%EF%BC%89/53e0a846f89d2cdcd6b194b90e852f76.png" alt="Kubernetes(K8S)集群管理Docker容器（部署篇）_k8s_02"></a></p>
<p>二、环境规划</p>
<table>
<thead>
<tr>
<th><strong>角色</strong></th>
<th><strong>IP</strong></th>
<th><strong>组件</strong></th>
</tr>
</thead>
<tbody><tr>
<td>master</td>
<td>192.168.0.211</td>
<td>etcdkube-apiserverkube-controller-managerkube-scheduler</td>
</tr>
<tr>
<td>node01</td>
<td>192.168.0.212</td>
<td>kubeletkube-proxydocker</td>
</tr>
<tr>
<td>node02</td>
<td>192.168.0.213</td>
<td>kubeletkube-proxydocker</td>
</tr>
</tbody></table>
<p><strong>环境说明：</strong></p>
<p>操作系统：Ubuntu16.04 or CentOS7</p>
<p>Kubernetes版本：v1.8.3</p>
<p>Docker版本：v17.09-ce</p>
<p>均采用当前最新稳定版本。</p>
<p>关闭selinux。</p>
<p>三、部署集群</p>
<h2 id="3-1-下载二进制包"><a href="#3-1-下载二进制包" class="headerlink" title="3.1 下载二进制包"></a>3.1 下载二进制包</h2><p>打开下面网址，下载下面两个红色框框的包。</p>
<p><a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.8.md#v183"> https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.8.md#v183</a></p>
<p> <a href="https://s5.51cto.com/oss/201711/20/1e610818c915f4f97dafc14a19aa94fc.png"><img src="/../images/Kubernetes(K8S)%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86Docker%E5%AE%B9%E5%99%A8%EF%BC%88%E9%83%A8%E7%BD%B2%E7%AF%87%EF%BC%89/1e610818c915f4f97dafc14a19aa94fc.png" alt="Kubernetes(K8S)集群管理Docker容器（部署篇）_k8s_03"></a></p>
<p><a href="https://s2.51cto.com/oss/201711/20/27ff88ecd5201140479dda9b02033c83.png"><img src="/../images/Kubernetes(K8S)%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86Docker%E5%AE%B9%E5%99%A8%EF%BC%88%E9%83%A8%E7%BD%B2%E7%AF%87%EF%BC%89/27ff88ecd5201140479dda9b02033c83.png" alt="Kubernetes(K8S)集群管理Docker容器（部署篇）_k8s_04"></a></p>
<p>下载完成后，上传到服务器：</p>
<p>kubernetes-server-linux-amd64.tar.gz上传到master节点。</p>
<p>kubernetes-node-linux-amd64.tar.gz 上传到node节点。</p>
<h2 id="3-2-安装etcd3"><a href="#3-2-安装etcd3" class="headerlink" title="3.2  安装etcd3"></a>3.2  安装etcd3</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">k8s-master<span class="comment"># yum install etcd –y</span></span><br><span class="line">k8s-master<span class="comment"># vi /etc/etcd/etcd.conf </span></span><br><span class="line">ETCD_NAME=<span class="string">&quot;default&quot;</span></span><br><span class="line">ETCD_DATA_DIR=<span class="string">&quot;/var/lib/etcd/default&quot;</span></span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=<span class="string">&quot;http://0.0.0.0:2379&quot;</span></span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=http://0.0.0.0:2379</span><br><span class="line">k8s-master<span class="comment"># systemctl enable etcd</span></span><br><span class="line">k8s-master<span class="comment"># systemctl start etcd</span></span><br></pre></td></tr></table></figure>


<p>注意：Ubuntu系统etcd配置文件在/etc/default/etcd。</p>
<h2 id="3-3-运行Master节点组件"><a href="#3-3-运行Master节点组件" class="headerlink" title="3.3 运行Master节点组件"></a>3.3 运行Master节点组件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">k8s-master<span class="comment"># tar zxvf kubernetes-server-linux-amd64.tar.gz</span></span><br><span class="line">k8s-master<span class="comment"># mkdir -p /opt/kubernetes/&#123;bin,cfg&#125;</span></span><br><span class="line">k8s-master<span class="comment"># mv kubernetes/server/bin/&#123;kube-apiserver,kube-scheduler,kube-controller-manager,kubectl&#125; /opt/kubernetes/bin</span></span><br></pre></td></tr></table></figure>
<h3 id="3-3-1-apiserver"><a href="#3-3-1-apiserver" class="headerlink" title="3.3.1 apiserver"></a>3.3.1 apiserver</h3><p>创建配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /opt/kubernetes/cfg/kube-apiserver</span></span><br><span class="line"><span class="comment"># 启用日志标准错误</span></span><br><span class="line">KUBE_LOGTOSTDERR=<span class="string">&quot;--logtostderr=true&quot;</span></span><br><span class="line"><span class="comment"># 日志级别</span></span><br><span class="line">KUBE_LOG_LEVEL=<span class="string">&quot;--v=4&quot;</span></span><br><span class="line"><span class="comment"># Etcd服务地址</span></span><br><span class="line">KUBE_ETCD_SERVERS=<span class="string">&quot;--etcd-servers=http://192.168.0.211:2379&quot;</span></span><br><span class="line"><span class="comment"># API服务监听地址</span></span><br><span class="line">KUBE_API_ADDRESS=<span class="string">&quot;--insecure-bind-address=0.0.0.0&quot;</span></span><br><span class="line"><span class="comment"># API服务监听端口</span></span><br><span class="line">KUBE_API_PORT=<span class="string">&quot;--insecure-port=8080&quot;</span></span><br><span class="line"><span class="comment"># 对集群中成员提供API服务地址</span></span><br><span class="line">KUBE_ADVERTISE_ADDR=<span class="string">&quot;--advertise-address=192.168.0.211&quot;</span></span><br><span class="line"><span class="comment"># 允许容器请求特权模式，默认false</span></span><br><span class="line">KUBE_ALLOW_PRIV=<span class="string">&quot;--allow-privileged=false&quot;</span></span><br><span class="line"><span class="comment"># 集群分配的IP范围</span></span><br><span class="line">KUBE_SERVICE_ADDRESSES=<span class="string">&quot;--service-cluster-ip-range=10.10.10.0/24&quot;</span></span><br></pre></td></tr></table></figure>
<p>创建systemd服务文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /lib/systemd/system/kube-apiserver.service </span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes API Server</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/opt/kubernetes/cfg/kube-apiserver</span><br><span class="line"><span class="comment">#ExecStart=/opt/kubernetes/bin/kube-apiserver $&#123;KUBE_APISERVER_OPTS&#125;</span></span><br><span class="line">ExecStart=/opt/kubernetes/bin/kube-apiserver \</span><br><span class="line"><span class="variable">$&#123;KUBE_LOGTOSTDERR&#125;</span> \</span><br><span class="line"><span class="variable">$&#123;KUBE_LOG_LEVEL&#125;</span> \</span><br><span class="line"><span class="variable">$&#123;KUBE_ETCD_SERVERS&#125;</span> \</span><br><span class="line"><span class="variable">$&#123;KUBE_API_ADDRESS&#125;</span> \</span><br><span class="line"><span class="variable">$&#123;KUBE_API_PORT&#125;</span> \</span><br><span class="line"><span class="variable">$&#123;KUBE_ADVERTISE_ADDR&#125;</span> \</span><br><span class="line"><span class="variable">$&#123;KUBE_ALLOW_PRIV&#125;</span> \</span><br><span class="line"><span class="variable">$&#123;KUBE_SERVICE_ADDRESSES&#125;</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>启动服务，并设置开机启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># systemctl enable kube-apiserver</span></span><br><span class="line"><span class="comment"># systemctl restart kube-apiserver</span></span><br></pre></td></tr></table></figure>
<p>注意：apiserver默认支持etcd3，如果是etcd2，需启动时指定版本选项–storage-backend=etcd2</p>
<h3 id="3-3-2-scheduler"><a href="#3-3-2-scheduler" class="headerlink" title="3.3.2 scheduler"></a>3.3.2 scheduler</h3><p>创建配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /opt/kubernetes/cfg/kube-scheduler</span></span><br><span class="line">KUBE_LOGTOSTDERR=<span class="string">&quot;--logtostderr=true&quot;</span></span><br><span class="line">KUBE_LOG_LEVEL=<span class="string">&quot;--v=4&quot;</span></span><br><span class="line">KUBE_MASTER=<span class="string">&quot;--master=192.168.0.211:8080&quot;</span></span><br><span class="line">KUBE_LEADER_ELECT=<span class="string">&quot;--leader-elect&quot;</span></span><br></pre></td></tr></table></figure>
<p>创建systemd服务文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /lib/systemd/system/kube-scheduler.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Scheduler</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/opt/kubernetes/cfg/kube-scheduler</span><br><span class="line">ExecStart=/opt/kubernetes/bin/kube-scheduler \</span><br><span class="line"><span class="variable">$&#123;KUBE_LOGTOSTDERR&#125;</span> \</span><br><span class="line"><span class="variable">$&#123;KUBE_LOG_LEVEL&#125;</span> \</span><br><span class="line"><span class="variable">$&#123;KUBE_MASTER&#125;</span> \</span><br><span class="line"><span class="variable">$&#123;KUBE_LEADER_ELECT&#125;</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>启动服务，并设置开机启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># systemctl enable kube-scheduler</span></span><br><span class="line"><span class="comment"># systemctl restart kube-scheduler</span></span><br></pre></td></tr></table></figure>
<h3 id="3-3-3-controller-manager"><a href="#3-3-3-controller-manager" class="headerlink" title="3.3.3 controller-manager"></a>3.3.3 controller-manager</h3><p>创建配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /opt/kubernetes/cfg/kube-controller-manager</span></span><br><span class="line">KUBE_LOGTOSTDERR=<span class="string">&quot;--logtostderr=true&quot;</span></span><br><span class="line">KUBE_LOG_LEVEL=<span class="string">&quot;--v=4&quot;</span></span><br><span class="line">KUBE_MASTER=<span class="string">&quot;--master=192.168.0.211:8080&quot;</span></span><br></pre></td></tr></table></figure>
<p>创建systemd服务文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /lib/systemd/system/kube-controller-manager.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Controller Manager</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/opt/kubernetes/cfg/kube-controller-manager</span><br><span class="line">ExecStart=/opt/kubernetes/bin/kube-controller-manager \</span><br><span class="line"><span class="variable">$&#123;KUBE_LOGTOSTDERR&#125;</span> \</span><br><span class="line"><span class="variable">$&#123;KUBE_LOG_LEVEL&#125;</span> \</span><br><span class="line"><span class="variable">$&#123;KUBE_MASTER&#125;</span> \</span><br><span class="line"><span class="variable">$&#123;KUBE_LEADER_ELECT&#125;</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>启动服务，并设置开机启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># systemctl enable kube-controller-manager</span></span><br><span class="line"><span class="comment"># systemctl restart kube-controller-manager</span></span><br></pre></td></tr></table></figure>
<h3 id="3-3-4-小结"><a href="#3-3-4-小结" class="headerlink" title="3.3.4 小结"></a>3.3.4 小结</h3><p>Master节点组件就全部启动了，需要注意的是服务启动顺序有依赖，先启动etcd，再启动apiserver，其他组件无顺序要求。</p>
<p>查看Master节点组件进程状态：</p>
<p><a href="https://s4.51cto.com//oss/201711/20/0fd14ce58c9dfe66a4802e64e02aff8b.png"><img src="/../images/Kubernetes(K8S)%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86Docker%E5%AE%B9%E5%99%A8%EF%BC%88%E9%83%A8%E7%BD%B2%E7%AF%87%EF%BC%89/0fd14ce58c9dfe66a4802e64e02aff8b.png" alt="Kubernetes(K8S)集群管理Docker容器（部署篇）_k8s_05"></a></p>
<p>说明组件都在运行。</p>
<p>如果启动失败，请查看启动日志，例如：</p>
<p>#journalctl -u kube-apiserver</p>
<h2 id="3-4-运行Node节点组件"><a href="#3-4-运行Node节点组件" class="headerlink" title="3.4  运行Node节点组件"></a>3.4  运行Node节点组件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">k8s-node01<span class="comment"># tar zxvf kubernetes-node-linux-amd64.tar.gz</span></span><br><span class="line">k8s-node01<span class="comment"># mkdir -p /opt/kubernetes/&#123;bin,cfg&#125;</span></span><br><span class="line">k8s-node01<span class="comment"># mv kubernetes/node/bin/&#123;kubelet,kube-proxy&#125; /opt/kubernetes/bin/</span></span><br></pre></td></tr></table></figure>
<h3 id="3-4-1-kubelet"><a href="#3-4-1-kubelet" class="headerlink" title="3.4.1 kubelet"></a>3.4.1 kubelet</h3><p>创建kubeconfig配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /opt/kubernetes/cfg/kubelet.kubeconfig</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Config</span><br><span class="line">clusters:</span><br><span class="line">  - cluster:</span><br><span class="line">      server: http://192.168.0.211:8080</span><br><span class="line">    name: <span class="built_in">local</span></span><br><span class="line">contexts:</span><br><span class="line">  - context:</span><br><span class="line">      cluster: <span class="built_in">local</span></span><br><span class="line">    name: <span class="built_in">local</span></span><br><span class="line">current-context: <span class="built_in">local</span></span><br></pre></td></tr></table></figure>
<p>kubeconfig文件用于kubelet连接master apiserver。</p>
<p>创建配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /opt/kubernetes/cfg/kubelet            </span></span><br><span class="line"><span class="comment"># 启用日志标准错误</span></span><br><span class="line">KUBE_LOGTOSTDERR=<span class="string">&quot;--logtostderr=true&quot;</span></span><br><span class="line"><span class="comment"># 日志级别</span></span><br><span class="line">KUBE_LOG_LEVEL=<span class="string">&quot;--v=4&quot;</span></span><br><span class="line"><span class="comment"># Kubelet服务IP地址</span></span><br><span class="line">NODE_ADDRESS=<span class="string">&quot;--address=192.168.0.212&quot;</span></span><br><span class="line"><span class="comment"># Kubelet服务端口</span></span><br><span class="line">NODE_PORT=<span class="string">&quot;--port=10250&quot;</span></span><br><span class="line"><span class="comment"># 自定义节点名称</span></span><br><span class="line">NODE_HOSTNAME=<span class="string">&quot;--hostname-override=192.168.0.212&quot;</span></span><br><span class="line"><span class="comment"># kubeconfig路径，指定连接API服务器</span></span><br><span class="line">KUBELET_KUBECONFIG=<span class="string">&quot;--kubeconfig=/opt/kubernetes/cfg/kubelet.kubeconfig&quot;</span></span><br><span class="line"><span class="comment"># 允许容器请求特权模式，默认false</span></span><br><span class="line">KUBE_ALLOW_PRIV=<span class="string">&quot;--allow-privileged=false&quot;</span></span><br><span class="line"><span class="comment"># DNS信息</span></span><br><span class="line">KUBELET_DNS_IP=<span class="string">&quot;--cluster-dns=10.10.10.2&quot;</span></span><br><span class="line">KUBELET_DNS_DOMAIN=<span class="string">&quot;--cluster-domain=cluster.local&quot;</span></span><br><span class="line"><span class="comment"># 禁用使用Swap</span></span><br><span class="line">KUBELET_SWAP=<span class="string">&quot;--fail-swap-on=false&quot;</span></span><br></pre></td></tr></table></figure>
<p>创建systemd服务文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /lib/systemd/system/kubelet.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kubelet</span><br><span class="line">After=docker.service</span><br><span class="line">Requires=docker.service</span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/opt/kubernetes/cfg/kubelet</span><br><span class="line">ExecStart=/opt/kubernetes/bin/kubelet \</span><br><span class="line"><span class="variable">$&#123;KUBE_LOGTOSTDERR&#125;</span> \</span><br><span class="line"><span class="variable">$&#123;KUBE_LOG_LEVEL&#125;</span> \</span><br><span class="line"><span class="variable">$&#123;NODE_ADDRESS&#125;</span> \</span><br><span class="line"><span class="variable">$&#123;NODE_PORT&#125;</span> \</span><br><span class="line"><span class="variable">$&#123;NODE_HOSTNAME&#125;</span> \</span><br><span class="line"><span class="variable">$&#123;KUBELET_KUBECONFIG&#125;</span> \</span><br><span class="line"><span class="variable">$&#123;KUBE_ALLOW_PRIV&#125;</span> \</span><br><span class="line"><span class="variable">$&#123;KUBELET_DNS_IP&#125;</span> \</span><br><span class="line"><span class="variable">$&#123;KUBELET_DNS_DOMAIN&#125;</span> \</span><br><span class="line"><span class="variable">$&#123;KUBELET_SWAP&#125;</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">KillMode=process</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>启动服务，并设置开机启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># systemctl enable kubelet</span></span><br><span class="line"><span class="comment"># systemctl restart kubelet</span></span><br></pre></td></tr></table></figure>
<h3 id="3-4-2-proxy"><a href="#3-4-2-proxy" class="headerlink" title="3.4.2 proxy"></a>3.4.2 proxy</h3><p>创建配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /opt/kubernetes/cfg/kube-proxy            </span></span><br><span class="line"><span class="comment"># 启用日志标准错误</span></span><br><span class="line">KUBE_LOGTOSTDERR=<span class="string">&quot;--logtostderr=true&quot;</span></span><br><span class="line"><span class="comment"># 日志级别</span></span><br><span class="line">KUBE_LOG_LEVEL=<span class="string">&quot;--v=4&quot;</span></span><br><span class="line"><span class="comment"># 自定义节点名称</span></span><br><span class="line">NODE_HOSTNAME=<span class="string">&quot;--hostname-override=192.168.0.212&quot;</span></span><br><span class="line"><span class="comment"># API服务地址</span></span><br><span class="line">KUBE_MASTER=<span class="string">&quot;--master=http://192.168.0.211:8080&quot;</span></span><br></pre></td></tr></table></figure>
<p>创建systemd服务文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /lib/systemd/system/kube-proxy.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Proxy</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/opt/kubernetes/cfg/kube-proxy</span><br><span class="line">ExecStart=/opt/kubernetes/bin/kube-proxy \</span><br><span class="line"><span class="variable">$&#123;KUBE_LOGTOSTDERR&#125;</span> \</span><br><span class="line"><span class="variable">$&#123;KUBE_LOG_LEVEL&#125;</span> \</span><br><span class="line"><span class="variable">$&#123;NODE_HOSTNAME&#125;</span> \</span><br><span class="line"><span class="variable">$&#123;KUBE_MASTER&#125;</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>启动服务，并设置开机启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># systemctl enable kube-proxy</span></span><br><span class="line"><span class="comment"># systemctl restart kube-proxy</span></span><br></pre></td></tr></table></figure>
<h3 id="3-4-3-小结"><a href="#3-4-3-小结" class="headerlink" title="3.4.3 小结"></a>3.4.3 小结</h3><p>其他节点加入集群与node01方式相同，但需修改kubelet的–address和–hostname-override选项为本机IP。</p>
<p>查看Node节点组件进程状态：</p>
<p><a href="https://s4.51cto.com//oss/201711/20/02979dd7adf52d863fbaaf356a421cdf.png"><img src="/../images/Kubernetes(K8S)%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86Docker%E5%AE%B9%E5%99%A8%EF%BC%88%E9%83%A8%E7%BD%B2%E7%AF%87%EF%BC%89/02979dd7adf52d863fbaaf356a421cdf.png" alt="Kubernetes(K8S)集群管理Docker容器（部署篇）_k8s_06"></a></p>
<p>说明组件都在运行。</p>
<p>如果启动失败，请查看启动日志，例如：</p>
<p>#journalctl -u kubelet</p>
<h2 id="3-5-验证集群是否部署成功"><a href="#3-5-验证集群是否部署成功" class="headerlink" title="3.5 验证集群是否部署成功"></a>3.5 验证集群是否部署成功</h2><p>设置可执行文件到系统变量，方便使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># echo &quot;export PATH=$PATH:/opt/kubernetes/bin&quot; &gt;&gt; /etc/profile</span></span><br><span class="line"><span class="comment"># source /etc/profile</span></span><br></pre></td></tr></table></figure>
<p>查看集群节点状态：</p>
<p><img src="/../images/Kubernetes(K8S)%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86Docker%E5%AE%B9%E5%99%A8%EF%BC%88%E9%83%A8%E7%BD%B2%E7%AF%87%EF%BC%89/a0ff4d58486157275e9adf01a26d5f72.png" alt="Kubernetes(K8S)集群管理Docker容器（部署篇）_kubernetes_07"></p>
<p>两个节点都加入到了kubernetes集群，就此部署完成。</p>
<p>本章对应视频：<a href="https://pan.baidu.com/s/1L-FjASEK849y03cfOTlU_Q"> https://pan.baidu.com/s/1L-FjASEK849y03cfOTlU_Q</a></p>
<p>QQ技术群，有需要的朋友可以加下：</p>
<p>Docker技术交流群（<a href="http://shang.qq.com/wpa/qunwpa?idkey=d1e58c192afbba1e295f4252b13ab2bf115f6d23536c0b56bf6944378bc608e7"> 719105297</a>）</p>
<p>Kubernetes技术交流群（<a href="https://jq.qq.com/?_wv=1027&k=5KvVgL4"> 602965977</a>）</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenWRT 配置 WireGuard 服务端及客户端配置教程</title>
    <url>/post/7a74bfdf.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>去年出过一期在 <strong>OpenWRT</strong> 上部署 <strong>OpenConnect VPN</strong> 的详细教程,主要用于在外办公方便<code>VPN 回家</code>的使用场景.博主几乎每天使用持续了一年多,在 macOS 和 iOS 上体验都非常的稳定.</p>
<p>而今天的主角是已经火了几年的了<code>WireGuard</code>, 同样是 <strong>VPN 回家服务</strong>,在博主试用了一段时间后决定以后主用 WG 了.</p>
<p>由于 <strong>WireGuard</strong> 在 <strong>Linux</strong> 上安装配置较为麻烦,而很多 <strong>OpenWRT</strong> 固件也都预装了 <strong>WG</strong> ,并且有图形化界面方便设置.所以博主目前推荐还是在 <strong>OpenWRT</strong> 来直接使用.</p>
<h3 id="WireGuard-与-OpenConnect-VPN-的区别"><a href="#WireGuard-与-OpenConnect-VPN-的区别" class="headerlink" title="WireGuard 与 OpenConnect VPN 的区别"></a>WireGuard 与 OpenConnect VPN 的区别</h3><p>抛开深沉的原理,简单通俗的说明下两者的区别和使用感受:<br><code>OpenConnect VPN</code>主要是使用 TCP 协议,而<code>WireGuard</code>则是 UDP 协议.最明显使用感知就是前者需要类似拨号一样过程,在网络断开,重连等情况下并非无感.而<code>WireGuard</code>则类似于常驻后台,随用随取的感觉,体验不错.</p>
<p>在配置方面, OpenConnect VPN 需要使用证书来提高使用安全和连接体验,而 WireGuard 则是使用点对点的加密公钥私钥的形式来配对,并且每台客户端需要单独分配 IP 和公私钥.前期配置均稍许麻烦,但两者后续使用和管理都还比较合理和方便.</p>
<ul>
<li>OpenConnect VPN 只需要客户端拥有证书文件即可</li>
<li>WireGuard 只需要客户拥有配置文件即可</li>
</ul>
<hr>
<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>注意博主的 OpenWRT 是以<strong>旁路由</strong>的形式存在于家庭网络中,<strong>所以后续防火墙设置可能和把 OpenWRT 当主路由的形式不同.</strong></p>
<h3 id="创建公钥私钥"><a href="#创建公钥私钥" class="headerlink" title="创建公钥私钥"></a>创建公钥私钥</h3><h4 id="预共享密钥"><a href="#预共享密钥" class="headerlink" title="预共享密钥"></a>预共享密钥</h4><p>通过<code>SSH</code>登陆到 OpenWRT 后台.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir wg</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建目录存放公钥私钥</span></span><br><span class="line">cd wg</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入文件夹</span></span><br><span class="line">umask 077</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置创建密钥的权限</span></span><br><span class="line">wg genpsk &gt; sharekey</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建预共享密钥</span></span><br><span class="line">cat sharekey</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取密钥复制保存</span></span><br></pre></td></tr></table></figure>
<p><a href="https://static.ioiox.com/usr/uploads/2021/09/1022163021.jpeg">![img](../images/OpenWRT 配置 WireGuard 服务端及客户端配置教程/1022163021.jpeg)</a></p>
<h4 id="服务端公钥私钥"><a href="#服务端公钥私钥" class="headerlink" title="服务端公钥私钥"></a>服务端公钥私钥</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wg genkey | tee server_privatekey | wg pubkey &gt; server_publickey</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建服务端公钥和私钥</span></span><br><span class="line">cat server_privatekey</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取服务端私钥复制保存</span></span><br><span class="line">cat server_publickey</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取服务端公钥复制保存</span></span><br></pre></td></tr></table></figure>
<p><a href="https://static.ioiox.com/usr/uploads/2021/09/3790279855.jpeg">![img](../images/OpenWRT 配置 WireGuard 服务端及客户端配置教程/3790279855.jpeg)</a></p>
<h4 id="客户端公钥私钥-macOS"><a href="#客户端公钥私钥-macOS" class="headerlink" title="客户端公钥私钥 ( macOS )"></a>客户端公钥私钥 ( macOS )</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">重复此操作创建每个客户端的公钥和私钥,请注意修改以下命令中的文件名,本文以 macOS 为例:</span><br><span class="line">wg genkey | tee macos_privatekey | wg pubkey &gt; macos_publickey</span><br><span class="line"># 创建 macOS 客户端公钥和私钥</span><br><span class="line">cat macos_privatekey</span><br><span class="line"># 获取 macOS 客户端私钥复制保存</span><br><span class="line">cat macos_publickey</span><br><span class="line"># 获取 macOS 客户端公钥复制保存</span><br></pre></td></tr></table></figure>
<p><a href="https://static.ioiox.com/usr/uploads/2021/09/731528211.jpeg">![img](../images/OpenWRT 配置 WireGuard 服务端及客户端配置教程/731528211.jpeg)</a></p>
<h3 id="配置-OpenWRT"><a href="#配置-OpenWRT" class="headerlink" title="配置 OpenWRT"></a>配置 OpenWRT</h3><h4 id="服务端相关配置"><a href="#服务端相关配置" class="headerlink" title="服务端相关配置"></a>服务端相关配置</h4><p>登陆 OpenWRT - 网络 - 接口 - 添加新接口</p>
<p><a href="https://static.ioiox.com/usr/uploads/2021/09/2484939947.jpeg">![img](../images/OpenWRT 配置 WireGuard 服务端及客户端配置教程/2484939947.jpeg)</a></p>
<p>填写接口名 - 选择接口协议 - 提交</p>
<p><a href="https://static.ioiox.com/usr/uploads/2021/09/286965958.jpeg">![img](../images/OpenWRT 配置 WireGuard 服务端及客户端配置教程/286965958.jpeg)</a></p>
<p>基本设置 - 填写上文获取的<code>服务端私钥</code><br>自行填写一个端口号 - <code>并且在路由器映射该端口的 UDP 协议</code><br>IP 地址填写一个 VPN 专用的网段 IP - 本文以<code>192.168.100.X</code>为 WireGuard 的专用网段为例,则本 WG 服务器 IP 为<code>192.168.100.1/24</code></p>
<p><a href="https://static.ioiox.com/usr/uploads/2021/09/1414831899.jpeg">![img](../images/OpenWRT 配置 WireGuard 服务端及客户端配置教程/1414831899.jpeg)</a></p>
<p>防火墙设置 - 选择 vpn</p>
<p><a href="https://static.ioiox.com/usr/uploads/2021/09/3137243165.jpeg">![img](../images/OpenWRT 配置 WireGuard 服务端及客户端配置教程/3137243165.jpeg)</a></p>
<h4 id="客户端-Peers-区域为每个客户端添加配置"><a href="#客户端-Peers-区域为每个客户端添加配置" class="headerlink" title="客户端 Peers 区域为每个客户端添加配置"></a>客户端 Peers 区域为每个客户端添加配置</h4><p>选择<code>预共享密钥</code> - 添加</p>
<p><a href="https://static.ioiox.com/usr/uploads/2021/09/3670085722.jpeg">![img](../images/OpenWRT 配置 WireGuard 服务端及客户端配置教程/3670085722.jpeg)</a></p>
<p>公钥 - 填写上文获取的<code>macOS 客户端公钥</code><br>预共享密钥 - 填写上文获取的<code>预共享密钥</code><br>允许的 IP - 即表示为此 macOS 客户端分配固定 IP , 本文示例为 <code>192.168.100.2/32</code> , <strong>注意各客户端 IP 不能冲突</strong>.<br>持续 Keep-Alive - 填写 25</p>
<p><a href="https://static.ioiox.com/usr/uploads/2021/09/275719202.jpeg">![img](../images/OpenWRT 配置 WireGuard 服务端及客户端配置教程/275719202.jpeg)</a></p>
<h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h4><p>网络 - 防火墙 - 自定义防火墙 - 添加以下防火墙 - 重启防火墙</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -s 192.168.100.0/24 -o br-lan -j MASQUERADE</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意此条防火墙网段 192.168.100.0/24 需和上文服务端 IP 网段保持一致.</span></span><br></pre></td></tr></table></figure>


<p><strong>再次声明博主的 OpenWRT 是作为旁路由接入</strong>,此条防火墙不确定适用于主路由部署 WireGuard 使用.主路由用户可以尝试无需设置防火墙(经朋友测试)</p>
<p><a href="https://static.ioiox.com/usr/uploads/2021/09/524460402.jpg">![img](../images/OpenWRT 配置 WireGuard 服务端及客户端配置教程/524460402.jpg)</a></p>
<h4 id="重启-WireGuard"><a href="#重启-WireGuard" class="headerlink" title="重启 WireGuard"></a>重启 WireGuard</h4><p>返回网络 - 接口 - 关闭 - 连接<br>或者直接重启整个 OpenWRT 最为稳妥.</p>
<p><a href="https://static.ioiox.com/usr/uploads/2021/09/894597398.jpeg">![img](../images/OpenWRT 配置 WireGuard 服务端及客户端配置教程/894597398.jpeg)</a></p>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="创建客户端配置文件"><a href="#创建客户端配置文件" class="headerlink" title="创建客户端配置文件"></a>创建客户端配置文件</h3><p>创建后缀为<code>.conf</code>的配置文件,例如<code>macos_wireguard.conf</code>,复制以下信息,并且修改对应的公私钥信息:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">[Interface]</span><br><span class="line"><span class="attribute">Address</span> = <span class="number">192.168.100.2</span>/<span class="number">32</span></span><br><span class="line"><span class="comment"># 对应 macOS 客户段分配的 IP</span></span><br><span class="line">PrivateKey = qJHywBpl27Ao/TRse85DQ/f+kwfNGRmPDYCq0OC6uUY=</span><br><span class="line">DNS = <span class="number">192.168.1.3</span></span><br><span class="line"><span class="comment"># 本地的 DNS 服务器或者公有 DNS 服务器,例如: 114.114.114.114</span></span><br><span class="line">[Peer]</span><br><span class="line">PublicKey = u7vjXN90uJt7pRjG8tR7hb25ssYOi7PRzJ5h9Diy02I=</span><br><span class="line">AllowedIPs = <span class="number">192.168.1.0</span>/<span class="number">24</span>, <span class="number">192.168.100.0</span>/<span class="number">24</span></span><br><span class="line"><span class="comment"># macOS 如上设置可与 ClashX Pro 共存仅代理局域网,互联网走本地网络.</span></span><br><span class="line"><span class="comment"># iPhone iPad 设置为 0.0.0.0/0 全局则模式.</span></span><br><span class="line">PresharedKey = Pu5xBEBmz9ghhUMNp5o72s+w7nuLwxJJUgNk3EljFVo=</span><br><span class="line"><span class="comment"># 预共享密钥</span></span><br><span class="line">Endpoint = ddns.xxxxx.com:<span class="number">12345</span></span><br><span class="line">PersistentKeepalive = <span class="number">25</span></span><br></pre></td></tr></table></figure>
<p>此时的配置文件是用于客户端的,所以<code>PrivateKey</code>则为 macOS 客户端的私钥,而<code>Peer</code>中的<code>PublicKey</code>则为 OpenWRT 的公钥.<strong>请注意反向思考</strong>,<code>Endpoint</code>填写家中的 IP 或者 DDNS 域名和端口.</p>
<h4 id="AllowedIPs"><a href="#AllowedIPs" class="headerlink" title="AllowedIPs"></a>AllowedIPs</h4><p>值得注意的是<code>AllowedIPs</code>参数.针对不同场景和需求,此处可以配置不用的路由.<br>当此处为<code>0.0.0.0/0</code>时表示任意网络请求都经过 VPN 俗称全局 VPN , 由于 iPhone 同时只能有 1 个 VPN 软件在线,所以当 <code>WireGuard</code> 启动时,其他类似<code>Quanx</code>,<code>小火箭</code>等软件则无法使用,此时 iPhone 可以全局 VPN 使用家中的网络来访问一些外网.</p>
<p>如果是 macOS 或 Windows 客户端,<code>WireGuard</code>和<code>Clash</code>等软件可以共存,此处可以设置为<code>AllowedIPs = 192.168.1.0/24, 192.168.100.0/24</code>,表示访问内网网段才会走 VPN .而其他互联网,外网等访问还是走当前网络来利用<code>Clash</code>分流.</p>
<h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><p>在 macOS App Store 下载 <code>WireGuard</code>,从文件导入隧道.</p>
<p><a href="https://static.ioiox.com/usr/uploads/2021/09/2003979131.jpeg">![img](../images/OpenWRT 配置 WireGuard 服务端及客户端配置教程/2003979131.jpeg)</a></p>
<p>选择允许添加 VPN 配置</p>
<p><a href="https://static.ioiox.com/usr/uploads/2021/09/302243957.jpeg">![img](../images/OpenWRT 配置 WireGuard 服务端及客户端配置教程/302243957.jpeg)</a></p>
<p>连接成功</p>
<p><a href="https://static.ioiox.com/usr/uploads/2021/09/1707328844.jpeg">![img](../images/OpenWRT 配置 WireGuard 服务端及客户端配置教程/1707328844.jpeg)</a></p>
<p>在 OpenWRT 状态页面能够看到连接成功的状态信息</p>
<p><a href="https://static.ioiox.com/usr/uploads/2021/09/1165251389.jpeg">![img](../images/OpenWRT 配置 WireGuard 服务端及客户端配置教程/1165251389.jpeg)</a></p>
<h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><p>重复上述操作创建 iPhone 的配置文件,并上传至 iCloud 云盘.<br>在 iOS 设备 App Store 下载 <code>WireGuard</code></p>
<p><a href="https://static.ioiox.com/usr/uploads/2021/09/1151510484.jpeg">![img](../images/OpenWRT 配置 WireGuard 服务端及客户端配置教程/1151510484.jpeg)</a></p>
<p>添加隧道 - 导入配置或压缩包</p>
<p><a href="https://static.ioiox.com/usr/uploads/2021/09/3454281593.jpeg">![img](../images/OpenWRT 配置 WireGuard 服务端及客户端配置教程/3454281593.jpeg)</a></p>
<p>从 iCloud 云盘中选择 iphone_wireguard.conf 配置文件</p>
<p><a href="https://static.ioiox.com/usr/uploads/2021/09/2279540996.jpeg">![img](../images/OpenWRT 配置 WireGuard 服务端及客户端配置教程/2279540996.jpeg)</a></p>
<p>选择允许添加 VPN 配置</p>
<p><a href="https://static.ioiox.com/usr/uploads/2021/09/4147645188.jpeg">![img](../images/OpenWRT 配置 WireGuard 服务端及客户端配置教程/4147645188.jpeg)</a></p>
<p>连接成功</p>
<p><a href="https://static.ioiox.com/usr/uploads/2021/09/3906918524.jpeg">![img](../images/OpenWRT 配置 WireGuard 服务端及客户端配置教程/3906918524.jpeg)</a></p>
<hr>
<h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
      <categories>
        <category>WireGuard</category>
      </categories>
      <tags>
        <tag>OpenWRT,WireGuard,服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现简单的API接口</title>
    <url>/post/ac5db05f.html</url>
    <content><![CDATA[<h1 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h1><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p># coding:utf-8</p>
<p>import json<br>from urlparse import parse_qs<br>from wsgiref.simple_server import make_server</p>
<p># 定义函数，参数是函数的两个参数，都是python本身定义的，默认就行了。<br>def application(environ, start_response):<br># 定义文件请求的类型和当前请求成功的code<br>start_response(‘200 OK’, [(‘Content-Type’, ‘text/html’)])<br># environ是当前请求的所有数据，包括Header和URL，body，这里只涉及到get<br># 获取当前get请求的所有数据，返回是string类型<br>params = parse_qs(environ[‘QUERY_STRING’])<br># 获取get中key为name的值<br>name = params.get(‘name’, [‘’])[0]<br>no = params.get(‘no’, [‘’])[0]</p>
<p># 组成一个数组，数组中只有一个字典<br>dic = {‘name’: name, ‘no’: no}</p>
<p>return [json.dumps(dic)]</p>
<p>if <strong>name</strong> == “<strong>main</strong>“:<br>port = 5088<br>httpd = make_server(“0.0.0.0”, port, application)<br>print “serving http on port {0}…”.format(str(port))<br>httpd.serve_forever()</p>
<h2 id="请求实例"><a href="#请求实例" class="headerlink" title="请求实例"></a>请求实例</h2><p><img src="/../images/Python%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84API%E6%8E%A5%E5%8F%A3/20170712171923385" alt="这里写图片描述"></p>
<h1 id="post方法"><a href="#post方法" class="headerlink" title="post方法"></a>post方法</h1><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><p># coding:utf-8</p>
<p>import json<br>from wsgiref.simple_server import make_server</p>
<p># 定义函数，参数是函数的两个参数，都是python本身定义的，默认就行了。<br>def application(environ, start_response):<br># 定义文件请求的类型和当前请求成功的code<br>start_response(‘200 OK’, [(‘Content-Type’, ‘application/json’)])<br># environ是当前请求的所有数据，包括Header和URL，body</p>
<p>request_body = environ[“wsgi.input”].read(int(environ.get(“CONTENT_LENGTH”, 0)))<br>request_body = json.loads(request_body)</p>
<p>name = request_body[“name”]<br>no = request_body[“no”]</p>
<p># input your method here<br># for instance:<br># 增删改查</p>
<p>dic = {‘myNameIs’: name, ‘myNoIs’: no}</p>
<p>return [json.dumps(dic)]</p>
<p>if <strong>name</strong> == “<strong>main</strong>“:<br>port = 6088<br>httpd = make_server(“0.0.0.0”, port, application)<br>print “serving http on port {0}…”.format(str(port))<br>httpd.serve_forever()</p>
<p>请求实例<img src="/../images/Python%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84API%E6%8E%A5%E5%8F%A3/20170712172008278" alt="这里写图片描述"></p>
<p>``疑问</p>
<ol>
<li>怎么实现请求的路径限制？</li>
<li>怎么限制接口调用方的headers？</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>-Python</tag>
      </tags>
  </entry>
  <entry>
    <title>PB级别的数据和能应对百万级的流量，百万级并发量</title>
    <url>/post/16edc217.html</url>
    <content><![CDATA[<p>PB级别的数据和能应对百万级的流量，百万级并发量</p>
<p>集成认证：</p>
<p>keycloak是一个集成的登陆技术，即SSO一个比较好的技术，keycloak挂载至云服务器，例如使用docker或K8S</p>
<p>单点登录(SingleSignOn，<em>SSO</em>)，就是通过用户的一次性鉴别登录</p>
]]></content>
      <categories>
        <category>分布式架构</category>
      </categories>
      <tags>
        <tag>百万级的流量,百万级并发量,keycloak</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell脚本调用阿里云API实现DDNS动态域名解析</title>
    <url>/post/c33ba535.html</url>
    <content><![CDATA[<h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul>
<li><ul>
<li><a href="https://blog.csdn.net/GerZhouGengCheng/article/details/106165329#_1">前言</a></li>
<li><a href="https://blog.csdn.net/GerZhouGengCheng/article/details/106165329#AccessKey_3">申请AccessKey</a></li>
<li><ul>
<li><a href="https://blog.csdn.net/GerZhouGengCheng/article/details/106165329#_9">创建用户</a></li>
<li><a href="https://blog.csdn.net/GerZhouGengCheng/article/details/106165329#_19">创建用户组</a></li>
<li><a href="https://blog.csdn.net/GerZhouGengCheng/article/details/106165329#_23">用户组添加成员</a></li>
<li><a href="https://blog.csdn.net/GerZhouGengCheng/article/details/106165329#_28">用户组添加权限</a></li>
</ul>
</li>
<li><a href="https://blog.csdn.net/GerZhouGengCheng/article/details/106165329#Shell_36">Shell脚本</a></li>
</ul>
</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于服务器的外网是动态拨号，每次获取的外网IP都不同。手头上刚好有阿里云的域名。为此，想通过编写一个Shell脚本，定期通过互联网服务获取当前机器所在网络的外部IP地址，并将新的IP地址通过阿里云提供的API，更新到对应的域名解析记录。</p>
<h2 id="申请AccessKey"><a href="#申请AccessKey" class="headerlink" title="申请AccessKey"></a>申请AccessKey</h2><p>登陆阿里云<a href="https://account.aliyun.com/">官网</a>，在控制台的右上角，将鼠标移动到头像上，会出现如下列表：<br><img src="/../images/Shell%E8%84%9A%E6%9C%AC%E8%B0%83%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91API%E5%AE%9E%E7%8E%B0DDNS%E5%8A%A8%E6%80%81%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/20200516212543834.png" alt="AccessKey管理入口"><br>选择AccessKey管理，会弹出如下提示：<br><img src="/../images/Shell%E8%84%9A%E6%9C%AC%E8%B0%83%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91API%E5%AE%9E%E7%8E%B0DDNS%E5%8A%A8%E6%80%81%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/20200516212657728.png" alt="子用户AccessKey入口"><br>选择<code>开始使用子用户AccessKey</code>，这里不选择<code>继续使用AccessKey</code>，原因是当前进入的页面是主账号，拥有所有的权限，建议通过使用子账户来配置，控制权限。</p>
<h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p><img src="/../images/Shell%E8%84%9A%E6%9C%AC%E8%B0%83%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91API%E5%AE%9E%E7%8E%B0DDNS%E5%8A%A8%E6%80%81%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/20200516213109622.png" alt="创建用户信息页面"><br>填写要创建的登陆名称和显示名称，这里可以按照需要进行填写，然后点击<code>确定</code>完成创建用户。如果弹出要验证短信，则按提示完成即可。<br><img src="/../images/Shell%E8%84%9A%E6%9C%AC%E8%B0%83%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91API%E5%AE%9E%E7%8E%B0DDNS%E5%8A%A8%E6%80%81%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/20200516213245131.png" alt="创建用户完成页面"><br>创建完成后，默认账户没有<code>AccessKey ID</code>和<code>AccessKey Secret</code>。<br>选择左侧用户列表，点击新创建的用户名，出现如下设置：<br><img src="/../images/Shell%E8%84%9A%E6%9C%AC%E8%B0%83%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91API%E5%AE%9E%E7%8E%B0DDNS%E5%8A%A8%E6%80%81%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/20200516220809512.png" alt="创建用户AccessKey入口"><br>选择<code>创建AccessKey</code><br><img src="/../images/Shell%E8%84%9A%E6%9C%AC%E8%B0%83%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91API%E5%AE%9E%E7%8E%B0DDNS%E5%8A%A8%E6%80%81%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/20200516220924324.png" alt="AccessKey信息页面"><br>保存创建好的<code>AccessKey ID</code>和<code>AccessKey Secret</code>，注意<code>AccessKey Secret</code>只会在这一次显示，后续无法在此查看。如果忘记了，只能删除掉重新添加新的。</p>
<h3 id="创建用户组"><a href="#创建用户组" class="headerlink" title="创建用户组"></a>创建用户组</h3><p>点击用户组，选择<code>创建用户组</code>，并填写用户组的相关信息。<br><img src="/../images/Shell%E8%84%9A%E6%9C%AC%E8%B0%83%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91API%E5%AE%9E%E7%8E%B0DDNS%E5%8A%A8%E6%80%81%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/20200516215645451.png" alt="创建用户组信息页面"><br>点击<code>确定</code>，创建用户组。</p>
<h3 id="用户组添加成员"><a href="#用户组添加成员" class="headerlink" title="用户组添加成员"></a>用户组添加成员</h3><p><img src="/../images/Shell%E8%84%9A%E6%9C%AC%E8%B0%83%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91API%E5%AE%9E%E7%8E%B0DDNS%E5%8A%A8%E6%80%81%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/20200516220617658.png" alt="添加组成员入口"><br>在用户组后面选择<code>添加组成员</code><br><img src="/../images/Shell%E8%84%9A%E6%9C%AC%E8%B0%83%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91API%E5%AE%9E%E7%8E%B0DDNS%E5%8A%A8%E6%80%81%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/20200516220511597.png" alt="添加组成员页面"><br>选择要添加的用户进行添加，然后点击<code>确定</code>。</p>
<h3 id="用户组添加权限"><a href="#用户组添加权限" class="headerlink" title="用户组添加权限"></a>用户组添加权限</h3><p><img src="/../images/Shell%E8%84%9A%E6%9C%AC%E8%B0%83%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91API%E5%AE%9E%E7%8E%B0DDNS%E5%8A%A8%E6%80%81%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/20200516215815208.png" alt="添加权限入口"><br>在用户组后面选择<code>添加权限</code><br><img src="/../images/Shell%E8%84%9A%E6%9C%AC%E8%B0%83%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91API%E5%AE%9E%E7%8E%B0DDNS%E5%8A%A8%E6%80%81%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/20200516220017997.png" alt="添加权限页面"><br>点击<code>确定</code>，添加权限。<br><img src="/../images/Shell%E8%84%9A%E6%9C%AC%E8%B0%83%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91API%E5%AE%9E%E7%8E%B0DDNS%E5%8A%A8%E6%80%81%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/20200516220201157.png" alt="添加权限结果页面"><br>到这里，子账户的创建及权限配置就已经完成。</p>
<h2 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a>Shell脚本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;[$(date &quot;+%G/%m/%d %H:%M:%S&quot;)] AliDDNS.sh start...&quot;</span><br><span class="line"></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置需要DDNS的地址，格式为 AliDDNS_SubDomainName.AliDDNS_DomainName ,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如 AliDDNS_DomainName 为 example.com, AliDDNS_SubDomainName 为 ddns ,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连接起来就是 ddns.example.com</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># 设置需要DDNS的域名 &lt;DomainName&gt;</span></span></span><br><span class="line">AliDDNS_DomainName=&quot;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置需要DDNS的子域名 &lt;SubDomainName&gt;</span></span><br><span class="line">AliDDNS_SubDomainName=&quot;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置域名记录的TTL (生存周期)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">免费版产品最低为600(10分钟)~86400(1天), 付费版(企业版)包括以上范围, 还可以按照购买产品配置设置为：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">600(10分钟)、120(2分钟)、60(1分钟)、10(10秒)、5(5秒)、1(1秒),</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请按照自己的产品配置和DDNS解析速度需求妥善配置TTL值, 免费版设置低于600的TTL将会报错。</span></span><br><span class="line">AliDDNS_TTL=&quot;600&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置阿里云的AccessKeyId/AccessKeySecret,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可在 https://ak-console.aliyun.com/ 处获取 ,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推荐使用 https://ram.console.aliyun.com/<span class="comment">#/user/list 生成的AK/SK, 更安全</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># 设置阿里云的Access Key</span></span></span><br><span class="line">AliDDNS_AK=&quot;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置阿里云的Secret Key</span></span><br><span class="line">AliDDNS_SK=&quot;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置获取本机IP需要执行的命令 (用于nslookup命令获取DDNS域名的当前IP)</span></span><br><span class="line">AliDDNS_LocalIP=&quot;curl -s whatismyip.akamai.com&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置解析使用的DNS服务器 (推荐使用 223.5.5.5/223.6.6.6 , 毕竟都是阿里家的东西)</span></span><br><span class="line">AliDDNS_DomainServerIP=&quot;223.5.5.5&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">防止用户忘记设置参数导致程序报错，部分参数如果检测到空值，自动使用默认值</span></span><br><span class="line">[ &quot;$AliDDNS_LocalIP&quot; = &quot;&quot; ] &amp;&amp; AliDDNS_LocalIP=&quot;curl -s whatismyip.akamai.com&quot;</span><br><span class="line">[ &quot;$AliDDNS_DomainServerIP&quot; = &quot;&quot; ] &amp;&amp; $AliDDNS_DomainServerIP=&quot;223.5.5.5&quot;</span><br><span class="line">[ &quot;$AliDDNS_TTL&quot; = &quot;&quot; ] &amp;&amp; AliDDNS_TTL=&quot;600&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取本机公网IP</span></span><br><span class="line">AliDDNS_LocalIP=`$AliDDNS_LocalIP 2&gt;&amp;1` || die &quot;$AliDDNS_LocalIP&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取DDNS域名当前解析记录IP</span></span><br><span class="line">AliDDNS_DomainIP=`nslookup $AliDDNS_SubDomainName.$AliDDNS_DomainName $AliDDNS_DomainServerIP 2&gt;&amp;1`</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断上一条命令的执行是否成功</span></span><br><span class="line">if [ &quot;$?&quot; -eq &quot;0&quot; ]</span><br><span class="line">then</span><br><span class="line">    # 如果执行成功，分离出结果中的IP地址</span><br><span class="line">    AliDDNS_DomainIP=`echo &quot;$AliDDNS_DomainIP&quot; | grep &#x27;Address:&#x27; | tail -n1 | awk &#x27;&#123;print $NF&#125;&#x27;`</span><br><span class="line">    # 进行判断，如果本次获取的新IP和旧IP相同，则进行休眠一分钟后再继续判断</span><br><span class="line">    if [ &quot;$AliDDNS_LocalIP&quot; = &quot;$AliDDNS_DomainIP&quot; ]</span><br><span class="line">    then</span><br><span class="line">        echo &quot;[$(date &quot;+%G/%m/%d %H:%M:%S&quot;)] Local IP ($AliDDNS_LocalIP) is the same with Domain IP ($AliDDNS_DomainIP)&quot;</span><br><span class="line">        echo &quot;[$(date &quot;+%G/%m/%d %H:%M:%S&quot;)] No change modified ...&quot;</span><br><span class="line">	sleep 60</span><br><span class="line">	continue</span><br><span class="line">    fi </span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果IP发生变动，开始进行修改</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成时间戳</span></span><br><span class="line">timestamp=`date -u &quot;+%Y-%m-%dT%H%%3A%M%%3A%SZ&quot;`</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">URL加密函数</span></span><br><span class="line">urlencode() &#123;</span><br><span class="line">    # urlencode &lt;string&gt;</span><br><span class="line">    out=&quot;&quot;</span><br><span class="line">    while read -n1 c</span><br><span class="line">    do</span><br><span class="line">        case $c in</span><br><span class="line">            [a-zA-Z0-9._-]) out=&quot;$out$c&quot; ;;</span><br><span class="line">            *) out=&quot;$out`printf &#x27;%%%02X&#x27; &quot;&#x27;$c&quot;`&quot; ;;</span><br><span class="line">        esac</span><br><span class="line">    done</span><br><span class="line">    echo -n $out</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">URL加密命令</span></span><br><span class="line">enc() &#123;</span><br><span class="line">    echo -n &quot;$1&quot; | urlencode</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发送请求函数</span></span><br><span class="line">send_request() &#123;</span><br><span class="line">    local args=&quot;AccessKeyId=$AliDDNS_AK&amp;Action=$1&amp;Format=json&amp;$2&amp;Version=2015-01-09&quot;</span><br><span class="line">    local hash=$(echo -n &quot;GET&amp;%2F&amp;$(enc &quot;$args&quot;)&quot; | openssl dgst -sha1 -hmac &quot;$AliDDNS_SK&amp;&quot; -binary | openssl base64)</span><br><span class="line">    curl -s &quot;http://alidns.aliyuncs.com/?$args&amp;Signature=$(enc &quot;$hash&quot;)&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取记录值 (RecordID)</span></span><br><span class="line">get_recordid() &#123;</span><br><span class="line">    grep -Eo &#x27;&quot;RecordId&quot;:&quot;[0-9]+&quot;&#x27; | cut -d&#x27;:&#x27; -f2 | tr -d &#x27;&quot;&#x27;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请求记录值 (RecordID)</span></span><br><span class="line">query_recordid() &#123;</span><br><span class="line">    send_request &quot;DescribeSubDomainRecords&quot; &quot;SignatureMethod=HMAC-SHA1&amp;SignatureNonce=$timestamp&amp;SignatureVersion=1.0&amp;SubDomain=$AliDDNS_SubDomainName.$AliDDNS_DomainName&amp;Timestamp=$timestamp&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新记录值 (RecordID)</span></span><br><span class="line">update_record() &#123;</span><br><span class="line">    send_request &quot;UpdateDomainRecord&quot; &quot;RR=$AliDDNS_SubDomainName&amp;RecordId=$1&amp;SignatureMethod=HMAC-SHA1&amp;SignatureNonce=$timestamp&amp;SignatureVersion=1.0&amp;TTL=$AliDDNS_TTL&amp;Timestamp=$timestamp&amp;Type=A&amp;Value=$AliDDNS_LocalIP&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加记录值 (RecordID)</span></span><br><span class="line">add_record() &#123;</span><br><span class="line">    send_request &quot;AddDomainRecord&amp;DomainName=$AliDDNS_DomainName&quot; &quot;RR=$AliDDNS_SubDomainName&amp;SignatureMethod=HMAC-SHA1&amp;SignatureNonce=$timestamp&amp;SignatureVersion=1.0&amp;TTL=$AliDDNS_TTL&amp;Timestamp=$timestamp&amp;Type=A&amp;Value=$AliDDNS_LocalIP&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断RecordIP是否为空</span></span><br><span class="line">if [ &quot;$AliDDNS_RecordID&quot; = &quot;&quot; ]</span><br><span class="line">then</span><br><span class="line">    AliDDNS_RecordID=`query_recordid | get_recordid`</span><br><span class="line">fi</span><br><span class="line">if [ &quot;$AliDDNS_RecordID&quot; = &quot;&quot; ]</span><br><span class="line">then</span><br><span class="line">    AliDDNS_RecordID=`add_record | get_recordid`</span><br><span class="line">    echo &quot;[$(date &quot;+%G/%m/%d %H:%M:%S&quot;)] Added RecordID : $AliDDNS_RecordID&quot;</span><br><span class="line">else</span><br><span class="line">    update_record $AliDDNS_RecordID</span><br><span class="line">    echo &quot;[$(date &quot;+%G/%m/%d %H:%M:%S&quot;)] Updated RecordID : $AliDDNS_RecordID&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出最终结果</span></span><br><span class="line">if [ &quot;$AliDDNS_RecordID&quot; = &quot;&quot; ]; then</span><br><span class="line">    # 输出失败结果 (因为没有获取到RecordID)</span><br><span class="line">    echo &quot;[$(date &quot;+%G/%m/%d %H:%M:%S&quot;)] DDNS Update Failed !&quot;</span><br><span class="line">else</span><br><span class="line">    # 输出成功结果</span><br><span class="line">    echo &quot;[$(date &quot;+%G/%m/%d %H:%M:%S&quot;)] DDNS Update Success, New IP is : $AliDDNS_LocalIP&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">sleep 30</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>填入要管理的域名和对应的子域名，并将上一步获得的<code>AccessKey ID</code>和<code>AccessKey Secret</code>填入。运行脚本即可定时检测当前外网IP，并更新到对应的子域名记录里面。</p>
]]></content>
      <categories>
        <category>DDNS</category>
      </categories>
      <tags>
        <tag>DDNS,阿里云,Shell脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 3 利用 Dlib 实现摄像头实时人脸识别</title>
    <url>/post/375ec5b6.html</url>
    <content><![CDATA[<p><strong>Python 3 利用 Dlib 实现摄像头实时人脸识别</strong></p>
<p><strong>0. 引言</strong></p>
<p>　　利用 Python 开发，借助 Dlib 库捕获摄像头中的人脸，提取人脸特征，通过计算特征值之间的欧氏距离，来和预存的人脸特征进行对比，判断是否匹配，达到人脸识别的目的；</p>
<p>　　可以从摄像头中抠取人脸图片存储到本地，然后提取构建预设人脸特征；</p>
<p>　　根据抠取的 / 已有的同一个人多张人脸图片提取 128D 特征值，然后计算该人的 128D 特征均值；</p>
<p>　　然后和摄像头中实时获取到的人脸提取出的特征值，计算欧氏距离，判定是否为同一张人脸；　　</p>
<p>　　Python + OpenCv + Dlib ; 　</p>
<p>　　<strong>Features :</strong></p>
<ul>
<li>支持人脸数据采集，自行建立人脸数据库 / Support face register</li>
<li>调用摄像头实时人脸检测和识别 / Using camera to real-time detect and recognize faces</li>
<li>支持多张人脸 / Support multi-faces</li>
</ul>
<p>　　<strong>人脸识别 / Face Recognition</strong> 的说明：</p>
<p>　　Wikipedia 上关于<strong>人脸识别系统 / Face Recognition System</strong> 的描述：<em>they work by comparing selected facial features from given image with faces within a database.</em></p>
<p>　　本项目中就是比较 <strong>预设的人脸的特征</strong> 和 <strong>摄像头实时获取到的人脸的特征</strong> ；</p>
<p>　　核心就是 <strong>提取 128D 人脸特征，然后计算 摄像头人脸特征 和 预设的特征脸的\</strong>欧式距离，**进行比对；**</p>
<p>　　效果如下：　　</p>
<p><img src="/../images/Python%203%20%E5%88%A9%E7%94%A8%20Dlib%20%E5%AE%9E%E7%8E%B0%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/1152352-20181005123021947-1880770901.png" alt="img"> </p>
<p><strong>图 1 摄像头多个人脸时识别效果</strong> </p>
<p><strong>1. 总体流程</strong></p>
<p>　　先说下 <strong>人脸检测 ( Face detection )</strong> 和 <strong>人脸识别 ( Face Recognition )</strong> ，前者是达到检测出场景中人脸的目的就可以了，而后者不仅需要检测出人脸，还要和<strong>已有人脸数据进行比对</strong>，识别出是否在数据库中，或者进行身份标注之类处理，人脸检测和人脸识别两者有时候可能会被理解混淆；</p>
<p>　　我的之前一些项目都是用 Dlib 做人脸检测这块，这个项目想要实现的功能是人脸识别功能，借助的是 Dlib 官网中 face_recognition.py 这个例程 （ Link：<a href="http://dlib.net/face_recognition.py.html">http://dlib.net/face_recognition.py.html</a> ）；</p>
<p>　　核心在于 利用“dlib_face_recognition_resnet_model_v1.dat” 这个 model，提取<strong>人脸图像的 128D 特征</strong>，然后比对不同人脸图片的 128D 特征，设定阈值 <strong>计算欧氏距离</strong> 来判断是否为同一张脸；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 # face recognition model, the object maps human faces into 128D vectors2 facerec = dlib.face_recognition_model_v1(&quot;dlib_face_recognition_resnet_model_v1.dat&quot;)3 4 shape = predictor(img, dets[0])5 face_descriptor = facerec.compute_face_descriptor(img, shape)</span><br></pre></td></tr></table></figure>


<p>　　 </p>
<p><img src="/../images/Python%203%20%E5%88%A9%E7%94%A8%20Dlib%20%E5%AE%9E%E7%8E%B0%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/1152352-20181005123055901-1748654455.png" alt="img"> </p>
<p><strong>图 2 总体设计流程</strong></p>
<p><strong>2.源码介绍</strong></p>
<p>　　主要有</p>
<p>　　　　<strong><em>get_face_from_camera.py\</em> ,</strong> </p>
<p>　　　　<strong><em>get_features_into_CSV.py\</em></strong> ，</p>
<p>　　　　<strong><em>face_reco_from_camera.py</em></strong></p>
<p>　　这三个 Python 文件，接下来会分别介绍实现功能；</p>
<p><strong>2.1 get_face_from_camera.py / 人脸注册录入</strong></p>
<p>　　人脸识别需要将 <strong>提取到的图像数据</strong> 和 <strong>已有图像数据</strong> 进行比对分析，所以这部分代码实现的功能就是 <strong>人脸录入</strong>；</p>
<p>　　程序会生成一个窗口，显示调用的摄像头实时获取的图像；</p>
<p>　　<em>（关于摄像头的调用方式可以参考这里： <a href="http://www.cnblogs.com/AdaminXie/p/8472743.html">Python 3 利用 Dlib 19.7 实现摄像头人脸检测特征点标定</a>）；</em></p>
<p>　　</p>
<p>　　然后根据键盘输入进行人脸捕获：</p>
<ul>
<li>“N” 新录入人脸，新建文件夹 person_X/ 用来存储某人的人脸图像</li>
<li> “S” 开始捕获人脸，将捕获到的人脸放到 person_X/ 路径下</li>
<li>“Q” 退出窗口</li>
</ul>
<p>　　</p>
<p>　　摄像头的调用是利用 opencv 库的 <em>cv2.VideoCapture(0),</em> 此处参数为 0 代表调用的是笔记本的默认摄像头，你也可以让它调用传入已有视频文件；</p>
<p>　<img src="/../images/Python%203%20%E5%88%A9%E7%94%A8%20Dlib%20%E5%AE%9E%E7%8E%B0%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/1152352-20181029163456334-85351276.png" alt="img"></p>
<p><strong>图 3 get_face_from_camera.py 的界面</strong></p>
<p> 　</p>
<p>　　捕获到的一组人脸示例；</p>
<p><img src="/../images/Python%203%20%E5%88%A9%E7%94%A8%20Dlib%20%E5%AE%9E%E7%8E%B0%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/1152352-20181002221712503-768390199.png" alt="img"></p>
<p><strong>图 4 捕获到的一组人脸</strong></p>
<p>　　<strong>get_face_from_camera.py 源码</strong></p>
<p><a href="http:"><img src="/../images/Python%203%20%E5%88%A9%E7%94%A8%20Dlib%20%E5%AE%9E%E7%8E%B0%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/copycode.gif" alt="复制代码"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure>
<p># 进行人脸录入 / face register</p>
<p># 录入多张人脸 / support multi-faces</p>
<p># Author:  coneypo</p>
<p># Blog:   <a href="http://www.cnblogs.com/AdaminXie">http://www.cnblogs.com/AdaminXie</a></p>
<p># GitHub:  <a href="https://github.com/coneypo/Dlib_face_recognition_from_camera">https://github.com/coneypo/Dlib_face_recognition_from_camera</a></p>
<p># Mail:   <a href="mailto:&#x63;&#111;&#110;&#101;&#121;&#112;&#111;&#x40;&#x66;&#x6f;&#x78;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#x6f;&#x6d;">&#x63;&#111;&#110;&#101;&#121;&#112;&#111;&#x40;&#x66;&#x6f;&#x78;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#x6f;&#x6d;</a></p>
<p># Created at 2018-05-11</p>
<p># Updated at 2018-10-29</p>
<p>import dlib     # 人脸处理的库 Dlib</p>
<p>import numpy as np # 数据处理的库 Numpy</p>
<p>import cv2     # 图像处理的库 OpenCv</p>
<p>import os      # 读写文件</p>
<p>import shutil    # 读写文件</p>
<p># Dlib 正向人脸检测器</p>
<p>detector = dlib.get_frontal_face_detector()</p>
<p># Dlib 68 点特征预测器</p>
<p>predictor = dlib.shape_predictor(‘data/data_dlib/shape_predictor_68_face_landmarks.dat’)</p>
<p># OpenCv 调用摄像头</p>
<p>cap = cv2.VideoCapture(0)</p>
<p># 设置视频参数</p>
<p>cap.set(3, 480)</p>
<p># 人脸截图的计数器</p>
<p>cnt_ss = 0</p>
<p># 存储人脸的文件夹</p>
<p>current_face_dir = 0</p>
<p># 保存的路径</p>
<p>path_make_dir = “data/data_faces_from_camera/“</p>
<p>path_csv = “data/data_csvs_from_camera/“</p>
<p># (optional) 删除之前存的人脸数据文件夹</p>
<p>def pre_clear():</p>
<p>  folders_rd = os.listdir(path_make_dir)</p>
<p>  for i in range(len(folders_rd)):</p>
<p>​    shutil.rmtree(path_make_dir+folders_rd[i])</p>
<p>  csv_rd = os.listdir(path_csv)</p>
<p>  for i in range(len(csv_rd)):</p>
<p>​    os.remove(path_csv+csv_rd[i])</p>
<p># 每次程序录入之前，删掉之前存的人脸数据</p>
<p>pre_clear()</p>
<p># 人脸种类数目的计数器</p>
<p>person_cnt = 0</p>
<p>while cap.isOpened():</p>
<p>  # 480 height * 640 width</p>
<p>  flag, img_rd = cap.read()</p>
<p>  kk = cv2.waitKey(1)</p>
<p>  img_gray = cv2.cvtColor(img_rd, cv2.COLOR_RGB2GRAY)</p>
<p>  # 人脸数 faces</p>
<p>  faces = detector(img_gray, 0)</p>
<p>  # 待会要写的字体</p>
<p>  font = cv2.FONT_HERSHEY_COMPLEX</p>
<p>  # 按下 ‘n’ 新建存储人脸的文件夹</p>
<p>  if kk == ord(‘n’):</p>
<p>​    person_cnt += 1</p>
<p>​    current_face_dir = path_make_dir + “person_” + str(person_cnt)</p>
<p>​    print(‘\n’)</p>
<p>​    for dirs in (os.listdir(path_make_dir)):</p>
<p>​      if current_face_dir == path_make_dir + dirs:</p>
<p>​        shutil.rmtree(current_face_dir)</p>
<p>​        print(“删除旧的文件夹:”, current_face_dir)</p>
<p>​    os.makedirs(current_face_dir)</p>
<p>​    print(“新建的人脸文件夹: “, current_face_dir)</p>
<p>​    # 将人脸计数器清零</p>
<p>​    cnt_ss = 0</p>
<p>  if len(faces) != 0:</p>
<p>​    # 检测到人脸</p>
<p>​    # 矩形框</p>
<p>​    for k, d in enumerate(faces):</p>
<p>​      # 计算矩形大小</p>
<p>​      # (x,y), (宽度width, 高度height)</p>
<p>​      pos_start = tuple([d.left(), d.top()])</p>
<p>​      pos_end = tuple([d.right(), d.bottom()])</p>
<p>​      # 计算矩形框大小</p>
<p>​      height = (d.bottom() - d.top())</p>
<p>​      width = (d.right() - d.left())</p>
<p>​      hh = int(height/2)</p>
<p>​      ww = int(width/2)</p>
<p>​      # 设置颜色 / The color of rectangle of faces detected</p>
<p>​      color_rectangle = (255, 255, 255)</p>
<p>​      if (d.right()+ww) &gt; 640 or (d.bottom()+hh&gt;480) or (d.left()-ww &lt; 0) or ( d.top()-hh &lt; 0):</p>
<p>​        cv2.putText(img_rd, “OUT OF RANGE”, (20, 300), font, 0.8, (0, 0, 255), 1, cv2.LINE_AA)</p>
<p>​        color_rectangle = (0, 0, 255)</p>
<p>​      else:</p>
<p>​        color_rectangle = (255, 255, 255)</p>
<p>​      cv2.rectangle(img_rd,</p>
<p>​             tuple([d.left() - ww, d.top() - hh]),</p>
<p>​             tuple([d.right() + ww, d.bottom() + hh]),</p>
<p>​             color_rectangle, 2)</p>
<p>​      # 根据人脸大小生成空的图像</p>
<p>​      im_blank = np.zeros((int(height<em>2), width</em>2, 3), np.uint8)</p>
<p>​      # 按下 ‘s’ 保存摄像头中的人脸到本地</p>
<p>​      if kk == ord(‘s’):</p>
<p>​        cnt_ss += 1</p>
<p>​        for ii in range(height*2):</p>
<p>​          for jj in range(width*2):</p>
<p>​            im_blank[ii][jj] = img_rd[d.top()-hh + ii][d.left()-ww + jj]</p>
<p>​        cv2.imwrite(current_face_dir + “/img_face_” + str(cnt_ss) + “.jpg”, im_blank)</p>
<p>​        print(“写入本地：”, str(current_face_dir) + “/img_face_” + str(cnt_ss) + “.jpg”)</p>
<p>​    # 显示人脸数</p>
<p>  cv2.putText(img_rd, “Faces: “ + str(len(faces)), (20, 100), font, 0.8, (0, 255, 0), 1, cv2.LINE_AA)</p>
<p>  # 添加说明</p>
<p>  cv2.putText(img_rd, “Face Register”, (20, 40), font, 1, (0, 0, 0), 1, cv2.LINE_AA)</p>
<p>  cv2.putText(img_rd, “N: New face folder”, (20, 350), font, 0.8, (0, 0, 0), 1, cv2.LINE_AA)</p>
<p>  cv2.putText(img_rd, “S: Save face”, (20, 400), font, 0.8, (0, 0, 0), 1, cv2.LINE_AA)</p>
<p>  cv2.putText(img_rd, “Q: Quit”, (20, 450), font, 0.8, (0, 0, 0), 1, cv2.LINE_AA)</p>
<p>  # 按下 ‘q’ 键退出</p>
<p>  if kk == ord(‘q’):</p>
<p>​    break</p>
<p>  # 窗口显示</p>
<p>  # cv2.namedWindow(“camera”, 0) # 如果需要摄像头窗口大小可调</p>
<p>  cv2.imshow(“camera”, img_rd)</p>
<p># 释放摄像头</p>
<p>cap.release()</p>
<p># 删除建立的窗口</p>
<p>cv2.destroyAllWindows()</p>
<p><a href="http:"><img src="/../images/Python%203%20%E5%88%A9%E7%94%A8%20Dlib%20%E5%AE%9E%E7%8E%B0%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/copycode.gif" alt="复制代码"></a></p>
<p>考虑到有可能需要保存的矩形框超出摄像头范围，对于这种异常，如果矩形框超出范围，矩形框会从白变红，然后提示 “OUT OF RANGE”;</p>
<p><img src="/../images/Python%203%20%E5%88%A9%E7%94%A8%20Dlib%20%E5%AE%9E%E7%8E%B0%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/1152352-20181029163559597-1249215749.png" alt="img"></p>
<p><strong>图 5 人脸录入异常处理</strong></p>
<p>　　<strong>get_face_from_camera.py 的输出 log</strong></p>
<p><a href="http:"><img src="/../images/Python%203%20%E5%88%A9%E7%94%A8%20Dlib%20%E5%AE%9E%E7%8E%B0%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/copycode.gif" alt="复制代码"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">删除旧的文件夹: F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_1</span><br><span class="line">新建的人脸文件夹:  F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_1</span><br><span class="line">写入本地： F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_1/img_face_1.jpg</span><br><span class="line">写入本地： F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_1/img_face_2.jpg</span><br><span class="line">写入本地： F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_1/img_face_3.jpg</span><br><span class="line">写入本地： F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_1/img_face_4.jpg</span><br><span class="line">写入本地： F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_1/img_face_5.jpg</span><br><span class="line">写入本地： F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_1/img_face_6.jpg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">删除旧的文件夹: F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_2</span><br><span class="line">新建的人脸文件夹:  F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_2</span><br><span class="line">写入本地： F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_2/img_face_1.jpg</span><br><span class="line">写入本地： F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_2/img_face_2.jpg</span><br><span class="line">写入本地： F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_2/img_face_3.jpg</span><br><span class="line">写入本地： F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_2/img_face_4.jpg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">删除旧的文件夹: F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_3</span><br><span class="line">新建的人脸文件夹:  F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_3</span><br><span class="line">写入本地： F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_3/img_face_1.jpg</span><br><span class="line">写入本地： F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_3/img_face_2.jpg</span><br><span class="line">写入本地： F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_3/img_face_3.jpg</span><br><span class="line">写入本地： F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_3/img_face_4.jpg</span><br><span class="line">写入本地： F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_3/img_face_5.jpg</span><br><span class="line">写入本地： F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_3/img_face_6.jpg</span><br><span class="line">写入本地： F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_3/img_face_7.jpg</span><br></pre></td></tr></table></figure>
<p><a href="http:"><img src="/../images/Python%203%20%E5%88%A9%E7%94%A8%20Dlib%20%E5%AE%9E%E7%8E%B0%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/copycode.gif" alt="复制代码"></a></p>
<p><strong>2.2</strong> <strong>get_features_into_CSV.py / 将图像文件中人脸数据提取出来存入 CSV</strong></p>
<p>　　这部分代码实现的功能是将之前捕获到的人脸图像文件，提取出 128D 特征，然后计算出某人人脸数据的特征均值存入 CSV 中，方便之后识别时候进行比对；</p>
<p>　　利用 numpy.mean() 计算特征均值；</p>
<p>　　<strong>get_features_into_CSV.py 源码：</strong></p>
<p><a href="http:"><img src="/../images/Python%203%20%E5%88%A9%E7%94%A8%20Dlib%20%E5%AE%9E%E7%8E%B0%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/copycode.gif" alt="复制代码"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p># 从人脸图像文件中提取人脸特征存入 CSV</p>
<p># Author:  coneypo</p>
<p># Blog:   <a href="http://www.cnblogs.com/AdaminXie">http://www.cnblogs.com/AdaminXie</a></p>
<p># GitHub:  <a href="https://github.com/coneypo/Dlib_face_recognition_from_camera">https://github.com/coneypo/Dlib_face_recognition_from_camera</a></p>
<p># Mail:   <a href="mailto:&#99;&#x6f;&#110;&#101;&#121;&#112;&#111;&#x40;&#102;&#111;&#x78;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#111;&#x6d;">&#99;&#x6f;&#110;&#101;&#121;&#112;&#111;&#x40;&#102;&#111;&#x78;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#111;&#x6d;</a></p>
<p># Created at 2018-05-11</p>
<p># Updated at 2018-10-29</p>
<p># 增加录入多张人脸到 CSV 的功能</p>
<p># return_128d_features()     获取某张图像的 128D 特征</p>
<p># write_into_csv()        获取某个路径下所有图像的特征，并写入 CSV</p>
<p># compute_the_mean()       从 CSV　中读取　128D 特征，并计算特征均值</p>
<p>import cv2</p>
<p>import os</p>
<p>import dlib</p>
<p>from skimage import io</p>
<p>import csv</p>
<p>import numpy as np</p>
<p>import pandas as pd</p>
<p>path_faces_rd = “data/data_faces_from_camera/“</p>
<p>path_csv = “data/data_csvs_from_camera/“</p>
<p># Dlib 正向人脸检测器</p>
<p>detector = dlib.get_frontal_face_detector()</p>
<p># Dlib 人脸预测器</p>
<p>predictor = dlib.shape_predictor(“data/data_dlib/shape_predictor_5_face_landmarks.dat”)</p>
<p># Dlib 人脸识别模型</p>
<p># Face recognition model, the object maps human faces into 128D vectors</p>
<p>facerec = dlib.face_recognition_model_v1(“data/data_dlib/dlib_face_recognition_resnet_model_v1.dat”)</p>
<p># 返回单张图像的 128D 特征</p>
<p>def return_128d_features(path_img):</p>
<p>  img = io.imread(path_img)</p>
<p>  img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</p>
<p>  faces = detector(img_gray, 1)</p>
<p>  print(“检测的人脸图像：”, path_img, “\n”)</p>
<p>  # 因为有可能截下来的人脸再去检测，检测不出来人脸了</p>
<p>  # 所以要确保是 检测到人脸的人脸图像 拿去算特征</p>
<p>  if len(faces) != 0:</p>
<p>​    shape = predictor(img_gray, faces[0])</p>
<p>​    face_descriptor = facerec.compute_face_descriptor(img_gray, shape)</p>
<p>  else:</p>
<p>​    face_descriptor = 0</p>
<p>​    print(“no face”)</p>
<p>  # print(face_descriptor)</p>
<p>  return face_descriptor</p>
<p># 将文件夹中照片特征提取出来，写入 CSV</p>
<p>#  path_faces_personX:   图像文件夹的路径</p>
<p>#  path_csv:        要生成的 CSV 路径</p>
<p>def write_into_csv(path_faces_personX, path_csv):</p>
<p>  dir_pics = os.listdir(path_faces_personX)</p>
<p>  with open(path_csv, “w”, newline=””) as csvfile:</p>
<p>​    writer = csv.writer(csvfile)</p>
<p>​    for i in range(len(dir_pics)):</p>
<p>​      # 调用return_128d_features()得到128d特征</p>
<p>​      print(“正在读的人脸图像：”, path_faces_personX + “/“ + dir_pics[i])</p>
<p>​      features_128d = return_128d_features(path_faces_personX + “/“ + dir_pics[i])</p>
<p>​      # print(features_128d)</p>
<p>​      # 遇到没有检测出人脸的图片跳过</p>
<p>​      if features_128d == 0:</p>
<p>​        i += 1</p>
<p>​      else:</p>
<p>​        writer.writerow(features_128d)</p>
<p># 读取某人所有的人脸图像的数据，写入 person_X.csv</p>
<p>faces = os.listdir(path_faces_rd)</p>
<p>for person in faces:</p>
<p>  print(path_csv + person + “.csv”)</p>
<p>  write_into_csv(path_faces_rd + person, path_csv + person + “.csv”)</p>
<p># 从 CSV 中读取数据，计算 128D 特征的均值</p>
<p>def compute_the_mean(path_csv_rd):</p>
<p>  column_names = []</p>
<p>  # 128列特征</p>
<p>  for feature_num in range(128):</p>
<p>​    column_names.append(“features_” + str(feature_num + 1))</p>
<p>  # 利用pandas读取csv</p>
<p>  rd = pd.read_csv(path_csv_rd, names=column_names)</p>
<p>  # 存放128维特征的均值</p>
<p>  feature_mean = []</p>
<p>  for feature_num in range(128):</p>
<p>​    tmp_arr = rd[“features_” + str(feature_num + 1)]</p>
<p>​    tmp_arr = np.array(tmp_arr)</p>
<p>​    # 计算某一个特征的均值</p>
<p>​    tmp_mean = np.mean(tmp_arr)</p>
<p>​    feature_mean.append(tmp_mean)</p>
<p>  return feature_mean</p>
<p># 存放所有特征均值的 CSV 的路径</p>
<p>path_csv_feature_all = “data/features_all.csv”</p>
<p># 存放人脸特征的 CSV 的路径</p>
<p>path_csv_rd = “data/data_csvs_from_camera/“</p>
<p>with open(path_csv_feature_all, “w”, newline=””) as csvfile:</p>
<p>  writer = csv.writer(csvfile)</p>
<p>  csv_rd = os.listdir(path_csv_rd)</p>
<p>  print(“得到的特征均值 / The generated average values of features stored in: “)</p>
<p>  for i in range(len(csv_rd)):</p>
<p>​    feature_mean = compute_the_mean(path_csv_rd + csv_rd[i])</p>
<p>​    # print(feature_mean)</p>
<p>​    print(path_csv_rd + csv_rd[i])</p>
<p>​    writer.writerow(feature_mean)</p>
<p><a href="http:"><img src="/../images/Python%203%20%E5%88%A9%E7%94%A8%20Dlib%20%E5%AE%9E%E7%8E%B0%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/copycode.gif" alt="复制代码"></a></p>
<p>　　我们可以看下对于某张图片，<strong>face_descriptor</strong> 这个 <strong>128D vectors</strong> 的输出结果：</p>
<p>　　绿色框内是我们的返回 128D 特征的函数；</p>
<p>　　在红色框内调用该函数来计算 img_face_13.jpg；</p>
<p>　　可以看到黄色框中的输出为 128D 的向量；</p>
<p><img src="/../images/Python%203%20%E5%88%A9%E7%94%A8%20Dlib%20%E5%AE%9E%E7%8E%B0%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/1152352-20180511120053065-1934983472.png" alt="img"></p>
<p><strong>图 6 返回单张图像的 128D 特征的计算结果</strong></p>
<p>　　之后就需要人脸图像进行批量化操作，提取出 128D 的特征，然后计算特征均值，存入 features_all.csv；</p>
<p>　　features_all.csv 是一个 n 行 128 列的 CSV， n 是录入的人脸数，128 列是某人的 128D 特征；</p>
<p>　　这存储的就是 <strong>录入的人脸数据，</strong>之后 <strong>摄像头捕获的人脸</strong> 将要拿过来和 <strong>这些特征值 进行比对，如果欧式距离比较近的话，就可以认为是同一张人脸</strong>；</p>
<p> 　<strong>get_features_into_CSV.py 的输出 log：</strong></p>
<p><a href="http:"><img src="/../images/Python%203%20%E5%88%A9%E7%94%A8%20Dlib%20%E5%AE%9E%E7%8E%B0%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/copycode.gif" alt="复制代码"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">F:/code/python/P_dlib_face_reco/data/csvs_from_camera/person_1.csv</span><br><span class="line">正在读的人脸图像： F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_1/img_face_1.jpg</span><br><span class="line">检测的人脸图像： F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_1/img_face_1.jpg </span><br><span class="line">...正在读的人脸图像： F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_5/img_face_3.jpg</span><br><span class="line">检测的人脸图像： F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_5/img_face_3.jpg </span><br><span class="line"></span><br><span class="line">正在读的人脸图像： F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_5/img_face_4.jpg</span><br><span class="line">检测的人脸图像： F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_5/img_face_4.jpg </span><br><span class="line"></span><br><span class="line">正在读的人脸图像： F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_5/img_face_5.jpg</span><br><span class="line">检测的人脸图像： F:/code/python/P_dlib_face_reco/data/faces_from_camera/person_5/img_face_5.jpg </span><br><span class="line"></span><br><span class="line">特征均值: </span><br><span class="line">F:/code/python/P_dlib_face_reco/data/csvs_from_camera/person_1.csv</span><br><span class="line">F:/code/python/P_dlib_face_reco/data/csvs_from_camera/person_2.csv</span><br><span class="line">F:/code/python/P_dlib_face_reco/data/csvs_from_camera/person_3.csv</span><br><span class="line">F:/code/python/P_dlib_face_reco/data/csvs_from_camera/person_4.csv</span><br><span class="line">F:/code/python/P_dlib_face_reco/data/csvs_from_camera/person_5.csv</span><br></pre></td></tr></table></figure>
<p><a href="http:"><img src="/../images/Python%203%20%E5%88%A9%E7%94%A8%20Dlib%20%E5%AE%9E%E7%8E%B0%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/copycode.gif" alt="复制代码"></a></p>
<p><strong>2.3 face_reco_from_camera.py / 实时人脸识别对比分析</strong></p>
<p>　　这部分源码实现的功能：调用摄像头，捕获摄像头中的人脸，然后如果检测到人脸，将 <strong>摄像头中的人脸提取出 128D 的特征</strong>，然后和 <strong>之前录入人脸的 128D 特征</strong> 进行计算欧式距离，如果比较小，可以判定为一个人，否则不是一个人；</p>
<p>　　欧氏距离对比的阈值设定，是在 <em>return_euclidean_distance</em> 函数的 <em>dist</em> 变量；</p>
<p>　　我这里程序里面指定的 <strong>欧氏距离判断阈值是 0.4</strong>，具体阈值可以根据实际情况或者测得结果进行修改；</p>
<p>　　</p>
<p>　　这边做了一个，让人名跟随显示在头像下方，如果想要在人脸矩形框下方显示人名，首先需要知道 Dlib 生成的矩形框的尺寸怎么读取；</p>
<p>　　Dlib 返回的 dets 变量是一系列人脸的数据，此处对单张人脸处理，所以取 dets[0] 的参数；</p>
<p>　　可以通过 <strong>dets[0].top()</strong>, <strong>dets[0].bottom()</strong>, <strong>dets[0].left()</strong> 和 <strong>dets[0].right()</strong> 来确定要显示的人名的坐标；</p>
<p><img src="/../images/Python%203%20%E5%88%A9%E7%94%A8%20Dlib%20%E5%AE%9E%E7%8E%B0%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/1152352-20181029164755617-126045850.png" alt="img"></p>
<p><strong>图 7 dets[0].top() 等参数说明</strong> </p>
<p>　　</p>
<p>　　得到矩形框的坐标，就可以获取人名的相对位置；</p>
<p>　　这是我这边取的坐标：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pos_text_1 = tuple([dets[0].left(), int(dets[0].bottom()+(dets[0].bottom()-dets[0].top())/4)])</span><br></pre></td></tr></table></figure>


<p>　　<img src="/../images/Python%203%20%E5%88%A9%E7%94%A8%20Dlib%20%E5%AE%9E%E7%8E%B0%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/1152352-20181004111207854-1934282753.png" alt="img"> </p>
<p><strong>图 8 face_reco_from_camera.py 生成的人脸识别窗口界面</strong></p>
<p>　<strong>face_reco_from_camera.py</strong> 源码：</p>
<p><a href="http:"><img src="/../images/Python%203%20%E5%88%A9%E7%94%A8%20Dlib%20%E5%AE%9E%E7%8E%B0%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/copycode.gif" alt="复制代码"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure>
<p># created at 2018-05-11</p>
<p># updated at 2018-09-08</p>
<p># support multi-faces now</p>
<p># Author:  coneypo</p>
<p># Blog:   <a href="http://www.cnblogs.com/AdaminXie">http://www.cnblogs.com/AdaminXie</a></p>
<p># GitHub:  <a href="https://github.com/coneypo/Dlib_face_recogqnition_from_camera">https://github.com/coneypo/Dlib_face_recogqnition_from_camera</a></p>
<p>import dlib     # 人脸识别的库dlib</p>
<p>import numpy as np # 数据处理的库numpy</p>
<p>import cv2     # 图像处理的库OpenCv</p>
<p>import pandas as pd # 数据处理的库Pandas</p>
<p># face recognition model, the object maps human faces into 128D vectors</p>
<p>facerec = dlib.face_recognition_model_v1(“dlib_face_recognition_resnet_model_v1.dat”)</p>
<p># 计算两个向量间的欧式距离</p>
<p>def return_euclidean_distance(feature_1, feature_2):</p>
<p>  feature_1 = np.array(feature_1)</p>
<p>  feature_2 = np.array(feature_2)</p>
<p>  dist = np.sqrt(np.sum(np.square(feature_1 - feature_2)))</p>
<p>  print(“e_distance: “, dist)</p>
<p>  if dist &gt; 0.4:</p>
<p>​    return “diff”</p>
<p>  else:</p>
<p>​    return “same”</p>
<p># 处理存放所有人脸特征的 CSV</p>
<p>path_features_known_csv = “data/features_all.csv”</p>
<p>csv_rd = pd.read_csv(path_features_known_csv, header=None)</p>
<p># 存储的特征人脸个数</p>
<p># print(csv_rd.shape[0])</p>
<p># 用来存放所有录入人脸特征的数组</p>
<p>features_known_arr = []</p>
<p># known faces</p>
<p>for i in range(csv_rd.shape[0]):</p>
<p>  features_someone_arr = []</p>
<p>  for j in range(0, len(csv_rd.ix[i, :])):</p>
<p>​    features_someone_arr.append(csv_rd.ix[i, :][j])</p>
<p>  #  print(features_someone_arr)</p>
<p>  features_known_arr.append(features_someone_arr)</p>
<p>print(“Faces in Database：”, len(features_known_arr))</p>
<p># Dlib 预测器</p>
<p>detector = dlib.get_frontal_face_detector()</p>
<p>predictor = dlib.shape_predictor(‘shape_predictor_68_face_landmarks.dat’)</p>
<p># 创建 cv2 摄像头对象</p>
<p>cap = cv2.VideoCapture(0)</p>
<p># cap.set(propId, value)</p>
<p># 设置视频参数，propId 设置的视频参数，value 设置的参数值</p>
<p>cap.set(3, 480)</p>
<p># 返回一张图像多张人脸的 128D 特征</p>
<p>def get_128d_features(img_gray):</p>
<p>  dets = detector(img_gray, 1)</p>
<p>  if len(dets) != 0:</p>
<p>​    face_des = []</p>
<p>​    for i in range(len(dets)):</p>
<p>​      shape = predictor(img_gray, dets[i])</p>
<p>​      face_des.append(facerec.compute_face_descriptor(img_gray, shape))</p>
<p>  else:</p>
<p>​    face_des = []</p>
<p>  return face_des</p>
<p># cap.isOpened（） 返回true/false 检查初始化是否成功</p>
<p>while cap.isOpened():</p>
<p>  flag, img_rd = cap.read()</p>
<p>  kk = cv2.waitKey(1)</p>
<p>  # 取灰度</p>
<p>  img_gray = cv2.cvtColor(img_rd, cv2.COLOR_RGB2GRAY)</p>
<p>  # 人脸数 dets</p>
<p>  faces = detector(img_gray, 0)</p>
<p>  # 待会要写的字体</p>
<p>  font = cv2.FONT_HERSHEY_COMPLEX</p>
<p>  cv2.putText(img_rd, “Press ‘q’: Quit”, (20, 400), font, 0.8, (84, 255, 159), 1, cv2.LINE_AA)</p>
<p>  # 存储人脸名字和位置的两个 list</p>
<p>  # list 1 (faces): store the name of faces        Jack  unknown unknown Mary</p>
<p>  # list 2 (pos_namelist): store the positions of faces  12,1  1,21  1,13  31,1</p>
<p>  # 存储所有人脸的名字</p>
<p>  pos_namelist = []</p>
<p>  name_namelist = []</p>
<p>  # 检测到人脸</p>
<p>  if len(faces) != 0:</p>
<p>​    # 获取当前捕获到的图像的所有人脸的特征，存储到 features_cap_arr</p>
<p>​    features_cap_arr = []</p>
<p>​    for i in range(len(faces)):</p>
<p>​      shape = predictor(img_rd, faces[i])</p>
<p>​      features_cap_arr.append(facerec.compute_face_descriptor(img_rd, shape))</p>
<p>​    # 遍历捕获到的图像中所有的人脸</p>
<p>​    for k in range(len(faces)):</p>
<p>​      # 让人名跟随在矩形框的下方</p>
<p>​      # 确定人名的位置坐标</p>
<p>​      # 先默认所有人不认识，是 unknown</p>
<p>​      name_namelist.append(“unknown”)</p>
<p>​      # 每个捕获人脸的名字坐标</p>
<p>​      pos_namelist.append(tuple([faces[k].left(), int(faces[k].bottom() + (faces[k].bottom() - faces[k].top()) / 4)]))</p>
<p>​      # 对于某张人脸，遍历所有存储的人脸特征</p>
<p>​      for i in range(len(features_known_arr)):</p>
<p>​        print(“with person_”, str(i+1), “the “, end=’’)</p>
<p>​        # 将某张人脸与存储的所有人脸数据进行比对</p>
<p>​        compare = return_euclidean_distance(features_cap_arr[k], features_known_arr[i])</p>
<p>​        if compare == “same”: # 找到了相似脸</p>
<p>​          name_namelist[k] = “person_” + str(i+1)</p>
<p>​      # 矩形框</p>
<p>​      for kk, d in enumerate(faces):</p>
<p>​        # 绘制矩形框</p>
<p>​        cv2.rectangle(img_rd, tuple([d.left(), d.top()]), tuple([d.right(), d.bottom()]), (0, 255, 255), 2)</p>
<p>​    # 写人脸名字</p>
<p>​    for i in range(len(faces)):</p>
<p>​      cv2.putText(img_rd, name_namelist[i], pos_namelist[i], font, 0.8, (0, 255, 255), 1, cv2.LINE_AA)</p>
<p>  print(“Name list now:”, name_namelist, “\n”)</p>
<p>  cv2.putText(img_rd, “Face Register”, (20, 40), font, 1, (255, 255, 255), 1, cv2.LINE_AA)</p>
<p>  cv2.putText(img_rd, “Faces: “ + str(len(faces)), (20, 100), font, 1, (0, 0, 255), 1, cv2.LINE_AA)</p>
<p>  # 按下 q 键退出</p>
<p>  if kk == ord(‘q’):</p>
<p>​    break</p>
<p>  # 窗口显示</p>
<p>  cv2.imshow(“camera”, img_rd)</p>
<p># 释放摄像头</p>
<p>cap.release()</p>
<p># 删除建立的窗口</p>
<p>cv2.destroyAllWindows()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p><a href="http:"><img src="/../images/Python%203%20%E5%88%A9%E7%94%A8%20Dlib%20%E5%AE%9E%E7%8E%B0%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/copycode.gif" alt="复制代码"></a></p>
<p>　<strong>face_reco_from_camera.py</strong> 输出 log：</p>
<p><a href="http:"><img src="/../images/Python%203%20%E5%88%A9%E7%94%A8%20Dlib%20%E5%AE%9E%E7%8E%B0%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/copycode.gif" alt="复制代码"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Faces in Database： 5Name list now: [] </span><br><span class="line"></span><br><span class="line">Name list now: [] </span><br><span class="line"></span><br><span class="line">Name list now: [] </span><br><span class="line"></span><br><span class="line">Name list now: [] </span><br><span class="line"></span><br><span class="line">Name list now: [] </span><br><span class="line"></span><br><span class="line">with person_ 1 the e_distance:  0.40770022710364756with person_ 2 the e_distance:  0.41082186674421134with person_ 3 the e_distance:  0.3961545573801463with person_ 4 the e_distance:  0.3881850644563972with person_ 5 the e_distance:  0.3495735780870818Name list now: [&#x27;person_4&#x27;] </span><br><span class="line"></span><br><span class="line">with person_ 1 the e_distance:  0.4314467101915446with person_ 2 the e_distance:  0.4299990464683071with person_ 3 the e_distance:  0.4182695008637471with person_ 4 the e_distance:  0.4173694262729763with person_ 5 the e_distance:  0.38357217732017734Name list now: [&#x27;person_4&#x27;] </span><br><span class="line"></span><br><span class="line">with person_ 1 the e_distance:  0.4262991040992263with person_ 2 the e_distance:  0.43254966504500664with person_ 3 the e_distance:  0.41576433114841965with person_ 4 the e_distance:  0.4122140311433292with person_ 5 the e_distance:  0.38073570942005236Name list now: [&#x27;person_4&#x27;] </span><br><span class="line"></span><br><span class="line">with person_ 1 the e_distance:  0.42088261541728456with person_ 2 the e_distance:  0.42064499551908163with person_ 3 the e_distance:  0.404443147870785with person_ 4 the e_distance:  0.4043774203639022with person_ 5 the e_distance:  0.37271089160417986Name list now: [&#x27;person_4&#x27;] </span><br></pre></td></tr></table></figure>
<p><a href="http:"><img src="/../images/Python%203%20%E5%88%A9%E7%94%A8%20Dlib%20%E5%AE%9E%E7%8E%B0%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/copycode.gif" alt="复制代码"></a></p>
<p>　　实时输出结果：</p>
<p><img src="/../images/Python%203%20%E5%88%A9%E7%94%A8%20Dlib%20%E5%AE%9E%E7%8E%B0%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/1152352-20180511181802460-722994837.png" alt="img"></p>
<p><strong>图 9 实时输出的欧氏距离结果</strong></p>
<p>　　通过实时的输出结果，看的比较明显；</p>
<p>　　输出绿色部分：当是我自己时，计算出来的欧式距离基本都在 <strong>0.2 左右</strong>；</p>
<p>　　输出红色部分：而换一张图片上去比如特朗普，明显看到欧式距离计算结果 <strong>达到了 0.8</strong>，此时就可以判定，后来这张人脸不是一张人脸；</p>
<p>　　所以之前提到的欧式距离计算对比的阈值可以由此设定，本项目中取的是 <strong>dist=0.4；</strong></p>
<p>　　 <strong>dist 的确切取值自己权衡，<a href="http://dlib.net/face_recognition.py.html">http://dlib.net/face_recognition.py.html</a> 的说明：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#   When using a distance threshold of 0.6, the dlib model obtains an accuracy#   of 99.38% on the standard LFW face recognition benchmark, which is#   comparable to other state-of-the-art methods for face recognition as of#   February 2017. This accuracy means that, when presented with a pair of face#   images, the tool will correctly identify if the pair belongs to the same#   person or is from different people 99.38% of the time.</span><br></pre></td></tr></table></figure>
<p><strong>3. 总结</strong></p>
<p>　　核心就是 <strong>提取人脸特征，然后计算欧式距离和预设的特征脸进行比对；</strong></p>
<p>　　不过这个实时获取摄像头人脸进行比对，要实时的进行计算摄像头脸的特征值，然后还要计算欧氏距离，所以计算量比较大，可能摄像头视频流会出现卡顿；</p>
<p>　　此项目仅个人学习爱好研究，开源供大家一起学习；</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>-Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据挖掘-回归分析</title>
    <url>/post/f16a9029.html</url>
    <content><![CDATA[<p>本文用Python实现数据回归，包括线性回归（一元线性+多元线性回归）、Logistics回归。主要通过实验验证，部分例题来自网络。</p>
<p>注：更多资源及软件请W信关注“*<strong>*学娱汇聚门**</strong>”</p>
<p><strong>一、一元线性回归</strong></p>
<p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/20180101170859622" alt="img"></p>
<p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/20180101171054155" alt="img"></p>
<p>举例及代码实现：</p>
<p>汽车卖家做电视广告数量与卖出的汽车数量：</p>
<p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/20180101171545114" alt="img"></p>
<p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/20180101171806904" alt="img"></p>
<p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/20180101172224712" alt="img"></p>
<p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/20180101172342045" alt="img"></p>
<p>代码：</p>
<p>1.3 Python代码实现：</p>
<p>import numpy as np</p>
<p>def fitSLR(x, y):</p>
<p>  n = len(x)</p>
<p>  dinominator = 0</p>
<p>  numerator = 0</p>
<p>  for i in range(0, n):</p>
<p>​    numerator += (x[i] - np.mean(x))*(y[i] - np.mean(y))</p>
<p>​    dinominator += (x[i] - np.mean(x))**2</p>
<p>  b1 = numerator/float(dinominator)</p>
<p>  b0 = np.mean(y)/float(np.mean(x))</p>
<p>  return b0, b1</p>
<p>def predict(x, b0, b1):</p>
<p>  return b0 + x*b1</p>
<p>x = [1, 3, 2, 1, 3]</p>
<p>y = [14, 24, 18, 17, 27]   </p>
<p>b0, b1 = fitSLR(x, y)</p>
<p>print “intercept:”, b0, “ slope:”, b1</p>
<p>x_test = 6</p>
<p>y_test = predict(6, b0, b1)</p>
<p>print “y_test:”, y_test</p>
<p>二、多元线性回归：</p>
<p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/20180101173001844" alt="img"></p>
<p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/20180101173121542" alt="img"></p>
<p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/20180101173525224" alt="img"></p>
<p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/20180101173711759" alt="img"></p>
<p>实例：</p>
<p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/20180101173811610" alt="img"></p>
<p>Python代码：</p>
<p>from numpy import genfromtxt</p>
<p>import numpy as np</p>
<p>from sklearn import datasets, linear_model</p>
<p>dataPath = r”D:\MaiziEdu\DeepLearningBasics_MachineLearning\Datasets\Delivery.csv”</p>
<p>deliveryData = genfromtxt(dataPath, delimiter=’,’)</p>
<p>print “data”</p>
<p>print deliveryData</p>
<p>X = deliveryData[:, :-1]</p>
<p>Y = deliveryData[:, -1]</p>
<p>print “X:”</p>
<p>print X</p>
<p>print “Y: “</p>
<p>print Y</p>
<p>regr = linear_model.LinearRegression()</p>
<p>regr.fit(X, Y)</p>
<p>print “coefficients”</p>
<p>print regr.coef_</p>
<p>print “intercept: “</p>
<p>print regr.intercept_</p>
<p>xPred = [102, 6]</p>
<p>yPred = regr.predict(xPred)</p>
<p>print “predicted y: “</p>
<p>print yPred</p>
<h1 id="三、Logistic回归："><a href="#三、Logistic回归：" class="headerlink" title="三、Logistic回归："></a>三、Logistic回归：</h1><p>3.1 Logistic回归原理</p>
<p>线性回归模型通常是处理因变量是连续变量的问题，如果因变量是定性变量，线性回归模型就不再适用了，需采用逻辑回归模型解决。</p>
<p>逻辑回归（Logistic Regression<strong>）</strong>是用于处理因变量为分类变量的回归问题，常见的是二分类或二项分布问题，也可以处理多分类问题，它实际上是属于一种分类方法。<br>二分类问题的概率与自变量之间的关系图形往往是一个S型曲线，如图所示，采用的Sigmoid函数实现。</p>
<p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/20180101214056500" alt="img"></p>
<p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/20180101214216549" alt="img"></p>
<p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/20180101214400536" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Sigmoid</span>(<span class="params">x</span>):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span> / (<span class="number">1.0</span> + np.exp(-x))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x= np.arange(-<span class="number">10</span>, <span class="number">10</span>, <span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">h = Sigmoid(x)            <span class="comment">#Sigmoid函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.plot(x, h)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.axvline(<span class="number">0.0</span>, color=<span class="string">&#x27;k&#x27;</span>)   <span class="comment">#坐标轴上加一条竖直的线（0位置）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.axhspan(<span class="number">0.0</span>, <span class="number">1.0</span>, facecolor=<span class="string">&#x27;1.0&#x27;</span>, alpha=<span class="number">1.0</span>, ls=<span class="string">&#x27;dotted&#x27;</span>)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.axhline(y=<span class="number">0.5</span>, ls=<span class="string">&#x27;dotted&#x27;</span>, color=<span class="string">&#x27;k&#x27;</span>) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.yticks([<span class="number">0.0</span>, <span class="number">0.5</span>, <span class="number">1.0</span>])  <span class="comment">#y轴标度</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.ylim(-<span class="number">0.1</span>, <span class="number">1.1</span>)       <span class="comment">#y轴范围</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.show()  </span><br></pre></td></tr></table></figure>


<p>由于篇幅有限，逻辑回归构造损失函数J函数，求解最小J函数及回归参数θ的方法就不在叙述，原理和前面小节一样，请读者下去深入研究。</p>
<p>3.2LogisticRegression回归算法</p>
<p>LogisticRegression回归模型在Sklearn.linear_model子类下，调用sklearn逻辑回归算法步骤比较简单，即：<br>  (1) 导入模型。调用逻辑回归LogisticRegression()函数。<br>  (2) fit()训练。调用fit(x,y)的方法来训练模型，其中x为数据的属性，y为所属类型。<br>  (3) predict()预测。利用训练得到的模型对数据集进行预测，返回预测结果。</p>
<p>代码如下：</p>
<ol>
<li><strong>from</strong> sklearn.linear_model <strong>import</strong> LogisticRegression #导入逻辑回归模型  </li>
<li>clf = LogisticRegression() </li>
<li><strong>print</strong> clf </li>
<li>clf.fit(train_feature,label) </li>
<li>predict[‘label’] = clf.predict(predict_feature) </li>
</ol>
<p>输出结果如下：</p>
<p><strong>[python]</strong> <a href="http://blog.csdn.net/Eastmount/article/details/77920470#">view plain</a> <a href="http://blog.csdn.net/Eastmount/article/details/77920470#">copy</a></p>
<ol>
<li>LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True, </li>
<li>​     intercept_scaling=1, max_iter=100, multi_class=’ovr’, n_jobs=1, </li>
<li>​     penalty=’l2’, random_state=None, solver=’liblinear’, tol=0.0001, </li>
<li>​     verbose=0, warm_start=False) </li>
</ol>
<p>其中，参数penalty表示惩罚项（L1、L2值可选。L1向量中各元素绝对值的和，作用是产生少量的特征，而其他特征都是0，常用于特征选择；L2向量中各个元素平方之和再开根号，作用是选择较多的特征，使他们都趋近于0。）；C值的目标函数约束条件：s.t.||w||1&lt;C，默认值是0，C值越小，则正则化强度越大。</p>
<p>3.3. 分析鸢尾花数据集</p>
<p>下面将结合Scikit-learn官网的逻辑回归模型分析鸢尾花示例，给大家进行详细讲解及拓展。由于该数据集分类标签划分为3类（0类、1类、2类），很好的适用于逻辑回归模型。</p>
<h3 id="1-鸢尾花数据集"><a href="#1-鸢尾花数据集" class="headerlink" title="1. 鸢尾花数据集"></a>1. <strong>鸢尾花数据集</strong></h3><p>在Sklearn机器学习包中，集成了各种各样的数据集，包括前面的糖尿病数据集，这里引入的是鸢尾花卉（Iris）数据集，它是很常用的一个数据集。鸢尾花有三个亚属，分别是山鸢尾（Iris-setosa）、变色鸢尾（Iris-versicolor）和维吉尼亚鸢尾（Iris-virginica）。</p>
<p>该数据集一共包含4个特征变量，1个类别变量。共有150个样本，iris是鸢尾植物，这里存储了其萼片和花瓣的长宽，共4个属性，鸢尾植物分三类。如表17.2所示：</p>
<p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/20180101214949361" alt="img"></p>
<p>iris里有两个属性iris.data，iris.target。data是一个矩阵，每一列代表了萼片或花瓣的长宽，一共4列，每一列代表某个被测量的鸢尾植物，一共采样了150条记录。</p>
<p><strong>[python]</strong></p>
<ol>
<li>from sklearn.datasets import load_iris  #导入数据集iris </li>
<li>iris = load_iris() #载入数据集</li>
<li>print iris.data </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris   <span class="comment">#导入数据集iris</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iris = load_iris()  <span class="comment">#载入数据集</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> iris.data</span><br></pre></td></tr></table></figure>


<p>输出如下所示：</p>
<p><strong>[python]</strong></p>
<ol>
<li>[[ 5.1 3.5 1.4 0.2] </li>
<li> [ 4.9 3.  1.4 0.2] </li>
<li> [ 4.7 3.2 1.3 0.2] </li>
<li> [ 4.6 3.1 1.5 0.2] </li>
<li> …. </li>
<li> [ 6.7 3.  5.2 2.3] </li>
<li> [ 6.3 2.5 5.  1.9] </li>
<li> [ 6.5 3.  5.2 2. ] </li>
<li> [ 6.2 3.4 5.4 2.3] </li>
<li> [ 5.9 3.  5.1 1.8]] </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[[ <span class="number">5.1</span>  <span class="number">3.5</span>  <span class="number">1.4</span>  <span class="number">0.2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> [ <span class="number">4.9</span>  <span class="number">3.</span>   <span class="number">1.4</span>  <span class="number">0.2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> [ <span class="number">4.7</span>  <span class="number">3.2</span>  <span class="number">1.3</span>  <span class="number">0.2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> [ <span class="number">4.6</span>  <span class="number">3.1</span>  <span class="number">1.5</span>  <span class="number">0.2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ....</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> [ <span class="number">6.7</span>  <span class="number">3.</span>   <span class="number">5.2</span>  <span class="number">2.3</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> [ <span class="number">6.3</span>  <span class="number">2.5</span>  <span class="number">5.</span>   <span class="number">1.9</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> [ <span class="number">6.5</span>  <span class="number">3.</span>   <span class="number">5.2</span>  <span class="number">2.</span> ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> [ <span class="number">6.2</span>  <span class="number">3.4</span>  <span class="number">5.4</span>  <span class="number">2.3</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> [ <span class="number">5.9</span>  <span class="number">3.</span>   <span class="number">5.1</span>  <span class="number">1.8</span>]]</span><br></pre></td></tr></table></figure>


<p>target是一个数组，存储了data中每条记录属于哪一类鸢尾植物，所以数组的长度是150，数组元素的值因为共有3类鸢尾植物，所以不同值只有3个。种类为山鸢尾、杂色鸢尾、维吉尼亚鸢尾。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> iris.target          <span class="comment">#输出真实标签  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">len</span>(iris.target)      <span class="comment">#150个样本 每个样本4个特征  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> iris.data.shape    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="number">2</span> <span class="number">2</span>]  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">150</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="number">150L</span>, <span class="number">4L</span>)  </span><br></pre></td></tr></table></figure>










<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> iris.target          <span class="comment">#输出真实标签</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">len</span>(iris.target)      <span class="comment">#150个样本 每个样本4个特征</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> iris.data.shape  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="number">2</span> <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">150</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="number">150L</span>, <span class="number">4L</span>)</span><br></pre></td></tr></table></figure>
<p>从输出结果可以看到，类标共分为三类，前面50个类标位0，中间50个类标位1，后面为2。下面给详细介绍使用决策树进行对这个数据集进行测试的代码。</p>
<h3 id="2-散点图绘制"><a href="#2-散点图绘制" class="headerlink" title="2. 散点图绘制"></a>2. <strong>散点图绘制</strong></h3><p>下列代码主要是载入鸢尾花数据集，包括数据data和标签target，然后获取其中两列数据或两个特征，核心代码为：X = [x[0] for x in DD]，获取的值赋值给X变量，最后调用scatter()函数绘制散点图。</p>
<ol>
<li><strong>import</strong> matplotlib.pyplot as plt </li>
<li><strong>import</strong> numpy as np </li>
<li><strong>from</strong> sklearn.datasets <strong>import</strong> load_iris  #导入数据集iris </li>
<li></li>
<li>#载入数据集  </li>
<li>iris = load_iris()  </li>
<li><strong>print</strong> iris.data     #输出数据集  </li>
<li><strong>print</strong> iris.target     #输出真实标签  </li>
<li>#获取花卉两列数据集  </li>
<li>DD = iris.data  </li>
<li>X = [x[0] <strong>for</strong> x <strong>in</strong> DD]  </li>
<li><strong>print</strong> X  </li>
<li>Y = [x[1] <strong>for</strong> x <strong>in</strong> DD]  </li>
<li><strong>print</strong> Y  </li>
<li></li>
<li>#plt.scatter(X, Y, c=iris.target, marker=’x’) </li>
<li>plt.scatter(X[:50], Y[:50], color=’red’, marker=’o’, label=’setosa’) #前50个样本 </li>
<li>plt.scatter(X[50:100], Y[50:100], color=’blue’, marker=’x’, label=’versicolor’) #中间50个 </li>
<li>plt.scatter(X[100:], Y[100:],color=’green’, marker=’+’, label=’Virginica’) #后50个样本 </li>
<li>plt.legend(loc=2) #左上角 </li>
<li>plt.show() </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris    <span class="comment">#导入数据集iris</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#载入数据集  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iris = load_iris()  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> iris.data          <span class="comment">#输出数据集  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> iris.target         <span class="comment">#输出真实标签  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取花卉两列数据集  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DD = iris.data  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">X = [x[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> DD]  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> X  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Y = [x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> DD]  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> Y  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#plt.scatter(X, Y, c=iris.target, marker=&#x27;x&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.scatter(X[:<span class="number">50</span>], Y[:<span class="number">50</span>], color=<span class="string">&#x27;red&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>, label=<span class="string">&#x27;setosa&#x27;</span>) <span class="comment">#前50个样本</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.scatter(X[<span class="number">50</span>:<span class="number">100</span>], Y[<span class="number">50</span>:<span class="number">100</span>], color=<span class="string">&#x27;blue&#x27;</span>, marker=<span class="string">&#x27;x&#x27;</span>, label=<span class="string">&#x27;versicolor&#x27;</span>) <span class="comment">#中间50个</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.scatter(X[<span class="number">100</span>:], Y[<span class="number">100</span>:],color=<span class="string">&#x27;green&#x27;</span>, marker=<span class="string">&#x27;+&#x27;</span>, label=<span class="string">&#x27;Virginica&#x27;</span>) <span class="comment">#后50个样本</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.legend(loc=<span class="number">2</span>) <span class="comment">#左上角</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>绘制散点图如图所示：</p>
<p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/20180101215456017" alt="img"></p>
<h3 id="3-逻辑回归分析"><a href="#3-逻辑回归分析" class="headerlink" title="3. 逻辑回归分析"></a>3. 逻辑回归分析</h3><p>从图中可以看出，数据集线性可分的，可以划分为3类，分别对应三种类型的鸢尾花，下面采用逻辑回归对其进行分类预测。前面使用X=[x[0] for x in DD]获取第一列数据，Y=[x[1] for x in DD]获取第二列数据，这里采用另一种方法，iris.data[:, :2]获取其中两列数据（两个特征），完整代码如下：</p>
<ol>
<li><strong>import</strong> matplotlib.pyplot as plt </li>
<li><strong>import</strong> numpy as np </li>
<li><strong>from</strong> sklearn.datasets <strong>import</strong> load_iris   </li>
<li><strong>from</strong> sklearn.linear_model <strong>import</strong> LogisticRegression  </li>
<li></li>
<li>#载入数据集 </li>
<li>iris = load_iris()      </li>
<li>X = X = iris.data[:, :2]  #获取花卉两列数据集 </li>
<li>Y = iris.target       </li>
<li></li>
<li>#逻辑回归模型 </li>
<li>lr = LogisticRegression(C=1e5)  </li>
<li>lr.fit(X,Y) </li>
<li></li>
<li>#meshgrid函数生成两个网格矩阵 </li>
<li>h = .02 </li>
<li>x_min, x_max = X[:, 0].min() - .5, X[:, 0].max() + .5 </li>
<li>y_min, y_max = X[:, 1].min() - .5, X[:, 1].max() + .5 </li>
<li>xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h)) </li>
<li></li>
<li>#pcolormesh函数将xx,yy两个网格矩阵和对应的预测结果Z绘制在图片上 </li>
<li>Z = lr.predict(np.c_[xx.ravel(), yy.ravel()]) </li>
<li>Z = Z.reshape(xx.shape) </li>
<li>plt.figure(1, figsize=(8,6)) </li>
<li>plt.pcolormesh(xx, yy, Z, cmap=plt.cm.Paired) </li>
<li></li>
<li>#绘制散点图 </li>
<li>plt.scatter(X[:50,0], X[:50,1], color=’red’,marker=’o’, label=’setosa’) </li>
<li>plt.scatter(X[50:100,0], X[50:100,1], color=’blue’, marker=’x’, label=’versicolor’) </li>
<li>plt.scatter(X[100:,0], X[100:,1], color=’green’, marker=’s’, label=’Virginica’)  </li>
<li></li>
<li>plt.xlabel(‘Sepal length’) </li>
<li>plt.ylabel(‘Sepal width’) </li>
<li>plt.xlim(xx.min(), xx.max()) </li>
<li>plt.ylim(yy.min(), yy.max()) </li>
<li>plt.xticks(()) </li>
<li>plt.yticks(()) </li>
<li>plt.legend(loc=2)  </li>
<li>plt.show() </li>
</ol>
<p>下面作者对导入数据集后的代码进行详细讲解。</p>
<p><strong>lr = LogisticRegression(C=1e5)</strong><br><strong>lr.fit(X,Y)</strong><br>初始化逻辑回归模型并进行训练，C=1e5表示目标函数。</p>
<p>x_min, x_max = X[:, 0].min() - .5, X[:, 0].max() + .5<br>y_min, y_max = X[:, 1].min() - .5, X[:, 1].max() + .5<br>xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))<br>获取的鸢尾花两列数据，对应为花萼长度和花萼宽度，每个点的坐标就是(x,y)。 先取X二维数组的第一列（长度）的最小值、最大值和步长h（设置为0.02）生成数组，再取X二维数组的第二列（宽度）的最小值、最大值和步长h生成数组， 最后用meshgrid函数生成两个网格矩阵xx和yy，如下所示：</p>
<ol>
<li>[[ 3.8  3.82 3.84 …, 8.36 8.38 8.4 ] </li>
<li> [ 3.8  3.82 3.84 …, 8.36 8.38 8.4 ] </li>
<li> …,  </li>
<li> [ 3.8  3.82 3.84 …, 8.36 8.38 8.4 ] </li>
<li> [ 3.8  3.82 3.84 …, 8.36 8.38 8.4 ]] </li>
<li>[[ 1.5  1.5  1.5 …, 1.5  1.5  1.5 ] </li>
<li> [ 1.52 1.52 1.52 …, 1.52 1.52 1.52] </li>
<li> …,  </li>
<li> [ 4.88 4.88 4.88 …, 4.88 4.88 4.88] </li>
<li> [ 4.9  4.9  4.9 …, 4.9  4.9  4.9 ]] </li>
</ol>
<p><strong>Z = lr.predict(np.c_[xx.ravel(), yy.ravel()])</strong><br>调用ravel()函数将xx和yy的两个矩阵转变成一维数组，由于两个矩阵大小相等，因此两个一维数组大小也相等。np.c_[xx.ravel(), yy.ravel()]是获取矩阵，即：</p>
<ol>
<li>xx.ravel()  </li>
<li>[ 3.8  3.82 3.84 …, 8.36 8.38 8.4 ] </li>
<li>yy.ravel()  </li>
<li>[ 1.5 1.5 1.5 …, 4.9 4.9 4.9] </li>
<li>np.c_[xx.ravel(), yy.ravel()] </li>
<li>[[ 3.8  1.5 ] </li>
<li> [ 3.82 1.5 ] </li>
<li> [ 3.84 1.5 ] </li>
<li> …,  </li>
<li> [ 8.36 4.9 ] </li>
<li> [ 8.38 4.9 ] </li>
<li> [ 8.4  4.9 ]] </li>
</ol>
<p>总结下：上述操作是把第一列花萼长度数据按h取等分作为行，并复制多行得到xx网格矩阵；再把第二列花萼宽度数据按h取等分，作为列，并复制多列得到yy网格矩阵；最后将xx和yy矩阵都变成两个一维数组，调用np.c_[]函数组合成一个二维数组进行预测。<br>调用predict()函数进行预测，预测结果赋值给Z。即：</p>
<ol>
<li>Z = logreg.predict(np.c_[xx.ravel(), yy.ravel()]) </li>
<li>[1 1 1 …, 2 2 2] </li>
<li>size: 39501 </li>
</ol>
<p><strong>Z = Z.reshape(xx.shape)</strong><br>调用reshape()函数修改形状，将其Z转换为两个特征（长度和宽度），则39501个数据转换为171*231的矩阵。Z = Z.reshape(xx.shape)输出如下：</p>
<ol>
<li>[[1 1 1 …, 2 2 2] </li>
<li> [1 1 1 …, 2 2 2] </li>
<li> [0 1 1 …, 2 2 2] </li>
<li> …,  </li>
<li> [0 0 0 …, 2 2 2] </li>
<li> [0 0 0 …, 2 2 2] </li>
<li> [0 0 0 …, 2 2 2]]</li>
</ol>
<p><strong>plt.pcolormesh(xx, yy, Z, cmap=plt.cm.Paired)</strong><br>调用pcolormesh()函数将xx、yy两个网格矩阵和对应的预测结果Z绘制在图片上，可以发现输出为三个颜色区块，分布表示分类的三类区域。cmap=plt.cm.Paired表示绘图样式选择Paired主题。输出的区域如下图所示：</p>
<p><strong>plt.scatter(X[:50,0], X[:50,1], color=’red’,marker=’o’, label=’setosa’)</strong><br>调用scatter()绘制散点图，第一个参数为第一列数据（长度），第二个参数为第二列数据（宽度），第三、四个参数为设置点的颜色为红色，款式为圆圈，最后标记为setosa。</p>
<p>输出如下图所示，经过逻辑回归后划分为三个区域，左上角部分为红色的圆点，对应setosa鸢尾花；右上角部分为绿色方块，对应virginica鸢尾花；中间下部分为蓝色星形，对应versicolor鸢尾花。散点图为各数据点真实的花类型，划分的三个区域为数据点预测的花类型，预测的分类结果与训练数据的真实结果结果基本一致，部分鸢尾花出现交叉<strong>plt.scatter(X[:50,0], X[:50,1], color=’red’,marker=’o’, label=’setosa’)</strong><br>调用scatter()绘制散点图，第一个参数为第一列数据（长度），第二个参数为第二列数据（宽度），第三、四个参数为设置点的颜色为红色，款式为圆圈，最后标记为setosa。</p>
<p>输出如下图所示，经过逻辑回归后划分为三个区域，左上角部分为红色的圆点，对应setosa鸢尾花；右上角部分为绿色方块，对应virginica鸢尾花；中间下部分为蓝色星形，对应versicolor鸢尾花。散点图为各数据点真实的花类型，划分的三个区域为数据点预测的花类型，预测的分类结果与训练数据的真实结果结果基本一致，部分鸢尾花出现交叉<img src="/../images/Python%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/20180101221000935" alt="img"></p>
<p><strong>plt.scatter(X[:50,0], X[:50,1], color=’red’,marker=’o’, label=’setosa’)</strong><br>调用scatter()绘制散点图，第一个参数为第一列数据（长度），第二个参数为第二列数据（宽度），第三、四个参数为设置点的颜色为红色，款式为圆圈，最后标记为setosa。</p>
<p>输出如下图所示，经过逻辑回归后划分为三个区域，左上角部分为红色的圆点，对应setosa鸢尾花；右上角部分为绿色方块，对应virginica鸢尾花；中间下部分为蓝色星形，对应versicolor鸢尾花。散点图为各数据点真实的花类型，划分的三个区域为数据点预测的花类型，预测的分类结果与训练数据的真实结果结果基本一致，部分鸢尾花出现交叉.</p>
<p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/20180101221140797" alt="img"></p>
<p>回归算法作为统计学中最重要的工具之一，它通过建立一个回归方程用来预测目标值，并求解这个回归方程的回归系数。本篇文章详细讲解了逻辑回归模型的原理知识，结合Sklearn机器学习库的LogisticRegression算法分析了鸢尾花分类情况。更多知识点希望读者下来后进行拓展，也推荐大家从Sklearn开源知识官网学习最新的实例。</p>
<p>注：本文Logistic回归用了sklearn包，算法已经封装好了，如果想了解具体的实现方法，可以参考《机器学习实战》一书，或参考此博文是关于使用statesmodels的<a href="http://en.wikipedia.org/wiki/Logit">Logit</a>函数：</p>
<h1 id="Python实现逻辑回归-Logistic-Regression-in-Python-："><a href="#Python实现逻辑回归-Logistic-Regression-in-Python-：" class="headerlink" title="Python实现逻辑回归(Logistic Regression in Python) ："></a><a href="http://blog.csdn.net/zj360202/article/details/78688070">Python实现逻辑回归(Logistic Regression in Python) ：</a></h1><p><a href="http://blog.csdn.net/zj360202/article/details/78688070">http://blog.csdn.net/zj360202/article/details/78688070</a></p>
<p>参考文献：</p>
<p><a href="http://scikit-learn.org/stable/modules/linear_model.html#logistic-regression">scikit-learn文档</a>：<a href="http://scikit-learn.org/stable/modules/linear_model.html#logistic-regression">http://scikit-learn.org/stable/modules/linear_model.html#logistic-regression</a></p>
<p>纯Python实现logistc回归：<a href="http://blog.smellthedata.com/2009/06/python-logistic-regression-with-l2.html">http://blog.smellthedata.com/2009/06/python-logistic-regression-with-l2.html</a></p>
<p>Logistic在线交互界面：<a href="http://www.vassarstats.net/logreg1.html">http://www.vassarstats.net/logreg1.html</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>-Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Round-Robin负载均衡算法</title>
    <url>/post/db5db11.html</url>
    <content><![CDATA[<p>毫无疑问，随着互联网、移动网络接入成本的降低，互联网正在日益深入地走入我们的生活，越来越成为人们获取信息的高效平台，ICP行业也顺势呈现出强劲的成长趋势，成为互联网迅猛发展形势下最大的受益者，也直接促成了从web1.0到web2.0以及社区、博客、视频等一系列互联网时代的更迭和运营模式的变动。<br>　　但是随着各站点访问量和信息交流量的迅猛增长，如何使用最小的资源成本，提高网络的效率，最优化用户体验，已经成为网络管理人员不得不面对的挑战。<br>　　从技术上讲，就是ICP行业面临的网络资源有效利用问题，也就是如何进行对网络的访问分流，以便能够快速响应用户反应，即：负载均衡。<br>　　从这篇文章起，我们将讲述在负载均衡技术实现中的核心技术：负载均衡算法(算法)的原理及其实现，使大家对负载均衡底层技术有一个深刻的了解。这些算法是负载均衡设备中的核心实现基础。<br>　　本篇文章先讲述<strong>轮询调度算法 (Round-Robin)\</strong>及其在此基础上改进型的**权重轮询算法 (Weighted Round-Robin)**。</p>
<h2 id="轮询调度算法-Round-Robin"><a href="#轮询调度算法-Round-Robin" class="headerlink" title="轮询调度算法 (Round-Robin)"></a>轮询调度算法 (Round-Robin)</h2><p>轮询调度算法的原理是每一次把来自用户的请求轮流分配给内部中的服务器，从1开始，直到N(内部服务器个数)，然后重新开始循环。算法的优点是其简洁性，它无需记录当前所有连接的状态，所以它是一种无状态调度。</p>
<p>　　轮询调度算法流程</p>
<p>　　假设有一组服务器N台，S = {S1, S2, …, Sn}，一个指示变量i表示上一次选择的服务器ID。变量i被初始化为N-1。其算法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">j = i;</span><br><span class="line"></span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">j = (j + 1) mod n;</span><br><span class="line"></span><br><span class="line">i = j;</span><br><span class="line"></span><br><span class="line">return Si;</span><br><span class="line"></span><br><span class="line">&#125; while (j != i);</span><br><span class="line"></span><br><span class="line">return NULL;</span><br></pre></td></tr></table></figure>
<h2 id="权重轮询算法-Weighted-Round-Robin"><a href="#权重轮询算法-Weighted-Round-Robin" class="headerlink" title="权重轮询算法 (Weighted Round-Robin)"></a>权重轮询算法 (Weighted Round-Robin)</h2><p><img src="/../images/Round-Robin%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95/20190115165035798.png" alt="在这里插入图片描述"><br><strong>总结：</strong><br>　　轮询调度算法假设所有服务器的处理性能都相同，不关心每台服务器的当前连接数和响应速度。当请求服务间隔时间变化比较大时，轮询调度算法容易导致服务器间的负载不平衡。<br>　　所以此种均衡算法适合于服务器组中的所有服务器都有相同的软硬件配置并且平均服务请求相对均衡的情况。</p>
]]></content>
      <categories>
        <category>负载均衡</category>
      </categories>
      <tags>
        <tag>负载均衡,算法,Robin</tag>
      </tags>
  </entry>
  <entry>
    <title>负载均衡Ribbon替换成Spring Cloud Load Balancer</title>
    <url>/post/11bee443.html</url>
    <content><![CDATA[<p><code>Spring Cloud Load Balancer</code>并不是一个独立的项目，而是<code>spring-cloud-commons</code>其中的一个模块。 项目中用了<code>Eureka</code>以及相关的 starter，想完全剔除<code>Ribbon</code>的相关依赖基本是不可能的，Spring 社区的人也是看到了这一点，通过配置去关闭<code>Ribbon</code>启用<code>Spring-Cloud-LoadBalancer</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.cloud.loadbalancer.ribbon.enabled=false</span><br></pre></td></tr></table></figure>
<p>关闭ribbon之后，Spring Cloud LoadBalancer就会加载成为默认的负载均衡器。</p>
<p>Spring Cloud LoadBalancer 结构如下所示：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly96aHhoYXNoLWJsb2cub3NzLWNuLWJlaWppbmcuYWxpeXVuY3MuY29tL3NwcmluZy1jbG91ZCVFNSU4RCU4NyVFNyVCQSVBNyVFNCVCOSU4QiVFOCVCNyVBRi9ob3h0b24vU3ByaW5nQ2xvdWRMb2FkQmFsYW5jZXIlRTclQkIlOTMlRTYlOUUlODQucG5n?x-oss-process=image/format,png" alt="image"></p>
<p>其中：</p>
<ol>
<li>全局只有一个 <code>BlockingLoadBalancerClient</code>，负责执行所有的负载均衡请求。</li>
<li><code>BlockingLoadBalancerClient</code>从<code>LoadBalancerClientFactory</code>里面加载对应微服务的负载均衡配置。</li>
<li>每个微服务下有独自的<code>LoadBalancer</code>，<code>LoadBalancer</code>里面包含负载均衡的算法，例如<code>RoundRobin</code>.根据算法，从<code>ServiceInstanceListSupplier</code>返回的实例列表中选择一个实例返回。</li>
</ol>
<h3 id="1-实现zone隔离"><a href="#1-实现zone隔离" class="headerlink" title="1. 实现zone隔离"></a>1. 实现<code>zone</code>隔离</h3><p>要想实现<code>zone</code>隔离，应该从<code>ServiceInstanceListSupplier</code>里面做手脚。默认的实现里面有关于<code>zone</code>隔离的<code>ServiceInstanceListSupplier</code> -&gt; <code>org.springframework.cloud.loadbalancer.core.ZonePreferenceServiceInstanceListSupplier</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private List&lt;ServiceInstance&gt; filteredByZone(List&lt;ServiceInstance&gt; serviceInstances) &#123;</span><br><span class="line">	if (zone == null) &#123;</span><br><span class="line">		zone = zoneConfig.getZone();</span><br><span class="line">	&#125;</span><br><span class="line">	//如果zone不为null，并且该zone下有存活实例，则返回这个实例列表</span><br><span class="line">	//否则，返回所有的实例</span><br><span class="line">	if (zone != null) &#123;</span><br><span class="line">		List&lt;ServiceInstance&gt; filteredInstances = new ArrayList&lt;&gt;();</span><br><span class="line">		for (ServiceInstance serviceInstance : serviceInstances) &#123;</span><br><span class="line">			String instanceZone = getZone(serviceInstance);</span><br><span class="line">			if (zone.equalsIgnoreCase(instanceZone)) &#123;</span><br><span class="line">				filteredInstances.add(serviceInstance);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		if (filteredInstances.size() &gt; 0) &#123;</span><br><span class="line">			return filteredInstances;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	// If the zone is not set or there are no zone-specific instances available,</span><br><span class="line">	// we return all instances retrieved for given service id.</span><br><span class="line">	return serviceInstances;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里对于没指定<code>zone</code>或者该<code>zone</code>下没有存活实例的情况下，会返回所有查到的实例，不区分<code>zone</code>。这个不符合我们的要求，所以我们修改并实现下我们自己的<a href="https://github.com/HashZhang/spring-cloud-scaffold/blob/master/spring-cloud-hoxton/spring-cloud-hoxton-service-consumer/src/main/java/com/github/hashjang/hoxton/service/consumer/config/SameZoneOnlyServiceInstanceListSupplier.java">com.github.hashjang.hoxton.service.consumer.config.SameZoneOnlyServiceInstanceListSupplier</a>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private List&lt;ServiceInstance&gt; filteredByZone(List&lt;ServiceInstance&gt; serviceInstances) &#123;</span><br><span class="line">    if (zone == null) &#123;</span><br><span class="line">        zone = zoneConfig.getZone();</span><br><span class="line">    &#125;</span><br><span class="line">    if (zone != null) &#123;</span><br><span class="line">        List&lt;ServiceInstance&gt; filteredInstances = new ArrayList&lt;&gt;();</span><br><span class="line">        for (ServiceInstance serviceInstance : serviceInstances) &#123;</span><br><span class="line">            String instanceZone = getZone(serviceInstance);</span><br><span class="line">            if (zone.equalsIgnoreCase(instanceZone)) &#123;</span><br><span class="line">                filteredInstances.add(serviceInstance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (filteredInstances.size() &gt; 0) &#123;</span><br><span class="line">            return filteredInstances;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //如果没找到就返回空列表，绝不返回其他集群的实例</span><br><span class="line">    return List.of();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们来看一下默认的 <code>Spring Cloud LoadBalancer</code> 提供的 <code>LoadBalancer</code> ，它是带缓存的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.springframework.cloud.loadbalancer.annotation.LoadBalancerClientConfiguration</span><br><span class="line">@Bean</span><br><span class="line">@ConditionalOnBean(ReactiveDiscoveryClient.class)</span><br><span class="line">@ConditionalOnMissingBean</span><br><span class="line">public ServiceInstanceListSupplier discoveryClientServiceInstanceListSupplier(</span><br><span class="line">		ReactiveDiscoveryClient discoveryClient, Environment env,</span><br><span class="line">		ApplicationContext context) &#123;</span><br><span class="line">	DiscoveryClientServiceInstanceListSupplier delegate = new DiscoveryClientServiceInstanceListSupplier(</span><br><span class="line">			discoveryClient, env);</span><br><span class="line">	ObjectProvider&lt;LoadBalancerCacheManager&gt; cacheManagerProvider = context</span><br><span class="line">			.getBeanProvider(LoadBalancerCacheManager.class);</span><br><span class="line">	if (cacheManagerProvider.getIfAvailable() != null) &#123;</span><br><span class="line">		return new CachingServiceInstanceListSupplier(delegate,</span><br><span class="line">				cacheManagerProvider.getIfAvailable());</span><br><span class="line">	&#125;</span><br><span class="line">	return delegate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>DiscoveryClientServiceInstanceListSupplier</code>每次从<code>Eureka</code>上面拉取实例列表，<code>CachingServiceInstanceListSupplier</code>提供了缓存，这样不必每次从<code>Eureka</code>上面拉取。可以看出<code>CachingServiceInstanceListSupplier</code>是一种代理模式的实现，和<code>SameZoneOnlyServiceInstanceListSupplier</code>的模式是一样的。</p>
<p>我们来组装我们的<code>ServiceInstanceListSupplier</code>，由于我们是同步的环境，只用实现同步的<code>ServiceInstanceListSupplier</code>就行了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class CommonLoadBalancerConfig &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 同步环境下的ServiceInstanceListSupplier</span><br><span class="line">     * SameZoneOnlyServiceInstanceListSupplier限制仅返回同一个zone下的实例（注意）</span><br><span class="line">     * CachingServiceInstanceListSupplier启用缓存，不每次访问eureka请求实例列表</span><br><span class="line">     *</span><br><span class="line">     * @param discoveryClient</span><br><span class="line">     * @param env</span><br><span class="line">     * @param zoneConfig</span><br><span class="line">     * @param context</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    @Order(Integer.MIN_VALUE)</span><br><span class="line">    public ServiceInstanceListSupplier discoveryClientServiceInstanceListSupplier(</span><br><span class="line">            DiscoveryClient discoveryClient, Environment env,</span><br><span class="line">            LoadBalancerZoneConfig zoneConfig,</span><br><span class="line">            ApplicationContext context) &#123;</span><br><span class="line">        ServiceInstanceListSupplier delegate = new SameZoneOnlyServiceInstanceListSupplier(</span><br><span class="line">                new DiscoveryClientServiceInstanceListSupplier(discoveryClient, env),</span><br><span class="line">                zoneConfig</span><br><span class="line">        );</span><br><span class="line">        ObjectProvider&lt;LoadBalancerCacheManager&gt; cacheManagerProvider = context</span><br><span class="line">                .getBeanProvider(LoadBalancerCacheManager.class);</span><br><span class="line">        if (cacheManagerProvider.getIfAvailable() != null) &#123;</span><br><span class="line">            return new CachingServiceInstanceListSupplier(</span><br><span class="line">                    delegate,</span><br><span class="line">                    cacheManagerProvider.getIfAvailable()</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        return delegate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-实现下一次重试的时候，如果存在其他实例，则一定会重试与本次不同的其他实例"><a href="#2-实现下一次重试的时候，如果存在其他实例，则一定会重试与本次不同的其他实例" class="headerlink" title="2. 实现下一次重试的时候，如果存在其他实例，则一定会重试与本次不同的其他实例"></a>2. 实现下一次重试的时候，如果存在其他实例，则一定会重试与本次不同的其他实例</h3><p>默认的<code>RoundRobinLoadBalancer</code>，其中的轮询<code>position</code>，是一个<code>Atomic</code>类型的，在某个微服务的调用请求下，所有线程，所有请求共用（调用其他的每个微服务会创建一个<code>RoundRobinLoadBalancer</code>）。在使用的时候，会有这样的一个问题：</p>
<ul>
<li>假设某个微服务有两个实例，实例 A 和实例 B</li>
<li>某次请求 X 发往实例 A，position = position + 1</li>
<li>在请求没有返回时，请求 Y 到达，发往实例 B，position = position + 1</li>
<li>请求 A 失败，重试，重试的实例还是实例 A</li>
</ul>
<p>这样在重试的情况下，某个请求的重试可能会发送到上一次的实例进行重试，这不是我们想要的。针对这个，我提了个Issue：<a href="https://github.com/spring-cloud/spring-cloud-commons/issues/747">Enhance RoundRoubinLoadBalancer position</a>。我修改的思路是，我们需要一个单次请求隔离的<code>position</code>，这个<code>position</code>对于实例个数取余得出请求要发往的实例。那么如何进行请求隔离呢？</p>
<p>首先想到的是线程隔离，但是这个是不行的。Spring Cloud LoadBalancer 底层运用了 reactor 框架，导致实际承载选择实例的线程，不是业务线程，而是 reactor 里面的线程池，如图所示：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly96aHhoYXNoLWJsb2cub3NzLWNuLWJlaWppbmcuYWxpeXVuY3MuY29tL3NwcmluZy1jbG91ZCVFNSU4RCU4NyVFNyVCQSVBNyVFNCVCOSU4QiVFOCVCNyVBRi9ob3h0b24vJUU4JUFGJUI3JUU2JUIxJTgyJUU5JTgwJTg5JUU2JThCJUE5JUU1JUFFJTlFJUU0JUJFJThCJUU3JUJBJUJGJUU3JUE4JThCLnBuZw?x-oss-process=image/format,png" alt="image"><br>所以，不能用<code>ThreadLocal</code>的方式实现<code>position</code>。</p>
<p>由于我们用到了<code>sleuth</code>，一般请求的<code>context</code>会传递其中的<code>traceId</code>，我们根据这个<code>traceId</code>区分不同的请求，实现我们的 <code>LoadBalancer</code>：</p>
<p><a href="https://github.com/HashZhang/spring-cloud-scaffold/blob/master/spring-cloud-hoxton/spring-cloud-hoxton-service-consumer/src/main/java/com/github/hashjang/hoxton/service/consumer/config/RoundRobinBaseOnTraceIdLoadBalancer.java"><code>RoundRobinBaseOnTraceIdLoadBalancer</code></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//这个超时时间，需要设置的比你的请求的 connectTimeout + readTimeout 长</span><br><span class="line">private final LoadingCache&lt;Long, AtomicInteger&gt; positionCache = Caffeine.newBuilder().expireAfterWrite(3, TimeUnit.SECONDS).build(k -&gt; new AtomicInteger(ThreadLocalRandom.current().nextInt(0, 1000)));</span><br><span class="line"></span><br><span class="line">private Response&lt;ServiceInstance&gt; getInstanceResponse(List&lt;ServiceInstance&gt; serviceInstances) &#123;</span><br><span class="line">    if (serviceInstances.isEmpty()) &#123;</span><br><span class="line">        log.warn(&quot;No servers available for service: &quot; + this.serviceId);</span><br><span class="line">        return new EmptyResponse();</span><br><span class="line">    &#125;</span><br><span class="line">    //如果没有 traceId，就生成一个新的，但是最好检查下为啥会没有</span><br><span class="line">    //是不是 MQ 消费这种没有主动生成 traceId 的情况，最好主动生成下。</span><br><span class="line">    Span currentSpan = tracer.currentSpan();</span><br><span class="line">    if (currentSpan == null) &#123;</span><br><span class="line">        currentSpan = tracer.newTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    long l = currentSpan.context().traceId();</span><br><span class="line">    int seed = positionCache.get(l).getAndIncrement();</span><br><span class="line">    return new DefaultResponse(serviceInstances.get(seed % serviceInstances.size()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-替换默认的负载均衡相关-Bean-实现"><a href="#3-替换默认的负载均衡相关-Bean-实现" class="headerlink" title="3. 替换默认的负载均衡相关 Bean 实现"></a>3. 替换默认的负载均衡相关 Bean 实现</h3><p>我们要用上面的两个类替换默认的实现，先编写一个配置类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class CommonLoadBalancerConfig &#123;</span><br><span class="line"></span><br><span class="line">    private volatile boolean isValid = false;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 同步环境下的ServiceInstanceListSupplier</span><br><span class="line">     * SameZoneOnlyServiceInstanceListSupplier限制仅返回同一个zone下的实例（注意）</span><br><span class="line">     * CachingServiceInstanceListSupplier启用缓存，不每次访问eureka请求实例列表</span><br><span class="line">     *</span><br><span class="line">     * @param discoveryClient</span><br><span class="line">     * @param env</span><br><span class="line">     * @param zoneConfig</span><br><span class="line">     * @param context</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    @Order(Integer.MIN_VALUE)</span><br><span class="line">    public ServiceInstanceListSupplier discoveryClientServiceInstanceListSupplier(</span><br><span class="line">            DiscoveryClient discoveryClient, Environment env,</span><br><span class="line">            LoadBalancerZoneConfig zoneConfig,</span><br><span class="line">            ApplicationContext context) &#123;</span><br><span class="line">        isValid = true;</span><br><span class="line">        ServiceInstanceListSupplier delegate = new SameZoneOnlyServiceInstanceListSupplier(</span><br><span class="line">                new DiscoveryClientServiceInstanceListSupplier(discoveryClient, env),</span><br><span class="line">                zoneConfig</span><br><span class="line">        );</span><br><span class="line">        ObjectProvider&lt;LoadBalancerCacheManager&gt; cacheManagerProvider = context</span><br><span class="line">                .getBeanProvider(LoadBalancerCacheManager.class);</span><br><span class="line">        if (cacheManagerProvider.getIfAvailable() != null) &#123;</span><br><span class="line">            return new CachingServiceInstanceListSupplier(</span><br><span class="line">                    delegate,</span><br><span class="line">                    cacheManagerProvider.getIfAvailable()</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        return delegate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public ReactorLoadBalancer&lt;ServiceInstance&gt; reactorServiceInstanceLoadBalancer(</span><br><span class="line">            Environment environment,</span><br><span class="line">            ServiceInstanceListSupplier serviceInstanceListSupplier,</span><br><span class="line">            Tracer tracer) &#123;</span><br><span class="line">        if (!isValid) &#123;</span><br><span class="line">            throw new IllegalStateException(&quot;should use the ServiceInstanceListSupplier in this configuration, please check config&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        String name = environment.getProperty(LoadBalancerClientFactory.PROPERTY_NAME);</span><br><span class="line">        return new RoundRobinBaseOnTraceIdLoadBalancer(</span><br><span class="line">                name,</span><br><span class="line">                serviceInstanceListSupplier,</span><br><span class="line">                tracer</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后，<strong>指定默认的负载均衡配置采取这个配置</strong>, 通过注解：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@LoadBalancerClients(defaultConfiguration = &#123;CommonLoadBalancerConfig.class&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>负载均衡</category>
      </categories>
      <tags>
        <tag>负载均衡,Ribbon,Spring Cloud Load Balancer</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫的N种姿势</title>
    <url>/post/830562ef.html</url>
    <content><![CDATA[<p>问题的由来</p>
<p>  前几天，在微信公众号（Python爬虫及算法）上有个人问了笔者一个问题，如何利用爬虫来实现如下的需求，需要爬取的网页如下（网址为：<a href="https://www.wikidata.org/w/index.php?title=Special:WhatLinksHere/Q5&amp;limit=500&amp;from=0%EF%BC%89%EF%BC%9A">https://www.wikidata.org/w/index.php?title=Special:WhatLinksHere/Q5&amp;limit=500&amp;from=0）：</a></p>
<p><img src="/../images/Python%E7%88%AC%E8%99%AB%E7%9A%84N%E7%A7%8D%E5%A7%BF%E5%8A%BF/2019061709510421.png" alt="img"></p>
<p>  我们的需求为爬取红色框框内的名人（有500条记录，图片只展示了一部分）的 名字以及其介绍，关于其介绍，点击该名人的名字即可，如下图：</p>
<p><img src="/../images/Python%E7%88%AC%E8%99%AB%E7%9A%84N%E7%A7%8D%E5%A7%BF%E5%8A%BF/20190617095158684.png" alt="img"></p>
<p>这就意味着我们需要爬取500个这样的页面，即500个HTTP请求（暂且这么认为吧），然后需要提取这些网页中的名字和描述，当然有些不是名人，也没有描述，我们可以跳过。最后，这些网页的网址在第一页中的名人后面可以找到，如George Washington的网页后缀为Q23.<br>  爬虫的需求大概就是这样。</p>
<h3 id="爬虫的4种姿势"><a href="#爬虫的4种姿势" class="headerlink" title="爬虫的4种姿势"></a>爬虫的4种姿势</h3><p>  首先，分析来爬虫的思路：先在第一个网页（<a href="https://www.wikidata.org/w/index.php?title=Special:WhatLinksHere/Q5&amp;limit=500&amp;from=0%EF%BC%89%E4%B8%AD%E5%BE%97%E5%88%B0500%E4%B8%AA%E5%90%8D%E4%BA%BA%E6%89%80%E5%9C%A8%E7%9A%84%E7%BD%91%E5%9D%80%EF%BC%8C%E6%8E%A5%E4%B8%8B%E6%9D%A5%E5%B0%B1%E7%88%AC%E5%8F%96%E8%BF%99500%E4%B8%AA%E7%BD%91%E9%A1%B5%E4%B8%AD%E7%9A%84%E5%90%8D%E4%BA%BA%E7%9A%84%E5%90%8D%E5%AD%97%E5%8F%8A%E6%8F%8F%E8%BF%B0%EF%BC%8C%E5%A6%82%E6%97%A0%E6%8F%8F%E8%BF%B0%EF%BC%8C%E5%88%99%E8%B7%B3%E8%BF%87%E3%80%82">https://www.wikidata.org/w/index.php?title=Special:WhatLinksHere/Q5&amp;limit=500&amp;from=0）中得到500个名人所在的网址，接下来就爬取这500个网页中的名人的名字及描述，如无描述，则跳过。</a><br>  接下来，我们将介绍实现这个爬虫的4种方法，并分析它们各自的优缺点，希望能让读者对爬虫有更多的体会。实现爬虫的方法为：</p>
<ul>
<li>一般方法（同步，requests+BeautifulSoup）</li>
<li>并发（使用concurrent.futures模块以及requests+BeautifulSoup）</li>
<li>异步（使用aiohttp+asyncio+requests+BeautifulSoup）</li>
<li>使用框架Scrapy</li>
</ul>
<h3 id="一般方法"><a href="#一般方法" class="headerlink" title="一般方法"></a>一般方法</h3><p>  一般方法即为同步方法，主要使用requests+BeautifulSoup，按顺序执行。完整的Python代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始时间</span></span><br><span class="line">t1 = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;#&#x27;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.wikidata.org/w/index.php?title=Special:WhatLinksHere/Q5&amp;limit=500&amp;from=0&quot;</span></span><br><span class="line"><span class="comment"># 请求头部</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 发送HTTP请求</span></span><br><span class="line">req = requests.get(url, headers=headers)</span><br><span class="line"><span class="comment"># 解析网页</span></span><br><span class="line">soup = BeautifulSoup(req.text, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line"><span class="comment"># 找到name和Description所在的记录</span></span><br><span class="line">human_list = soup.find(<span class="built_in">id</span>=<span class="string">&#x27;mw-whatlinkshere-list&#x27;</span>)(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"></span><br><span class="line">urls = []</span><br><span class="line"><span class="comment"># 获取网址</span></span><br><span class="line"><span class="keyword">for</span> human <span class="keyword">in</span> human_list:</span><br><span class="line">    url = human.find(<span class="string">&#x27;a&#x27;</span>)[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">    urls.append(<span class="string">&#x27;https://www.wikidata.org&#x27;</span>+url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取每个网页的name和description</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parser</span>(<span class="params">url</span>):</span><br><span class="line">    req = requests.get(url)</span><br><span class="line">    <span class="comment"># 利用BeautifulSoup将获取到的文本解析成HTML</span></span><br><span class="line">    soup = BeautifulSoup(req.text, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">    <span class="comment"># 获取name和description</span></span><br><span class="line">    name = soup.find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&quot;wikibase-title-label&quot;</span>)</span><br><span class="line">    desc = soup.find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&quot;wikibase-descriptionview-text&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> desc <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%-40s,\t%s&#x27;</span>%(name.text, desc.text))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">    parser(url)</span><br><span class="line"></span><br><span class="line">t2 = time.time() <span class="comment"># 结束时间</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;一般方法，总共耗时：%s&#x27;</span> % (t2 - t1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;#&#x27;</span> * <span class="number">50</span>)</span><br><span class="line"><span class="number">1234567891011121314151617181920212223242526272829303132333435363738394041</span></span><br></pre></td></tr></table></figure>
<p>输出的结果如下(省略中间的输出，以…代替)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">##################################################</span><br><span class="line">George Washington                       ,	first President of the United States</span><br><span class="line">Douglas Adams                           ,	British author and humorist (1952–2001)</span><br><span class="line">......</span><br><span class="line">Willoughby Newton                       ,	Politician from Virginia, USA</span><br><span class="line">Mack Wilberg                            ,	American conductor</span><br><span class="line">一般方法，总共耗时：724.9654655456543</span><br><span class="line">##################################################</span><br><span class="line">12345678</span><br></pre></td></tr></table></figure>
<p>使用同步方法，总耗时约725秒，即12分钟多。<br>  一般方法虽然思路简单，容易实现，但效率不高，耗时长。那么，使用并发试试看。</p>
<h3 id="并发方法"><a href="#并发方法" class="headerlink" title="并发方法"></a>并发方法</h3><p>  并发方法使用多线程来加速一般方法，我们使用的并发模块为concurrent.futures模块，设置多线程的个数为20个（实际不一定能达到，视计算机而定）。完整的Python代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, wait, ALL_COMPLETED</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始时间</span></span><br><span class="line">t1 = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;#&#x27;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.wikidata.org/w/index.php?title=Special:WhatLinksHere/Q5&amp;limit=500&amp;from=0&quot;</span></span><br><span class="line"><span class="comment"># 请求头部</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 发送HTTP请求</span></span><br><span class="line">req = requests.get(url, headers=headers)</span><br><span class="line"><span class="comment"># 解析网页</span></span><br><span class="line">soup = BeautifulSoup(req.text, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line"><span class="comment"># 找到name和Description所在的记录</span></span><br><span class="line">human_list = soup.find(<span class="built_in">id</span>=<span class="string">&#x27;mw-whatlinkshere-list&#x27;</span>)(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"></span><br><span class="line">urls = []</span><br><span class="line"><span class="comment"># 获取网址</span></span><br><span class="line"><span class="keyword">for</span> human <span class="keyword">in</span> human_list:</span><br><span class="line">    url = human.find(<span class="string">&#x27;a&#x27;</span>)[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">    urls.append(<span class="string">&#x27;https://www.wikidata.org&#x27;</span>+url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取每个网页的name和description</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parser</span>(<span class="params">url</span>):</span><br><span class="line">    req = requests.get(url)</span><br><span class="line">    <span class="comment"># 利用BeautifulSoup将获取到的文本解析成HTML</span></span><br><span class="line">    soup = BeautifulSoup(req.text, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">    <span class="comment"># 获取name和description</span></span><br><span class="line">    name = soup.find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&quot;wikibase-title-label&quot;</span>)</span><br><span class="line">    desc = soup.find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&quot;wikibase-descriptionview-text&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> desc <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%-40s,\t%s&#x27;</span>%(name.text, desc.text))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用并发加速爬取</span></span><br><span class="line">executor = ThreadPoolExecutor(max_workers=<span class="number">20</span>)</span><br><span class="line"><span class="comment"># submit()的参数： 第一个为函数， 之后为该函数的传入参数，允许有多个</span></span><br><span class="line">future_tasks = [executor.submit(parser, url) <span class="keyword">for</span> url <span class="keyword">in</span> urls]</span><br><span class="line"><span class="comment"># 等待所有的线程完成，才进入后续的执行</span></span><br><span class="line">wait(future_tasks, return_when=ALL_COMPLETED)</span><br><span class="line"></span><br><span class="line">t2 = time.time() <span class="comment"># 结束时间</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;并发方法，总共耗时：%s&#x27;</span> % (t2 - t1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;#&#x27;</span> * <span class="number">50</span>)</span><br><span class="line"><span class="number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546</span></span><br></pre></td></tr></table></figure>
<p>输出的结果如下（省略中间的输出，以…代替)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">##################################################</span><br><span class="line">Larry Sanger                            ,	American former professor, co-founder of Wikipedia, founder of Citizendium and other projects</span><br><span class="line">Ken Jennings                            ,	American game show contestant and writer</span><br><span class="line">......</span><br><span class="line">Antoine de Saint-Exupery                ,	French writer and aviator</span><br><span class="line">Michael Jackson                         ,	American singer, songwriter and dancer</span><br><span class="line">并发方法，总共耗时：226.7499692440033</span><br><span class="line">##################################################</span><br><span class="line">12345678</span><br></pre></td></tr></table></figure>
<p>使用多线程并发后的爬虫执行时间约为227秒，大概是一般方法的三分之一的时间，速度有了明显的提升啊！多线程在速度上有明显提升，但执行的网页顺序是无序的，在线程的切换上开销也比较大，线程越多，开销越大。<br>  关于多线程与一般方法在速度上的比较，可以参考文章：<a href="https://blog.csdn.net/jclian91/article/details/80738749">Python爬虫之多线程下载豆瓣Top250电影图片</a>。</p>
<h3 id="异步方法"><a href="#异步方法" class="headerlink" title="异步方法"></a>异步方法</h3><p>  异步方法在爬虫中是有效的速度提升手段，使用aiohttp可以异步地处理HTTP请求，使用asyncio可以实现异步IO，需要注意的是，aiohttp只支持3.5.3以后的Python版本。使用异步方法实现该爬虫的完整Python代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始时间</span></span><br><span class="line">t1 = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;#&#x27;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.wikidata.org/w/index.php?title=Special:WhatLinksHere/Q5&amp;limit=500&amp;from=0&quot;</span></span><br><span class="line"><span class="comment"># 请求头部</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 发送HTTP请求</span></span><br><span class="line">req = requests.get(url, headers=headers)</span><br><span class="line"><span class="comment"># 解析网页</span></span><br><span class="line">soup = BeautifulSoup(req.text, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line"><span class="comment"># 找到name和Description所在的记录</span></span><br><span class="line">human_list = soup.find(<span class="built_in">id</span>=<span class="string">&#x27;mw-whatlinkshere-list&#x27;</span>)(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"></span><br><span class="line">urls = []</span><br><span class="line"><span class="comment"># 获取网址</span></span><br><span class="line"><span class="keyword">for</span> human <span class="keyword">in</span> human_list:</span><br><span class="line">    url = human.find(<span class="string">&#x27;a&#x27;</span>)[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">    urls.append(<span class="string">&#x27;https://www.wikidata.org&#x27;</span>+url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异步HTTP请求</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">fetch</span>(<span class="params">session, url</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> response.text()</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 解析网页</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">parser</span>(<span class="params">html</span>):</span><br><span class="line">    <span class="comment"># 利用BeautifulSoup将获取到的文本解析成HTML</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">    <span class="comment"># 获取name和description</span></span><br><span class="line">    name = soup.find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&quot;wikibase-title-label&quot;</span>)</span><br><span class="line">    desc = soup.find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&quot;wikibase-descriptionview-text&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> desc <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%-40s,\t%s&#x27;</span>%(name.text, desc.text))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理网页，获取name和description</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            html = <span class="keyword">await</span> fetch(session, url)</span><br><span class="line">            <span class="keyword">await</span> parser(html)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">            <span class="built_in">print</span>(err)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用asyncio模块进行异步IO处理</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">tasks = [asyncio.ensure_future(download(url)) <span class="keyword">for</span> url <span class="keyword">in</span> urls]</span><br><span class="line">tasks = asyncio.gather(*tasks)</span><br><span class="line">loop.run_until_complete(tasks)</span><br><span class="line"></span><br><span class="line">t2 = time.time() <span class="comment"># 结束时间</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;使用异步，总共耗时：%s&#x27;</span> % (t2 - t1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;#&#x27;</span> * <span class="number">50</span>)</span><br><span class="line"><span class="number">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859</span></span><br></pre></td></tr></table></figure>
<p>输出结果如下（省略中间的输出，以…代替)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">##################################################</span><br><span class="line">Frédéric Taddeï                         ,	French journalist and TV host</span><br><span class="line">Gabriel Gonzáles Videla                 ,	Chilean politician</span><br><span class="line">......</span><br><span class="line">Denmark                                 ,	sovereign state and Scandinavian country in northern Europe</span><br><span class="line">Usain Bolt                              ,	Jamaican sprinter and soccer player</span><br><span class="line">使用异步，总共耗时：126.9002583026886</span><br><span class="line">##################################################</span><br><span class="line">12345678</span><br></pre></td></tr></table></figure>
<p>显然，异步方法使用了异步和并发两种提速方法，自然在速度有明显提升，大约为一般方法的六分之一。异步方法虽然效率高，但需要掌握异步编程，这需要学习一段时间。<br>  关于异步方法与一般方法在速度上的比较，可以参考文章：<a href="https://blog.csdn.net/jclian91/article/details/82691269">利用aiohttp实现异步爬虫</a>。<br>  如果有人觉得127秒的爬虫速度还是慢，可以尝试一下异步代码（与之前的异步代码的区别在于：仅仅使用了正则表达式代替BeautifulSoup来解析网页，以提取网页中的内容）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始时间</span></span><br><span class="line">t1 = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;#&#x27;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.wikidata.org/w/index.php?title=Special:WhatLinksHere/Q5&amp;limit=500&amp;from=0&quot;</span></span><br><span class="line"><span class="comment"># 请求头部</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 发送HTTP请求</span></span><br><span class="line">req = requests.get(url, headers=headers)</span><br><span class="line"><span class="comment"># 解析网页</span></span><br><span class="line">soup = BeautifulSoup(req.text, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line"><span class="comment"># 找到name和Description所在的记录</span></span><br><span class="line">human_list = soup.find(<span class="built_in">id</span>=<span class="string">&#x27;mw-whatlinkshere-list&#x27;</span>)(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"></span><br><span class="line">urls = []</span><br><span class="line"><span class="comment"># 获取网址</span></span><br><span class="line"><span class="keyword">for</span> human <span class="keyword">in</span> human_list:</span><br><span class="line">    url = human.find(<span class="string">&#x27;a&#x27;</span>)[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">    urls.append(<span class="string">&#x27;https://www.wikidata.org&#x27;</span> + url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异步HTTP请求</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">fetch</span>(<span class="params">session, url</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> response.text()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析网页</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">parser</span>(<span class="params">html</span>):</span><br><span class="line">    <span class="comment"># 利用正则表达式解析网页</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        name = re.findall(<span class="string">r&#x27;&lt;span class=&quot;wikibase-title-label&quot;&gt;(.+?)&lt;/span&gt;&#x27;</span>, html)[<span class="number">0</span>]</span><br><span class="line">        desc = re.findall(<span class="string">r&#x27;&lt;span class=&quot;wikibase-descriptionview-text&quot;&gt;(.+?)&lt;/span&gt;&#x27;</span>, html)[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%-40s,\t%s&#x27;</span> % (name, desc))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理网页，获取name和description</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            html = <span class="keyword">await</span> fetch(session, url)</span><br><span class="line">            <span class="keyword">await</span> parser(html)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">            <span class="built_in">print</span>(err)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用asyncio模块进行异步IO处理</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">tasks = [asyncio.ensure_future(download(url)) <span class="keyword">for</span> url <span class="keyword">in</span> urls]</span><br><span class="line">tasks = asyncio.gather(*tasks)</span><br><span class="line">loop.run_until_complete(tasks)</span><br><span class="line"></span><br><span class="line">t2 = time.time()  <span class="comment"># 结束时间</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;使用异步（正则表达式），总共耗时：%s&#x27;</span> % (t2 - t1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;#&#x27;</span> * <span class="number">50</span>)</span><br><span class="line"><span class="number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061</span></span><br></pre></td></tr></table></figure>
<p>输出的结果如下（省略中间的输出，以…代替)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">##################################################</span><br><span class="line">Dejen Gebremeskel                       ,	Ethiopian long-distance runner</span><br><span class="line">Erik Kynard                             ,	American high jumper</span><br><span class="line">......</span><br><span class="line">Buzz Aldrin                             ,	American astronaut</span><br><span class="line">Egon Krenz                              ,	former General Secretary of the Socialist Unity Party of East Germany</span><br><span class="line">使用异步（正则表达式），总共耗时：16.521944999694824</span><br><span class="line">##################################################</span><br><span class="line">12345678</span><br></pre></td></tr></table></figure>
<p>16.5秒，仅仅为一般方法的43分之一，速度如此之快，令人咋舌（感谢某人提供的尝试）。笔者虽然自己实现了异步方法，但用的是BeautifulSoup来解析网页，耗时127秒，没想到使用正则表达式就取得了如此惊人的效果。可见，BeautifulSoup解析网页虽然快，但在异步方法中，还是限制了速度。但这种方法的缺点为，当你需要爬取的内容比较复杂时，一般的正则表达式就难以胜任了，需要另想办法。</p>
<h3 id="爬虫框架Scrapy"><a href="#爬虫框架Scrapy" class="headerlink" title="爬虫框架Scrapy"></a>爬虫框架Scrapy</h3><p>  最后，我们使用著名的Python爬虫框架Scrapy来解决这个爬虫。我们创建的爬虫项目为wikiDataScrapy，项目结构如下：</p>
<p><img src="/../images/Python%E7%88%AC%E8%99%AB%E7%9A%84N%E7%A7%8D%E5%A7%BF%E5%8A%BF/20190617095223407.png" alt="img"></p>
<p>在settings.py中设置“ROBOTSTXT_OBEY = False”. <a href="http://修改items.py/">修改items.py</a>，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WikidatascrapyItem</span>(scrapy.Item):</span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    name = scrapy.Field()</span><br><span class="line">    desc = scrapy.Field()</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure>
<p>然后，<a href="http://在spiders文件夹下新建wikispider.py/">在spiders文件夹下新建wikiSpider.py</a>，代码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy.cmdline</span><br><span class="line"><span class="keyword">from</span> wikiDataScrapy.items <span class="keyword">import</span> WikidatascrapyItem</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取请求的500个网址，用requests+BeautifulSoup搞定</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_urls</span>():</span><br><span class="line">    url = <span class="string">&quot;http://www.wikidata.org/w/index.php?title=Special:WhatLinksHere/Q5&amp;limit=500&amp;from=0&quot;</span></span><br><span class="line">    <span class="comment"># 请求头部</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">    <span class="comment"># 发送HTTP请求</span></span><br><span class="line">    req = requests.get(url, headers=headers)</span><br><span class="line">    <span class="comment"># 解析网页</span></span><br><span class="line">    soup = BeautifulSoup(req.text, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">    <span class="comment"># 找到name和Description所在的记录</span></span><br><span class="line">    human_list = soup.find(<span class="built_in">id</span>=<span class="string">&#x27;mw-whatlinkshere-list&#x27;</span>)(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    urls = []</span><br><span class="line">    <span class="comment"># 获取网址</span></span><br><span class="line">    <span class="keyword">for</span> human <span class="keyword">in</span> human_list:</span><br><span class="line">        url = human.find(<span class="string">&#x27;a&#x27;</span>)[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">        urls.append(<span class="string">&#x27;https://www.wikidata.org&#x27;</span> + url)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(urls)</span></span><br><span class="line">    <span class="keyword">return</span> urls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用scrapy框架爬取</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">bookSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;wikiScrapy&#x27;</span>  <span class="comment"># 爬虫名称</span></span><br><span class="line">    start_urls = get_urls()  <span class="comment"># 需要爬取的500个网址</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        item = WikidatascrapyItem()</span><br><span class="line">        <span class="comment"># name and description</span></span><br><span class="line">        item[<span class="string">&#x27;name&#x27;</span>] = response.css(<span class="string">&#x27;span.wikibase-title-label&#x27;</span>).xpath(<span class="string">&#x27;text()&#x27;</span>).extract_first()</span><br><span class="line">        item[<span class="string">&#x27;desc&#x27;</span>] = response.css(<span class="string">&#x27;span.wikibase-descriptionview-text&#x27;</span>).xpath(<span class="string">&#x27;text()&#x27;</span>).extract_first()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行该爬虫，并转化为csv文件</span></span><br><span class="line">scrapy.cmdline.execute([<span class="string">&#x27;scrapy&#x27;</span>, <span class="string">&#x27;crawl&#x27;</span>, <span class="string">&#x27;wikiScrapy&#x27;</span>, <span class="string">&#x27;-o&#x27;</span>, <span class="string">&#x27;wiki.csv&#x27;</span>, <span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;csv&#x27;</span>])</span><br><span class="line"><span class="number">123456789101112131415161718192021222324252627282930313233343536373839404142</span></span><br></pre></td></tr></table></figure>
<p>输出结果如下（只包含最后的Scrapy信息总结部分）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;downloader/request_bytes&#x27;: 166187,</span><br><span class="line"> &#x27;downloader/request_count&#x27;: 500,</span><br><span class="line"> &#x27;downloader/request_method_count/GET&#x27;: 500,</span><br><span class="line"> &#x27;downloader/response_bytes&#x27;: 18988798,</span><br><span class="line"> &#x27;downloader/response_count&#x27;: 500,</span><br><span class="line"> &#x27;downloader/response_status_count/200&#x27;: 500,</span><br><span class="line"> &#x27;finish_reason&#x27;: &#x27;finished&#x27;,</span><br><span class="line"> &#x27;finish_time&#x27;: datetime.datetime(2018, 10, 16, 9, 49, 15, 761487),</span><br><span class="line"> &#x27;item_scraped_count&#x27;: 500,</span><br><span class="line"> &#x27;log_count/DEBUG&#x27;: 1001,</span><br><span class="line"> &#x27;log_count/INFO&#x27;: 8,</span><br><span class="line"> &#x27;response_received_count&#x27;: 500,</span><br><span class="line"> &#x27;scheduler/dequeued&#x27;: 500,</span><br><span class="line"> &#x27;scheduler/dequeued/memory&#x27;: 500,</span><br><span class="line"> &#x27;scheduler/enqueued&#x27;: 500,</span><br><span class="line"> &#x27;scheduler/enqueued/memory&#x27;: 500,</span><br><span class="line"> &#x27;start_time&#x27;: datetime.datetime(2018, 10, 16, 9, 48, 44, 58673)&#125;</span><br><span class="line">1234567891011121314151617</span><br></pre></td></tr></table></figure>
<p>可以看到，已成功爬取500个网页，耗时31秒，速度也相当OK。再来看一下生成的wiki.csv文件，它包含了所有的输出的name和description，如下图：</p>
<p><img src="/../images/Python%E7%88%AC%E8%99%AB%E7%9A%84N%E7%A7%8D%E5%A7%BF%E5%8A%BF/20190617095238505.png" alt="img"></p>
<p>可以看到，输出的CSV文件的列并不是有序的。至于<a href="https://segmentfault.com/q/1010000010632474">如何解决Scrapy输出的CSV文件有换行的问题</a>，请参考stackoverflow上的回答：<a href="https://stackoverflow.com/questions/39477662/scrapy-csv-file-has-uniform-empty-rows/43394566#43394566">https://stackoverflow.com/questions/39477662/scrapy-csv-file-has-uniform-empty-rows/43394566#43394566</a> 。</p>
<p>  Scrapy来制作爬虫的优势在于它是一个成熟的爬虫框架，支持异步，并发，容错性较好（比如本代码中就没有处理找不到name和description的情形），但如果需要频繁地修改中间件，则还是自己写个爬虫比较好，而且它在速度上没有超过我们自己写的异步爬虫，至于能自动导出CSV文件这个功能，还是相当实在的。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>  本文内容较多，比较了4种爬虫方法，每种方法都有自己的利弊，已在之前的陈述中给出，当然，在实际的问题中，并不是用的工具或方法越高级就越好，具体问题具体分析嘛~<br>  本文到此结束，感谢阅读哦~</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>-Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Cloud-Gateway 从升级到放弃</title>
    <url>/post/39837a8d.html</url>
    <content><![CDATA[<h1 id="1-为什么要升级为spring-cloud-gateway？"><a href="#1-为什么要升级为spring-cloud-gateway？" class="headerlink" title="1 为什么要升级为spring-cloud-gateway？"></a>1 为什么要升级为spring-cloud-gateway？</h1><p>Spring Cloud Gateway features:</p>
<ul>
<li>Built on Spring Framework 5, Project Reactor and Spring Boot 2.0</li>
<li>Able to match routes on any request attribute.</li>
<li>Predicates and filters are specific to routes.</li>
<li>Hystrix Circuit Breaker integration.</li>
<li>Spring Cloud DiscoveryClient integration</li>
<li>Easy to write Predicates and Filters</li>
<li>Request Rate Limiting</li>
<li>Path Rewriting</li>
</ul>
<p>这是官方说的，spring gateway相对spring zuul要新很多，应用也更加自由，开发体验更好。但是我在测试中发现，spring-cloud-gateway相对于zuul来说，更加出众的还是其性能，当然最后让我放弃的也是因为这一点。</p>
<p>网上的朋友也有做一些gateway和zuul的性能比较，大多的结论也是gateway要优于zuul，同时也更加稳定。</p>
<p>但是我们不能轻信，所以我也做了测试,这部分测试内容若不感兴趣可以跳过，zuul就不测试了。</p>
<h1 id="2-spring-cloud-gateway的初步测试"><a href="#2-spring-cloud-gateway的初步测试" class="headerlink" title="2.spring-cloud-gateway的初步测试"></a>2.spring-cloud-gateway的初步测试</h1><p>　　step.1：测试准备：</p>
<p>　　　　1.gateway版本：2.0.1</p>
<p>　　　　2.服务主机：10.1.4.32，16G内存，4核虚拟机</p>
<p>　　　　3.测试客户端：10.1.4.34，16G内存，4核虚拟机</p>
<p>　　　　4.测试工具wrk</p>
<p>　　step.2：建立gateway工程并写两个测试http接口，</p>
<p>　　　　1.<a href="http://10.1.4.32:14077/hello">http://10.1.4.32:14077/hello</a> [POST]</p>
<p>　　　　2.<a href="http://10.1.4.32:14077/test">http://10.1.4.32:14077/test</a> [GET]</p>
<p>　　step.3：开始测试</p>
<p>　　step.4：测试结果　　　</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[wrk@localhost wrk]$ ./wrk  -t 15 -c500 -d 10 --latency  http://10.1.4.32:14077/test</span><br><span class="line">Running 10s test @ http://10.1.4.32:14077/test</span><br><span class="line">  15 threads and 500 connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency     3.38ms    3.26ms 113.45ms   95.76%</span><br><span class="line">    Req/Sec    10.84k     1.44k   26.48k    89.50%</span><br><span class="line">  Latency Distribution</span><br><span class="line">     50%    2.79ms</span><br><span class="line">     75%    3.51ms</span><br><span class="line">     90%    4.21ms</span><br><span class="line">     99%   17.23ms</span><br><span class="line">  1625714 requests in 10.10s, 131.79MB read</span><br><span class="line">Requests/sec: 160961.07</span><br><span class="line">Transfer/sec:     13.05MB</span><br></pre></td></tr></table></figure>
<p>以及：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[wrk@localhost wrk]$ ./wrk  -t 15 -c500 -d 10 --latency -s scripts/gateway.lua  http://10.1.4.32:14077/hello</span><br><span class="line">Running 10s test @ http://10.1.4.32:14077/hello</span><br><span class="line">  15 threads and 500 connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency     5.21ms    3.96ms 255.59ms   96.75%</span><br><span class="line">    Req/Sec     6.62k   604.79    13.72k    88.48%</span><br><span class="line">  Latency Distribution</span><br><span class="line">     50%    4.78ms</span><br><span class="line">     75%    5.55ms</span><br><span class="line">     90%    6.32ms</span><br><span class="line">     99%   14.87ms</span><br><span class="line">  994374 requests in 10.10s, 539.59MB read</span><br><span class="line">Requests/sec:  98471.14</span><br><span class="line">Transfer/sec:     53.43MB</span><br></pre></td></tr></table></figure>
<p>说明，如果测试结果差别较大可能是因为测试工具的问题。</p>
<p>结果显示，POST方法的性能TPS达到了10W/s,而GET方法的性能TPS达到了16W/s。</p>
<p>这看起来很不可思议，因为正常的微服务，能达到2W/s的性能已经是良好，达到10W实在是不可思议。但是前面说了spring-cloud-gateway引入了Spring Reactor反应式编程，应对的便是这种高并发需求。</p>
<p>当然，即便spring-cloud-gateway给了我们很大惊喜，但是如果因此就引入了spring-cloud-gateway，那还是会有些草率，毕竟gateway是用来干什么的？是路由和过滤。继续测试。</p>
<p>　　step.5：加上路由和过滤器,在配置文件中加入下面内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">      - id: test</span><br><span class="line">        uri: http://10.1.4.32:14077/test</span><br><span class="line">        predicates:</span><br><span class="line">        - Path=/tt</span><br><span class="line">        filters:</span><br><span class="line">        - AddRequestParameter=foo, bar</span><br></pre></td></tr></table></figure>
<p>表示，给test方法加入了路由，并且加入了官方提供的过滤器：AddRequestParameter=foo, bar</p>
<p>　　step.6：测试，并附测试结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[wrk@localhost wrk]$ ./wrk  -t 15 -c500 -d 10 --latency  http://10.1.4.32:14077/tt</span><br><span class="line">Running 10s test @ http://10.1.4.32:14077/tt</span><br><span class="line">  15 threads and 500 connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency    18.99ms   12.15ms 122.69ms   70.84%</span><br><span class="line">    Req/Sec     1.82k   155.77     2.36k    73.94%</span><br><span class="line">  Latency Distribution</span><br><span class="line">     50%   17.03ms</span><br><span class="line">     75%   25.49ms</span><br><span class="line">     90%   35.02ms</span><br><span class="line">     99%   57.13ms</span><br><span class="line">  274529 requests in 10.10s, 22.25MB read</span><br><span class="line">Requests/sec:  27182.88</span><br><span class="line">Transfer/sec:      2.20MB</span><br></pre></td></tr></table></figure>
<p>性能只剩27000/s，貌似降低了很多，但是比起zuul仍然快了不少。因为在这台机器上，测试zuul或许都不能到达2W。</p>
<p>那么，是不是就应该使用spring-cloud-gateway了？</p>
<h1 id="3-开始使用spring-cloud-gateway"><a href="#3-开始使用spring-cloud-gateway" class="headerlink" title="3.开始使用spring-cloud-gateway"></a>3.开始使用spring-cloud-gateway</h1><p>在使用上spring-cluod-gateway之后，我开始编辑自己的过滤器，需求要求写两个过滤器，修改请求体和响应体。</p>
<p>因为需要对特定的请求使用过滤器，所以这里使用gateway-filter，有些代码官方有，有些网友提供，两个过滤器代码大致如下：</p>
<p>解密过滤器，pre：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.newland.dc.ctid.fileter;</span><br><span class="line"></span><br><span class="line">import com.google.gson.Gson;</span><br><span class="line">import com.google.gson.GsonBuilder;</span><br><span class="line">import com.newland.dc.common.vo.RequestHeaderVo;</span><br><span class="line">import com.newland.dc.ctid.entity.dto.RequestDto;</span><br><span class="line">import io.netty.buffer.ByteBufAllocator;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.cloud.gateway.filter.GatewayFilter;</span><br><span class="line">import org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line">import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;</span><br><span class="line">import org.springframework.core.Ordered;</span><br><span class="line">import org.springframework.core.io.buffer.DataBuffer;</span><br><span class="line">import org.springframework.core.io.buffer.DataBufferUtils;</span><br><span class="line">import org.springframework.core.io.buffer.NettyDataBufferFactory;</span><br><span class="line">import org.springframework.core.style.ToStringCreator;</span><br><span class="line">import org.springframework.http.MediaType;</span><br><span class="line">import org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line">import org.springframework.http.server.reactive.ServerHttpRequestDecorator;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.server.ServerWebExchange;</span><br><span class="line">import reactor.core.publisher.Flux;</span><br><span class="line">import reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line">import java.nio.CharBuffer;</span><br><span class="line">import java.nio.charset.StandardCharsets;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by garfield on 2019/2/26.</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class DecryptGatewayFilterFactory extends AbstractGatewayFilterFactory&lt;DecryptGatewayFilterFactory.Config&gt;&#123;</span><br><span class="line"></span><br><span class="line">    private static Logger log = LoggerFactory.getLogger(DecryptGatewayFilterFactory.class);</span><br><span class="line"></span><br><span class="line">    public static final String DECRYPT_HEADER = &quot;decrypt_header&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public DecryptGatewayFilterFactory() &#123;</span><br><span class="line">        super(Config.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private Gson gson = new GsonBuilder().serializeNulls().create();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    public GatewayFilter apply(Config config) &#123;</span><br><span class="line">        return new DecryptGatewayFilter(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class DecryptGatewayFilter implements GatewayFilter, Ordered &#123;</span><br><span class="line">        Config config;</span><br><span class="line"></span><br><span class="line">        DecryptGatewayFilter(Config config) &#123;</span><br><span class="line">            this.config = config;</span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;</span><br><span class="line">                log.debug(config.toString());</span><br><span class="line">                ServerHttpRequest request = exchange.getRequest();</span><br><span class="line">                MediaType contentType = request.getHeaders().getContentType();</span><br><span class="line"></span><br><span class="line">                boolean postRequest = &quot;POST&quot;.equalsIgnoreCase(request.getMethodValue()) &amp;&amp; !contentType.toString().contains(&quot;multipart/form-data&quot;);</span><br><span class="line">                //判断是否为POST请求</span><br><span class="line">                if (postRequest) &#123;</span><br><span class="line"></span><br><span class="line">                    Flux&lt;DataBuffer&gt; body = request.getBody();</span><br><span class="line">                    AtomicReference&lt;String&gt; bodyRef = new AtomicReference&lt;&gt;();//缓存读取的request body信息</span><br><span class="line">                    body.subscribe(dataBuffer -&gt; &#123;</span><br><span class="line">                        CharBuffer charBuffer = StandardCharsets.UTF_8.decode(dataBuffer.asByteBuffer());</span><br><span class="line">                        DataBufferUtils.release(dataBuffer);</span><br><span class="line">                        bodyRef.set(charBuffer.toString());</span><br><span class="line">                    &#125;);//读取request body到缓存</span><br><span class="line">                    String bodyStr = bodyRef.get();//获取request body</span><br><span class="line">                    log.debug(bodyStr);//这里是我们需要做的操作</span><br><span class="line">                    RequestDto requestDto = gson.fromJson(bodyStr, RequestDto.class);</span><br><span class="line">                    log.debug(&quot;decrypt filter&quot;);</span><br><span class="line">                    //save header to response header</span><br><span class="line">                    RequestHeaderVo headerVo = requestDto.getHeader();</span><br><span class="line">                    headerVo.setAppVersion(&quot;1000&quot;);</span><br><span class="line">                    //此处可以传递一些变量</span><br><span class="line">                    exchange.getResponse().getHeaders().add(DECRYPT_HEADER, gson.toJson(headerVo));</span><br><span class="line"></span><br><span class="line">                    DataBuffer bodyDataBuffer = stringBuffer(bodyStr);</span><br><span class="line">                    Flux&lt;DataBuffer&gt; bodyFlux = Flux.just(bodyDataBuffer);</span><br><span class="line"></span><br><span class="line">                    request = new ServerHttpRequestDecorator(request)&#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        public Flux&lt;DataBuffer&gt; getBody() &#123;</span><br><span class="line">                            return bodyFlux;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;;//封装我们的request</span><br><span class="line">                &#125;</span><br><span class="line">                return chain.filter(exchange.mutate().request(request.mutate().header(&quot;a&quot;,&quot;200&quot;).build()).build());</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public int getOrder() &#123;</span><br><span class="line">            return -10;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static DataBuffer stringBuffer(String value) &#123;</span><br><span class="line">        byte[] bytes = value.getBytes(StandardCharsets.UTF_8);</span><br><span class="line"></span><br><span class="line">        NettyDataBufferFactory nettyDataBufferFactory = new NettyDataBufferFactory(ByteBufAllocator.DEFAULT);</span><br><span class="line">        DataBuffer buffer = nettyDataBufferFactory.allocateBuffer(bytes.length);</span><br><span class="line">        buffer.write(bytes);</span><br><span class="line">        return buffer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ServerHttpRequest.Builder mutate(ServerHttpRequest request) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class Config &#123;</span><br><span class="line">        private boolean decrypt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        public boolean isDecrypt() &#123;</span><br><span class="line">            return decrypt;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setDecrypt(boolean decrypt) &#123;</span><br><span class="line">            this.decrypt = decrypt;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public String toString() &#123;</span><br><span class="line">            return new ToStringCreator(this)</span><br><span class="line">                    .append(&quot;decrypt&quot;, decrypt)</span><br><span class="line">                    .toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;String&gt; shortcutFieldOrder() &#123;</span><br><span class="line">        return Arrays.asList(&quot;decrypt&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>加密过滤器，使用源码的提供的修改方法，post：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.newland.dc.ctid.fileter;</span><br><span class="line"></span><br><span class="line">import com.google.gson.Gson;</span><br><span class="line">import com.newland.dc.common.vo.RequestHeaderVo;</span><br><span class="line">import com.newland.dc.ctid.entity.dto.RequestDto;</span><br><span class="line">import org.springframework.cloud.gateway.filter.GatewayFilter;</span><br><span class="line">import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;</span><br><span class="line">import org.springframework.cloud.gateway.filter.factory.rewrite.ModifyResponseBodyGatewayFilterFactory;</span><br><span class="line">import org.springframework.core.style.ToStringCreator;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.server.ServerWebExchange;</span><br><span class="line">import reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Auther: garfield</span><br><span class="line"> * @Date: 2019/3/5 15:33</span><br><span class="line"> * @Description:</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class AnGatewayFilterFactory extends AbstractGatewayFilterFactory&lt;AnGatewayFilterFactory.Config&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private Gson gson = new Gson();</span><br><span class="line"></span><br><span class="line">    public AnGatewayFilterFactory() &#123;</span><br><span class="line">        super(Config.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public GatewayFilter apply(Config config) &#123;</span><br><span class="line"></span><br><span class="line">        ModifyResponseBodyGatewayFilterFactory m1 = new ModifyResponseBodyGatewayFilterFactory(null);</span><br><span class="line">        ModifyResponseBodyGatewayFilterFactory.Config c1 = new ModifyResponseBodyGatewayFilterFactory.Config();</span><br><span class="line">        c1.setInClass(String.class);</span><br><span class="line">        c1.setOutClass(String.class);</span><br><span class="line">        c1.setNewContentType(&quot;application/json&quot;);</span><br><span class="line"></span><br><span class="line">        c1.setRewriteFunction((exchange, body) -&gt; &#123;</span><br><span class="line">            ServerWebExchange ex = (ServerWebExchange) exchange;</span><br><span class="line">            //此处更改响应体</span><br><span class="line">            RequestHeaderVo requestHeaderVo = new RequestHeaderVo();</span><br><span class="line">            RequestDto requestDto = gson.fromJson(body.toString(), RequestDto.class);</span><br><span class="line">            requestDto.setHeader(requestHeaderVo);</span><br><span class="line">            body = gson.toJson(requestDto);</span><br><span class="line">            return Mono.just(body);</span><br><span class="line">        &#125;);</span><br><span class="line">        return m1.apply(c1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class Config &#123;</span><br><span class="line">        private boolean decrypt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        public boolean isDecrypt() &#123;</span><br><span class="line">            return decrypt;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setDecrypt(boolean decrypt) &#123;</span><br><span class="line">            this.decrypt = decrypt;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public String toString() &#123;</span><br><span class="line">            return new ToStringCreator(this)</span><br><span class="line">                    .append(&quot;encrypt&quot;, decrypt)</span><br><span class="line">                    .toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;String&gt; shortcutFieldOrder() &#123;</span><br><span class="line">        return Arrays.asList(&quot;encrypt&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里需要转移一下话题，这个过滤器修改其实有几种方法，可以自己写，也可以应用源码提供的例子。上面的两种写法已经测试都能使用，其实我还有两种方式，大同小异就是了，但也准备贴出来，也记录一下问题：</p>
<p>下面这个其实就是源码中的例子，只不过不引用，自己写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">        public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;</span><br><span class="line"></span><br><span class="line">            ServerHttpResponseDecorator responseDecorator = new ServerHttpResponseDecorator(exchange.getResponse()) &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public Mono&lt;Void&gt; writeWith(Publisher&lt;? extends DataBuffer&gt; body) &#123;</span><br><span class="line">                    ServerHttpRequest request = exchange.getRequest();</span><br><span class="line"></span><br><span class="line">                    MediaType originalResponseContentType = exchange.getAttribute(ORIGINAL_RESPONSE_CONTENT_TYPE_ATTR);</span><br><span class="line">                    HttpHeaders httpHeaders = new HttpHeaders();</span><br><span class="line">                    httpHeaders.setContentType(originalResponseContentType);</span><br><span class="line">                    ResponseAdapter responseAdapter = new ResponseAdapter(body, httpHeaders);</span><br><span class="line">                    DefaultClientResponse clientResponse = new DefaultClientResponse(responseAdapter, ExchangeStrategies.withDefaults());</span><br><span class="line"></span><br><span class="line">                    Mono&lt;DataBuffer&gt; modifiedBody = clientResponse.bodyToMono(DataBuffer.class).map(encrypt(config, new RequestHeaderVo()));</span><br><span class="line"></span><br><span class="line">                    BodyInserter bodyInserter = BodyInserters.fromPublisher(modifiedBody, DataBuffer.class);</span><br><span class="line">                    CachedBodyOutputMessage outputMessage = new CachedBodyOutputMessage(exchange, exchange.getResponse().getHeaders());</span><br><span class="line">                    return bodyInserter.insert(outputMessage, new BodyInserterContext())</span><br><span class="line">                            .then(Mono.defer(() -&gt; &#123;</span><br><span class="line">                                Flux&lt;DataBuffer&gt; messageBody = outputMessage.getBody();</span><br><span class="line">                                HttpHeaders headers = getDelegate().getHeaders();</span><br><span class="line">                                if (headers.getContentLength() &lt; 0 &amp;&amp; !headers.containsKey(HttpHeaders.TRANSFER_ENCODING)) &#123;</span><br><span class="line">                                    messageBody = messageBody.doOnNext(data -&gt; headers.setContentLength(data.readableByteCount()));</span><br><span class="line">                                &#125;</span><br><span class="line">                                return this.getDelegate().writeWith(messageBody);</span><br><span class="line">                            &#125;));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                public Mono&lt;Void&gt; writeAndFlushWith(Publisher&lt;? extends Publisher&lt;? extends DataBuffer&gt;&gt; body) &#123;</span><br><span class="line">                    return writeWith(Flux.from(body)</span><br><span class="line">                            .flatMapSequential(p -&gt; p));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            return chain.filter(exchange.mutate().response(responseDecorator).build());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public int getOrder() &#123;</span><br><span class="line">            return NettyWriteResponseFilter.WRITE_RESPONSE_FILTER_ORDER - 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Function&lt;DataBuffer, DataBuffer&gt; encrypt(Config config, RequestHeaderVo headerVo) &#123;</span><br><span class="line">        if (config.encrypt) &#123;</span><br><span class="line">            return (i) -&gt; &#123;</span><br><span class="line">                InputStream inputStream = i.asInputStream();</span><br><span class="line"></span><br><span class="line">                byte[] bytes = new byte[0];</span><br><span class="line">                try &#123;</span><br><span class="line">                    bytes = new byte[inputStream.available()];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    inputStream.read(bytes);</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                //进行我们的操作</span><br><span class="line">                String body = new String(bytes);</span><br><span class="line">                log.debug(&quot;this is response encrypt&quot;);</span><br><span class="line">                log.debug(body);</span><br><span class="line">                log.debug(headerVo.toString());</span><br><span class="line">//                body = encryptService.responseEncrypt(body, headerVo);</span><br><span class="line"></span><br><span class="line">                //进行我们的操作</span><br><span class="line">                return i.write(TokenGatewayFilterFactory.stringBuffer(body));</span><br><span class="line">//                return i.write(new String(body).getBytes());</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return i -&gt; i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这种例子中，发现修改response body的时候，会引起代码进入NioEventLoop类中的run方法，死循环无法退出，我也不清楚为什么，修改需谨慎。</p>
<p>另一种，跟这位网友写得差不多，只不过我没测试就是了：<a href="https://www.jianshu.com/p/9f00e0e1681c">https://www.jianshu.com/p/9f00e0e1681c</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">        public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;</span><br><span class="line">            return chain.filter(exchange.mutate().response(new ServerHttpResponseDecorator(exchange.getResponse()) &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public Mono&lt;Void&gt; writeWith(Publisher&lt;? extends DataBuffer&gt; body) &#123;</span><br><span class="line">                    DataBufferFactory bufferFactory = exchange.getResponse().bufferFactory();</span><br><span class="line">                    if (getStatusCode().equals(HttpStatus.OK) &amp;&amp; body instanceof Flux) &#123;</span><br><span class="line">                        Flux&lt;? extends DataBuffer&gt; fluxBody = Flux.first(body);</span><br><span class="line">                        return super.writeWith(fluxBody.map(dataBuffer -&gt; &#123;</span><br><span class="line">                            System.out.println(dataBuffer.readableByteCount());</span><br><span class="line"></span><br><span class="line">                            byte[] content = new byte[dataBuffer.readableByteCount()];</span><br><span class="line">                            dataBuffer.read(content);</span><br><span class="line">                            //释放掉内存</span><br><span class="line">                            DataBufferUtils.release(dataBuffer);</span><br><span class="line">                            //responseData就是下游系统返回的内容,可以查看修改</span><br><span class="line">                            String responseData = new String(content, Charset.forName(&quot;UTF-8&quot;));</span><br><span class="line"></span><br><span class="line">                            log.debug(&quot;响应内容:&#123;&#125;&quot;, responseData);</span><br><span class="line">                            log.debug(&quot;this is response encrypt&quot;);</span><br><span class="line">                            System.out.println(responseData);</span><br><span class="line"></span><br><span class="line">                            byte[] newContent = responseData.getBytes();</span><br><span class="line">//                body = encryptService.responseEncrypt(body, headerVo);</span><br><span class="line">                            byte[] uppedContent = new String(newContent, Charset.forName(&quot;UTF-8&quot;)).getBytes();</span><br><span class="line">                            return bufferFactory.wrap(uppedContent);</span><br><span class="line">                        &#125;));</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        log.error(&quot;响应code异常:&#123;&#125;&quot;, getStatusCode());</span><br><span class="line">                    &#125;</span><br><span class="line">                    return super.writeWith(body);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).build());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public int getOrder() &#123;</span><br><span class="line">            return NettyWriteResponseFilter.WRITE_RESPONSE_FILTER_ORDER - 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这个方法会出现问题，body的截取长度经常没有完全。</p>
<p>我本来是到这个网址下面寻找答案，作者是这样回复的：</p>
<p>　　上面只是简单的样例，FIux是发送多个数据的，当报文长时会拆分，处理一次只能拿到一部分报文，可以使用Flux.toArray方法将数据聚合后处理，也可以参照<a href="https://www.jianshu.com/p/9b781fb1aaa0%E9%87%8C%E9%9D%A2%E7%9A%84%E5%93%8D%E5%BA%94%E5%A4%84%E7%90%86%E3%80%82">https://www.jianshu.com/p/9b781fb1aaa0里面的响应处理。</a></p>
<p>确实是这个问题，所以我们也可以仿照他的另外一个例子写，大家可以到他的简书博客中去看，值得提醒的是，他的例子中，版本也是2.0.1,若是版本改为2.1以上，就不能用哦！</p>
<p>这里蛮贴一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.newland.dc.ctid.fileter;</span><br><span class="line"></span><br><span class="line">import com.google.gson.Gson;</span><br><span class="line">import com.newland.dc.common.vo.RequestHeaderVo;</span><br><span class="line">import com.newland.dc.ctid.service.SecurityService;</span><br><span class="line">import com.newland.dc.log.kafka.KafkaLog;</span><br><span class="line">import org.reactivestreams.Publisher;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.cloud.gateway.filter.GatewayFilter;</span><br><span class="line">import org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line">import org.springframework.cloud.gateway.filter.NettyWriteResponseFilter;</span><br><span class="line">import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;</span><br><span class="line">import org.springframework.cloud.gateway.support.*;</span><br><span class="line">import org.springframework.core.Ordered;</span><br><span class="line">import org.springframework.core.io.buffer.DataBuffer;</span><br><span class="line">import org.springframework.core.style.ToStringCreator;</span><br><span class="line">import org.springframework.http.HttpHeaders;</span><br><span class="line">import org.springframework.http.HttpStatus;</span><br><span class="line">import org.springframework.http.MediaType;</span><br><span class="line">import org.springframework.http.ResponseCookie;</span><br><span class="line">import org.springframework.http.client.reactive.ClientHttpResponse;</span><br><span class="line">import org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line">import org.springframework.http.server.reactive.ServerHttpRequestDecorator;</span><br><span class="line">import org.springframework.http.server.reactive.ServerHttpResponse;</span><br><span class="line">import org.springframework.http.server.reactive.ServerHttpResponseDecorator;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.util.MultiValueMap;</span><br><span class="line">import org.springframework.web.reactive.function.client.ExchangeStrategies;</span><br><span class="line">import org.springframework.web.reactive.function.server.ServerRequest;</span><br><span class="line">import org.springframework.web.server.ServerWebExchange;</span><br><span class="line">import reactor.core.publisher.Flux;</span><br><span class="line">import reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.util.*;</span><br><span class="line">import java.util.function.BiFunction;</span><br><span class="line">import java.util.function.Function;</span><br><span class="line"></span><br><span class="line">import static org.springframework.cloud.gateway.support.ServerWebExchangeUtils.ORIGINAL_RESPONSE_CONTENT_TYPE_ATTR;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Auther: garfield</span><br><span class="line"> * @Date: 2019/2/28 上午10:45</span><br><span class="line"> * @Description:</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class EncryptGatewayFilterFactory extends AbstractGatewayFilterFactory&lt;EncryptGatewayFilterFactory.Config&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private static Logger log = LoggerFactory.getLogger(EncryptGatewayFilterFactory.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private SecurityService encryptService;</span><br><span class="line"></span><br><span class="line">    public EncryptGatewayFilterFactory() &#123;</span><br><span class="line">        super(Config.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //    private Gson gson = new GsonBuilder().serializeNulls().create();</span><br><span class="line">    private Gson gson = new Gson();</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;server.host:10.10.10.10&#125;&quot;)</span><br><span class="line">    private String serverHost;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class="line">    private String serverPort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    public GatewayFilter apply(Config config) &#123;</span><br><span class="line">        return new EncryptGatewayFilter(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ServerHttpRequest.Builder mutate(ServerHttpRequest request) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class Config &#123;</span><br><span class="line"></span><br><span class="line">        private boolean encrypt;</span><br><span class="line"></span><br><span class="line">        public boolean isEncrypt() &#123;</span><br><span class="line">            return encrypt;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Config setEncrypt(boolean encrypt) &#123;</span><br><span class="line">            this.encrypt = encrypt;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public String toString() &#123;</span><br><span class="line">            return new ToStringCreator(this)</span><br><span class="line">                    .append(&quot;encrypt&quot;, encrypt)</span><br><span class="line">                    .toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;String&gt; shortcutFieldOrder() &#123;</span><br><span class="line">        return Arrays.asList(&quot;encrypt&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class EncryptGatewayFilter implements GatewayFilter, Ordered &#123;</span><br><span class="line">        Config config;</span><br><span class="line"></span><br><span class="line">        EncryptGatewayFilter(Config config) &#123;</span><br><span class="line">            this.config = config;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">        public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;</span><br><span class="line">            String trace = exchange.getRequest().getHeaders().getFirst(&quot;trace&quot;);</span><br><span class="line">            ServerRequest serverRequest = new DefaultServerRequest(exchange);</span><br><span class="line">            return serverRequest.bodyToMono(String.class).flatMap(reqBody -&gt; &#123;</span><br><span class="line">                //重写原始请求</span><br><span class="line">                ServerHttpRequestDecorator decorator = new ServerHttpRequestDecorator(exchange.getRequest()) &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public HttpHeaders getHeaders() &#123;</span><br><span class="line">                        HttpHeaders httpHeaders = new HttpHeaders();</span><br><span class="line">                        httpHeaders.putAll(super.getHeaders());</span><br><span class="line">                        return httpHeaders;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public Flux&lt;DataBuffer&gt; getBody() &#123;</span><br><span class="line">                        //打印原始请求日志</span><br><span class="line">                        log.info(&quot;[Trace:&#123;&#125;]-gateway request:headers=[&#123;&#125;],body=[&#123;&#125;]&quot;, trace, getHeaders(), reqBody);</span><br><span class="line">                        return Flux.just(reqBody).map(bx -&gt; exchange.getResponse().bufferFactory().wrap(bx.getBytes()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                //重写原始响应</span><br><span class="line">                BodyHandlerServerHttpResponseDecorator responseDecorator = new BodyHandlerServerHttpResponseDecorator(</span><br><span class="line">                        initBodyHandler(exchange), exchange.getResponse());</span><br><span class="line"></span><br><span class="line">                return chain.filter(exchange.mutate().request(decorator).response(responseDecorator).build());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public int getOrder() &#123;</span><br><span class="line">            return NettyWriteResponseFilter.WRITE_RESPONSE_FILTER_ORDER - 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public interface BodyHandlerFunction</span><br><span class="line">            extends BiFunction&lt;ServerHttpResponse, Publisher&lt;? extends DataBuffer&gt;, Mono&lt;Void&gt;&gt; &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected BodyHandlerFunction initBodyHandler(ServerWebExchange exchange) &#123;</span><br><span class="line">        return (resp, body) -&gt; &#123;</span><br><span class="line">            //拦截</span><br><span class="line">            MediaType originalResponseContentType = exchange.getAttribute(ORIGINAL_RESPONSE_CONTENT_TYPE_ATTR);</span><br><span class="line">            HttpHeaders httpHeaders = new HttpHeaders();</span><br><span class="line">            httpHeaders.setContentType(originalResponseContentType);</span><br><span class="line">            DefaultClientResponseAdapter clientResponseAdapter = new DefaultClientResponseAdapter(body, httpHeaders);</span><br><span class="line">            Mono&lt;String&gt; bodyMono = clientResponseAdapter.bodyToMono(String.class);</span><br><span class="line">            //此处可以获得前面放置的参数</span><br><span class="line">            return bodyMono.flatMap((respBody) -&gt; &#123;</span><br><span class="line">//                打印返回响应日志</span><br><span class="line">                System.out.println(respBody);</span><br><span class="line">                return resp.writeWith(Flux.just(respBody).map(bx -&gt; resp.bufferFactory().wrap(bx.getBytes())));</span><br><span class="line">            &#125;).then();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    public static class DefaultClientResponseAdapter extends DefaultClientResponse &#123;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * @param body</span><br><span class="line">         * @param httpHeaders</span><br><span class="line">         */</span><br><span class="line">        public DefaultClientResponseAdapter(Publisher&lt;? extends DataBuffer&gt; body,</span><br><span class="line">                                            HttpHeaders httpHeaders) &#123;</span><br><span class="line">            this(new ResponseAdapter(body, httpHeaders),</span><br><span class="line">                    ExchangeStrategies.withDefaults());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * @param response</span><br><span class="line">         * @param strategies</span><br><span class="line">         */</span><br><span class="line">        public DefaultClientResponseAdapter(ClientHttpResponse response,</span><br><span class="line">                                            ExchangeStrategies strategies) &#123;</span><br><span class="line">            super(response, strategies);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * ClientHttpResponse 适配器</span><br><span class="line">         */</span><br><span class="line">        static class ResponseAdapter implements ClientHttpResponse &#123;</span><br><span class="line">            /**</span><br><span class="line">             * 响应数据</span><br><span class="line">             */</span><br><span class="line">            private final Flux&lt;DataBuffer&gt; flux;</span><br><span class="line">            /**</span><br><span class="line">             *</span><br><span class="line">             */</span><br><span class="line">            private final HttpHeaders headers;</span><br><span class="line"></span><br><span class="line">            public ResponseAdapter(Publisher&lt;? extends DataBuffer&gt; body,</span><br><span class="line">                                   HttpHeaders headers) &#123;</span><br><span class="line">                this.headers = headers;</span><br><span class="line">                if (body instanceof Flux) &#123;</span><br><span class="line">                    flux = (Flux) body;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    flux = ((Mono) body).flux();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public Flux&lt;DataBuffer&gt; getBody() &#123;</span><br><span class="line">                return flux;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public HttpHeaders getHeaders() &#123;</span><br><span class="line">                return headers;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public HttpStatus getStatusCode() &#123;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public int getRawStatusCode() &#123;</span><br><span class="line">                return 0;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public MultiValueMap&lt;String, ResponseCookie&gt; getCookies() &#123;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class BodyHandlerServerHttpResponseDecorator extends ServerHttpResponseDecorator &#123;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * body 处理拦截器</span><br><span class="line">         */</span><br><span class="line">        private BodyHandlerFunction bodyHandler = initDefaultBodyHandler();</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 构造函数</span><br><span class="line">         *</span><br><span class="line">         * @param bodyHandler</span><br><span class="line">         * @param delegate</span><br><span class="line">         */</span><br><span class="line">        public BodyHandlerServerHttpResponseDecorator(BodyHandlerFunction bodyHandler, ServerHttpResponse delegate) &#123;</span><br><span class="line">            super(delegate);</span><br><span class="line">            if (bodyHandler != null) &#123;</span><br><span class="line">                this.bodyHandler = bodyHandler;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public Mono&lt;Void&gt; writeWith(Publisher&lt;? extends DataBuffer&gt; body) &#123;</span><br><span class="line">            //body 拦截处理器处理响应</span><br><span class="line">            return bodyHandler.apply(getDelegate(), body);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public Mono&lt;Void&gt; writeAndFlushWith(Publisher&lt;? extends Publisher&lt;? extends DataBuffer&gt;&gt; body) &#123;</span><br><span class="line">            return writeWith(Flux.from(body).flatMapSequential(p -&gt; p));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 默认body拦截处理器</span><br><span class="line">         *</span><br><span class="line">         * @return</span><br><span class="line">         */</span><br><span class="line">        private BodyHandlerFunction initDefaultBodyHandler() &#123;</span><br><span class="line">            return (resp, body) -&gt; resp.writeWith(body);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么万事具备，代码都写好了，我们又需要进行性能测试。这边要记住，我用的是官方的那个例子，其他的写法也用过了，但是结果差不多。</p>
<h1 id="4-再一次测试spring-cloud-gateway-网关路由性能"><a href="#4-再一次测试spring-cloud-gateway-网关路由性能" class="headerlink" title="4.再一次测试spring-cloud-gateway 网关路由性能"></a>4.再一次测试spring-cloud-gateway 网关路由性能</h1><p>　　step.1：性能测试，改一下配置，表示加入了过滤器。这里为什么只有一个过滤器，因为这个过滤器问题比较大，过程就略过了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- id: an</span><br><span class="line">        uri: http://10.1.4.32:14077/hello</span><br><span class="line">        predicates:</span><br><span class="line">        - Path=/an</span><br><span class="line">        filters:</span><br><span class="line">        - An</span><br></pre></td></tr></table></figure>
<p>　经过多次测试，其他的过滤器都还好，只有修改response body的过滤器，严重影响性能，且有读写错误。</p>
<p>　　step.2：测试，以及测试结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[wrk@localhost wrk]$ ./wrk  -t 15 -c500 -d 10 --latency -s scripts/gateway.lua  http://10.1.4.32:14077/an</span><br><span class="line">Running 10s test @ http://10.1.4.32:14077/an</span><br><span class="line">  15 threads and 500 connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency     1.03s   488.75ms   2.00s    60.62%</span><br><span class="line">    Req/Sec    26.59     13.84    80.00     67.60%</span><br><span class="line">  Latency Distribution</span><br><span class="line">     50%  931.54ms</span><br><span class="line">     75%    1.45s</span><br><span class="line">     90%    1.76s</span><br><span class="line">     99%    1.97s</span><br><span class="line">  3848 requests in 10.10s, 1.64MB read</span><br><span class="line">  Socket errors: connect 0, read 0, write 0, timeout 458</span><br><span class="line">Requests/sec:    381.05</span><br><span class="line">Transfer/sec:    166.71KB</span><br></pre></td></tr></table></figure>
<p>结果多出一行，socket错误，而且还是超时,而且，日志中也存在错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2019-03-06T16:09:33,396|INFO ||AsyncResolver-bootstrap-executor-0||||Resolving eureka endpoints via configuration</span><br><span class="line">2019-03-06T16:10:38,268|ERROR||reactor-http-server-epoll-18||||Unhandled failure: Connection has been closed, response already set (status=200)</span><br><span class="line">2019-03-06T16:10:38,268|WARN ||reactor-http-server-epoll-18||||Handling completed with error: Connection has been closed</span><br><span class="line">2019-03-06T16:10:38,269|ERROR||reactor-http-server-epoll-18||||Unhandled failure: null, response already set (status=200)</span><br><span class="line">2019-03-06T16:10:38,269|WARN ||reactor-http-server-epoll-18||||Handling completed with error: null</span><br><span class="line">2019-03-06T16:10:38,294|ERROR||reactor-http-server-epoll-18||||Unhandled failure: syscall:write(..) failed: 断开的管道, response already set (status=null)</span><br><span class="line">2019-03-06T16:10:38,294|WARN ||reactor-http-server-epoll-18||||Handling completed with error: syscall:write(..) failed: 断开的管道</span><br><span class="line">2019-03-06T16:10:38,306|ERROR||reactor-http-server-epoll-23||||Unhandled failure: syscall:write(..) failed: 断开的管道, response already set (status=null)</span><br><span class="line">2019-03-06T16:10:38,306|WARN ||reactor-http-server-epoll-23||||Handling completed with error: syscall:write(..) failed: 断开的管道</span><br><span class="line">2019-03-06T16:14:33,397|INFO ||AsyncResolver-bootstrap-executor-0||||Resolving eureka endpoints via configuration</span><br></pre></td></tr></table></figure>
<p>这个问题很严重了，因为单个请求的时候，并不会报错，这个错误只发生在高并发压测下，无法追踪。最重要的是，我们看到性能只剩下300/s，这是万万不能接受的，生产更不能接收。</p>
<p>这个问题很难解释，因为我们采用的是官方提供的写法，我们回头看官方的修改response 类，好吧，不用看了，因为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.springframework.cloud.gateway.filter.factory.rewrite;</span><br><span class="line">/**</span><br><span class="line"> * This filter is BETA and may be subject to change in a future release.</span><br><span class="line"> */</span><br><span class="line">public class ModifyResponseBodyGatewayFilterFactory</span><br><span class="line">        extends AbstractGatewayFilterFactory&lt;ModifyResponseBodyGatewayFilterFactory.Config&gt; &#123;</span><br></pre></td></tr></table></figure>
<p>官方已经说了，这是测试版本，不顶用。</p>
<p>不死心，又想起了gateway提供的GlobalFilter，将刚才的代码写到全局过滤器中再试试，但是结果相同！</p>
<p>凉凉…</p>
<p>跪求结论跟我不同的启发文档，或者只能等下一版本了。</p>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,Spring Cloud,gateway</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud之Ribbon与Nginx区别</title>
    <url>/post/df3f870a.html</url>
    <content><![CDATA[<h2 id="客户端负载均衡器"><a href="#客户端负载均衡器" class="headerlink" title="客户端负载均衡器"></a>客户端负载均衡器</h2><p> 在SpringCloud中Ribbon负载均衡客户端，会从eureka注册中心服务器端上获取服务注册信息列表，缓存到本地。</p>
<p>让后在本地实现轮训负载均衡策略。</p>
<h3 id="Ribbon与Nginx区别"><a href="#Ribbon与Nginx区别" class="headerlink" title="Ribbon与Nginx区别"></a>Ribbon与Nginx区别</h3><h4 id="1-服务器端负载均衡Nginx"><a href="#1-服务器端负载均衡Nginx" class="headerlink" title="1.服务器端负载均衡Nginx"></a>1.服务器端负载均衡Nginx</h4><p> nginx是客户端所有请求统一交给nginx，由nginx进行实现负载均衡请求转发，属于服务器端负载均衡。</p>
<p> 既请求有nginx服务器端进行转发。</p>
<h4 id="2-客户端负载均衡Ribbon"><a href="#2-客户端负载均衡Ribbon" class="headerlink" title="2.客户端负载均衡Ribbon"></a>2.客户端负载均衡Ribbon</h4><p> Ribbon是从eureka注册中心服务器端上获取服务注册信息列表，缓存到本地，让后在本地实现轮训负载均衡策略。</p>
<p> 既在客户端实现负载均衡。</p>
<h4 id="应用场景的区别："><a href="#应用场景的区别：" class="headerlink" title="应用场景的区别："></a>应用场景的区别：</h4><p>Nginx适合于服务器端实现负载均衡 比如Tomcat ，Ribbon适合与在微服务中RPC远程调用实现本地服务负载均衡，比如Dubbo、SpringCloud中都是采用本地负载均衡。</p>
<p>Ribbon是Spring Cloud （本地）客户端负载均衡器</p>
<p>Ribbon底层实现：</p>
<p>Member：</p>
<p><img src="/../images/SpringCloud%E4%B9%8BRibbon%E4%B8%8ENginx%E5%8C%BA%E5%88%AB/1179709-20181113184559311-1185030590.png" alt="img"></p>
<p>pom：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;groupId&gt;com.toov5&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;member&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;!-- 管理依赖 --&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;Finchley.M7&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- SpringBoot整合Web组件 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- SpringBoot整合eureka客户端 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">    &lt;!-- 注意： 这里必须要添加， 否者各种依赖有问题 --&gt;</span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;spring-milestones&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Spring Milestones&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;https://repo.spring.io/libs-milestone&lt;/url&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">                &lt;enabled&gt;false&lt;/enabled&gt;</span><br><span class="line">            &lt;/snapshots&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">    &lt;/repositories&gt;</span><br><span class="line">   </span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<p>　　yml：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">###服务启动端口号</span><br><span class="line">server:</span><br><span class="line">  port: 8009</span><br><span class="line">###服务名称(服务注册到eureka名称) </span><br><span class="line">spring:</span><br><span class="line">    application:</span><br><span class="line">        name: app-toov5-member</span><br><span class="line">###服务注册到eureka地址</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">    ##当前会员注册到eureka服务  地址+端口号</span><br><span class="line">           defaultZone: http://127.0.0.1:8100/eureka</span><br><span class="line">            </span><br><span class="line">###因为该应用为注册中心，不会注册自己</span><br><span class="line">    register-with-eureka: true</span><br><span class="line">###是否需要从eureka上获取注册信息</span><br><span class="line">    fetch-registry: true</span><br></pre></td></tr></table></figure>
<p>Controller类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.toov5.api.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class MemberApiController &#123;</span><br><span class="line">    @Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class="line">    private String serverPort;</span><br><span class="line">    </span><br><span class="line">    @RequestMapping(&quot;/getMember&quot;)</span><br><span class="line">  public String getMember() &#123;</span><br><span class="line">        return &quot;会员服务&quot;+serverPort;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　</p>
<p>启动类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.toov5.api;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient   //注册到eureka</span><br><span class="line">public class AppMember &#123;</span><br><span class="line">   </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(AppMember.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p> Order</p>
<p><img src="/../images/SpringCloud%E4%B9%8BRibbon%E4%B8%8ENginx%E5%8C%BA%E5%88%AB/1179709-20181113184624325-126239670.png" alt="img"></p>
<p> Controlller</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.toov5.api.controller;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.cloud.client.ServiceInstance;</span><br><span class="line">import org.springframework.cloud.client.discovery.DiscoveryClient;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">//纯手写Ribbon本地负载均衡</span><br><span class="line">@RestController</span><br><span class="line">public class ExtRibbonController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private DiscoveryClient discoveryClient;</span><br><span class="line">    @Autowired</span><br><span class="line">    private RestTemplate restTemplate;</span><br><span class="line">    //定义请求数</span><br><span class="line">    private int reqCount;</span><br><span class="line">    </span><br><span class="line">@RequestMapping(&quot;/ribbonMember&quot;)    </span><br><span class="line">   public String ribbonMember() &#123;</span><br><span class="line">       //互殴去对应服务器远程调用地址</span><br><span class="line">      String  instanceUrl =  getInstance()+&quot;/getMember&quot;;</span><br><span class="line">      System.out.println(&quot;instanceUrl&quot;+instanceUrl);</span><br><span class="line">        //直接使用httpclient远程调用。本次使用rest方式</span><br><span class="line">      String result = restTemplate.getForObject(instanceUrl, String.class);  //底层使用httpclient实现的</span><br><span class="line">       return result;</span><br><span class="line">   &#125;</span><br><span class="line">   private String getInstance() &#123;</span><br><span class="line">       List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(&quot;app-toov5-member&quot;);</span><br><span class="line">       if (instances==null || instances.size()==0) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">       int instanceSize = instances.size();</span><br><span class="line">       int serviceIndex = reqCount%instanceSize;</span><br><span class="line">       reqCount++;</span><br><span class="line">        </span><br><span class="line">       return instances.get(serviceIndex).getUri().toString();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 启动类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.toov5.api.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">public class AppOrder &#123;</span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">    SpringApplication.run(AppOrder.class, args);</span><br><span class="line">&#125;</span><br><span class="line">  //解决RestTemplate找不到问题  把restTemplate注册到Spring Boot容器中</span><br><span class="line">  @Bean</span><br><span class="line">//  @LoadBalanced   手写的 不要去实现本地负载均衡效果了</span><br><span class="line">  RestTemplate restTemplate() &#123;  </span><br><span class="line">      return new RestTemplate();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>yml：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">###服务启动端口号</span><br><span class="line">server:</span><br><span class="line">  port: 8002</span><br><span class="line">###服务名称(服务注册到eureka名称) </span><br><span class="line">spring:</span><br><span class="line">    application:</span><br><span class="line">        name: app-toov5-order</span><br><span class="line">###服务注册到eureka地址</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">           defaultZone: http://127.0.0.1:8100/eureka</span><br><span class="line"> </span><br><span class="line">            </span><br><span class="line">###因为该应用为注册中心，不会注册自己</span><br><span class="line">    register-with-eureka: true</span><br><span class="line">###是否需要从eureka上获取注册信息</span><br><span class="line">    fetch-registry: true</span><br></pre></td></tr></table></figure>
<p>　　pom</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;groupId&gt;com.toov5&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;order&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">   </span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;!-- 管理依赖 --&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;Finchley.M7&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- SpringBoot整合Web组件 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- SpringBoot整合eureka客户端 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">    &lt;!-- 注意： 这里必须要添加， 否者各种依赖有问题 --&gt;</span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;spring-milestones&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Spring Milestones&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;https://repo.spring.io/libs-milestone&lt;/url&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">                &lt;enabled&gt;false&lt;/enabled&gt;</span><br><span class="line">            &lt;/snapshots&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">    &lt;/repositories&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<p>　　Eureka</p>
<p><img src="/../images/SpringCloud%E4%B9%8BRibbon%E4%B8%8ENginx%E5%8C%BA%E5%88%AB/1179709-20181113184844503-1361456430.png" alt="img"></p>
<p> pom</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;groupId&gt;com.toov5&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;SpringCloud-eureka-server&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;!-- 管理依赖 --&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;Finchley.M7&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!--SpringCloud eureka-server --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">    &lt;!-- 注意： 这里必须要添加， 否者各种依赖有问题 --&gt;</span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;spring-milestones&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Spring Milestones&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;https://repo.spring.io/libs-milestone&lt;/url&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">                &lt;enabled&gt;false&lt;/enabled&gt;</span><br><span class="line">            &lt;/snapshots&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">    &lt;/repositories&gt;</span><br><span class="line">   </span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<p>　　yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">###eureka 服务端口号</span><br><span class="line">server:</span><br><span class="line">  port: 8100</span><br><span class="line">###服务注册名称</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">  ##注册中心ip地址</span><br><span class="line">    hostname: 127.0.0.1</span><br><span class="line">###客户端调用地址</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br><span class="line">###因为该应用为注册中心，不会注册自己 （集群设为true）</span><br><span class="line">    register-with-eureka: false</span><br><span class="line">###因为自己为注册中心 ,不会去在该应用中的检测服务</span><br><span class="line">    fetch-registry: false</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.toov5;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line">@EnableEurekaServer   //开启注册中心</span><br><span class="line">@SpringBootApplication </span><br><span class="line">public class AppEureka &#123;</span><br><span class="line">  </span><br><span class="line">     public static void main(String[] args) &#123;</span><br><span class="line">           SpringApplication.run(AppEureka.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>启动访问：</p>
<p><img src="/../images/SpringCloud%E4%B9%8BRibbon%E4%B8%8ENginx%E5%8C%BA%E5%88%AB/1179709-20181113185032911-1693616386.png" alt="img"></p>
<p><img src="/../images/SpringCloud%E4%B9%8BRibbon%E4%B8%8ENginx%E5%8C%BA%E5%88%AB/1179709-20181113185052579-650600688.png" alt="img"></p>
<p><img src="/../images/SpringCloud%E4%B9%8BRibbon%E4%B8%8ENginx%E5%8C%BA%E5%88%AB/1179709-20181113185107166-1360521703.png" alt="img"></p>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,spring cloud,Ribbon,Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud与Docker的完美结合</title>
    <url>/post/f3f40532.html</url>
    <content><![CDATA[<p> 运维号称背锅侠，系统升级出现问题、网络出现问题、系统宕机等都会被推到运维头上，就连各大网络公司平台一旦出现问题，也总是运维人员来背锅，包括前段时间阿里云故障，据说也是运维失误造成的！这些问题说明运维工作的复杂性、重要性以及危险性，稍有不慎就有可能“灾难降临”。我以前的一个运维同事经常说，每次升级的时候都胆战心惊，真应该请尊菩萨来拜拜，而我也何尝不是呢？曾经我们每次升级都不是那么顺利，总会有不同的问题出现，复杂的时候可能会折腾一宿。印象最深刻的一次是因为运维升级的失误差点让我们整个技术团队集体“下课”：那天下午两点当时公司的老板要参加一个互联网大会来宣传我们平台的新产品，而我们由于系统还有一些问题需要临时升级，本来想着挺简单的一次升级，却在升级过程中由于操作不当整个平台被全部宕掉，怎么都无法启动。当时脑子一片混乱、手脚发麻（因为我是技术负责人），却怎么也排查不出问题，我当时都想好了要引咎辞职，幸好在大会开始前半个小时终于查到了原因，顺利的恢复了系统的运行！这次事件给我们所有人都上了一课，一定要重视运维，并且一定要做到全自动化运维，一键部署那种！但是由于当时我们技术的局限性，运维人员也不是太专业，好的运维人员又请不起，我们只能自己研究，自己一点点去完善。</p>
<p>​     后来我在搭建新的技术平台做技术选型时采用了spring cloud这种新型微服务架构，在研究这个框架时接触到了docker，在深入了解spring cloud和docker的机制及运行特性后，我看到了一键式部署的曙光！说干就干，我马上召集了我团队的另外一个技术人员，我们分工研究，并结合阿里云平台，最终完美实现了真正的一键部署！下面我主要介绍一下我们的搭建思路，本文仅提供大致的解决方案，不去做深入的理论探讨，由于作者水平有限、平台较小，所以很多问题可能没有考虑到或者没有做到更好，也欢迎大家共同探讨！</p>
<p>​    <strong>一、采用swarm集群</strong></p>
<p>​    由于多docker之间的相互访问只能在同一宿主机，而我们在真正使用中肯定不止一台宿主机，所以我们采用了swarm集群！我的理解是swarm集群将多台宿主机装在一个大的主机盒子里，让docker认为swarm集群就是一台大的宿主机，从而实现只要在这个大的集群中所有的docker均可相互访问。当然，我们宿主机全部采用的是阿里云的ECS，所以我们也就理所应当的采用了阿里云的Swarm集群！</p>
<p><img src="/../images/SpringCloud%E4%B8%8EDocker%E7%9A%84%E5%AE%8C%E7%BE%8E%E7%BB%93%E5%90%88/2018090212004852.jpg" alt="img"></p>
<p>​    <strong>二、将服务打包成镜像</strong></p>
<p>​    Docker一般采用“一个容器一个进程”的方式，而我们每个微服务也都是一个spring boot应用单进程，直接采用java -jar的形式即可运行应用，那么我们只需将我们的一个服务打包到一个镜像中即可。那你可能要问了，那不同环境下配置文件不同，岂不是不同环境同一个服务要打多个镜像？非也，你可能忘了spring cloud是有专门的配置管理服务的，spring boot是可以读取docker中的环境变量的，而docker的启动是可以采用docker-compose来编排指定的，我们放在后边讨论！我们是采用maven来管理项目的，打包镜像这事是否也可以交给maven来做呢？是的，maven有专门提供docker打包的插件！每个服务下面都有一个专门的docker目录，放置了Dockerfile及镜像中需要用到的文件，Dockerfile的内容就不再专门讲解了，你可以根据自己项目情况来编写自己的Dockerfile！需要注意的是截图中的镜像版本号是一个动态的，每次升级可能都会进行改变，方便紧急的时候回退到某个版本。</p>
<p><img src="/../images/SpringCloud%E4%B8%8EDocker%E7%9A%84%E5%AE%8C%E7%BE%8E%E7%BB%93%E5%90%88/20180902120127609.jpg" alt="img"></p>
<p>​     <strong>三、配置Jenkins</strong></p>
<p>​    采用jenkins来进行统一的项目打包、镜像推送。其实我说的一键部署就是指Jenkins中的“立即构建”这一键！jenkins普通的打包编译配置就不再讲了，主要就是下图中来真正实现这关键的一键的。通过下图shell操作后jenkins会将打好的镜像包推送到阿里云容器服务中的镜像库中。</p>
<p><img src="/../images/SpringCloud%E4%B8%8EDocker%E7%9A%84%E5%AE%8C%E7%BE%8E%E7%BB%93%E5%90%88/20180902120149613.jpg" alt="img"></p>
<p><img src="/../images/SpringCloud%E4%B8%8EDocker%E7%9A%84%E5%AE%8C%E7%BE%8E%E7%BB%93%E5%90%88/201809021202081.jpg" alt="img"></p>
<p>​    <strong>四、用docker-compose进行服务编排</strong></p>
<p>​    微服务一般都会有数个、数十个甚至数百个服务在运行，而且每个服务有可能还会同时跑多个，我们不可能手动进行启动运行，那么这时候我们就需要进行服务编排了！</p>
<p><img src="/../images/SpringCloud%E4%B8%8EDocker%E7%9A%84%E5%AE%8C%E7%BE%8E%E7%BB%93%E5%90%88/20180902120233523.jpg" alt="img"></p>
<p><img src="/../images/SpringCloud%E4%B8%8EDocker%E7%9A%84%E5%AE%8C%E7%BE%8E%E7%BB%93%E5%90%88/20180902120251297.jpg" alt="img"></p>
<p>这里我们指定了该服务启动时的运行环境、运行数量、数据卷映射（可以创建NAS数据卷做为通用数据存储）、指向的阿里云SLB等，结合着spring cloud的统一配置服务，我们可以通过采用不同的docker-compose编排来区分不同环境</p>
<p><img src="/../images/SpringCloud%E4%B8%8EDocker%E7%9A%84%E5%AE%8C%E7%BE%8E%E7%BB%93%E5%90%88/20180902120343446.jpg" alt="img"></p>
<p>   <strong>五、创建应用</strong></p>
<p>  在服务编排做好之后，就可以直接使用该服务编排去创建一个应用了，创建完成之后即可直接进行启动</p>
<p><img src="/../images/SpringCloud%E4%B8%8EDocker%E7%9A%84%E5%AE%8C%E7%BE%8E%E7%BB%93%E5%90%88/20180902120402116.jpg" alt="img"></p>
<p><img src="/../images/SpringCloud%E4%B8%8EDocker%E7%9A%84%E5%AE%8C%E7%BE%8E%E7%BB%93%E5%90%88/20180902120423888.jpg" alt="img"></p>
<p>启动中指定要使用的镜像版本，请关联第二步的镜像版本号</p>
<p><img src="/../images/SpringCloud%E4%B8%8EDocker%E7%9A%84%E5%AE%8C%E7%BE%8E%E7%BB%93%E5%90%88/20180902120445712.jpg" alt="img"></p>
<p><img src="/../images/SpringCloud%E4%B8%8EDocker%E7%9A%84%E5%AE%8C%E7%BE%8E%E7%BB%93%E5%90%88/20180902120508134.jpg" alt="img"></p>
<p>补充，第三步的时候并没有真正的完全做到一键部署，除了点击立即构建之外，还需要到阿里云容器服务的应用中点击重新部署，如果需要完全实现一键部署，那就需要在应用中创建触发器，并完善到jenkins配置的脚本中即可</p>
<p><img src="/../images/SpringCloud%E4%B8%8EDocker%E7%9A%84%E5%AE%8C%E7%BE%8E%E7%BB%93%E5%90%88/20180902120532622.jpg" alt="img"></p>
<p>​    <strong>六、部署到生产环境</strong></p>
<p>​    测试通过之后需要部署到生产环境，传统的部署方式要么是通过对测试通过的代码包进行拷贝，并对配置文件进行更改；要么就是通过svn/git中的版本控制从测试到生产的迁移，再进行jenkins的预生产环境测试，但是无论哪种部署方式都很容易出问题：一、漏改、错改配置文件；二、代码合并/迁移过程中产生新的问题；三、生产、测试服务器环境不同，环境差异造成的问题。但docker镜像是一个单进程的应用，而且只要宿主机运行docker没问题，那么docker重的环境也不会出现任何问题，我们将通过测试的应用从测试环境迁移到生产环境就很简单了，只用提供不同的docker-compose服务编排，生产环境直接通过变更配置更改镜像版本号即可</p>
<p>​    <strong>七、日志采集</strong></p>
<p>​    Docker容器无法进行存储，只要容器重新启动，那么所有在启动过程中产生的数据都不复存在，如何存储日志呢？第四步中我们做的数据卷映射就可以派上用场了，我们采用的是一个网络NAS盘，将这块硬盘同时挂载到另外一台单独的ECS服务器上就可以访问所有的日志文件了，这里我采用的是ELK来进行日志搜集，这里就不再细讲了</p>
<p><img src="/../images/SpringCloud%E4%B8%8EDocker%E7%9A%84%E5%AE%8C%E7%BE%8E%E7%BB%93%E5%90%88/20180902120602746.jpg" alt="img"></p>
<p> 通过以上操作，我们真正的实现了一键式部署，而且阿里云针对swarm集群提供了各种方式的数据监控，完全可以满足你的要求！对于集群扩容也很简单，只用选择相应的集群，直接选择添加已有节点或扩容即可随时扩容，你需要做的就是点击下相应应用的重新部署即可。我们现在有数十台服务器，而且没有运维人员，只安排了一个研发工程师来进行日常的升级部署，已经稳定运行了一年多。在日常的升级过程中，除了偶尔的服务器硬件不足，从来没有再出现过因部署失误而产生的问题！</p>
<p>  再次强调以上方案仅供小公司运维参考，由于本人运维经验有限，可能会有很多考虑不足的地方，欢迎指正探讨，我们只为系统更稳定！</p>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,Spring Cloud,Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud体系介绍</title>
    <url>/post/ed863d59.html</url>
    <content><![CDATA[<p>微服务的概念源于2014年3月Martin Fowler所写的一篇文章“Microservices”。</p>
<p>微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间互相协调、互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制互相沟通（通常是基于HTTP的RESTful API）。每个服务都围绕着具体业务进行构建，并且能够被独立地部署到生产环境、类生产环境等。另外，应尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建。</p>
<p>微服务是一种架构风格，一个大型复杂软件应用由一个或多个微服务组成。系统中的各个微服务可被独立部署，各个微服务之间是松耦合的。每个微服务仅关注于完成一件任务并很好地完成该任务。在所有情况下，每个任务代表着一个小的业务能力。</p>
<h3 id="微服务架构优势"><a href="#微服务架构优势" class="headerlink" title="微服务架构优势"></a>微服务架构优势</h3><p>复杂度可控：在将应用分解的同时，规避了原本复杂度无止境的积累。每一个微服务专注于单一功能，并通过定义良好的接口清晰表述服务边界。由于体积小、复杂度低，每个微服务可由一个小规模开发团队完全掌控，易于保持高可维护性和开发效率。</p>
<p>独立部署：由于微服务具备独立的运行进程，所以每个微服务也可以独立部署。当某个微服务发生变更时无需编译、部署整个应用。由微服务组成的应用相当于具备一系列可并行的发布流程，使得发布更加高效，同时降低对生产环境所造成的风险，最终缩短应用交付周期。</p>
<p>技术选型灵活：微服务架构下，技术选型是去中心化的。每个团队可以根据自身服务的需求和行业发展的现状，自由选择最适合的技术栈。由于每个微服务相对简单，故需要对技术栈进行升级时所面临的风险就较低，甚至完全重构一个微服务也是可行的。</p>
<p>容错：当某一组建发生故障时，在单一进程的传统架构下，故障很有可能在进程内扩散，形成应用全局性的不可用。在微服务架构下，故障会被隔离在单个服务中。若设计良好，其他服务可通过重试、平稳退化等机制实现应用层面的容错。</p>
<p>扩展：单块架构应用也可以实现横向扩展，就是将整个应用完整的复制到不同的节点。当应用的不同组件在扩展需求上存在差异时，微服务架构便体现出其灵活性，因为每个服务可以根据实际需求独立进行扩展。</p>
<h3 id="什么是Spring-Boot"><a href="#什么是Spring-Boot" class="headerlink" title="什么是Spring Boot"></a>什么是Spring Boot</h3><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。用我的话来理解，就是Spring Boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，Spring Boot整合了所有的框架（不知道这样比喻是否合适）。</p>
<p>Spring Boot简化了基于Spring的应用开发，通过少量的代码就能创建一个独立的、产品级别的Spring应用。 Spring Boot为Spring平台及第三方库提供开箱即用的设置，这样你就可以有条不紊地开始。Spring Boot的核心思想就是约定大于配置，多数Spring Boot应用只需要很少的Spring配置。采用Spring Boot可以大大的简化你的开发模式，所有你想集成的常用框架，它都有对应的组件支持。</p>
<h3 id="Spring-Cloud都做了哪些事"><a href="#Spring-Cloud都做了哪些事" class="headerlink" title="Spring Cloud都做了哪些事"></a>Spring Cloud都做了哪些事</h3><p>Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包</p>
<p>以下为Spring Cloud的核心功能：</p>
<ul>
<li>分布式/版本化配置</li>
<li>服务注册和发现</li>
<li>路由</li>
<li>服务和服务之间的调用</li>
<li>负载均衡</li>
<li>断路器</li>
<li>分布式消息传递</li>
</ul>
<p>我们再来看一张图：</p>
<p><img src="/../images/SpringCloud%E4%BD%93%E7%B3%BB%E4%BB%8B%E7%BB%8D/20180207215150790.png" alt="img"></p>
<p>通过这张图，我们来了解一下各组件配置使用运行流程：</p>
<ul>
<li>1、请求统一通过API网关（Zuul）来访问内部服务.</li>
<li>2、网关接收到请求后，从注册中心（Eureka）获取可用服务</li>
<li>3、由Ribbon进行均衡负载后，分发到后端具体实例</li>
<li>4、微服务之间通过Feign进行通信处理业务</li>
<li>5、Hystrix负责处理服务超时熔断</li>
<li>6、Turbine监控服务间的调用和熔断相关指标</li>
</ul>
<h3 id="Spring-Cloud体系介绍"><a href="#Spring-Cloud体系介绍" class="headerlink" title="Spring Cloud体系介绍"></a>Spring Cloud体系介绍</h3><p>上图只是Spring Cloud体系的一部分，Spring Cloud共集成了19个子项目，里面都包含一个或者多个第三方的组件或者框架！</p>
<p>Spring Cloud 工具框架</p>
<p>1、Spring Cloud Config 配置中心，利用git集中管理程序的配置。 </p>
<p>2、Spring Cloud Netflix 集成众多Netflix的开源软件<br>3、Spring Cloud Bus 消息总线，利用分布式消息将服务和服务实例连接在一起，用于在一个集群中传播状态的变化<br>4、Spring Cloud for Cloud Foundry 利用Pivotal Cloudfoundry集成你的应用程序<br>5、Spring Cloud Cloud Foundry Service Broker 为建立管理云托管服务的服务代理提供了一个起点。<br>6、Spring Cloud Cluster 基于Zookeeper, Redis, Hazelcast, Consul实现的领导选举和平民状态模式的抽象和实现。<br>7、Spring Cloud Consul 基于Hashicorp Consul实现的服务发现和配置管理。<br>8、Spring Cloud Security 在Zuul代理中为OAuth2 rest客户端和认证头转发提供负载均衡<br>9、Spring Cloud Sleuth SpringCloud应用的分布式追踪系统，和Zipkin，HTrace，ELK兼容。<br>10、Spring Cloud Data Flow 一个云本地程序和操作模型，组成数据微服务在一个结构化的平台上。<br>11、Spring Cloud Stream 基于Redis,Rabbit,Kafka实现的消息微服务，简单声明模型用以在Spring Cloud应用中收发消息。<br>12、Spring Cloud Stream App Starters 基于Spring Boot为外部系统提供spring的集成<br>13、Spring Cloud Task 短生命周期的微服务，为SpringBooot应用简单声明添加功能和非功能特性。<br>14、Spring Cloud Task App Starters<br>15、Spring Cloud Zookeeper 服务发现和配置管理基于Apache Zookeeper。<br>16、Spring Cloud for Amazon Web Services 快速和亚马逊网络服务集成。<br>17、Spring Cloud Connectors 便于PaaS应用在各种平台上连接到后端像数据库和消息经纪服务。<br>18、Spring Cloud Starters （项目已经终止并且在Angel.SR2后的版本和其他项目合并）<br>19、Spring Cloud CLI 插件用Groovy快速的创建Spring Cloud组件应用。</p>
<blockquote>
<p>当然这个数量还在一直增加…</p>
</blockquote>
<h3 id="三者之间的关系"><a href="#三者之间的关系" class="headerlink" title="三者之间的关系"></a>三者之间的关系</h3><p>微服务是一种架构的理念，提出了微服务的设计原则，从理论为具体的技术落地提供了指导思想。Spring Boot是一套快速配置脚手架，可以基于Spring Boot快速开发单个微服务；Spring Cloud是一个基于Spring Boot实现的服务治理工具包；Spring Boot专注于快速、方便集成的单个微服务个体，Spring Cloud关注全局的服务治理框架。</p>
<h3 id="如何进行微服务架构演进"><a href="#如何进行微服务架构演进" class="headerlink" title="如何进行微服务架构演进"></a>如何进行微服务架构演进</h3><p>当我们将所有的新业务都使用Spring Cloud这套架构之后，就会出现这样一个现象，公司的系统被分成了两部分，一部分是传统架构的项目，一部分是微服务架构的项目，如何让这两套配合起来使用就成为了关键，这时候Spring Cloud里面的一个关键组件解决了我们的问题，就是Zuul。在Spring Cloud架构体系内的所有微服务都通过Zuul来对外提供统一的访问入口，所有需要和微服务架构内部服务进行通讯的请求都走统一网关。如下图：</p>
<p><img src="/../images/SpringCloud%E4%BD%93%E7%B3%BB%E4%BB%8B%E7%BB%8D/20180207215515549.png" alt="img"></p>
<p>从上图可以看出我们对服务进行了分类，有四种：基础服务、业务服务、组合服务、前置服务。不同服务迁移的优先级不同</p>
<ul>
<li>基础服务，是一些基础组件，与具体的业务无关。比如：短信服务、邮件服务。这里的服务最容易摘出来做微服务，也是我们第一优先级分离出来的服务。</li>
<li>业务服务，是一些垂直的业务系统，只处理单一的业务类型，比如：风控系统、积分系统、合同系统。这类服务职责比较单一，根据业务情况来选择是否迁移，比如：如果突然有需求对积分系统进行大优化，我们就趁机将积分系统进行改造，是我们的第二优先级分离出来的服务。</li>
<li>前置服务，前置服务一般为服务的接入或者输出服务，比如网站的前端服务、app的服务接口这类，这是我们第三优先级分离出来的服务。</li>
<li>组合服务，组合服务就是涉及到了具体的业务，比如买标过程，需要调用很多垂直的业务服务，这类的服务我们一般放到最后再进行微服务化架构来改造，因为这类服务最为复杂，除非涉及到大的业务逻辑变更，我们是不会轻易进行迁移。</li>
</ul>
<p>在这四类服务之外，新上线的业务全部使用Sprng Boot/Cloud这套技术栈。就这样，我们从开源项目云收藏开始，上线几个Spring Boot项目，到现在公司绝大部分的项目都是在Spring Cloud这个架构体系中。</p>
<h2 id="经验和教训"><a href="#经验和教训" class="headerlink" title="经验和教训"></a>经验和教训</h2><h3 id="架构演化的步骤"><a href="#架构演化的步骤" class="headerlink" title="架构演化的步骤"></a>架构演化的步骤</h3><ul>
<li>在确定使用Spring Boot/Cloud这套技术栈进行微服务改造之前，先梳理平台的服务，对不同的服务进行分类，以确认演化的节奏。</li>
<li>先让团队熟悉Spring Boot技术，并且优先在基础服务上进行技术改造，推动改动后的项目投产上线</li>
<li>当团队熟悉Spring Boot之后，再推进使用Spring Cloud对原有的项目进行改造。</li>
<li>在进行微服务改造过程中，优先应用于新业务系统，前期可以只是少量的项目进行了微服务化改造，随着大家对技术的熟悉度增加，可以加快加大微服务改造的范围</li>
<li>传统项目和微服务项目共存是一个很常见的情况，除非公司业务有大的变化，不建议直接迁移核心项目。</li>
</ul>
<h3 id="服务拆分原则"><a href="#服务拆分原则" class="headerlink" title="服务拆分原则"></a>服务拆分原则</h3><p>服务拆分有以下几个原则和大家分享</p>
<p>横向拆分。按照不同的业务域进行拆分，例如订单、营销、风控、积分资源等。形成独立的业务领域微服务集群。</p>
<p>纵向拆分。把一个业务功能里的不同模块或者组件进行拆分。例如把公共组件拆分成独立的原子服务，下沉到底层，形成相对独立的原子服务层。这样一纵一横，就可以实现业务的服务化拆分。</p>
<p>要做好微服务的分层：梳理和抽取核心应用、公共应用，作为独立的服务下沉到核心和公共能力层，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求</p>
<p>服务拆分是越小越好吗？微服务的大与小是相对的。比如在初期，我们把交易拆分为一个微服务，但是随着业务量的增大，可能一个交易系统已经慢慢变得很大，并且并发流量也不小，为了支撑更多的交易量，我会把交易系统，拆分为订单服务、投标服务、转让服务等。因此微服务的拆分力度需与具体业务相结合，总的原则是服务内部高内聚，服务之间低耦合。</p>
<h3 id="微服务vs传统开发"><a href="#微服务vs传统开发" class="headerlink" title="微服务vs传统开发"></a>微服务vs传统开发</h3><p>使用微服务有一段时间了，这种开发模式和传统的开发模式对比，有很大的不同。</p>
<ul>
<li>分工不同，以前我们可能是一个一个模块，现在可能是一人一个系统。</li>
<li>架构不同，服务的拆分是一个技术含量很高的问题，拆分是否合理对以后发展影响巨大。</li>
<li>部署方式不同，如果还像以前一样部署估计累死了，自动化运维不可不上。</li>
<li>容灾不同，好的微服务可以隔离故障避免服务整体down掉，坏的微服务设计仍然可以因为一个子服务出现问题导致连锁反应。</li>
</ul>
<h3 id="给数据库带来的挑战"><a href="#给数据库带来的挑战" class="headerlink" title="给数据库带来的挑战"></a>给数据库带来的挑战</h3><p>每个微服务都有自己独立的数据库，那么后台管理的联合查询怎么处理？这应该是大家会普遍遇到的一个问题，有三种处理方案。</p>
<p>1）严格按照微服务的划分来做，微服务相互独立，各微服务数据库也独立，后台需要展示数据时，调用各微服务的接口来获取对应的数据，再进行数据处理后展示出来，这是标准的用法，也是最麻烦的用法。</p>
<ol start="2">
<li>将业务高度相关的表放到一个库中，将业务关系不是很紧密的表严格按照微服务模式来拆分，这样既可以使用微服务，也避免了数据库分散导致后台系统统计功能难以实现，是一个折中的方案。</li>
</ol>
<p>3）数据库严格按照微服务的要求来切分，以满足业务高并发，实时或者准实时将各微服务数据库数据同步到NoSQL数据库中，在同步的过程中进行数据清洗，用来满足后台业务系统的使用，推荐使用MongoDB、HBase等。</p>
<p>三种方案在不同的公司我都使用过，第一种方案适合业务较为简单的小公司；第二种方案，适合在原有系统之上，慢慢演化为微服务架构的公司；第三种适合大型高并发的互联网公司。</p>
<h3 id="微服务的经验和建议"><a href="#微服务的经验和建议" class="headerlink" title="微服务的经验和建议"></a>微服务的经验和建议</h3><p>1、建议尽量不要使用Jsp，页面开发推荐使用Thymeleaf。Web项目建议独立部署Tomcat，不要使用内嵌的Tomcat，内嵌Tomcat部署Jsp项目会偶现龟速访问的情况。</p>
<p>2、服务编排是个好东西，主要的作用是减少项目中的相互依赖。比如现在有项目a调用项目b，项目b调用项目c…一直到h，是一个调用链，那么项目上线的时候需要先更新最底层的h再更新g…更新c更新b最后是更新项目a。这只是这一个调用链，在复杂的业务中有非常多的调用，如果要记住每一个调用链对开发运维人员来说就是灾难。</p>
<p>有这样一个好办法可以尽量的减少项目的相互依赖，就是服务编排，一个核心的业务处理项目，负责和各个微服务打交道。比如之前是a调用b，b掉用c，c调用d，现在统一在一个核心项目W中来处理，W服务使用a的时候去调用b，使用b的时候W去调用c，举个例子：在第三方支付业务中，有一个核心支付项目是服务编排，负责处理支付的业务逻辑，W项目使用商户信息的时候就去调用“商户系统”，需要校验设备的时候就去调用“终端系统”，需要风控的时候就调用“风控系统”，各个项目需要的依赖参数都由W来做主控。以后项目部署的时候，只需要最后启动服务编排项目即可。</p>
<p>3、不要为了追求技术而追求技术，确定进行微服务架构改造之前，需要考虑以下几方面的因素：<br>1）团队的技术人员是否已经具备相关技术基础。<br>2）公司业务是否适合进行微服务化改造，并不是所有的平台都适合进行微服务化改造，比如：传统行业有很多复杂垂直的业务系统。<br>3）Spring Cloud生态的技术有很多，并不是每一种技术方案都需要用上，适合自己的才是最好的。</p>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud体系介绍</title>
    <url>/post/ed863d59.html</url>
    <content><![CDATA[<p>1.整合redis:</p>
<ol>
<li>添加redis依赖并在要调用这个方法的工程配置redis:</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring: </span><br><span class="line">  redis:</span><br><span class="line">    host: localhost</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>新建BaseRedisService:</li>
</ol>
<p><img src="/../images/SpringCloud%E4%BD%BF%E7%94%A8redis%E5%8A%A0token%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95/20190530150713325.png" alt="img"></p>
<pre><code>package com.id0304.common.redis;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.stereotype.Component;

import java.util.concurrent.TimeUnit;
//详细的redis操作都可以在这里封装,这里写了几个作为参考
@Component
public class BaseRedisService &#123;

    @Autowired
    private StringRedisTemplate stringRedisTemplate;

    /**
     * 添加redis信息
     * @param key
     */
    public void setString(String key, String value) &#123;
        set(key, value, null);
    &#125;

    //传入键值对和过期时间
    public void setString(String key, String value, Long timeOut) &#123;
        set(key, value, timeOut);
    &#125;

    //传入object对象
    private void set(String key, Object value, Long timeOut) &#123;
        if (value != null) &#123;
            if (value instanceof String) &#123;
                String setValue = (String) value;
                stringRedisTemplate.opsForValue().set(key, setValue);
            &#125;
            //设置有效期
            if (timeOut != null) &#123;
                stringRedisTemplate.expire(key, timeOut, TimeUnit.SECONDS);
            &#125;
        &#125;
    &#125;

    /**
     * 使用key查找redis信息
     * @param key
     */
    public String get(String key)&#123;
        return stringRedisTemplate.opsForValue().get(key);
    &#125;

    /**
     * 使用key删除redis信息
     * @param key
     */
    public void delete(String key)&#123;
        stringRedisTemplate.delete(key);
    &#125;

&#125;</code></pre>
<ol start="3">
<li>使用redis:</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Autowired    </span><br><span class="line">	private BaseRedisService baseRedisService;</span><br></pre></td></tr></table></figure>
<p>2.创建TokenUtils:</p>
<p><img src="/../images/SpringCloud%E4%BD%BF%E7%94%A8redis%E5%8A%A0token%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95/20190530151252449.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.id0304.utils;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.util.UUID;</span><br><span class="line">//简单示例</span><br><span class="line">public class TokenUtils &#123;</span><br><span class="line">    public static String getToken()&#123;</span><br><span class="line">        return UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.实现登录与查询</p>
<ol>
<li><p>UserService:</p>
<p> package com.id0304.api.service.impl;</p>
<p> import com.id0304.api.service.UserService;<br> import com.id0304.common.api.BaseApiService;<br> import com.id0304.common.redis.BaseRedisService;<br> import com.id0304.entity.UserEntity;<br> import com.id0304.manage.UserServiceManage;<br> import lombok.extern.slf4j.Slf4j;<br> import org.apache.commons.lang.StringUtils;<br> import org.springframework.beans.factory.annotation.Autowired;<br> import org.springframework.web.bind.annotation.RequestBody;<br> import org.springframework.web.bind.annotation.RequestParam;<br> import org.springframework.web.bind.annotation.ResponseBody;<br> import org.springframework.web.bind.annotation.RestController;</p>
<p> import java.util.Map;</p>
<p> @Slf4j<br> @RestController<br> public class UserServiceImpl extends BaseApiService implements UserService{</p>
<pre><code> @Autowired
 private UserServiceManage userServiceManage;

 @Autowired
 private BaseRedisService baseRedisService;

 //登录并存入redis
 @Override
 public Map&lt;String, Object&gt; login(@RequestBody UserEntity userEntity) &#123;
     return userServiceManage.login(userEntity);
 &#125;

 //使用token查找用户信息
 @Override
 public Map&lt;String, Object&gt; getUserByToken(@RequestParam(&quot;token&quot;) String token) &#123;
     if(StringUtils.isEmpty(token))&#123;
         return setParamError(&quot;token不能为空&quot;);
     &#125;
     return userServiceManage.getUser(token);
 &#125;</code></pre>
<p> }</p>
</li>
<li><p>UserServiceManage:</p>
<p> package com.id0304.manage.impl;</p>
<p> import com.alibaba.fastjson.JSONObject;<br> import com.id0304.common.api.BaseApiService;<br> import com.id0304.common.redis.BaseRedisService;<br> import com.id0304.constants.Constants;<br> import com.id0304.constants.DBTableName;<br> import com.id0304.constants.MQInterfaceType;<br> import com.id0304.dao.UserDao;<br> import com.id0304.entity.UserEntity;<br> import com.id0304.manage.UserServiceManage;<br> import com.id0304.mq.producer.RegisterMailboxProducer;<br> import com.id0304.utils.DateUtils;<br> import com.id0304.utils.Md5Util;<br> import com.id0304.utils.TokenUtils;<br> import lombok.extern.slf4j.Slf4j;<br> import org.apache.activemq.command.ActiveMQQueue;<br> import org.apache.commons.lang.StringUtils;<br> import org.springframework.beans.factory.annotation.Autowired;<br> import org.springframework.beans.factory.annotation.Value;<br> import org.springframework.stereotype.Service;</p>
<p> import javax.jms.Destination;<br> import java.util.Map;</p>
</li>
</ol>
<p>​<br>​    @Service<br>​    @Slf4j<br>​    public class UserServiceManageImpl extends BaseApiService implements UserServiceManage {<br>​<br>        @Autowired<br>        private UserDao userDao;</p>
<pre><code>    @Autowired
    private BaseRedisService baseRedisService;

    //实现登录业务处理
    @Override
    public Map&lt;String, Object&gt; login(UserEntity userEntity) &#123;
        String phone = userEntity.getPhone();
        String password = userEntity.getPassword();
        //往数据库里查询数据
        UserEntity user = userDao.getUserByPhoneAndPwd(phone, MD5PasswordSalt(phone, password));
        if (user == null) &#123;
            return setResultError(&quot;用户名或密码错误&quot;);
        &#125;

        //生成对应的token
        String token = TokenUtils.getToken();
        Long id = user.getId();
        //存放在redis中,key为自定义token令牌,value为用户id
        baseRedisService.setString(token, id+&quot;&quot;, Constants.USER_TOKEN_TERMVALIDITY);
        //返回token
        return setResultSuccessData(token);
    &#125;

    //根据令牌查找user
    @Override
    public Map&lt;String, Object&gt; getUser(String token) &#123;
        //从redis中根据key查找到用户id
        String id = baseRedisService.get(token);
        if(StringUtils.isEmpty(id))&#123;
            return setResultError(&quot;用户已过期!&quot;);
        &#125;
        UserEntity userEntity = userDao.getUserById(Long.parseLong(id));
        //不要把用户密码返回给客户端
        userEntity.setPassword(null);
        return setResultSuccessData(userEntity);
    &#125;
&#125;</code></pre>
<ol start="3">
<li><p>UserDao:</p>
<p> package com.id0304.dao;</p>
<p> import com.id0304.common.mybatis.BaseDao;<br> import com.id0304.entity.UserEntity;<br> import org.apache.ibatis.annotations.Mapper;<br> import org.apache.ibatis.annotations.Param;<br> import org.apache.ibatis.annotations.Select;<br> import org.springframework.stereotype.Component;</p>
<p> @Component<br> @Mapper<br> public interface UserDao extends BaseDao{</p>
<pre><code> //根据手机号和密码查询用户,首次登录
 @Select(&quot;select id,username,password,phone,email,created,updated from mb_user where phone = #&#123;phone&#125; and password = #&#123;password&#125;&quot;)
 public UserEntity getUserByPhoneAndPwd(@Param(&quot;phone&quot;) String phone,@Param(&quot;password&quot;) String password);</code></pre>
<p> //根据id查询用户,从redis取出id再去查<br> @Select(“select id,username,password,phone,email,created,updated from mb_user where id = #{id}”)<br> public UserEntity getUserById(@Param(“id”) Long id);}</p>
</li>
</ol>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,Spring Cloud,redis,token</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud微服务：基于Nacos组件，整合Dubbo框架</title>
    <url>/post/ac91ae90.html</url>
    <content><![CDATA[<p>源码地址：<a href="https://github.com/cicadasmile/spring-cloud-base">GitHub·点这里</a> || <a href="https://gitee.com/cicadasmile/spring-cloud-base">GitEE·点这里</a></p>
<h1 id="一、基础组件简介"><a href="#一、基础组件简介" class="headerlink" title="一、基础组件简介"></a>一、基础组件简介</h1><h2 id="1、Dubbo框架"><a href="#1、Dubbo框架" class="headerlink" title="1、Dubbo框架"></a>1、Dubbo框架</h2><p>Dubbo服务化治理的核心框架，之前几年在国内被广泛使用，后续由于微服务的架构的崛起，更多的公司转向微服务下成熟的技术栈，但是Dubbo本身确实是非常优秀的框架。</p>
<p>常见的应用迭代和升级的过程基本如下：</p>
<ul>
<li>当应用访问量逐渐增大，单一应用增加机器带来的加速度越来越小，提升效率的方法之一是将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</li>
<li>随着垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。</li>
<li>伴随业务发展，服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。</li>
</ul>
<p><img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%9F%BA%E4%BA%8ENacos%E7%BB%84%E4%BB%B6%E6%95%B4%E5%90%88Dubbo%E6%A1%86%E6%9E%B6/bVbKPdf" alt="image"></p>
<p>而Dubbo框架的核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。正好可以解决上述业务发展的痛点。</p>
<h2 id="2、微服务框架"><a href="#2、微服务框架" class="headerlink" title="2、微服务框架"></a>2、微服务框架</h2><p>SpringCloud是一系列框架的有序集合。它利用SpringBoot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用SpringBoot的开发风格做到一键启动和部署。</p>
<p>后续AliCloud微服务系列组件也不断被使用起来，其中最基础的组件Nacos注册中心，更是直接支持Dubbo框架，这样Cloud和Dubbo两大框架就成功的整合在了一起。</p>
<h2 id="3、Nacos注册中心"><a href="#3、Nacos注册中心" class="headerlink" title="3、Nacos注册中心"></a>3、Nacos注册中心</h2><p>Nacos注册中心主要用于发现、配置、管理微服务。并且提供一组简单易用的特性集，快速实现动态服务发现、服务配置、服务元数据及流量管理。</p>
<p><img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%9F%BA%E4%BA%8ENacos%E7%BB%84%E4%BB%B6%E6%95%B4%E5%90%88Dubbo%E6%A1%86%E6%9E%B6/bVbKPdc" alt="image"></p>
<p>如上图Nacos无缝支持一些主流的开源生态框架，例如SprinCloud,Dubbo两大框架。在AliCloud的系列组件中，还包含了Seata，RocketMQ，Sentinel等一系列组件。</p>
<h1 id="二、服务结构图解"><a href="#二、服务结构图解" class="headerlink" title="二、服务结构图解"></a>二、服务结构图解</h1><p>SpringCloud和Dubbo整合的结构示意图如下，使用的Nacos中心：</p>
<p><img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%9F%BA%E4%BA%8ENacos%E7%BB%84%E4%BB%B6%E6%95%B4%E5%90%88Dubbo%E6%A1%86%E6%9E%B6/bVbKPc9" alt="image"></p>
<p><strong>Provider提供方</strong>：提供核心的Dubbo服务接口；</p>
<p><strong>Consumer消费方</strong>：消费注册的Dubbo服务接口；</p>
<p><strong>Nacos注册中心</strong>：配置、发现和管理Dubbo服务；</p>
<p>通过上述流程不难发现，不管从架构上看，还是用法过程，基于核心Dubbo框架和微服务原生框架是十分相似，上述流程也遵循这样一个规则：dubbo-server连接自己的业务库DB，并通过dubbo-facade中接口向外提供服务，如果不同dubbo-server需要访问其他服务接口，也必须要通过其他服务的facade接口操作，dubbo-client作为接口服务消费端，可以通过facade接口访问很多业务模块的服务，整体架构层次十分明了。</p>
<h1 id="三、编码案例实现"><a href="#三、编码案例实现" class="headerlink" title="三、编码案例实现"></a>三、编码案例实现</h1><h2 id="1、案例结构和依赖"><a href="#1、案例结构和依赖" class="headerlink" title="1、案例结构和依赖"></a>1、案例结构和依赖</h2><p><strong>案例结构</strong></p>
<p><img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%9F%BA%E4%BA%8ENacos%E7%BB%84%E4%BB%B6%E6%95%B4%E5%90%88Dubbo%E6%A1%86%E6%9E%B6/bVbKPc7" alt="image"></p>
<p>包含三个模块：server、facade、client。</p>
<p><strong>核心依赖</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-dubbo&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h2 id="2、服务端配置"><a href="#2、服务端配置" class="headerlink" title="2、服务端配置"></a>2、服务端配置</h2><p><strong>配置文件</strong></p>
<p>主要是Nacos注册中心和Dubbo两个核心配置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 9010</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: node10-dubbo-server</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: http://localhost:8848</span><br><span class="line">      config:</span><br><span class="line">        server-addr: http://localhost:8848</span><br><span class="line">        file-extension: yaml</span><br><span class="line"># Dubbo服务配置</span><br><span class="line">dubbo:</span><br><span class="line">  scan:</span><br><span class="line">    base-packages: com.cloud.dubbo.service</span><br><span class="line">  protocol:</span><br><span class="line">    name: dubbo</span><br><span class="line">    port: -1</span><br><span class="line">  registry:</span><br><span class="line">    address: spring-cloud://localhost</span><br></pre></td></tr></table></figure>
<p><strong>服务接口实现</strong></p>
<p>这里DubboService即dubbo-facade包中对外提供的接口。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.apache.dubbo.config.annotation.Service;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class DubboServiceImpl implements DubboService &#123;</span><br><span class="line"></span><br><span class="line">    private static final Logger LOGGER = LoggerFactory.getLogger(DubboServiceImpl.class) ;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getInfo() &#123;</span><br><span class="line">        LOGGER.info(&quot;node10-dubbo-server start ...&quot;);</span><br><span class="line">        return &quot;node10-dubbo-server&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：@Service是Dubbo框架中的注解，不是Spring框架的注解。</p>
<h2 id="3、消费端配置"><a href="#3、消费端配置" class="headerlink" title="3、消费端配置"></a>3、消费端配置</h2><p><strong>配置文件</strong></p>
<p>主要配置是链接Nacos注册中心，订阅注册中心的node10-dubbo-server服务。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 9011</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: node10-dubbo-client</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: http://localhost:8848</span><br><span class="line">      config:</span><br><span class="line">        server-addr: http://localhost:8848</span><br><span class="line"># Dubbo服务配置</span><br><span class="line">dubbo:</span><br><span class="line">  protocol:</span><br><span class="line">    name: dubbo</span><br><span class="line">    port: -1</span><br><span class="line">  registry:</span><br><span class="line">    address: spring-cloud://localhost</span><br><span class="line">  cloud:</span><br><span class="line">    subscribed-services: node10-dubbo-server</span><br></pre></td></tr></table></figure>
<p><strong>Dubbo接口调用</strong></p>
<p>同样，这里DubboService即dubbo-facade包中对外提供的接口。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import com.cloud.dubbo.service.DubboService;</span><br><span class="line">import org.apache.dubbo.config.annotation.Reference;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class DubboWeb &#123;</span><br><span class="line"></span><br><span class="line">    @Reference</span><br><span class="line">    private DubboService dubboService ;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/getInfo&quot;)</span><br><span class="line">    public String getInfo () &#123;</span><br><span class="line">        return dubboService.getInfo() ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：@Reference也是Dubbo框架中的注解。</p>
<p>如上流程开发完成，先后启动dubbo-server服务和dubbo-client服务，查看注册中心服务列表：</p>
<p><img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%9F%BA%E4%BA%8ENacos%E7%BB%84%E4%BB%B6%E6%95%B4%E5%90%88Dubbo%E6%A1%86%E6%9E%B6/bVbKPc6" alt="image"></p>
<p>通过上述getInfo接口请求测试，即可看到完整的案例效果。</p>
<h1 id="四、技术选型"><a href="#四、技术选型" class="headerlink" title="四、技术选型"></a>四、技术选型</h1><p>很少有选择SpringCloud+Dubbo框架的架构模式，这里简单说明一下为何，因为这两个框架都是相当复杂的，学习成本是一个方面，风险是最主要原因，这两个框架同时使用，就意味要面对和解决两个框架下产生的问题，在任何一个框架都可以稳定的解决业务问题时，完全没必要花里胡哨。</p>
<h1 id="五、源代码地址"><a href="#五、源代码地址" class="headerlink" title="五、源代码地址"></a>五、源代码地址</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GitHub地址：知了一笑</span><br><span class="line">https://github.com/cicadasmile/spring-cloud-base</span><br><span class="line">GitEE地址：知了一笑</span><br><span class="line">https://gitee.com/cicadasmile/spring-cloud-base</span><br></pre></td></tr></table></figure>
<p><strong>推荐阅读：微服务组件和应用</strong></p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th>文章标题</th>
</tr>
</thead>
<tbody><tr>
<td align="center">01</td>
<td><a href="https://mp.weixin.qq.com/s/cbEnCOhgo-5wGFX-GAUQtg">微服务基础：Eureka组件，管理服务注册发现</a></td>
</tr>
<tr>
<td align="center">02</td>
<td><a href="https://mp.weixin.qq.com/s/yHCC-MwFtDda_y817CV2XA">微服务基础：Ribbon和Feign组件，实现请求负载均衡</a></td>
</tr>
<tr>
<td align="center">03</td>
<td><a href="https://mp.weixin.qq.com/s/pDrda8tBbNfReWVQrzal6w">微服务基础：Hystrix组件，实现服务熔断</a></td>
</tr>
<tr>
<td align="center">04</td>
<td><a href="https://mp.weixin.qq.com/s/-PPL5jwe4OdoBq7kQwePKA">微服务基础：Turbine组件，实现微服务集群监控</a></td>
</tr>
<tr>
<td align="center">05</td>
<td><a href="https://mp.weixin.qq.com/s/A7xiIp9EG62_1y-F23TATg">微服务基础：Zuul组件，实现路由网关控制</a></td>
</tr>
<tr>
<td align="center">06</td>
<td><a href="https://mp.weixin.qq.com/s/_WZ1r0Kas5yMMPfwZ4MRUw">微服务基础：Config组件，实现配置统一管理</a></td>
</tr>
<tr>
<td align="center">07</td>
<td><a href="https://mp.weixin.qq.com/s/p3p3Wi72rJngqMz4FSICBQ">微服务基础：Zipkin组件，实现请求链路追踪</a></td>
</tr>
<tr>
<td align="center">08</td>
<td><a href="https://mp.weixin.qq.com/s/RC8F_D1J75XEv7oR7xdK5Q">微服务基础：与Dubbo框架、Boot框架对比分析</a></td>
</tr>
<tr>
<td align="center">09</td>
<td><a href="https://mp.weixin.qq.com/s/adwfdDGg9DQleYLECA8raQ">微服务基础：Nacos组件，服务和配置管理</a></td>
</tr>
<tr>
<td align="center">10</td>
<td><a href="https://mp.weixin.qq.com/s/L_Q9PyPKngmCx-c94o0UmA">微服务基础：Sentinel组件，服务限流和降级</a></td>
</tr>
<tr>
<td align="center">11</td>
<td><a href="https://mp.weixin.qq.com/s/yCRwHGUd7xzQeEhoXFeO-w">微服务应用：分库分表模式下，数据库扩容方案</a></td>
</tr>
<tr>
<td align="center">12</td>
<td><a href="https://mp.weixin.qq.com/s/QHF4qFP0JUhmievlj3FQPQ">微服务应用：Shard-Jdbc分库分表，扩容方案实现</a></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,Spring Cloud,Nacos,Dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud 微服务架构学习笔记与示例</title>
    <url>/post/69d47631.html</url>
    <content><![CDATA[<p>本文示例基于Spring Boot 1.5.x实现，如对Spring Boot不熟悉，可以先学习我的这一篇：《<a href="https://www.cnblogs.com/edisonchou/p/java_spring_boot_foundation_demos.html">Spring Boot 1.5.x 基础学习示例</a>》。关于微服务基本概念不了解的童鞋，可以先阅读下始祖Martin Fowler的《<a href="https://mp.weixin.qq.com/s/fzk-kENu0I22P3F2Vu7KBA">Microservice</a>》，本文不做介绍和描述。</p>
<h1 id="一、分布式服务框架的发展"><a href="#一、分布式服务框架的发展" class="headerlink" title="一、分布式服务框架的发展"></a>一、分布式服务框架的发展</h1><h2 id="1-1-第一代服务框架"><a href="#1-1-第一代服务框架" class="headerlink" title="1.1 第一代服务框架"></a>1.1 第一代服务框架</h2><p>　　代表：Dubbo(Java)、Orleans(.Net)等</p>
<p>　　特点：和语言绑定紧密</p>
<h2 id="1-2-第二代服务框架"><a href="#1-2-第二代服务框架" class="headerlink" title="1.2 第二代服务框架"></a>1.2 第二代服务框架</h2><p>　　代表：Spring Cloud等</p>
<p>　　现状：适合混合式开发（例如借助Steeltoe OSS可以让ASP.Net Core与Spring Cloud集成），正值当年</p>
<h2 id="1-3-第三代服务框架"><a href="#1-3-第三代服务框架" class="headerlink" title="1.3 第三代服务框架"></a>1.3 第三代服务框架</h2><p>　　代表：Service Mesh（服务网格） =&gt; 例如Service Fabric、lstio、Linkerd、Conduit等</p>
<p>　　现状：在快速发展中，更新迭代比较快</p>
<h2 id="1-4-未来（目测不久）主流的服务架构和技术栈"><a href="#1-4-未来（目测不久）主流的服务架构和技术栈" class="headerlink" title="1.4 未来（目测不久）主流的服务架构和技术栈"></a>1.4 未来（目测不久）主流的服务架构和技术栈</h2><p>　　<img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/381412-20180823103510130-441053512.jpg" alt="img"></p>
<p>　　基础的云平台为微服务提供了资源能力（计算、存储和网络等），容器作为最小工作单元被Kubernetes调度和编排，Service Mesh（服务网格）管理微服务的服务通信，最后通过API Gateway向外暴露微服务的业务接口。</p>
<p>　　目前，我所在的项目组已经在采用这种技术架构了，服务网格采用的是Linkerd，容器编排采用的是K8S，Spring Cloud已经没用了。But，不代表Spring Cloud没有学习的意义，对于中小型项目团队，*<strong>Spring Cloud仍然是快速首选*</strong>。</p>
<h1 id="二、Spring-Cloud-简介"><a href="#二、Spring-Cloud-简介" class="headerlink" title="二、Spring Cloud 简介"></a>二、Spring Cloud 简介</h1><h2 id="2-1-Spring-Cloud极简介绍"><a href="#2-1-Spring-Cloud极简介绍" class="headerlink" title="2.1 Spring Cloud极简介绍"></a>2.1 Spring Cloud极简介绍</h2><p>　　<img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/381412-20180822202553841-1217264857.jpg" alt="img"></p>
<p> 　首先，尽管Spring Cloud带有“Cloud”这个单词，但它并不是云计算解决方案，而是在Spring Boot基础之上构建的，用于快速构建分布式系统的通用模式的工具集。</p>
<p>　　 其次，使用Spring Cloud开发的应用程序非常适合在Docker和PaaS（比如Pivotal Cloud Foundry）上部署，所以又叫做云原生应用（Cloud Native Application）。云原生可以简单地理解为面向云环境的软件架构。</p>
<blockquote>
<p><strong><em>总结</em></strong> <strong>：</strong>Spring Cloud是一个基于Spring Boot实现的云原生应用开发工具，它为基于JVM的云原生应用开发中涉及的配置管理、服务发现、熔断器、智能路由、微代理、控制总线、分布式会话和集群状态管理等操作提供了一种简单的开发方式。</p>
</blockquote>
<p>　　Spring Cloud具有如下特点：</p>
<ul>
<li>约定大于配置</li>
<li>适用于各种环境</li>
<li>隐藏了组件的复杂性，并提供声明式、无XML式的配置方式</li>
<li>开箱即用，快速启动</li>
<li>组件丰富，功能齐全</li>
<li>……</li>
</ul>
<p>　　Spring Cloud作为第二代微服务的代表性框架，已经在国内众多大中小型的公司有实际应用案例。许多公司的业务线全部拥抱Spring Cloud，部分公司选择部分拥抱Spring Cloud。例如，拍拍贷资深架构师杨波老师就根据自己的实际经验以及对Spring Cloud的深入调研，并结合国内一线互联网大厂的开源项目应用实践结果，认为Spring Cloud技术栈中的有些组件离生产级开发尚有一定距离，最后提出了一个可供中小团队参考的微服务架构技术栈，又被称为“中国特色的微服务架构技术栈1.0”：</p>
<p>　　<img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/381412-20180823122622168-180774166.png" alt="img"></p>
<p>　　上图中涉及到的组件，这里不做具体介绍，有兴趣的童鞋可以浏览波波老师的这篇文章：《<a href="http://www.infoq.com/cn/articles/china-microservice-technique?utm_source=tuicool&utm_medium=referral">一个可供中小团队参考的微服务架构技术栈</a>》。</p>
<h2 id="2-2-Spring-Cloud核心子项目"><a href="#2-2-Spring-Cloud核心子项目" class="headerlink" title="2.2 Spring Cloud核心子项目"></a>2.2 Spring Cloud核心子项目</h2><ul>
<li>Spring Cloud Netflix：核心组件，可以对多个Netflix OSS开源套件进行整合，包括以下几个组件：<ul>
<li>Eureka：服务治理组件，包含服务注册与发现</li>
<li>Hystrix：容错管理组件，实现了熔断器</li>
<li>Ribbon：客户端负载均衡的服务调用组件</li>
<li>Feign：基于Ribbon和Hystrix的声明式服务调用组件</li>
<li>Zuul：网关组件，提供智能路由、访问过滤等功能</li>
<li>Archaius：外部化配置组件</li>
</ul>
</li>
<li>Spring Cloud Config：配置管理工具，实现应用配置的外部化存储，支持客户端配置信息刷新、加密/解密配置内容等。</li>
<li>Spring Cloud Bus：事件、消息总线，用于传播集群中的状态变化或事件，以及触发后续的处理</li>
<li>Spring Cloud Security：基于spring security的安全工具包，为我们的应用程序添加安全控制</li>
<li>Spring Cloud Consul : 封装了Consul操作，Consul是一个服务发现与配置工具（与Eureka作用类似），与Docker容器可以无缝集成</li>
<li>……</li>
</ul>
<h1 id="三、参考学习资料"><a href="#三、参考学习资料" class="headerlink" title="三、参考学习资料"></a>三、参考学习资料</h1><p>　　<strong><em>备注：</em></strong>下面资料都是我们项目组新同事以及老同事（.Net技术背景）所采用的学习资料，<strong>并不保证适合于所有人</strong>。本示例主要也主要是基于下面的资料而写的sample code。</p>
<p>　　（1）周立：《<a href="https://book.douban.com/subject/30278673/">Spring Cloud与Docker 微服务架构实战</a>》</p>
<p>　　<img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/381412-20180822203658690-695659411.jpg" alt="img"></p>
<p>　　（2）程序猿DD：《<a href="https://book.douban.com/subject/27025912/">Spring Cloud 微服务实战</a>》、《<a href="http://blog.didispace.com/Spring-Cloud%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/">Spring Cloud基础教程（Dalston版本）</a>（<em>强力推荐</em>）》</p>
<p>　　<img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/381412-20180822203530287-752031402.jpg" alt="img"></p>
<p>　　（3）纯洁的微笑，《<a href="http://www.ityouknow.com/spring-cloud">Spring Cloud系列文章</a>》</p>
<h1 id="四、示例结构说明"><a href="#四、示例结构说明" class="headerlink" title="四、示例结构说明"></a>四、示例结构说明</h1><h2 id="4-1-示例环境版本"><a href="#4-1-示例环境版本" class="headerlink" title="4.1 示例环境版本"></a>4.1 示例环境版本</h2><ul>
<li><strong>Java</strong> : JDK &amp; JRE 1.8 8u151</li>
<li><strong>Spring Boot</strong> : 1.5.15.RELEASE</li>
<li><strong>Spring Cloud</strong> : Edgware.SR3 （*<strong>小贴士*</strong>：Spring Cloud的版本命名是以伦敦地铁站的名字来命名的）</li>
</ul>
<h2 id="4-2-示例地址与结构说明"><a href="#4-2-示例地址与结构说明" class="headerlink" title="4.2 示例地址与结构说明"></a>4.2 示例地址与结构说明</h2><p>　　示例地址：<a href="https://github.com/EdisonChou/EDC.SpringCloud.Samples">https://github.com/EdisonChou/EDC.SpringCloud.Samples</a></p>
<h3 id="4-2-1-服务注册与发现-基于Eureka"><a href="#4-2-1-服务注册与发现-基于Eureka" class="headerlink" title="4.2.1 服务注册与发现 - 基于Eureka"></a>4.2.1 服务注册与发现 - 基于Eureka</h3><p>　　此部分示例位于：<a href="https://github.com/EdisonChou/EDC.SpringCloud.Samples/tree/master/src/part1_service-register-discovery">part1_service-register-discovery</a></p>
<p>　　此部分示例主要演示了如何基于Eureka实现服务的注册与发现，其中包括两个版本：</p>
<p>　　① 单节点版本 （开发环境调试用） =&gt; 位于eureka-service-sn (sn代表single node)项目内</p>
<p>　　<img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/381412-20180827150050804-810811632.png" alt="img"></p>
<p>　　这里需要注意的地方是：在开发环境需要关闭Eureka的自我保护机制，不然你无法轻易看到服务移除的效果，需要在application.yml中如下设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  server:</span><br><span class="line">    enableSelfPreservation: false # 本地调试环境下关闭自我保护机制</span><br></pre></td></tr></table></figure>
<p>　　这是因为Eureka考虑到生产环境中可能存在的网络分区故障，会导致微服务与Eureka Server之间无法正常通信。它的架构哲学是宁可同时保留所有微服务（健康的微服务和不健康的微服务都会保留），也不盲目注销任何健康的微服务。</p>
<p>　　关于自我保护机制，更多内容可以参考：《<a href="https://blog.csdn.net/zhxdick/article/details/79153106">Spring Cloud Eureka全解之自我保护机制</a>》　</p>
<p>　<img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/381412-20180827151103729-1280844661.png" alt="img"></p>
<p>　　② HA多节点版本 （部署/生产环境用） =&gt; 位于eureka-service-ha-1 &amp; eureka-service-ha-2这两个项目内</p>
<p>　　此版本需要注意的是两个节点的application.yml保持一致，但由于其中使用了peer1和peer2的hostname，在本地开发环境需要给Windows（我假设你使用的是Windows系统）设置hosts文件如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1    peer1 peer2</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong><em>扩展：</em></strong>除了Eureka之外，还可以选择通用型较强的Consul，关于Consul的基本概念与服务端的安装配置可以看看我的这一篇《<a href="https://www.cnblogs.com/edisonchou/p/9124985.html">.Net Core微服务之基于Consul实现服务注册于发现</a>》了解一下。最后，不得不说，Spring Boot 和 Spring Cloud中核心组件封装的注解真的是太强大了，很多操作一个注解直接搞定，无须过多的coding。　　</p>
</blockquote>
<h3 id="4-2-2-客户端负载均衡-基于Ribbon"><a href="#4-2-2-客户端负载均衡-基于Ribbon" class="headerlink" title="4.2.2 客户端负载均衡 - 基于Ribbon"></a>4.2.2 客户端负载均衡 - 基于Ribbon</h3><p>　　此部分示例位于：<a href="https://github.com/EdisonChou/EDC.SpringCloud.Samples/tree/master/src/part2_client-load-balance">part2_client-load-balance</a></p>
<p>　　此部分示例主要演示了如何基于Ribbon实现客户端的负载均衡，建议启动方式：先启动Eureka，再启动UserService和MovieService。通过访问MovieService的API接口 /log-instance 进行日志查看，测试结果如下图所示：</p>
<p>　　<img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/381412-20180828100514390-46002450.png" alt="img"></p>
<p>　　从上图可以看出，通过客户端的负载均衡算法，依次访问了不同的服务节点。</p>
<h3 id="4-2-3-声明式REST调用-基于Feign"><a href="#4-2-3-声明式REST调用-基于Feign" class="headerlink" title="4.2.3 声明式REST调用 - 基于Feign"></a>4.2.3 声明式REST调用 - 基于Feign</h3><p>　　此部分示例位于：<a href="https://github.com/EdisonChou/EDC.SpringCloud.Samples/tree/master/src/part3_feign">part3_feign</a></p>
<p>　　<img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/381412-20180828143813878-505173877.png" alt="img"></p>
<p>　　此部分示例主要演示了基于Feign如何实现声明式调用，包括以下内容：</p>
<p>　　（1）基本整合Feign进行单参数与多参数的请求：位于movie-service这个项目内</p>
<p>　　需要注意的就是别忘了在启动类加上@EnableFeignClients注解</p>
<p><a href="javascript:void(0);"><img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/copycode.gif" alt="复制代码"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableFeignClients // 要使用Feign，需要加上此注解</span><br><span class="line">public class MovieServiceApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(MovieServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="javascript:void(0);"><img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/copycode.gif" alt="复制代码"></a></p>
<p>　　（2）自定义Feign配置的使用：位于movie-service-feign-customizing这个项目内</p>
<p>　　下面的Feign接口就使用了自定义的配置类FeignConfiguration。</p>
<p><a href="javascript:void(0);"><img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/copycode.gif" alt="复制代码"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@FeignClient(name = &quot;user-service&quot;, configuration = FeignConfiguration.class)</span><br><span class="line">public interface UserFeignClient &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 使用feign自带的注解@RequestLine</span><br><span class="line">     * @see https://github.com/OpenFeign/feign</span><br><span class="line">     * @param id 用户id</span><br><span class="line">     * @return 用户信息</span><br><span class="line">     */</span><br><span class="line">    @RequestLine(&quot;GET /&#123;id&#125;&quot;)</span><br><span class="line">    User findById(@Param(&quot;id&quot;) Long id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="javascript:void(0);"><img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/copycode.gif" alt="复制代码"></a></p>
<p>　　（3）Feign的日志的使用：位于movie-service-feign-logging这个项目内</p>
<p>　　需要注意的是：Feign虽然提供了logger，但是其日志打印只会对DEBUG级别做出响应。日志级别一共有4种类型，如下所示：</p>
<blockquote>
<p>Logger.Level 可选值：<br>* NONE: 不记录任何日志（默认值）<br>* BASIC: 仅记录请求方法、URL、响应状态码以及执行时间<br>* HEADERS: 记录BASIC级别的基础之上，记录请求和响应的header<br>* FULL: 记录请求和响应的header，body和元数据</p>
</blockquote>
<p>　　要输出日志打印，application.yml内要设置DEBUG级别：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    # 将Feign接口的日志级别设置为DEBUG，因为Feign的Logger.Level只针对DEBUG做出响应</span><br><span class="line">    com.mbps.cd.movieservice.feign.UserFeignClient: DEBUG</span><br></pre></td></tr></table></figure>
<p>　　最后，针对FULL级别的日志打印效果如下图所示：</p>
<p>　　<img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/381412-20180828145412951-1521816745.png" alt="img"></p>
<h3 id="4-2-4-容错处理-基于Hystrix"><a href="#4-2-4-容错处理-基于Hystrix" class="headerlink" title="4.2.4 容错处理 - 基于Hystrix"></a>4.2.4 容错处理 - 基于Hystrix</h3><p>　　此部分示例位于：<a href="https://github.com/EdisonChou/EDC.SpringCloud.Samples/tree/master/src/part4_hystrix">part4_hystrix</a></p>
<p>　　此部分示例主要演示如何基于Hystrix实现容错处理，主要包括以下内容：</p>
<p>　　（1）通用方式整合Hystrix：此示例位于movie-service项目中</p>
<p>　　针对普通的方法，只需加上HystrixCommand注解及定义回退方法即可，例如：</p>
<p><a href="javascript:void(0);"><img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/copycode.gif" alt="复制代码"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@HystrixCommand(fallbackMethod = &quot;findByIdFallback&quot;)</span><br><span class="line">@GetMapping(value = &quot;/user/&#123;id&#125;&quot;)</span><br><span class="line">public User findById(@PathVariable Long id) &#123;</span><br><span class="line">    return restTemplate.getForObject(&quot;http://user-service/&quot; + id, User.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public User findByIdFallback(Long id)&#123;</span><br><span class="line">    User user = new User();</span><br><span class="line">    user.setId(-1L);</span><br><span class="line">    user.setUsername(&quot;Default User&quot;);</span><br><span class="line"></span><br><span class="line">    return user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="javascript:void(0);"><img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/copycode.gif" alt="复制代码"></a></p>
<p>　　（2）Feign使用Hystrix：此示例位于movie-service-feign-hystrix项目中</p>
<p>　　针对Feign，它是以接口形式工作的，好在Spring Cloud已默认为Feign整合了Hystrix，不过默认是关闭的，需要手动在配置文件中开启：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">feign:</span><br><span class="line">  hystrix:</span><br><span class="line">    enabled: true</span><br></pre></td></tr></table></figure>
<p>　　在之前的版本（Dalston之前的版本）中是默认开启的，至于为何要改为默认禁用，可以看看这里：<a href="https://github.com/spring-cloud/spring-cloud-netflix/issues/1277">https://github.com/spring-cloud/spring-cloud-netflix/issues/1277</a></p>
<p>　　然后直接在FeignClient注解中加入fallback属性即可，例如下面所示：</p>
<p><a href="javascript:void(0);"><img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/copycode.gif" alt="复制代码"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@FeignClient(name = &quot;user-service&quot;, fallback = FeignClientFallback.class)</span><br><span class="line">public interface UserFeignClient &#123;</span><br><span class="line">    @GetMapping(value = &quot;/&#123;id&#125;&quot;)</span><br><span class="line">    User findById(@PathVariable(&quot;id&quot;) Long id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">class FeignClientFallback implements UserFeignClient&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public User findById(Long id) &#123;</span><br><span class="line">        User user = new User();</span><br><span class="line">        user.setId(-1L);</span><br><span class="line">        user.setUsername(&quot;Default User&quot;);</span><br><span class="line"></span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="javascript:void(0);"><img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/copycode.gif" alt="复制代码"></a></p>
<p>　　如果想要在Feign发生回退时能够留下日志供查看回退原因，那么可以使用FallbackFactory，示例项目：movie-service-feign-fallback-factory.</p>
<p><img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/ContractedBlock.gif" alt="img"> View Code</p>
<p>　　当发生回退时，日志输出信息如下：</p>
<p><img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/381412-20180829105743871-715284667.png" alt="img"></p>
<p>　　除此之外，关于Hystrix部分，还有监控的主题，这里由于我所在的项目组的技术架构中不会涉及到，也就没有弄，有兴趣的童鞋可以关注一下Hystrix自带的监控以及基于Turbine的聚合监控。参考文章：《<a href="http://blog.didispace.com/spring-cloud-starter-dalston-5-1/">Hystrix监控面板（Dalston版）</a>》与《<a href="http://blog.didispace.com/spring-cloud-starter-dalston-5-2/">Hystrix监控数据聚合</a>》。</p>
<h3 id="4-2-5-API网关-基于Zuul"><a href="#4-2-5-API网关-基于Zuul" class="headerlink" title="4.2.5 API网关 - 基于Zuul"></a>4.2.5 API网关 - 基于Zuul</h3><p>　　此部分示例位于：<a href="https://github.com/EdisonChou/EDC.SpringCloud.Samples/tree/master/src/part5_zuul">part5_zuul</a></p>
<p>　　此部分示例主要演示如何基于Zuul实现API网关，主要包括以下内容：</p>
<p>　　（1）整合Zuul编写API网关：位于zuul-service项目中</p>
<p>　　可以测试验证的内容：</p>
<ul>
<li>路由规则：依次启动eureka，user-service，movie-service，zuul-service，然后通过zuul访问user-service接口</li>
<li>负载均衡：依次启动eureka，多个user-service，zuul-service，然后多次访问user-service，最后查看日志信息（两个user-service都会打印hibernate日志信息），验证是否达到负载均衡的效果。*<strong>PS*</strong>：Zuul内置了Ribbon来实现负载均衡。　　</li>
<li>路由端点：依次启动eureka，user-service，movie-service，zuul-service，然后浏览器访问zuul-service（<a href="http://localhost:5000/routes%EF%BC%89%E5%8F%AF%E4%BB%A5%E5%BE%97%E5%88%B0%E8%B7%AF%E7%94%B1%E7%AB%AF%E7%82%B9%E4%BF%A1%E6%81%AF">http://localhost:5000/routes）可以得到路由端点信息</a></li>
</ul>
<p>　　对于路由端点，需要改一下以下配置，才能正常显示路由端点信息，否则会报401的错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">management:</span><br><span class="line">  security:</span><br><span class="line">    enabled: false # 默认为true，改为false以便可以看到routes</span><br></pre></td></tr></table></figure>
<ul>
<li>路由配置：示例主要演示了路由前缀、全局敏感设置以及路由规则设置</li>
<li>大文件上传设置：针对超大文件上传（比如500M），需要在Zuul中提升超时设置</li>
</ul>
<p><img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/ContractedBlock.gif" alt="img"> View Code</p>
<p>　　（2）Zuul的过滤器：主要位于zuul-service-filter这个项目中</p>
<p>　　对于Zuul的请求声明周期来说，一共有4种标准过滤器类型：</p>
<ul>
<li>PRE：在请求被路由之前调用，可利用这种过滤器实现身份验证、记录调试信息等操作；</li>
<li>ROUTING：将请求路由到微服务，可利用这种过滤器用于构建发送给微服务的请求；</li>
<li>POST：在路由到微服务以后执行，可用来为响应添加标准的HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端等；</li>
<li>ERROR：在其他阶段发生错误时执行该过滤器；　　</li>
</ul>
<p>　　　　<img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/381412-20180829194447438-1935637453.png" alt="img"></p>
<p>　　此示例中演示了PRE类型的过滤器，部分场景下，想要禁用部分过滤器，只需要在配置文件中设置即可，例如这里禁用PreRequestLogFilter过滤器：</p>
<p><img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/ContractedBlock.gif" alt="img"> View Code</p>
<p>　　（3）Zuul的容错与回退：主要位于zuul-service-fallback这个项目中</p>
<p>　　Zuul自身就带有Hystrix，但是*<strong>它监控的粒度是微服务级别，而不是某个API*</strong>，当某个API不可用时，会统一抛500错误码的异常页。我们可以为Zuul添加回退，以实现更友好的返回信息。实现也很简单，只需要实现FallbackProvider接口即可。这里要注意的是，对于Edgware之前的版本（即Dalston及更低版本）需要实现的是ZuulFallbackProvider接口，而Edgware及之后的版本要实现的是FallbackProvider接口。因为FallbackProvider是ZuulFallbackProvider的子接口，而它的好处就是多了一个接口可以获取可能造成回退的原因，具体可以参考这一篇文章：《<a href="https://www.jianshu.com/p/632f26892c44">Spring Cloud Edgware新特性之八：Zuul回退的改进</a>》。下面是本示例中访问user-service接口（user-service被我手动关闭）后的返回结果：</p>
<p>　　<img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/381412-20180829203408560-1338574330.png" alt="img"></p>
<p>　　（4）Zuul的高可用架构</p>
<p>　　生产环境中一般都需要部署高可用的Zuul以避免单点故障，实际开发中有两种情况：</p>
<p>　　① Zuul的客户端也注册到了Eureka Server上（比如：MVC App, SPA 等）</p>
<p>　　<img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/8-7.png" alt="img"></p>
<p>　　此时Zuul的高可用和其他微服务没区别，都是借助Eureka和Ribbon来实现负载均衡。</p>
<p>　　② Zuul的客户端未注册到Eureka Server上（比如手机App端等）</p>
<p>　　现实中这种场景或许更常见，此时需要借助一个额外的负载均衡器来实现Zuul的高可用，比如：Nginx、HAProxy以及F5等。</p>
<p>　　<img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/8-8.png" alt="img"></p>
<p>　　更多Zuul高可用的内容，可以浏览周立老师的这一篇：《<a href="http://www.itmuch.com/spring-cloud/zuul/zuul-ha/">Zuul的高可用</a>》</p>
<p>　　（5）使用Zuul聚合微服务：此示例位于zuul-service-aggregation项目中</p>
<p>　　许多场景下可能一个外部请求要查询Zuul后端的多个服务，这时可以使用Zuul来聚合服务请求，即只需请求一次，由Zuul来请求各个服务，然后组织好数据发送给客户端（比如App客户端）。示例中主要基于RxJava与Zuul来结合实现的微服务请求的聚合。</p>
<h3 id="4-2-6-统一配置管理-基于Spring-Cloud-Config"><a href="#4-2-6-统一配置管理-基于Spring-Cloud-Config" class="headerlink" title="4.2.6 统一配置管理 - 基于Spring Cloud Config"></a>4.2.6 统一配置管理 - 基于Spring Cloud Config</h3><p>　　Spring Cloud Config为分布式系统外部化配置提供了服务端和客户端的支持，包括Config Server和Config Client两部分，其架构图如下图所示：</p>
<p>　　<img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/381412-20180911102332162-368646690.jpg" alt="img"></p>
<p>　　其中，各个微服务在启动时会请求Config Server以获取所需要的配置属性，然后缓存这些属性以提高性能，如下图所示：</p>
<p><img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/381412-20180911102459754-1863677573.png" alt="img"></p>
<p>　　此部分示例位于：<a href="https://github.com/EdisonChou/EDC.SpringCloud.Samples/tree/master/src/part6_config">part6_config</a></p>
<p>　　此部分示例主要演示如何基于Spring Cloud Config实现统一配置中心，主要包括以下内容：</p>
<p>　　（1）基本的Config Server与Config Client编写：此示例位于config-service与config-client中</p>
<p>　　此示例需要用到一些已放到git的配置文件，这里我已将其放到了github方便大家可以直接拿来测试用，仓库地址为：<a href="https://github.com/EdisonChou/EDC.SpringCloud.Samples.Config">https://github.com/EdisonChou/EDC.SpringCloud.Samples.Config</a></p>
<blockquote>
<p>端点与配置文件的*<strong>映射规则*</strong>如下：</p>
<p>/{application}/{profile}[/{label}]</p>
<p>/{application}-{profile}.yml</p>
<p>/{label}/{application}-{profile}.yml</p>
<p>/{application}-{profile}.properties</p>
<p>/{label}/{application}-{profile}.properties</p>
<p>其中，application: 表示微服务的虚拟主机名，即配置的spring.application.name</p>
<p>profile: 表示当前的环境，dev, test or production?</p>
<p>label: 表示git仓库分支，master or relase or others repository name? 默认是master</p>
</blockquote>
<p>　　项目中，config-service的配置文件如下：</p>
<p><img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/ContractedBlock.gif" alt="img"> View Code</p>
<p>　　启动顺序：先启动config-server，再启动config-client，因为config-client在启动时就回去config-server获取配置，如果这时config-server未启动则会报错。</p>
<p>　　这里需要注意的就是在config-client中，对于spring cloud config的配置应该放在bootstrap.yml中而不是application.yml中，否则会不起作用。这里涉及到一个spring cloud的“引导上下文”的概念，可以参考这篇《<a href="https://www.cnblogs.com/niechen/p/8968204.html">深入理解Spring Cloud引导上下文</a>》来了解一下。</p>
<p>　　（2）使用/refresh端点手动刷新配置：仍然位于config-client项目中</p>
<p>　　要想在运行期间刷新配置，需要两点改造：加上@RefreshScope注解</p>
<p><a href="javascript:void(0);"><img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/copycode.gif" alt="复制代码"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RefreshScope // @RefreshScope注解不能少，否则即使调用/refresh，配置也不会刷新</span><br><span class="line">public class ConfigClientController &#123;</span><br><span class="line">    @Value(&quot;$&#123;profile&#125;&quot;)</span><br><span class="line">    private String profile;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/profile&quot;)</span><br><span class="line">    public String hello()&#123;</span><br><span class="line">        return this.profile;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="javascript:void(0);"><img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/copycode.gif" alt="复制代码"></a></p>
<p>　　此外，针对Spring Boot 1.5.x，还需要给config-client端关闭安全认证，否则无法正常refresh：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">management:</span><br><span class="line">  security:</span><br><span class="line">    enabled: false</span><br></pre></td></tr></table></figure>
<p>　　之后，就可以通过对config-client发起POST请求刷新配置了：</p>
<p>　　<img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/381412-20180911110239157-395567823.png" alt="img"></p>
<p>　　不过，如果所有微服务都需要手动刷新配置，工作量会很大。所以，在实际环境中，一般会实现配置的自动刷新。</p>
<p>　　（3）使用Spring Cloud Bus自动刷新配置：此示例位于config-server-cloud-bus与config-client-cloud-bus项目中</p>
<p>　　此示例使用到的架构如下图所示，它将Config Server加入消息总线之中，并使用Config Server的/bus/refersh端点来实现配置的刷新。这样，各个微服务只需要关注自身的业务逻辑，而无需再自己手动刷新配置。</p>
<p>　　　　<img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/381412-20180911164253270-1574652079.png" alt="img"></p>
<blockquote>
<p><strong><em>Tip：</em></strong>Spring Cloud Bus基于轻量级地消息代理（例如RabbitMQ、Kafka等）连接分布式系统的节点，就可以通过广播的方式来传播状态的更改（例如配置的更新）或者其他的管理指令。我们可以将Spring Cloud Bus想象成一个分布式的Spring Boot Actuator。　　</p>
</blockquote>
<p>　　运行顺序：先启动config-service-cloud-bus，再启动两个config-client-cloud-bus（第一个默认端口8081，第二个端口改为8082），修改github中sampleservice-foo-dev.properties中的profile值后commit &amp; push，然后POST请求config-service-cloud-bus的/bus/refersh端点，最后再次访问两个client的/profile端点进行验证。</p>
<p>　　如果部分场景想要知道Spring Cloud Bus事件传播的细节，可以通过以下设置来跟踪事件总线：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    bus:</span><br><span class="line">      trace:</span><br><span class="line">        enabled: true # 开启cloud bus跟踪</span><br></pre></td></tr></table></figure>
<p>　　（4）与Eureka的配合使用：此示例位于config-service-eureka与config-client-eureka两个项目中</p>
<p>　　（5）Config Server的高可用：涉及到Git仓库的高可用、RabbitMQ的高可用以及Config Server自身的高可用。</p>
<p>　　对于Git仓库的高可用，第三方Git仓库类似于GitHub等本身已经实现了高可用，而针对自建Git仓库如GitLab，可以参考GitLab官方文档搭建高可用：<a href="https://about.gitlab.com/high-availability/">https://about.gitlab.com/high-availability/</a></p>
<p>　　对于Config Server自身的高可用，也可以分为未注册到Eureka和注册到Eureka两种情形，具体可以参考Zuul的高可用的架构图。</p>
<p>　　此外，对于配置内容的加密，此示例没有涉及，它依赖于<em>JCE</em>（<em>Java Cryptography Extension</em>），可以参考这一篇《<a href="https://blog.csdn.net/u014792352/article/details/73163714">Spring Cloud配置文件加密</a>》了解一下。</p>
<blockquote>
<p><strong><em>扩展：\</em></strong>关于统一配置中心，还可以选择更好用的Apollo（携程的开源项目），可以看看我的这一篇《<a href="https://www.cnblogs.com/edisonchou/p/netcore_microservice_apollo_foundation.html">.Net Core微服务之基于Apollo实现统一配置中心</a>》了解一下。　　</p>
</blockquote>
<h3 id="4-2-7-微服务跟踪-基于Spring-Cloud-Sleuth"><a href="#4-2-7-微服务跟踪-基于Spring-Cloud-Sleuth" class="headerlink" title="4.2.7 微服务跟踪 - 基于Spring Cloud Sleuth"></a>4.2.7 微服务跟踪 - 基于Spring Cloud Sleuth</h3><p>　　首先，值得一提的是Spring Cloud Sleuth大量借用了Google Dapper，Twitter Zipkin和Apache HTrace的设计，我们得了解一些术语，例如：span、trace、annotation等，详细可以参考这篇《<a href="https://blog.csdn.net/hry2015/article/details/78905489">Spring Cloud系列之分布式链路监控Spring Cloud Sleuth</a>》。</p>
<p>　　此示例位于：<a href="https://github.com/EdisonChou/EDC.SpringCloud.Samples/tree/master/src/part7_sleuth">part7_sleuth</a></p>
<p>　　此部分示例主要演示如何基于Spring Cloud Sleuth实现分布式链路监控，主要包括以下内容：</p>
<p>　　（1）基础整合Spring Cloud Sleuth：位于user-service-trace与movie-service-trace项目中，主要查看控制台输出日志</p>
<p>　　（2）Spring Cloud Sleuth与Zipkin的配合使用：位于zipkin-service-server、user-service-trace-zipkin与movie-service-trace-zipkin三个项目中</p>
<p>　　Zipkin是Twitter开源的分布式跟踪系统，基于Dapper论文设计而来，主要功能是收集系统的时序数据，从而追踪微服务架构的系统延时问题，此外还提供了一个非常友好的界面来帮助追踪分析数据。</p>
<p>　　下图是一个接入Zipkin之后的服务调用简易流程图：</p>
<p>　　　　<img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/381412-20180912100436938-1105881734.png" alt="img"></p>
<p>　　运行顺序：首先运行zipkin-service-server，其次运行user-service-zipkin与movie-service-zipkin，然后访问<a href="http://localhost:8010/user/1%E5%BE%97%E5%88%B0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%9C%EF%BC%8C%E6%9C%80%E5%90%8E%E8%AE%BF%E9%97%AEzipkin">http://localhost:8010/user/1得到数据结果，最后访问zipkin</a> server首页，填入起始时间、结束时间等筛选条件后，点击Find a trace按钮，可以看到trace列表，如下图所示：</p>
<p><img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/381412-20180912124929461-1130110818.png" alt="img"></p>
<p>　　点击“依赖分析”，可以得到下图，有助于我们分析依赖关系：</p>
<p>　　<img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/381412-20180912124826365-256580926.png" alt="img"></p>
<p>　　需要注意的是，在开发调试时，因为默认的采样百分比是10%，Sleuth会忽略大量span，因此我们可以在开发环境将其设置为100%：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  sleuth:</span><br><span class="line">    sampler:</span><br><span class="line">      # 指定需采样的请求的百分比，默认是0.1（即10%），这里方便查看设为100%（实际环境不要这样设置）</span><br><span class="line">      percentage: 1.0</span><br></pre></td></tr></table></figure>
<p>　　（3）使用RabbitMQ收集数据：此示例位于zipkin-service-server-stream与user-service-trace-zipkin-stream两个项目中</p>
<p>　　<img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/668104-20170919144417181-47072786.png" alt="img"></p>
<p>　　此外，Spring Cloud Sleuth还可以与ELK配合使用，不过此示例没有涉及，感兴趣的朋友可以参考这一篇《<a href="https://blog.csdn.net/yejingtao703/article/details/78318234">Spring Cloud Sleuth与ELK集成</a>》。当然，示例中的跟踪数据都是存放到内存中，但是跟踪数据还是建议存放到ElasticSearch中，生产环境切莫只存储到内存中。</p>
<h1 id="推荐工具"><a href="#推荐工具" class="headerlink" title="推荐工具"></a>推荐工具</h1><p>　　<img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/381412-20180808003740095-518556064.jpg" alt="img"></p>
<p>　　IDE =&gt; <a href="https://www.jetbrains.com/idea/">Intellij Idea Community 2018</a></p>
<p>　　(<strong><em>PS:</em></strong> 如果是.Net程序猿背景，强烈建议更改快捷键与Visual Studio保持一致，这样能加快开发效率，如不了解如何修改，可以参考邹琼俊《<a href="https://www.cnblogs.com/jiekzou/p/9202247.html">从.Net到Java - Idea and Start Spring Boot</a>》)</p>
<p>　　<img src="/../images/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B/381412-20180823162644740-346644119.jpg" alt="img"></p>
<p>　　Plugin =&gt; 阿里巴巴代码规约</p>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>WNMPA一键环境 1.0.0.0 正式版发布</title>
    <url>/post/b5e8cb00.html</url>
    <content><![CDATA[<p><img src="/../images/WNMPA%E4%B8%80%E9%94%AE%E7%8E%AF%E5%A2%831000%E6%AD%A3%E5%BC%8F%E7%89%88%E5%8F%91%E5%B8%83/wnmpa.png" alt="wnmpa"></p>
<p>　　呼呼～～说好的WNMPA终于发布了，先简要说下WNMPA是什么吧。WNMPA是(Windows Nginx MySQL PHP Apache的一个集合包)以Nginx作为前端处理静态文件，Apache后端处理动态文件。当然如果你不需要这种结构，你也可以把A去掉，WNMP就够了。</p>
<p>最新动态：</p>
<p>今天无意中登陆了一下博客，发现居然还有人在下载WNMPA，这其实让我很意外。不过回头想想，我其实还是很欣慰的。</p>
<p>不过呢，其实我觉得大家可能其实根本用不到这么庞大的一个东西，毕竟光是各种软件的32位数跟64位就比同类集成环境大了一倍多，真正的实用性并不强，如果大家不喜欢折腾的话，我还是推荐XAMPP，毕竟那个已经稳定运行了那么久。我也动手将其汉化了一下，<a href="https://csharp.love/xampp_cn.html">点我查看</a>，实用性应该还是很强的。</p>
<p>好了说回正题，如果您打算继续使用wnmpa的话，那么你可能需要更新一下，</p>
<p>因为之前的版本好像有一些bug，比如在win7下关闭会报错什么的。</p>
<p>只不过我是个单文件控，所以我还是用软件加了个壳然后把附带的dll打了个包，可是杀毒软件又开始不乐意了……真难伺候，我自己把它排除了，大家就随意吧。</p>
<p>直接覆盖安装包里面的wnmpa.exe就行了。</p>
<p>下载：<a href="https://static.pzhacm.org/wp-upload/2012/07/wnmpa.7z">wnmpa</a>(密码wnmpa)</p>
<p>说在前面：</p>
<p>首先，要说明一点，我写这个东西并不是为了造福人类，而是因为我自己要用到，不小心被朋友看见了，觉得不错，让我分享，所以嘛，大家就别把这个软件看得这么严重，如果有Bug什么的，顺便告诉我一声，感激不尽。</p>
<p>说到这，可能各位看官又会问了：你说这种东西网上一抓一大把，比如<a href="http://go.ccc.xxx/fwlink/xampp">XAMPP</a>，你为啥要自己整个，你不有病么？——其实呢，不是我有病， 我肯定不会去搞一个一模一样的东西出来。怎么说呢，XAMPP的确很优秀，不过XAMPP侧重集成环境，连FTP服务端、邮件服务端都给准备了，而我平时用不到这些，所以干脆按照自己的需求整一个自己喜欢的。</p>
<p>其实我写的这个程序只有1.9M左右而已，但是安装包却有90多M左右，解压出来大概765M，那么为什么会这么大呢？原因很简单，我肯定不会让各位那么幸苦去自己下载服务端来安装的，我在这里一共准备了三个版本的php(32位的Non Thread Safe的、32位的Thread Safe的、64位的Thread Safe的)，和两个版本的Apache(32位版、64位版)、MySQL(32位版、64位版)、Tomcat(32位版、64位版)，这些玩意占了很大的空间。</p>
<p>一些小疑问：</p>
<ul>
<li>人家都用的5.2老版本php，你为啥非得用5.4，还有什么mysql啊，nginx啊，什么都用最新版的，多不稳定啊！<pre><code> 答：这个怎么说呢， 有个很简单的比喻：Win7和XP，Win7在发布正式版的时候，很多人不习惯，认为Win7“不稳定”，然后坚守XP阵营。而直到现在，依然有很大一批的老一辈革命家认为XP还能再战20年。
 那么各位再仔细回忆一下，当年Win98盛行的时候，又是怎么看待XP的呢？
 有些人一定有过这样的想法：这个破Win7，连XX软件都不支持，还有什么用，我还是换回XP吧。
 可是直到最后，依然摆脱不了换新版操作系统的命运。
 操作系统是这样的，那么同理php、mysql、apache也是这样， 我们当然可以等到周围所有人都用上新版本了，我们才慢慢悠悠更新。但是我个人却是个急性子，我可忍受不了新特性对我的诱惑。</code></pre>
</li>
<li>我电脑上有JDK啊，为啥Tomcat无法运行呢？<pre><code> 因为JDK默认是没有注册到环境变量里的，Tomcat是以系统里的%JAVA_HOME%作为JDK是否存在的判断依据的。</code></pre>
</li>
<li>为啥Nginx已经停止了，按钮却还是显示的“正在停止”或者“停止”呢？<pre><code> 因为Nginx本身不提供注册到系统服务这项功能，所以我使用了 instsrv.exe和srvany.exe来使Nginx注册为Windows服务，有时候Nginx的确停掉了，但是他的宿主进程没有被停掉，所以嘛……打开services.msc手动重启下呗～</code></pre>
</li>
<li>为啥我自己localhost访问可以，别人访问我就403呢？<pre><code> 亲，因为你访问的这个网站绑定的域名就是localhost，为了防止你服务器被人恶意指向(国内某些云主机，如果你的服务器被未备案的域名指向了，他们会关掉你的服务器)，我特地将Nginx的默认站点设置为直接返回403。如果想绑定域名，请在主界面添加虚拟站点。</code></pre>
</li>
<li>为什么你的这个WNMPA环境不能拿去作为生产环境呢？<pre><code> 因为我是个开发者，所以我使用的都是最新版的服务端，php也打开了所有函数，连有些可能会导致出问题的函数都被打开了。所以从一定角度上来说，直接解压出来以后，这个东西的确不应该用做生产环境，如果真的需要的话，就建议去百度一下php的php.ini、mysql的my.ini、apache和nginx的conf文件构成，然后自己改写一个安全而又适合自己的生产环境。</code></pre>
</li>
</ul>
<p>软件截图：</p>
<p>安装界面：</p>
<p><img src="/../images/WNMPA%E4%B8%80%E9%94%AE%E7%8E%AF%E5%A2%831000%E6%AD%A3%E5%BC%8F%E7%89%88%E5%8F%91%E5%B8%83/clip_image002.jpg" alt="img"></p>
<p>初始化调查界面：</p>
<p><img src="/../images/WNMPA%E4%B8%80%E9%94%AE%E7%8E%AF%E5%A2%831000%E6%AD%A3%E5%BC%8F%E7%89%88%E5%8F%91%E5%B8%83/clip_image003.jpg" alt="img"></p>
<p>主界面：</p>
<p><img src="/../images/WNMPA%E4%B8%80%E9%94%AE%E7%8E%AF%E5%A2%831000%E6%AD%A3%E5%BC%8F%E7%89%88%E5%8F%91%E5%B8%83/clip_image004.jpg" alt="img"></p>
<p>虚拟主机管理：</p>
<p><img src="/../images/WNMPA%E4%B8%80%E9%94%AE%E7%8E%AF%E5%A2%831000%E6%AD%A3%E5%BC%8F%E7%89%88%E5%8F%91%E5%B8%83/clip_image005.jpg" alt="img"></p>
<p>添加虚拟主机信息收集：</p>
<p><img src="/../images/WNMPA%E4%B8%80%E9%94%AE%E7%8E%AF%E5%A2%831000%E6%AD%A3%E5%BC%8F%E7%89%88%E5%8F%91%E5%B8%83/clip_image006.jpg" alt="img"></p>
<p>非线程安全php的phpinfo()：</p>
<p><img src="/../images/WNMPA%E4%B8%80%E9%94%AE%E7%8E%AF%E5%A2%831000%E6%AD%A3%E5%BC%8F%E7%89%88%E5%8F%91%E5%B8%83/clip_image008.jpg" alt="img"></p>
<p>线程安全php的phpinfo():</p>
<p><img src="/../images/WNMPA%E4%B8%80%E9%94%AE%E7%8E%AF%E5%A2%831000%E6%AD%A3%E5%BC%8F%E7%89%88%E5%8F%91%E5%B8%83/clip_image010.jpg" alt="img"></p>
<p>非线程安全的php(配合nginx fcgi方式运行)，加载了Zend Optimizer+：</p>
<p><img src="/../images/WNMPA%E4%B8%80%E9%94%AE%E7%8E%AF%E5%A2%831000%E6%AD%A3%E5%BC%8F%E7%89%88%E5%8F%91%E5%B8%83/clip_image012.jpg" alt="img"></p>
<p>退出之前询问：</p>
<p><img src="/../images/WNMPA%E4%B8%80%E9%94%AE%E7%8E%AF%E5%A2%831000%E6%AD%A3%E5%BC%8F%E7%89%88%E5%8F%91%E5%B8%83/clip_image001.png" alt="img"></p>
<p><img src="/../images/WNMPA%E4%B8%80%E9%94%AE%E7%8E%AF%E5%A2%831000%E6%AD%A3%E5%BC%8F%E7%89%88%E5%8F%91%E5%B8%83/clip_image014.jpg" alt="img"></p>
<p> OK，下面放出下载地址：<br> <a href="http://down.pzhacm.org/wnmpa.exe">本地下载</a>、<a href="http://pan.baidu.com/share/link?shareid=104427&uk=2415932059">百度网盘</a>、<a href="http://dl.vmall.com/c0qghxr725">华为网盘</a></p>
<p>此版本存在一个已知问题：如果将Nginx注册成服务，则在主界面无法重启，需要进入services.msc找到Nginx_wnmpa手动重启。</p>
<p>测试过的操作系统：<br> Windows XP Professional SP3<br> Windows Server 2003 Enterprise SP2<br> Windows Server 2008 R2 Enterprise SP1<br> Windows 7 Ultimate x86 SP1</p>
<p>依赖的框架：<br> .NET Framework 2.0<br> Visual C++ 9.0 Runtime<br> Visual C++ 10.0 Runtime<br> 以上框架的所有安装包下载地址记录在安装目录下的[请先阅读.txt]中。</p>
<p>如果您想帮助WNMPA发展：</p>
<p><strong>&gt;**</strong>放心吧，不会让您捐赠的。我的意思是，如果您可以提供下载节点；**<br> <strong>&gt;**</strong>或者说是您的英语、日语、XXXXXXX语不错，可以帮忙翻译翻译这个软件；**<br> <strong>&gt;**</strong>或者您可以当一当小白，来测试这个软件。**</p>
<p><strong>都是对WNMPA最大的帮助！</strong> </p>
<p>最后唠叨一句：由于本环境使用程序版本较新，所以强烈建议只将本环境作为开发学习研究用，请勿用于生产环境！仅供学习交流！另外，还请那些高得我看不见的高射炮高抬贵手，不要用高傲的眼神来蔑视我。我只接受合理的意见、建议和指导。在我的博客里，请收回自己的优越感，谢谢合作！</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>-WNMPA</tag>
      </tags>
  </entry>
  <entry>
    <title>Springcloud 配置 | 史上最全,一文全懂</title>
    <url>/post/10ecfdb3.html</url>
    <content><![CDATA[<ul>
<li>疯狂创客圈 经典图书 ： <a href="https://www.cnblogs.com/crazymakercircle/p/11397271.html">《Netty Zookeeper Redis 高并发实战》</a> 面试必备 + 面试必备 + 面试必备 【<a href="https://www.cnblogs.com/crazymakercircle/p/9904544.html">博客园总入口</a> 】</li>
<li>疯狂创客圈 经典图书 ： <a href="https://www.cnblogs.com/crazymakercircle/p/13878143.html">《SpringCloud、Nginx高并发核心编程》</a> 大厂必备 + 大厂必备 + 大厂必备 【<a href="https://www.cnblogs.com/crazymakercircle/p/9904544.html">博客园总入口</a> 】</li>
<li>入大厂+涨工资必备： 高并发【 亿级流量IM实战】 实战系列 【 SpringCloud Nginx秒杀】 实战系列 【<a href="https://www.cnblogs.com/crazymakercircle/p/9904544.html">博客园总入口</a> 】</li>
</ul>
<hr>
<h3 id="Springcloud的性能问题"><a href="#Springcloud的性能问题" class="headerlink" title="Springcloud的性能问题"></a>Springcloud的性能问题</h3><p>Springcloud 原始的配置，性能是很低的，大家可以使用Jmeter测试一下，QPS不会到50。要做到高并发，需要做不少的配置优化，主要的配置优化有以下几点：</p>
<ul>
<li>Feign 配置优化</li>
<li>hystrix配置 优化</li>
<li>ribbon 优化</li>
<li>Servlet 容器 优化</li>
<li>Zuul配置 优化</li>
</ul>
<h3 id="Servlet-容器-优化"><a href="#Servlet-容器-优化" class="headerlink" title="Servlet 容器 优化"></a>Servlet 容器 优化</h3><p>默认情况下，Spring Boot 使用 Tomcat 来作为内嵌的 Servlet 容器，可以将 Web 服务器切换到 Undertow 来提高应用性能，Undertow 是红帽公司开发的一款基于 NIO 的高性能 Web 嵌入式<br>Zuul使用的内置容器默认是Tomcat，可以将其换成undertow，可以显著减少线程的数量，替换方式即在pom中添加以下内容：<br>第一步，移除Tomcat 依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">   &lt;exclusions&gt;</span><br><span class="line">      &lt;exclusion&gt;</span><br><span class="line">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class="line">      &lt;/exclusion&gt;</span><br><span class="line">   &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>第二步，增加Untertow 依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-boot-starter-undertow&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<p>第三步,Undertow 的属性配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  undertow:</span><br><span class="line">     io-threads: 16</span><br><span class="line">     worker-threads: 256</span><br><span class="line">     buffer-size: 1024</span><br><span class="line">     buffers-per-region: 1024</span><br><span class="line">     direct-buffers: true</span><br></pre></td></tr></table></figure>
<p>server.undertow.io-threads: 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程,不要设置过大，如果过大，启动项目会报错：打开文件数过多<br>server.undertow.worker-threads: 阻塞任务线程池, 当执行类似servlet请求阻塞IO操作, undertow会从这个线程池中取得线程,它的值设置取决于系统线程执行任务的阻塞系数，默认值是IO线程数*8<br>server.undertow.buffer-size: 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理,每块buffer的空间大小,越小的空间被利用越充分，不要设置太大，以免影响其他应用，合适即可<br>server.undertow.buffers-per-region: 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region<br>server.undertow.direct-buffers: 是否分配的直接内存(NIO直接分配的堆外内存)</p>
<h3 id="Zuul配置-优化"><a href="#Zuul配置-优化" class="headerlink" title="Zuul配置 优化"></a>Zuul配置 优化</h3><p>我们知道Hystrix有隔离策略：THREAD 以及SEMAPHORE ，默认是 SEMAPHORE 。<br>Zuul默认是使用信号量隔离，并且信号量的大小是100，请求的并发线程超过100就会报错，可以调大该信号量的最大值来提高性能，配置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zuul:</span><br><span class="line">  semaphore:</span><br><span class="line">    max-semaphores: 5000</span><br></pre></td></tr></table></figure>
<p>表示，当Zuul的隔离策略为SEMAPHORE时，设置指定服务的最大信号量为5000。对于特定的微服务，可以通过下面的方式，设置最大信号量</p>
<p>设置默认最大信号量：</p>
<p>zuul:<br>semaphore:<br>max-semaphores: 5000 # 默认值<br>设置指定服务的最大信号量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zuul:</span><br><span class="line">  eureka:</span><br><span class="line">    &lt;commandKey&gt;:</span><br><span class="line">      semaphore:</span><br><span class="line">        max-semaphores: 5000 	</span><br></pre></td></tr></table></figure>
<p>为了方便ThreadLocal的使用，也可以改为使用线程隔离的策略，这种场景下，就需要调大hystrix线程池线程大小，该线程池默认10个线程，调整的配置示例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zuul:</span><br><span class="line">  ribbonIsolationStrategy: THREAD</span><br><span class="line">hystrix:</span><br><span class="line">  threadpool:</span><br><span class="line">    default:</span><br><span class="line">      coreSize: 100</span><br><span class="line">      maximumSize: 400</span><br><span class="line">      allowMaximumSizeToDivergeFromCoreSize: true</span><br><span class="line">      maxQueueSize: -1</span><br></pre></td></tr></table></figure>
<p>hystrix.threadpool.default.allowMaximumSizeToDivergeFromCoreSize：是否让maximumSize生效，false的话则只有coreSize会生效<br>hystrix.threadpool.default.maxQueueSize：线程池的队列大小，-1代表使用SynchronousQueue队列<br>hystrix.threadpool.default.maximumSize：最大线程数量<br>hystrix.threadpool.default.allowMaximumSizeToDivergeFromCoreSize：是否让maximumSize生效，false的话则只有coreSize会生效<br>hystrix.threadpool.default.maxQueueSize：线程池的队列大小，-1代表使用SynchronousQueue队列<br>zuul.ribbon-isolation-strategy:设置线程隔离，thread 线程隔离，SEMAPHORE 表示信号量隔离</p>
<p>默认配置都可以去HystrixThreadPoolProperties和ZuulProperties这两个java文件中查找</p>
<h3 id="Feign-配置优化"><a href="#Feign-配置优化" class="headerlink" title="Feign 配置优化"></a>Feign 配置优化</h3><p>feign 默认不启用hystrix，需要手动指定 feign.hystrix.enabled=true 开启熔断<br>feign 启用压缩也是一种有效的性能优化方式，具体的配置如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">feign:</span><br><span class="line">	compression:</span><br><span class="line">		request:</span><br><span class="line">			enabled: true</span><br><span class="line">			mime-types: text/xml,application/xml,application/json</span><br><span class="line">		response:</span><br><span class="line">			enabled: true</span><br></pre></td></tr></table></figure>
<p>feign HTTP请求方式选择<br>feign默认使用的是基于JDK提供的URLConnection调用HTTP接口，不具备连接池,所以资源开销上有点影响，经测试JDK的URLConnection比Apache HttpClient快很多倍。Apache HttpClient和okhttp都支持配置连接池功能,也可以使用okhttp请求方式。<br>当使用HttpClient时，可如下设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">feign:</span><br><span class="line">  httpclient:</span><br><span class="line">    enabled: true</span><br><span class="line">    max-connections:1000</span><br><span class="line">    max-connections-per-route: 200 </span><br></pre></td></tr></table></figure>

<p>当使用OKHttp时，可如下设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">feign:</span><br><span class="line">  okhttp:</span><br><span class="line">    enabled: true</span><br><span class="line">  httpclient:</span><br><span class="line">    max-connections: 1000</span><br><span class="line">    max-connections-per-route: 200 	 </span><br></pre></td></tr></table></figure>

<p>max-connections 设置整个连接池最大连接数（该值默认为200）， 根据自己的场景决定<br>max-connections-per-route 设置路由的默认最大连接（该值默认为50），限制数量实际使用</p>
<h3 id="hystrix配置-优化"><a href="#hystrix配置-优化" class="headerlink" title="hystrix配置 优化"></a>hystrix配置 优化</h3><p>首先需要设置参数hystrix.threadpool.default.coreSize 来指定熔断隔离的线程数，这个数需要调优，经测试线程数我们设置为和提供方的容器线程差不多，吞吐量高许多。</p>
<p>其次，启用Hystrix后，很多服务当第一次访问的时候都会失败 是因为初始化负载均衡一系列操作已经超出了超时时间了，因为默认的超时时间为1S，需要修改超时时间参数，方可解决这个问题。<br>参考的hystrix配置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hystrix:</span><br><span class="line">  threadpool:</span><br><span class="line">    default:</span><br><span class="line">      coreSize: 500</span><br><span class="line">  command:</span><br><span class="line">    default:</span><br><span class="line">	  circuitBreaker: </span><br><span class="line">	    requestVolumeThreshold: 1000</span><br><span class="line">      fallback:</span><br><span class="line">        enabled: true</span><br><span class="line">      execution:</span><br><span class="line">        isolation:</span><br><span class="line">          thread:</span><br><span class="line">            timeoutInMilliseconds: 100000 </span><br></pre></td></tr></table></figure>
<p>hystrix.command.default: 全局的作用域，作用的所有的hystrix的客户端,如果需要对某个微服务，可以写serviceId<br>hystrix.command.default.fallback.enabled 是否开启回退方法<br>hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds 请求处理的超时时间，缺省为1000,表示默认的超时时间为1S</p>
<p>hystrix.threadpool.default.coreSize 核心线程池数量<br>hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests 回退最大线程数<br>hystrix.command.default.circuitBreaker.requestVolumeThreshold 熔断器失败的个数，进入熔断器的请求达到1000时服务降级（之后的请求直接进入熔断器）</p>
<h3 id="ribbon-优化"><a href="#ribbon-优化" class="headerlink" title="ribbon 优化"></a>ribbon 优化</h3><p>Ribbon进行客户端负载均衡的Client并不是在服务启动的时候就初始化好的，而是在调用的时候才会去创建相应的Client，所以第一次调用的耗时不仅仅包含发送HTTP请求的时间，还包含了创建RibbonClient的时间，这样一来如果创建时间速度较慢，同时设置的超时时间又比较短的话，很容易就会出现上面所描述的显现。</p>
<p>因此我们可以通过设置:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ribbon:</span><br><span class="line">	eager-load:</span><br><span class="line">    	enabled：true</span><br><span class="line">	clients：service-1,service-2,service-n</span><br></pre></td></tr></table></figure>
<p>参数说明:</p>
<p>ribbon.eager-load.enabled : 开启Ribbon的饥饿加载模式</p>
<p>ribbon.eager-load.clients: 指定需要饥饿加载的服务名，如果不指定服务名称，饥饿加载模式无效</p>
<p>Zuul的饥饿加载，没有设计专门的参数来配置，而是直接采用了读取路由配置来进行饥饿加载。所以，如果我们使用默认路由，而没有通过配置的方式指定具体路由规则，那么 zuul.ribbon.eager-load.enabled=true 的配置就没有什么作用了。</p>
<p>如果需要真正启用Zuul 的饥饿加载，需要通过<code>zuul.ignored-services=*</code>来忽略所有的默认路由，让所有路由配置均维护在配置文件中，以达到网关启动的时候就加载好各个路由的负载均衡对象。</p>
<p>关于Zuul 的默认路由，这里详细介绍一下。假设你的注册服务中心有三个已经注册的服务名称service-a，service-b，service-c。但是在zuul配置文件中，只映射了service-a，service-b，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zuul:</span><br><span class="line">  ribbon:</span><br><span class="line">    eager-load:</span><br><span class="line">      enabled: true </span><br><span class="line">  ignored-services: ‘*’</span><br><span class="line">  routes:</span><br><span class="line">    a:</span><br><span class="line">      path: /a/**</span><br><span class="line">      serviceId: service-a</span><br><span class="line">    b:</span><br><span class="line">     path: /b/**</span><br><span class="line">     serviceId: service-b</span><br></pre></td></tr></table></figure>
<p>这里，虽然没有配置service-c的映射，但是，由于zuul有默认的映射机制，还是可以通过<a href="http://ip:port/service-c/的Url，访问到你的service-c服务，如果不想向外界暴露默认的服务映射，可以加上">http://ip:port/service-c/的Url，访问到你的service-c服务，如果不想向外界暴露默认的服务映射，可以加上</a> zuul.ignored-services:*</p>
<p>最后，介绍一下疯狂创客圈：<strong>疯狂创客圈，一个Java 高并发研习社群</strong> 【<a href="https://www.cnblogs.com/crazymakercircle/p/9904544.html">博客园 总入口</a> 】</p>
<p>疯狂创客圈，倾力推出：<strong>面试必备 + 面试必备 + 面试必备</strong> 的基础原理+实战 书籍 《<a href="https://www.cnblogs.com/crazymakercircle/p/11397271.html">Netty Zookeeper Redis 高并发实战</a>》</p>
<p><a href="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTQ4NTM5OC8yMDE5MDgvMTQ4NTM5OC0yMDE5MDgyMjIyNTE1NjQyNy05NTY0MjQxMjQuanBn?x-oss-process=image/format,png">![img](../images/Springcloud 配置  史上最全,一文全懂/aHR0.jpg)</a></p>
<hr>
<h2 id="疯狂创客圈-Java-死磕系列"><a href="#疯狂创客圈-Java-死磕系列" class="headerlink" title="疯狂创客圈 Java 死磕系列"></a>疯狂创客圈 Java 死磕系列</h2><ul>
<li><strong>Java (Netty) 聊天程序【 亿级流量】实战 开源项目实战</strong></li>
<li><strong>Netty 源码、原理、JAVA NIO 原理</strong></li>
<li><strong>Java 面试题 一网打尽</strong></li>
<li>疯狂创客圈 <a href="https://www.cnblogs.com/crazymakercircle/p/9904544.html"><strong>【 博客园 总入口 】</strong></a></li>
</ul>
<hr>
<p>[外链图片转存中…(img-AaP9w9ZI-1571062386803)]</p>
<hr>
<h2 id="疯狂创客圈-Java-死磕系列-1"><a href="#疯狂创客圈-Java-死磕系列-1" class="headerlink" title="疯狂创客圈 Java 死磕系列"></a>疯狂创客圈 Java 死磕系列</h2><ul>
<li><strong>Java (Netty) 聊天程序【 亿级流量】实战 开源项目实战</strong></li>
<li><strong>Netty 源码、原理、JAVA NIO 原理</strong></li>
<li><strong>Java 面试题 一网打尽</strong></li>
<li>疯狂创客圈 <a href="https://www.cnblogs.com/crazymakercircle/p/9904544.html"><strong>【 博客园 总入口 】</strong></a></li>
</ul>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Springcloud学习笔记之微服务之间互相调用时token传递问题</title>
    <url>/post/39be146d.html</url>
    <content><![CDATA[<p>微服务之间调用时时常遇到需要将服务A的token传递给服务B的情况，如果每个服务调用单独写就太僵硬了，之前试过自己写AOP去处理这个问题，功能上虽然没问题，但是总感觉比较low，最近在解决另外一个问题时，意外学到了一个解决方法。</p>
<p>这里贴一下核心代码</p>
<blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Service</span><br><span class="line">public class FeignServiceImpl implements FeignService &#123;</span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line">  private ConfigurableEnvironment environment;</span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line">  private FeignClientRequestInterceptor requestInterceptor;</span><br><span class="line"></span><br><span class="line">  private final Feign.Builder nameBuilder;</span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line">  public FeignServiceImpl(Decoder decoder, Encoder encoder, Client client, Contract contract) &#123;</span><br><span class="line">    // nameBuilder直接使用client，它会使用负载均衡</span><br><span class="line">    nameBuilder = Feign.builder()</span><br><span class="line">        .client(client)</span><br><span class="line">        .encoder(encoder)</span><br><span class="line">        .decoder(decoder)</span><br><span class="line">        .contract(contract);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public  T newInstanceByTenantName(Class apiType, String shortName) &#123;</span><br><span class="line">    String bsServiceName = environment.getProperty(&quot;feign.name&quot;);</span><br><span class="line">    String instanceName = &quot;http://&quot; + shortName.toLowerCase() + &quot;-&quot; + bsServiceName;</span><br><span class="line">    return nameBuilder</span><br><span class="line">        .requestInterceptor(requestInterceptor)</span><br><span class="line">        .target(apiType, instanceName);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class FeignClientRequestInterceptor implements RequestInterceptor &#123;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public void apply(RequestTemplate requestTemplate) &#123;</span><br><span class="line">    ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder</span><br><span class="line">        .getRequestAttributes();</span><br><span class="line">    HttpServletRequest request = attributes.getRequest();</span><br><span class="line"></span><br><span class="line">    String token = request.getHeader(AUTHORIZATION);</span><br><span class="line">    requestTemplate.header(AUTHORIZATION, token);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
</blockquote>
<p> 这个例子里面，主要就是使用feignbuilder动态的根据url得到目标服务的地址，在去请求对应的服务B(这一步可以无视啦，项目的业务场景)。而在此之前添加了一个拦截器，强行把自己的token塞给对别人的请求header。</p>
<p>很简单，也很简洁，比我之前的方法好。</p>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,spring cloud,token</tag>
      </tags>
  </entry>
  <entry>
    <title>VirtualminWebmin安装与使用强大的VPS服务器和虚拟主机管理系统</title>
    <url>/post/8ff6ed20.html</url>
    <content><![CDATA[<p>Webmin是一个开源免费并且功能非常强大的基于Web的Unix系统管理工具，支持绝大多数的Unix系统，另外还包括：AIX、HPUX、Solaris、Unixware、Irix和FreeBSD等，Webmin可以对服务器、磁盘、网络、硬件等进行全方位的管理，功能媲美地WHM。</p>
<p>Virtualmin是<a href="https://www.freehao123.com/tag/webmin/">Webmin</a>一个模块，是一个功能强大的虚拟主机管理系统，包括了DNS、数据库、用户、网络配置、配额限制、邮局等等，甚至是整个服务器都可以使用Virtualmin来管理，Virtualmin可以很好与Webmin配合，实现全方位地管理VPS和服务器。</p>
<p><a href="https://www.freehao123.com/tag/virtualminwebmin/">Virtualmin/Webmin</a>搭配起来就相当于WHM/Cpanel面板了，如果再搭上WHMCS，就可以实现在线销售和自助管理虚拟空间了。本篇文章就来分享一下<a href="https://www.freehao123.com/tag/virtualmin/">Virtualmin</a>/Webmin安装与使用，由于Virtualmin/Webmin功能非常地多，有兴趣的朋友还需要深入地研究一下。</p>
<p>如果你对搭建虚拟主机管理平台和VPS主机管理面板有兴趣，可以看看：</p>
<ul>
<li>1、合租方案：<a href="https://www.freehao123.com/vps-hezu/">VPS主机多人合租使用或多用户共享服务器使用方案-权限分配管理</a></li>
<li>2、免费VPS面板：<a href="https://www.freehao123.com/vestacp-whmcs/">Vestacp整合WHMCS实现自动销售开通虚拟主机服务</a></li>
<li>3、流行的组合：<a href="https://www.freehao123.com/whm-cpanel/">WHM使用教程:管理Cpanel账户,服务器配置和基本操作方法</a></li>
</ul>
<p><strong><a href="https://www.freehao123.com/tag/virtualmin/">Virtualmin</a>/Webmin安装与使用:强大的VPS服务器和虚拟主机管理系统</strong></p>
<p><strong>一、Virtualmin/Webmin安装方法</strong></p>
<p>1、Virtualmin/Webmin官网：</p>
<ul>
<li>1、<a href="https://www.freehao123.com/tag/webmin/">Webmin</a>：<a href="http://www.[webmin](https://www.freehao123.com/tag/webmin/).com/">http://www.[webmin](https://www.freehao123.com/tag/webmin/).com/</a></li>
<li>2、Virtualmin：<a href="https://www.virtualmin.com/">https://www.virtualmin.com/</a></li>
</ul>
<p>2、Virtualmin/Webmin安装只要执行以下命令就可以了，安装时间也很短，大概只要十几分钟。</p>
<table>
<thead>
<tr>
<th><code>1 2 3 </code></th>
<th><code>wget http://software.virtualmin.com/gpl/scripts/install.sh   chmod +x install.sh    ./install.sh</code></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>3、安装好了Virtualmin/Webmin后，使用<a href="https://ip:10000或者https://域名:10000来登录你的管理面板后台，用户名是root，密码是你的VPS的root密码。">https://ip:10000或者https://域名:10000来登录你的管理面板后台，用户名是root，密码是你的VPS的root密码。</a></p>
<p>4、第一次登录使用Virtualmin/Webmin时，会提示让你选择相关的配置，主要是以省内存为优先还是以效率为优先。</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_01.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_01.gif" alt="Virtualmin/Webmin启动配置"></a></p>
<p>5、另外还会要求设置好MysqL数据库管理员密码。</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_02.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_02.gif" alt="Virtualmin/Webmin设置MysqL密码"></a></p>
<p>6、如果有自己的NS服务器，这时可以填写，否则可以直接跳过。</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_03.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_03.gif" alt="Virtualmin/Webmin直接跳过"></a></p>
<p>7、进入了Virtualmin/Webmin后，点击webmin下的Change Language And Theme。</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_05.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_05.gif" alt="Virtualmin/Webmin设置语言"></a></p>
<p>8、在这里选择语言为中文简体，重新加载，Virtualmin/Webmin就变成了中文了。</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_06.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_06.gif" alt="Virtualmin/Webmin切换为中文"></a></p>
<p>9、这就是Virtualmin的管理面板。（点击放大）</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_09.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_09-500x240.gif" alt="Virtualmin控制面板"></a></p>
<p>10、这是Webmin的管理面板。（点击放大）</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_10.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_10-500x240.gif" alt="Webmin控制面板"></a></p>
<p><strong>二、Virtualmin/Webmin新建虚拟主机</strong></p>
<p>1、在创建虚拟主机前，先可以设置用户权限的“服务器模板”，否则直接使用默认的服务器模板权限和Root是一样大。</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_13.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_13.gif" alt="Virtualmin/Webmin新建服务器模板"></a></p>
<p>2、在编辑服务器模板中可以对子目录权限、计划任务、端口号、SSL证书等进行相关的设置。（点击放大）</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_14.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_14-500x240.gif" alt="Virtualmin/Webmin编辑模板"></a></p>
<p>3、另外记得添加一个主机套餐模板，主要是规定新开通的主机的绑定域名数量、空间大小、流量大小和相关的服务器权限等等。（点击放大）</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_15.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_15-500x240.gif" alt="Virtualmin/Webmin设置主机套餐"></a></p>
<p>4、现在我们就可以点击Virtualmin下的“Create Virtual Server”来开通新的主机了。</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_12.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_12.gif" alt="Virtualmin/Webmin开通新的主机"></a></p>
<p>5、填写域名、密码，选择好服务器模板和主机套餐，确定后即可开通新的虚拟主机。</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_16.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_16.gif" alt="Virtualmin/Webmin主机配额"></a></p>
<p><strong>三、Virtualmin/Webmin添加FTP和邮局账户</strong></p>
<p>1、在新添加的虚拟主机下方，会有一个“编辑用户”选项。</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_17.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_17.gif" alt="Virtualmin/Webmin编辑用户"></a></p>
<p>2、在这里我们就可以创建新的FTP账户和邮箱账户了，创建账户时可以对账户的权限进行相应的调整。（点击放大）</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_18.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_18-500x240.gif" alt="Virtualmin/Webmin新建FTP账户"></a></p>
<p><strong>四、Virtualmin/Webmin管理MysqL数据库</strong></p>
<p>1、点击Virtualmin，在新添加的虚拟主机下方会有“编辑数据库”选项。</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_21.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_21.gif" alt="Virtualmin/Webmin管理数据库"></a></p>
<p>2、在这里就可以创建新的数据库。</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_22.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_22.gif" alt="Virtualmin/Webmin新建MysqL"></a></p>
<p>3、管理MysqL数据库密码、导入与导出数据库。</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_23.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_23.gif" alt="Virtualmin/Webmin导入与导出"></a></p>
<p><strong>五、强大的Virtualmin/Webmin主机备份功能</strong></p>
<p>1、在Virtualmin中会有一个“备份和恢复”功能，这里即可以备份整个服务器相关的设置，也可以备份单个虚拟主机的文件。</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_24.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_24.gif" alt="Virtualmin/Webmin备份"></a></p>
<p>2、选择你的备份文件、格式、存储目标等即可执行自动与定时备份。（点击放大）</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_25.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_25-500x240.gif" alt="Virtualmin/Webmin定时自动备份"></a></p>
<p><strong>六、Virtualmin/Webmin管理多个IP地址</strong></p>
<p>1、第一步：添加新的IP地址。如果想给Virtualmin/Webmin增加新的IP地址，进入Webmin-&gt;网络-&gt;网络配置-&gt;增加接口，如图：</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_26.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_26.gif" alt="Virtualmin/Webmin增加新的IP"></a></p>
<p>2、在这里可以看到服务器上已经有的IP地址，点击增加接口就是新增加IP地址。</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_27.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_27.gif" alt="Virtualmin/Webmin新建端口"></a></p>
<p>3、填入名称、IP地址等，点击新建并应用，如果IP地址正确的话就会添加成功。（点击放大）</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_28.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_28-500x240.gif" alt="Virtualmin/Webmin添加IP成功"></a></p>
<p>4、第二步：增加虚拟主机共享IP。进入Virtualmin-&gt;Addresses and Networking。</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_29.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_29.gif" alt="Virtualmin/Webmin增加共享IP"></a></p>
<p>5、在共享的IP地址中填入需要增加的IP，并保存。</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_30.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_30.gif" alt="Virtualmin/Webmin输入IP地址"></a></p>
<p>6、第三步：绑定IP到虚拟主机上。要想将IP单独给某一个域名或者虚拟主机使用，需要进入Virtualmin-&gt;服务器配置的修改IP地址。</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_31.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_31.gif" alt="Virtualmin/Webmin进入虚拟主机IP管理页面"></a></p>
<p>7、在Shared address的下拉菜单选择新增加的IP地址即可。</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_32.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_32.gif" alt="Virtualmin/Webmin绑定IP到域名"></a></p>
<p><strong>七、Virtualmin/Webmin对服务器相关管理操作</strong></p>
<p>1、Virtualmin/Webmin升级也很简单，如果有新的升级会在控制面板中看到提示。</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_07.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_07.gif" alt="Virtualmin/Webmin自动升级"></a></p>
<p>2、点击自动升级后，Virtualmin/Webmin会自动下载安装包执行安装命令，最后升级完成。</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_08.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_08.gif" alt="Virtualmin/Webmin升级更新完成"></a></p>
<p>3、在Webmin-&gt;系统-&gt;引导和关机中，可以查看并管理Virtualmin/Webmin的相关进程，甚至可以重启VPS和关闭整个系统。</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_34.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_34.gif" alt="Virtualmin/Webmin重启关闭服务器"></a></p>
<p>4、另外在检查服务器配置时，会提示“The mailman queue processor /usr/lib/mailman/bin/qrunner is not running on your system. It can be started in the Bootup and Shutdown module… your system is not ready for use by Virtualmin.”</p>
<p>5、我们只要在引导和关机中启动Mailman进程即可。</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_11.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_11.gif" alt="Mailman启动进程"></a></p>
<p><strong>八、Virtualmin/Webmin安装使用小结</strong></p>
<p>1、Virtualmin/Webmin安装很简单，功能很强大，几乎整个服务器可以使用Virtualmin/Webmin来管理，适合搭建多用户共享使用VPS服务器的平台，个人使用感觉是有点复杂了。</p>
<p><a href="https://www.freehao123.com/wp-content/uploads/2014/05/Virtualmin_20.gif"><img src="/../images/VirtualminWebmin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BC%BA%E5%A4%A7%E7%9A%84VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Virtualmin_20.gif" alt="Virtualmin/Webmin限制资源连接"></a></p>
<p>2、Virtualmin/Webmin的中文语言包汉化不完全，Virtualmin和Webmin在功能分类上有些模糊，有时想要进行某项操作往往会感觉找不到地方。如果有一套免费的财务系统就更完美了。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>-linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10 使用docker toolbox安装docker</title>
    <url>/post/1b6b37c5.html</url>
    <content><![CDATA[<h1 id="Windows10-使用docker-toolbox安装docker"><a href="#Windows10-使用docker-toolbox安装docker" class="headerlink" title="Windows10 使用docker toolbox安装docker"></a><a href="https://www.cnblogs.com/shaosks/p/6932319.html">Windows10 使用docker toolbox安装docker</a></h1><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>　　　　Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 <a href="http://baike.baidu.com/item/Linux">Linux</a> 机器上，也可以实现<a href="http://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E5%8C%96">虚拟化</a>。容器是完全使用<a href="http://baike.baidu.com/item/%E6%B2%99%E7%AE%B1/393318">沙箱</a>机制，相互之间不会有任何接口。</p>
<h2 id="二、-使用docker-toolbox安装docker"><a href="#二、-使用docker-toolbox安装docker" class="headerlink" title="二、 使用docker toolbox安装docker"></a><strong>二、 使用docker toolbox安装docker</strong></h2><p>　　　　对于Windows用户来说，使用docker toolbox来安装docker是最简单的方式</p>
<p>　　　　docker toolbox是一个工具集，它主要包含以下一些内容：</p>
<p>　　　　　1、Docker CLI 客户端，用来运行docker引擎创建镜像和容器</p>
<p>　　　　　2、Docker Machine. 可以让你在windows的命令行中运行docker引擎命令</p>
<p>　　　　　3、Docker Compose. 用来运行docker-compose命令</p>
<p>　　　　　4、Kitematic. 这是Docker的GUI版本</p>
<p>　　　　　5、Docker QuickStart shell. 这是一个已经配置好Docker的命令行环境</p>
<p>　　　　　6、Oracle VM Virtualbox. 虚拟机</p>
<p>　　　　由于Docker引擎的守护进程使用的是Linux的内核，所以我们不能够直接在windows中运行docker引擎。而是需要运行Docker Machine命令 docker-machine， 在你的机器上创建和获得一个Linux虚拟机，</p>
<p>　　　　用这个虚拟机才可以在你的windows系统上运行Docker引擎</p>
<h3 id="第一步：检查你当前的windows系统是否符合要求："><a href="#第一步：检查你当前的windows系统是否符合要求：" class="headerlink" title="第一步：检查你当前的windows系统是否符合要求："></a><strong>第一步：检查你当前的windows系统是否符合要求：</strong></h3><p>　　　　为了运行Docker，你的机器必须是windows7或以上版本的64bit系统</p>
<p>　　　　<img src="/../images/Windows10%E4%BD%BF%E7%94%A8dockertoolbox%E5%AE%89%E8%A3%85docker/194720-20170602110131539-359118712.png" alt="img"></p>
<p>　　　　另外，你的机器必须支持硬件虚拟化技术(Hardware Virtualization Technology)并且已被启用。（<a href="http://baike.baidu.com/link?url=biNzwBpZdgOqOfSeWSQMxzRYLRIrptU_YfFFmbwfROINwdLm11LkKQ-u0AADJAdSX85ejZtUV6h9kKiRohRbIq">什么是硬件虚拟化技术</a>）</p>
<p>　　　　对于windows10系统来说，你可以在 任务管理器-&gt;性能 中查看到你的电脑是否开启了虚拟化</p>
<p> 　　　<img src="/../images/Windows10%E4%BD%BF%E7%94%A8dockertoolbox%E5%AE%89%E8%A3%85docker/194720-20170602110326727-318477468.png" alt="img"></p>
<p>　　　　<strong>第二步：安装Docker Toolbox</strong></p>
<p>　　　　下载地址：<a href="http://get.daocloud.io/#install-docker-for-mac-windows">http://get.daocloud.io/#install-docker-for-mac-windows</a> </p>
<p>　　　　<img src="/../images/Windows10%E4%BD%BF%E7%94%A8dockertoolbox%E5%AE%89%E8%A3%85docker/194720-20170602110538336-1929398571.png" alt="img"></p>
<p>　　　　或者在：<a href="https://www.docker.com/products/docker-toolbox%E4%B8%8B%E8%BD%BD%EF%BC%8C%E8%BF%99%E4%B8%AA%E4%B8%8B%E8%BD%BD%E6%AF%94%E8%BE%83%E6%85%A2">https://www.docker.com/products/docker-toolbox下载，这个下载比较慢</a></p>
<p>　　　　<img src="/../images/Windows10%E4%BD%BF%E7%94%A8dockertoolbox%E5%AE%89%E8%A3%85docker/194720-20170602110702946-2060372446.png" alt="img"></p>
<p>　　　　下载完成后安装　　</p>
<p>　　　　在这一步，你将安装Docker Toolbox。安装后你的系统将会安装以下几个软件：</p>
<p>　　　　1、Windows版的Docker客户端</p>
<p>　　　　2、Docker Toolbox管理工具和ISO镜像</p>
<p>　　　　3、Oracle VM Virtualbox</p>
<p>　　　　4、Git MSYS-git Unix 工具</p>
<p> Docker Toolbox下载地址：get.daocloud.io/toolbox/ 推荐这个地址下载，比较快</p>
<h3 id="第二步：检查你当前的windows系统是否符合要求：下载好以后开始安装"><a href="#第二步：检查你当前的windows系统是否符合要求：下载好以后开始安装" class="headerlink" title="第二步：检查你当前的windows系统是否符合要求：下载好以后开始安装"></a><strong>第二步：检查你当前的windows系统是否符合要求：</strong>下载好以后开始安装</h3><ul>
<li>第二步安装配置选项<br><img src="/../images/Windows10%E4%BD%BF%E7%94%A8dockertoolbox%E5%AE%89%E8%A3%85docker/2008270-20201026193809079-2089550110.png" alt="img"><ul>
<li>docker compose 是编排docker容器的一种技术，能够同时操作多个docker容器，能够配合使用</li>
<li>VirtualBox必选</li>
<li>git之前安装过就不用在勾选</li>
<li><img src="/../images/Windows10%E4%BD%BF%E7%94%A8dockertoolbox%E5%AE%89%E8%A3%85docker/2008270-20201026193951659-1634068379.png" alt="img"></li>
</ul>
</li>
<li>默认配置不需要修改<ul>
<li><img src="/../images/Windows10%E4%BD%BF%E7%94%A8dockertoolbox%E5%AE%89%E8%A3%85docker/2008270-20201026193838143-36771386.png" alt="img"></li>
<li><img src="/../images/Windows10%E4%BD%BF%E7%94%A8dockertoolbox%E5%AE%89%E8%A3%85docker/2008270-20201026194212258-1954880672.png" alt="img"></li>
</ul>
</li>
<li>安装完成后右键属性配置git位置<ul>
<li><img src="/../images/Windows10%E4%BD%BF%E7%94%A8dockertoolbox%E5%AE%89%E8%A3%85docker/2008270-20201026194347190-1992497615.png" alt="img"></li>
</ul>
</li>
<li>然后打开，第一次打开可能比较慢，还要下载一个：<code>C:\Users\ASUS\.docker\machine\cache</code> 下的<code>boot2docker.iso</code>文件，当文件下载完成出现如下就代表成功</li>
</ul>
<p>　　　　<strong>第三步、 确认是否安装成功</strong></p>
<p> 　　　　安装完成后，你会在你的电脑桌面上看到新增了三个图标</p>
<p>　　　　<img src="/../images/Windows10%E4%BD%BF%E7%94%A8dockertoolbox%E5%AE%89%E8%A3%85docker/194720-20170602111314930-450753728.png" alt="img"></p>
<p>　　　　双击Docker Quickstart Terminal图标，启动一个终端</p>
<p>　　　　第一次启动的话你会看到命令行会输出一些东西，等待一下，它会配置Docker Toolbox，之后，当它完成后，你会看到启动成功的画面</p>
<p>　　　　若在bash界面提示没有boot2docker镜像，需要在github上下载，提示大概如下</p>
<p>　　　　<img src="/../images/Windows10%E4%BD%BF%E7%94%A8dockertoolbox%E5%AE%89%E8%A3%85docker/194720-20170602111742321-592905625.png" alt="img"></p>
<p>　　　　</p>
<p>　　　　这是因为没有找到默认的boot2docker镜像的原因，提示正在下载，然而github的下载速度不可恭维，第一反应都是找别的站资源下载。</p>
<p>　　　　在此要注意了，不同的docker版本最好要对应相同的boot2docker版本，相信打开github下载页的应该都留意到。最后我才发现，其实不用下载，</p>
<p>　　　　在一开始安装好的DockerToolbox根目录下就有一个boot2docker，并且可以推断就是对应的版本。</p>
<p>　　　　<img src="/../images/Windows10%E4%BD%BF%E7%94%A8dockertoolbox%E5%AE%89%E8%A3%85docker/194720-20170602112022961-179914100.png" alt="img"></p>
<p>　　　　　　把boot2docker.iso复制到，bash所提示找不到的那个目录下（我这里是C:\Users\Administrator.docker\machine\cache）。</p>
<p>　　　　　　然后再次双击Docker Quickstart Terminal图标，出现如下界面，说明安装成功了。</p>
<p>　　　　　　<img src="/../images/Windows10%E4%BD%BF%E7%94%A8dockertoolbox%E5%AE%89%E8%A3%85docker/194720-20170602111623008-429278212.png" alt="img"></p>
<p>　　　　在命令行中输入docker run hello-world并按回车键，如果docker配置成功的话，你会看到命令行中有如下输出：</p>
<p>　　　　<img src="/../images/Windows10%E4%BD%BF%E7%94%A8dockertoolbox%E5%AE%89%E8%A3%85docker/194720-20170602112516305-1088532059.png" alt="img"></p>
<p>　　　　自此，我们便在我们的windows下安装好了docker环境了</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>WireGuard安装配置教程</title>
    <url>/post/4ee0bec6.html</url>
    <content><![CDATA[<p>大家都知道，最近管家对梯子管理的太严格，准备去浏览一下国外的技术，经常出现梯子折掉的情况，还好有一个朋友LK给我推荐WireGuard，所以准备重新支起梯子。WireGuard是一个通过UDP协议，实现端对端的连接，更加安全的保护梯子，具体的优点大家自己查询吧，我只说一个字“很快”能比正常的速度快上1／3，那我们开始吧。</p>
<p><strong>一、环境介绍</strong></p>
<p>服务器：Ubuntu16.04 x64</p>
<p>客户端：Windows7</p>
<p>虽然写了服务器、客户端，但需要大家知道的是，WireGuard并没有强调服务器与客户端的，只在于是谁连接了谁，我们这里使用Windows7连接Ubuntu，所以这里标明Ubuntu为服务器，Windows7为客户端。</p>
<p><strong>二、Windows7下Tunsafe安装及密钥生成</strong></p>
<p>我们所使用的客户端是Windows7，可以使用Tunsafe客户端，下载地址：“<a href="https://tunsafe.com”。软件安装过程就略过，软件打开后界面如下：">https://tunsafe.com”。软件安装过程就略过，软件打开后界面如下：</a></p>
<p><img src="/../images/WireGuard%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/word-image-16.png" alt="img"></p>
<p>可以使用客户端工具来生成公钥与么钥。点击客户端“File”菜单，选择“Generate Key Pair…”项，点击“Randomize”按钮来生成客房端公钥与私钥，如下图所示。</p>
<p><img src="/../images/WireGuard%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/word-image-17.png" alt="img"></p>
<p>客户端私钥：aL541p6k4ys1jhhWV+dFIK4MSogdMoGWnoJCW40PeW0=</p>
<p>客户端公钥：WWwXgCaptYXGsjRSjRRRiP3zYkkRthECHUPadqh7LTM=</p>
<p><strong>三、Ubuntu下WireGuard安装</strong></p>
<p>1、安装WireGuard</p>
<p>WireGuard官网已经给出了安装教程，大家可以作为参考，网址为：“<a href="https://www.wireguard.com/install/%E2%80%9D%E3%80%82">https://www.wireguard.com/install/”。</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add-apt-repository ppa:wireguard/wireguard</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install wireguard-dkms wireguard-tools linux-headers-$(uname -r)</span><br></pre></td></tr></table></figure>


<p><img src="/../images/WireGuard%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/word-image-18.png" alt="img"></p>
<p>2、生成服务器端密钥</p>
<p>在安装成功后，在/etc目录下，就会创建wireguard文件夹。接下来进入到目录下，生成服务器端密钥。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc/wireguard/</span><br><span class="line">umask 077</span><br><span class="line">wg genkey | tee server_private_key | wg pubkey &gt; server_public_key</span><br></pre></td></tr></table></figure>


<p>生成完成后，就可以看到当前路径下有“server_private_key”及“server_public_key”2个文件。</p>
<p>3、创建服务器配置文件</p>
<p>在/etc/wireguard/下创建wg0.conf文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/wireguard/wg0.conf</span><br></pre></td></tr></table></figure>


<p>文件内容为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Interface]</span><br><span class="line">Address = 10.200.0.1/24</span><br><span class="line">SaveConfig = true</span><br><span class="line">PrivateKey = $(cat server_privatekey) # 填写本机的privatekey 内容</span><br><span class="line">ListenPort = 51820</span><br><span class="line"></span><br><span class="line">[Peer]</span><br><span class="line">PublicKey =  $(cat client_publickey)  # 填写对端的publickey 内容</span><br><span class="line">AllowedIPs = 10.200.0.2/24</span><br></pre></td></tr></table></figure>


<p>刚刚建立的wg0.conf主要是为了wg0这个虚拟网卡的配置文件，其中，</p>
<p>[Interface]：服务器端配置开始标志</p>
<p>Address：为服务器本机IP地址</p>
<p>SaveConfig：为true时，有客户端连接时，保存状态信息，自动保存到wg0.conf文件</p>
<p>PrivateKey：为服务器的私钥</p>
<p>ListenPort：为服务器监听的端口号51820</p>
<p>[Peer]：客户端开始标志，（多个客户端，会有多个配置连接）</p>
<p>PublicKey：为客户端的公钥，这个需要客户端生成，客户端生成完成后，需要填写</p>
<p>AllowedIPs：允许客户端连接的地址</p>
<p>服务器配置文件完整截图如下：</p>
<p><img src="/../images/WireGuard%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/word-image-19.png" alt="img"></p>
<p>4、允许IP转发</p>
<p>在服务器中，要加入IP转发，要不然会出现客户端不能上网，修改/etc/sysctl.conf文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br></pre></td></tr></table></figure>


<p>将配置文件中“net.ipv4.ip_forward=1”前面的“#”号去掉。</p>
<p><img src="/../images/WireGuard%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/word-image-20.png" alt="img"></p>
<p>修改完成后，保存后，重新启动服务器，或者直接用使用如下命令操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sysctl -p</span><br><span class="line">echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure>


<p><img src="/../images/WireGuard%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/word-image-21.png" alt="img"></p>
<p>5、修改防火墙规则</p>
<p>设置iptables列表的内容，需要配置接受的协议及端口号，数据转发也需要它的支持。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A INPUT -p udp -m udp --dport 51820 -m conntrack --ctstate NEW -j ACCEPT</span><br><span class="line">iptables -A INPUT -s 10.200.0.0/24 -p tcp -m tcp --dport 53 -m conntrack --ctstate NEW -j ACCEPT</span><br><span class="line">iptables -A INPUT -s 10.200.0.0/24 -p udp -m udp --dport 53 -m conntrack --ctstate NEW -j ACCEPT</span><br><span class="line">iptables -A FORWARD -i wg0 -o wg0 -m conntrack --ctstate NEW -j ACCEPT</span><br><span class="line">iptables -t nat -A POSTROUTING -s 10.200.0.0/24 -o ens3 -j MASQUERADE</span><br></pre></td></tr></table></figure>


<p>这里特别需要说明的是，最后一行中的“ens3”为服务器本地网卡的名称，这个需要根据你自己的网卡名称而定。配置完成后，将其保存起来。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install iptables-persistent</span><br><span class="line">systemctl enable netfilter-persistent</span><br><span class="line">systemctl start netfilter-persistent</span><br><span class="line">netfilter-persistent save</span><br></pre></td></tr></table></figure>


<p>6、DNS服务器配置</p>
<p>这一步可以配置，也可以不用配置，主要是因为使用公共DNS，存在泄漏IP地址的情况，所以我们自己建立DNS，让我们隐藏在VPS后面，从而加强我们的安全，下面的语句要逐条执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install unbound unbound-host</span><br><span class="line">curl -o /var/lib/unbound/root.hints https://www.internic.net/domain/named.cache</span><br></pre></td></tr></table></figure>


<p>接下来配置unbound。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/unbound/unbound.conf.d/root-auto-trust-anchor-file.conf</span><br></pre></td></tr></table></figure>


<p>将原有内容注释后，修改配置文件内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">num-threads: 4</span><br><span class="line"></span><br><span class="line">#允许日志</span><br><span class="line">verbosity: 1</span><br><span class="line"></span><br><span class="line">#根服务器列表</span><br><span class="line">root-hints: &quot;/var/lib/unbound/root.hints&quot;</span><br><span class="line"></span><br><span class="line">#DNSSEC的根密钥文件</span><br><span class="line">auto-trust-anchor-file: &quot;/var/lib/unbound/root.key&quot;</span><br><span class="line"></span><br><span class="line">#允许查询任意网站的dns</span><br><span class="line">interface: 0.0.0.0</span><br><span class="line">max-udp-size: 3072</span><br><span class="line"></span><br><span class="line">#仅允许本机和10.200.0.0/24段ip访问</span><br><span class="line">access-control: 0.0.0.0/0 refuse</span><br><span class="line">access-control: 127.0.0.1 allow</span><br><span class="line">access-control: 10.200.0.0/24 allow</span><br><span class="line"></span><br><span class="line">#不进入公共dns服务器列表</span><br><span class="line">private-address: 10.200.0.0/24</span><br><span class="line"></span><br><span class="line">#隐藏信息</span><br><span class="line">hide-identity: yes</span><br><span class="line">hide-version: yes</span><br><span class="line"></span><br><span class="line">#强制DNSSEC</span><br><span class="line">harden-glue: yes</span><br><span class="line">harden-dnssec-stripped: yes</span><br><span class="line">harden-referral-path: yes</span><br><span class="line"></span><br><span class="line">#Add an unwanted reply threshold to clean the cache and avoid when possible a DNS Poisoning</span><br><span class="line">unwanted-reply-threshold: 10000000</span><br><span class="line"></span><br><span class="line">#验证地址，记录dns投毒事件（Have the validator print validation failures to the log.）</span><br><span class="line">val-log-level: 1</span><br><span class="line"></span><br><span class="line">#Minimum lifetime of cache entries in seconds</span><br><span class="line">cache-min-ttl: 1800</span><br><span class="line"></span><br><span class="line">#Maximum lifetime of cached entries</span><br><span class="line">cache-max-ttl: 14400</span><br><span class="line">prefetch: yes</span><br><span class="line">prefetch-key: yes</span><br></pre></td></tr></table></figure>


<p>配置完后，开启服务，并设置为开机自启动。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown -R unbound:unbound /var/lib/unbound</span><br><span class="line">systemctl enable unbound</span><br><span class="line">systemctl start unbound</span><br></pre></td></tr></table></figure>


<p>7、启动虚拟网卡</p>
<p>接下设置一下网卡的配置文件，以及开启网卡，并设置为服务，开机自启动。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown -v root:root /etc/wireguard/wg0.conf</span><br><span class="line">chmod -v 600 /etc/wireguard/wg0.conf</span><br><span class="line">wg-quick up wg0</span><br><span class="line">systemctl enable wg-quick@wg0.service</span><br></pre></td></tr></table></figure>


<p><strong>四、Windows7下客户端的配置</strong></p>
<p>软件打开后界面如下：</p>
<p><img src="/../images/WireGuard%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/word-image-22.png" alt="img"></p>
<p>接下来点击“File”菜单，选择“Edit Config File”项或界面中的“Edit Config”按钮，在弹出的配置文件，删除所有内容，修改如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Interface]</span><br><span class="line">Address = 10.200.0.2/24</span><br><span class="line">PrivateKey = $(cat client_privatekey)  # 填写本机的privatekey 内容</span><br><span class="line">DNS = 10.200.0.1</span><br><span class="line"></span><br><span class="line">[Peer]</span><br><span class="line">PublicKey = $(cat server_publickey)  # 填写对端的publickey 内容</span><br><span class="line">Endpoint = 服务器的物理ip地址:51820</span><br><span class="line">AllowedIPs = 0.0.0.0/0</span><br><span class="line">PersistentKeepalive = 21</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Interface]</span><br><span class="line">PrivateKey = qBPVFgVQLQMD/RgZplW1IRj8kCdeSzmWEK7MXvMDdGI=</span><br><span class="line">Address = 10.200.0.2/24</span><br><span class="line">DNS = 10.200.0.1</span><br><span class="line"></span><br><span class="line">[Peer]</span><br><span class="line">PublicKey = gJeSlpwfaph+NNt5mpwRHvfYg1dEs0md7fHNaIxL2lw=</span><br><span class="line">AllowedIPs = 0.0.0.0/0</span><br><span class="line">Endpoint = web.aichn.cn:5120</span><br><span class="line">PersistentKeepalive = 25</span><br></pre></td></tr></table></figure>
<p>接下来，说明一下配置文件各项的内容：</p>
<p>[Interface]：客户端配置开始部分</p>
<p>Address：客户端IP地址（也就是本机地址）</p>
<p>PrivateKey：客户端私钥（服务端生成的client_private_key文件）</p>
<p>DNS：服务器IP地址作为DNS</p>
<p>[Peer]：服务器端的配置信息</p>
<p>PublicKey：服务器的公钥（服务端生成的server_public_key文件）</p>
<p>Endpoint：服务器的IP地址及端口号</p>
<p>AllowedIPs：0.0.0.0/0为允许所有IP地址通讯，如果单个IP地址，可以写多个用逗号隔开，默认写客户端的IP地址</p>
<p>PersistentKeepalive：用来保持连接检查的，每过25s会自动检查连通性，如果IP有变化，也是通过这个自动更新endpoint</p>
<p><img src="/../images/WireGuard%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/word-image-23.png" alt="img"></p>
<p>我们点击界面上的“Connect”即可以连接到服务器，如下图所示。</p>
<p><img src="/../images/WireGuard%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/word-image-24.png" alt="img"></p>
<p>此时我们再测试一下是否可以正常访问Google，如下图所示。</p>
<p><img src="/../images/WireGuard%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/word-image-25.png" alt="img"></p>
<p>特别说明一下，如果我们对服务器配置文件做修改，需要先关闭网卡后，再进行配置文件的修改，修改完成后，开启网卡，以下这两个命令主要是用来关闭或启动网卡的方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 关闭虚拟网卡</span><br><span class="line">wg-quick down wg0</span><br><span class="line"></span><br><span class="line"># 启动虚拟网卡</span><br><span class="line">wg-quick up wg0</span><br></pre></td></tr></table></figure>


<p>附加说明，如果你还是连接不上，你可以把服务器重新启动一下。</p>
]]></content>
      <categories>
        <category>WireGuard</category>
      </categories>
      <tags>
        <tag>WireGuard</tag>
      </tags>
  </entry>
  <entry>
    <title>Zerotier 搭建私有根服务器及创建虚拟局域网完整教程</title>
    <url>/post/15292.html</url>
    <content><![CDATA[<h2 id="一、Zerotier-原理"><a href="#一、Zerotier-原理" class="headerlink" title="一、Zerotier 原理"></a>一、Zerotier 原理</h2><p><img src="/../images/Zerotier%20%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E6%A0%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/resize,m_fixed,w_1184.webp" alt="Zerotier 搭建私有根服务器及创建虚拟局域网完整教程_zerotier"></p>
<p>关于 zerotier，搜集网上资料和个人一点浅薄的理解。</p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol>
<li>planet：核心角色，官方不允许自建私有，zerotier 的行星服务器，用于管理全球所有的 zerotier 客户端的地址信息，帮助建立客户端间的直接链接，以及在无法建立直接链接时，作为中继服务器转发设备间的流量。</li>
<li>moon：官方允许自建私有，作为离客户端更近的中继服务器存在，可以使转发的效率更高。</li>
</ol>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol>
<li>客户端注册</li>
</ol>
<p>在内网机器上启动一个 zerotier 客户端，使用 join 加入一个网络，在控制台对客户端进行授权，此时 planet 上有如下记录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10.0.0.1 - 150.0.0.1/15679</span><br><span class="line">10.0.0.2 - 160.0.0.1/22226</span><br></pre></td></tr></table></figure>
<ol>
<li>尝试 p2p 连接</li>
</ol>
<p>当在 <code>10.0.0.1</code> 机器上访问 <code>10.0.0.2</code>，内网机器向 planet 查询到目标地址的公网 <code>160.0.0.1</code>，端口为 22226。</p>
<p><code>10.0.0.1</code> 尝试与 <code>160.0.0.1</code>的 22226 端口进行直接数据交互，这个过程称为 udp 打洞实现 p2p 直连。</p>
<ol>
<li>planet 转发</li>
</ol>
<p>由于各种网络限制，p2p 不能直连。</p>
<p>此时通过 planet 转发，如果还配置了 moon 节点，此时会通过速度快的 moon 节点进行转发。</p>
<p>如上图则大概率从上海的 moon 节点进行数据转发，此时网络取决于 moon 的带宽。</p>
<h2 id="二、私有-zerotier-planet-的优势"><a href="#二、私有-zerotier-planet-的优势" class="headerlink" title="二、私有 zerotier-planet 的优势"></a>二、私有 zerotier-planet 的优势</h2><ul>
<li>解除官方的设备连接数限制</li>
<li>提升手机客户端连接的稳定性</li>
</ul>
<h2 id="三、搭建私有-planet"><a href="#三、搭建私有-planet" class="headerlink" title="三、搭建私有 planet"></a>三、搭建私有 planet</h2><p>了解了 zerotier 的概念原理，那么大概了解搭建私有 planet 的重要性。</p>
<h3 id="1、运行控制器容器"><a href="#1、运行控制器容器" class="headerlink" title="1、运行控制器容器"></a>1、运行控制器容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name zt-ui \</span><br><span class="line">-v /home/docker/zt-ui/zerotier-one:/var/lib/zerotier-one \</span><br><span class="line">-v /home/docker/zt-ui/ztncui/etc:/opt/key-networks/ztncui/etc \</span><br><span class="line">-p 4000:4000 \</span><br><span class="line">-p 9993:9993 \</span><br><span class="line">-p 9993:9993/udp \</span><br><span class="line">-e MYADDR=1.1.1.1 \</span><br><span class="line">-e HTTP_PORT=4000 \</span><br><span class="line">-e HTTP_ALL_INTERFACES=yes \</span><br><span class="line">-e ZTNCUI_PASSWD=admin123 \</span><br><span class="line">--restart=always \</span><br><span class="line">hausen1012/ztncui</span><br></pre></td></tr></table></figure>
<p>这里需要注意的是传参需要将 <code>1.1.1.1</code> 修改为公网 ip。</p>
<h3 id="2、生成-planet-文件"><a href="#2、生成-planet-文件" class="headerlink" title="2、生成 planet 文件"></a>2、生成 planet 文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it zt-ui bash /tmp/patch.sh &amp;&amp; \</span><br><span class="line">docker restart zt-ui</span><br></pre></td></tr></table></figure>
<p>如果 linux 内核版本太低，可能报错 <code>FATAL: kernel too old</code>，那么需要升级内核。</p>
<p>关于升级内核，可以参考这篇文章 <a href="https://caoaman.cn/392.html">Linux 系统内核升级</a>。</p>
<p>当然，如果你觉得云服务器不太方便升级内核，那么完全可以用一台测试的虚拟机进行生成文件，文件生成后用 ftp 上传到 <code>/home/docker/zt-planet</code> 目录，然后再启动容器。</p>
<h3 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it zt-ui zerotier-cli listmoons</span><br><span class="line"># 显示如下内容则表示搭建成功</span><br><span class="line">[</span><br><span class="line"> &#123;</span><br><span class="line">  &quot;id&quot;: &quot;00000004e3b1b4b0&quot;,</span><br><span class="line">  &quot;roots&quot;: [</span><br><span class="line">   &#123;</span><br><span class="line">    &quot;identity&quot;: &quot;04e3b1b4b0:0:ea0c548b45efcc701c052305f06568c749a4647b9a5b111e2b372c05f7c3ed56ae1009c29cb1aa51d95057bf1b65b3a2f7b01d129437f6b72efd08f68281fb52&quot;,</span><br><span class="line">    &quot;stableEndpoints&quot;: [</span><br><span class="line">     &quot;1.1.1.1/9993&quot;</span><br><span class="line">    ]</span><br><span class="line">   &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;signature&quot;: &quot;b4f539ef93e198203d9e270c155d091769408ff98489d83bcf6444d2a95112ca7369138b98d42512caa3c878f3eff2c27ecada28f549ea19e3a407e71bbeb008d51f6ba92af17e8b6e4c1b8eacbd4abc42f0f639746ea924cffb99b539f94e2b&quot;,</span><br><span class="line">  &quot;timestamp&quot;: 1665642068786,</span><br><span class="line">  &quot;updatesMustBeSignedBy&quot;: &quot;7fcb120079801a1ddde8c1fb6657365351bca7279e8470728f4cf01fb5efc81b57cde03338b4ea76dfd39570f74f2654d8d52a22613e77ed2e4cbb46a648a42d&quot;,</span><br><span class="line">  &quot;waiting&quot;: false</span><br><span class="line"> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><code>1.1.1.1</code> 为公网 ip 则搭建 planet 成功。</p>
<h2 id="四、创建私有网络"><a href="#四、创建私有网络" class="headerlink" title="四、创建私有网络"></a>四、创建私有网络</h2><p>访问 <code>http://公网ip:4000</code>，账号密码：admin/admin123。</p>
<h3 id="1、创建网络"><a href="#1、创建网络" class="headerlink" title="1、创建网络"></a>1、创建网络</h3><p><img src="/../images/Zerotier%20%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E6%A0%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/resize,m_fixed,w_1184-169235357884939.webp" alt="Zerotier 搭建私有根服务器及创建虚拟局域网完整教程_docker_02"></p>
<h3 id="2、初始化网络"><a href="#2、初始化网络" class="headerlink" title="2、初始化网络"></a>2、初始化网络</h3><p>点击 Easy setup</p>
<p><img src="/../images/Zerotier%20%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E6%A0%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/resize,m_fixed,w_1184-169235357884940.webp" alt="Zerotier 搭建私有根服务器及创建虚拟局域网完整教程_网络_03"></p>
<p>设置网段和子网掩码</p>
<p><img src="/../images/Zerotier%20%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E6%A0%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/resize,m_fixed,w_1184-169235357884941.webp" alt="Zerotier 搭建私有根服务器及创建虚拟局域网完整教程_p2p_04"></p>
<h2 id="五、安装-zerotier-客户端"><a href="#五、安装-zerotier-客户端" class="headerlink" title="五、安装 zerotier 客户端"></a>五、安装 zerotier 客户端</h2><h3 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h3><p>既然已经搭建了私有的 planet，当然是使用自己的，需要先下载服务器 <code>/home/docker/zt-planet/zerotier-one</code> 目录下的 planet 文件。</p>
<h4 id="1、启动-zerotier-客户端"><a href="#1、启动-zerotier-客户端" class="headerlink" title="1、启动 zerotier 客户端"></a>1、启动 zerotier 客户端</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name=zt-cli \</span><br><span class="line">--device=/dev/net/tun \</span><br><span class="line">--net=host \</span><br><span class="line">--cap-add=NET_ADMIN \</span><br><span class="line">--cap-add=SYS_ADMIN -d \</span><br><span class="line">-v /home/docker/zt-client/zerotier-one:/var/lib/zerotier-one \</span><br><span class="line">--restart unless-stopped \</span><br><span class="line">hausen1012/zerotier</span><br></pre></td></tr></table></figure>
<h4 id="2、替换-planet-文件"><a href="#2、替换-planet-文件" class="headerlink" title="2、替换 planet 文件"></a>2、替换 planet 文件</h4><p>将服务器下载的 planet 文件上传到客户端的 <code>/home/docker/zt-client/zerotier-one</code> 目录。</p>
<h4 id="3、重启客户端"><a href="#3、重启客户端" class="headerlink" title="3、重启客户端"></a>3、重启客户端</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker restart zt-cli</span><br></pre></td></tr></table></figure>
<h4 id="4、查看-planet"><a href="#4、查看-planet" class="headerlink" title="4、查看 planet"></a>4、查看 planet</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it zt-cli zerotier-cli listpeers</span><br></pre></td></tr></table></figure>
<p><img src="/../images/Zerotier%20%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E6%A0%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/resize,m_fixed,w_1184-169235357884942.webp" alt="Zerotier 搭建私有根服务器及创建虚拟局域网完整教程_网络_05"></p>
<p>可以看见 stableEndpoints 的配置是自己的公网 ip。</p>
<h4 id="5、加入网络"><a href="#5、加入网络" class="headerlink" title="5、加入网络"></a>5、加入网络</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it zt-cli zerotier-cli join 8b8b9ed58a10bd45</span><br></pre></td></tr></table></figure>
<h4 id="6、授权"><a href="#6、授权" class="headerlink" title="6、授权"></a>6、授权</h4><p><img src="/../images/Zerotier%20%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E6%A0%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/resize,m_fixed,w_1184-169235357884943.webp" alt="Zerotier 搭建私有根服务器及创建虚拟局域网完整教程_zerotier_06"></p>
<p>ip 也可以自己设置，不过要在刚刚设置的网段内。</p>
<p><img src="/../images/Zerotier%20%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E6%A0%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/resize,m_fixed,w_1184-169235357884944.webp" alt="Zerotier 搭建私有根服务器及创建虚拟局域网完整教程_服务器_07"></p>
<h3 id="windows-安装"><a href="#windows-安装" class="headerlink" title="windows 安装"></a>windows 安装</h3><h4 id="1、下载客户端"><a href="#1、下载客户端" class="headerlink" title="1、下载客户端"></a>1、下载客户端</h4><p><a href="https://www.zerotier.com/download/">下载地址</a></p>
<h4 id="2、安装客户端"><a href="#2、安装客户端" class="headerlink" title="2、安装客户端"></a>2、安装客户端</h4><p>双击安装即可</p>
<h4 id="3、替换-planet"><a href="#3、替换-planet" class="headerlink" title="3、替换 planet"></a>3、替换 planet</h4><p>将下载好的 planet 文件复制到 <code>C:\ProgramData\ZeroTier\One</code> 目录下</p>
<h4 id="4、重启服务"><a href="#4、重启服务" class="headerlink" title="4、重启服务"></a>4、重启服务</h4><p>如果仅仅只是重启 ui 是不行的，需要找到任务管理器 -&gt; 服务 -&gt; ZeroTierOneService，进行重启。</p>
<p><img src="/../images/Zerotier%20%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E6%A0%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/resize,m_fixed,w_1184-169235357884945.webp" alt="Zerotier 搭建私有根服务器及创建虚拟局域网完整教程_zerotier_08"></p>
<h4 id="5、查看-planet"><a href="#5、查看-planet" class="headerlink" title="5、查看 planet"></a>5、查看 planet</h4><p><img src="/../images/Zerotier%20%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E6%A0%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/resize,m_fixed,w_1184-169235357884946.webp" alt="Zerotier 搭建私有根服务器及创建虚拟局域网完整教程_docker_09"></p>
<p>可以看见 planet 地址是自己的公网。</p>
<h4 id="6、加入网络"><a href="#6、加入网络" class="headerlink" title="6、加入网络"></a>6、加入网络</h4><p>点击右下角图标，join new network，输入刚刚创建的虚拟网络 id，我这边是 8b8b9ed58a0baa3d。</p>
<h4 id="7、授权"><a href="#7、授权" class="headerlink" title="7、授权"></a>7、授权</h4><p>和 dokcer 安装一样的操作，不再赘述。</p>
<h2 id="六、测试"><a href="#六、测试" class="headerlink" title="六、测试"></a>六、测试</h2><p>通过上述方式将两台机器加入到网络，通过 ping 查看是否能打洞成功。其中 202 本地虚拟机，vps 是有公网 ip 的云服务器。</p>
<p><img src="/../images/Zerotier%20%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E6%A0%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/resize,m_fixed,w_1184-169235357884947.webp" alt="Zerotier 搭建私有根服务器及创建虚拟局域网完整教程_p2p_10"></p>
<p><strong>ping 检测</strong></p>
<p>在 10.0.0.202 机器上 ping 10.0.0.222。</p>
<p><img src="/../images/Zerotier%20%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E6%A0%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/resize,m_fixed,w_1184-169235357885048.webp" alt="Zerotier 搭建私有根服务器及创建虚拟局域网完整教程_p2p_11"></p>
<p><code>listpeers</code> 查看到只有自己的私有根服务器，ping 的延迟不到 100ms 和直接 ping 公网 ip 差不多，说明打洞成功。</p>
<p><strong>局域网 scp 检测</strong></p>
<p><img src="/../images/Zerotier%20%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E6%A0%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/resize,m_fixed,w_1184-169235357885049.webp" alt="Zerotier 搭建私有根服务器及创建虚拟局域网完整教程_docker_12"></p>
<p>可以看见速度能达到十几MB，而我的根服务器是腾讯云的 8Mbps 服务器，如果通过根服务器转发肯定不可能达到这个速度，说明打洞成功。</p>
<p><strong>speedtest 测速</strong></p>
<p><img src="/../images/Zerotier%20%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E6%A0%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/resize,m_fixed,w_1184-169235357885050.webp" alt="Zerotier 搭建私有根服务器及创建虚拟局域网完整教程_zerotier_13"></p>
]]></content>
      <categories>
        <category>zerotier</category>
      </categories>
      <tags>
        <tag>zerotier,根服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>【教程固件】 酷比魔方Talk5H刷机指南,解救小白</title>
    <url>/post/11f986cf.html</url>
    <content><![CDATA[<p>安卓机最大的乐趣就是刷机了，鉴于很多5H的机油还不会刷机，只有写个教程出手一助了。提醒一句，刷机有风险，变砖的话LZ可不承担责任。</p>
<p>不过根据LZ多年的刷机经验。要想把手机刷成砖，也是需要一定技术的，大胆的尝试吧。</p>
<p>Talk5H刷机需要的几个工具下载</p>
<p><strong>1）一键ROOT工具</strong></p>
<p><a href="http://pan.baidu.com/share/link?shareid=2646370454&amp;uk=288410357">http://pan.baidu.com/share/link?shareid=2646370454&amp;uk=288410357</a></p>
<p>2）叔叔工具箱**<br><a href="http://pan.baidu.com/share/link?shareid=2650065834&amp;uk=288410357">http://pan.baidu.com/share/link?shareid=2650065834&amp;uk=288410357</a></p>
<p><strong>3）Recovery</strong></p>
<p>Talk5H第三方Recovery （用于刷<strong>Talk5H第三方ROM</strong>，如MIUI，原生精简版，MUSE UI等等）<br><a href="http://pan.baidu.com/share/link?shareid=2656531356&amp;uk=288410357">http://pan.baidu.com/share/link?shareid=2656531356&amp;uk=288410357</a></p>
<p>Talk5H官方Recovery （用于刷<strong>Talk5H官方ROM</strong>）<br><a href="http://pan.baidu.com/share/link?shareid=4107364334&amp;uk=288410357">http://pan.baidu.com/share/link?shareid=4107364334&amp;uk=288410357</a></p>
<p><strong>4）rom文件</strong></p>
<p>目前Talk5H的<strong>第三方rom</strong>有</p>
<p>作者 <strong>ccfly_89</strong> ；</p>
<p>完美、稳定、流畅ROM来了，移植Muse UI</p>
<p><a href="http://bbs.51cube.com/thread-77996-1-1.html">http://bbs.51cube.com/thread-77996-1-1.html</a></p>
<p>应该是最流畅最省电的ROM：原汁原味原生体验，Talk5H原生版ROM发布</p>
<p><a href="http://bbs.51cube.com/thread-78401-1-1.html">http://bbs.51cube.com/thread-78401-1-1.html</a></p>
<p>作者 <strong>米柚真威武</strong> ；</p>
<p>[MIUI-V5-ROM] <a href="http://bbs.ereadcn.com/forum-21-1.html">酷比魔方</a>Talk 5H【开发版第一期-13.8.16】</p>
<p><a href="http://bbs.51cube.com/thread-77722-1-1.html">http://bbs.51cube.com/thread-77722-1-1.html</a></p>
<p>[MIUI-V5-ROM] 酷比魔方Talk 5H【开发版第2期-13.8.23】</p>
<p><a href="http://bbs.51cube.com/thread-78356-1-1.html">http://bbs.51cube.com/thread-78356-1-1.html</a></p>
<p>移植红米真正完美MIUI V5稳定版【第一期】，再送近500个漂亮的MIUI收费主题爽到爆</p>
<p><a href="http://bbs.51cube.com/thread-78477-1-1.html">http://bbs.51cube.com/thread-78477-1-1.html</a></p>
<p>作者<strong>吉他</strong> ；</p>
<p>基于官方V1.01版，吉他发布TALK 5H【A5300】精简优化固件</p>
<p><a href="http://bbs.ereadcn.com/forum.php?mod=viewthread&amp;tid=99166&amp;fromuid=14">http://bbs.ereadcn.com/forum.php?mod=viewthread&amp;tid=99166&amp;fromuid=14</a></p>
<p>作者 <strong>wuxianlin</strong> ；</p>
<p>CUBE Talk 5H完美移植红米HBJ2.0 MIUI V5</p>
<p><a href="http://bbs.51cube.com/thread-78280-1-1.html">http://bbs.51cube.com/thread-78280-1-1.html</a></p>
<p>官方rom**有 </p>
<p>比魔方Talk 5H V1.01（出厂固件）发布，反馈BUG请跟帖</p>
<p><a href="http://bbs.51cube.com/thread-77711-1-1.html">http://bbs.51cube.com/thread-77711-1-1.html</a></p>
<p>5）如果觉得麻烦还可以下载 Talk 5H刷机工具箱 by wuxianlin V1.1<a href="http://bbs.51cube.com/thread-78236-1-1.html">http://bbs.51cube.com/thread-78236-1-1.html</a></p>
<p>这只工具箱集合了一键root，一键刷入recovery，一键安装谷歌服务套件等功能，非常强大，适合没有刷机经验的使用，配合PC鼠标点击操作，非常方便。</p>
<p>下面教程需要下载工具</p>
<p><strong>1）一键ROOT工具</strong></p>
<p><a href="http://pan.baidu.com/share/link?shareid=2646370454&amp;uk=288410357">http://pan.baidu.com/share/link?shareid=2646370454&amp;uk=288410357</a></p>
<p>2）叔叔工具箱**<br><a href="http://pan.baidu.com/share/link?shareid=2650065834&amp;uk=288410357">http://pan.baidu.com/share/link?shareid=2650065834&amp;uk=288410357</a></p>
<p>3）Recovery**</p>
<p>Talk5H第三方Recovery （用于刷<strong>Talk5H第三方ROM</strong>，如MIUI，原生精简版，MUSE UI等等）<br><a href="http://pan.baidu.com/share/link?shareid=2656531356&amp;uk=288410357">http://pan.baidu.com/share/link?shareid=2656531356&amp;uk=288410357</a></p>
<p><strong>4）rom文件</strong><br>第三方ROM任选</p>
<p><strong>一键ROOT工具在PC解压使用</strong></p>
<p>叔叔工具箱安装到5H中使用**</p>
<p>第三方Recovery放到手机根目录**</p>
<p>rom文件,放到手机或者卡中**</p>
<p>刷机教程；<br>1）root<br>2）安装 recovery</p>
<p>3）刷机<img src="http://www.ereadcn.com/data/attachment/forum/201308/31/0050009a1t1nzzn6aqw2a2.jpg" alt="img"><br><img src="http://www.ereadcn.com/data/attachment/forum/201308/31/005003ev5qe5pw3vvle0ua.jpg" alt="img"><br><img src="http://www.ereadcn.com/data/attachment/forum/201308/31/0050060jzjtt7bqscuf0mm.jpg" alt="img"> </p>
<p>要刷回官方ROM<br>需要安装官方recovery进行上述的操作</p>
<p><strong>3）Recovery</strong><br>Talk5H官方Recovery （用于刷<strong>Talk5H官方ROM</strong>）<br><a href="http://pan.baidu.com/share/link?shareid=4107364334&amp;uk=288410357">http://pan.baidu.com/share/link?shareid=4107364334&amp;uk=288410357</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>-技术</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-kubeadm安装</title>
    <url>/post/23eac78f.html</url>
    <content><![CDATA[<p>注: docker系列都是以前自己学习搭建时的笔记，难免有疏漏之处，仅做参考</p>
<p>docker集群管理 (主机先做免密登录,方便文件copy)</p>
<p>master: 192.168.138.111</p>
<p>slave1: 192.168.138.112</p>
<p>slave2: 192.168.138.113</p>
<p>#正文部分</p>
<p>所有主机(master，slave1，slave2)执行</p>
<p>#时间同步</p>
<p>systemctl start chronyd.service</p>
<p>systemctl enable chronyd.service</p>
<p>关闭swapoff</p>
<p>swapoff -a</p>
<p>#配置yum源</p>
<p>wget <a href="https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a> -O /etc/yum.repos.d/docker.repo</p>
<p>cat &lt;&lt; EOF &gt;/etc/yum.repos.d/kubernetes.repo</p>
<p>[kubernetes]</p>
<p>name=Kubernetes</p>
<p>baseurl=<a href="https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/">https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</a></p>
<p>gpgcheck=1</p>
<p>gpgkey=<a href="https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg">https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</a></p>
<p>enabled=1</p>
<p>EOF</p>
<p>导入gpgcheck包</p>
<p>wget -q <a href="https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg">https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</a></p>
<p>wget -q <a href="https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg">https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</a></p>
<p>rpm –import yum-key.gpg</p>
<p>rpm –import rpm-package-key.gpg</p>
<p>scp rpm-package-key.gpg slave1:/root</p>
<p>scp rpm-package-key.gpg slave2:/root</p>
<p>scp yum-key.gpg slave1:/root</p>
<p>scp yum-key.gpg slave2:/root</p>
<p>scp /etc/yum.repos.d/kubernetes.repo slave1:/etc/yum.repos.d/</p>
<p>scp /etc/yum.repos.d/kubernetes.repo slave2:/etc/yum.repos.d/</p>
<p>master主机</p>
<p>查看docker kubeadm  kubelet  kubectl  版本</p>
<p>yum list kubelet kubeadm kubectl  –showduplicates|sort -r<br>yum list docker-ce –showduplicates | sort -r</p>
<p>安装docker-ce kubelet kubeadm kubectl</p>
<p>yum install docker-ce kubeadm-1.23.3 kubectl-1.23.3 kubelet-1.23.3 -y</p>
<p>rpm -ql kubelet</p>
<p>设置开机自启</p>
<p>systemctl enable kubelet</p>
<p>systemctl enable docker</p>
<p>systemctl start docker</p>
<p>把以下功能打开，否则可能会报错</p>
<p>echo “1”&gt;/proc/sys/net/bridge/bridge-nf-call-iptables</p>
<p>echo “1”&gt;/proc/sys/net/bridge/bridge-nf-call-ip6tables</p>
<p>echo “1”&gt; /proc/sys/net/ipv4/ip_forward</p>
<p>#执行</p>
<p>kubeadm config images list </p>
<p>#输出</p>
<p>k8s.gcr.io/kube-apiserver:v1.23.3<br>k8s.gcr.io/kube-controller-manager:v1.23.3<br>k8s.gcr.io/kube-scheduler:v1.23.3<br>k8s.gcr.io/kube-proxy:v1.23.3<br>k8s.gcr.io/pause:3.6<br>k8s.gcr.io/etcd:3.5.1-0<br>k8s.gcr.io/coredns/coredns:v1.8.6</p>
<h1 id="pull镜像"><a href="#pull镜像" class="headerlink" title="pull镜像"></a>pull镜像</h1><p>docker pull registry.aliyuncs.com/google_containers/kube-apiserver:v1.23.3<br>docker pull registry.aliyuncs.com/google_containers/kube-controller-manager:v1.23.3<br>docker pull registry.aliyuncs.com/google_containers/kube-scheduler:v1.23.3<br>docker pull registry.aliyuncs.com/google_containers/kube-proxy:v1.23.3<br>docker pull registry.aliyuncs.com/google_containers/pause:3.6<br>docker pull registry.aliyuncs.com/google_containers/etcd:3.5.1-0<br>docker pull registry.aliyuncs.com/google_containers/coredns:v1.8.6</p>
<h1 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h1><p>docker tag registry.aliyuncs.com/google_containers/kube-apiserver:v1.23.3 k8s.gcr.io/kube-apiserver:v1.23.3<br>docker tag registry.aliyuncs.com/google_containers/kube-controller-manager:v1.23.3 k8s.gcr.io/kube-controller-manager:v1.23.3<br>docker tag registry.aliyuncs.com/google_containers/kube-scheduler:v1.23.3 k8s.gcr.io/kube-scheduler:v1.23.3<br>docker tag registry.aliyuncs.com/google_containers/kube-proxy:v1.23.3 k8s.gcr.io/kube-proxy:v1.23.3<br>docker tag registry.aliyuncs.com/google_containers/pause:3.6 k8s.gcr.io/pause:3.6<br>docker tag registry.aliyuncs.com/google_containers/etcd:3.5.1-0 k8s.gcr.io/etcd:3.5.1-0<br>docker tag registry.aliyuncs.com/google_containers/coredns:v1.8.6 k8s.gcr.io/coredns/coredns:v1.8.6</p>
<h1 id="删除旧镜像"><a href="#删除旧镜像" class="headerlink" title="删除旧镜像"></a>删除旧镜像</h1><p>docker rmi registry.aliyuncs.com/google_containers/kube-apiserver:v1.23.3<br>docker rmi registry.aliyuncs.com/google_containers/kube-controller-manager:v1.23.3<br>docker rmi registry.aliyuncs.com/google_containers/kube-scheduler:v1.23.3<br>docker rmi registry.aliyuncs.com/google_containers/kube-proxy:v1.23.3<br>docker rmi registry.aliyuncs.com/google_containers/pause:3.6<br>docker rmi registry.aliyuncs.com/google_containers/etcd:3.5.1-0<br>docker rmi registry.aliyuncs.com/google_containers/coredns:v1.8.6</p>
<h1 id="关闭Swap选项"><a href="#关闭Swap选项" class="headerlink" title="关闭Swap选项"></a>关闭Swap选项</h1><p>cat &lt;&lt; EOF &gt;/etc/sysconfig/kubelet</p>
<p>KUBELET_EXTRA_ARGS=”–fail-swap-on=false”</p>
<p>EOF</p>
<p>#执行初始化</p>
<p>kubeadm init –kubernetes-version=v1.23.3 –pod-network-cidr=10.244.0.0/16 –service-cidr=10.96.0.0/12 –token-ttl=0 –ignore-preflight-errors=Swap</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> vi /etc/docker/daemon.json &#123; &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;] &#125; </span><br><span class="line"></span><br><span class="line"> # 重启docker </span><br><span class="line"> systemctl restart docker </span><br><span class="line"> # 重新初始化 </span><br><span class="line"> kubeadm reset </span><br><span class="line"> # 先重置 </span><br><span class="line"></span><br><span class="line">kubeadm init --control-plane-endpoint=192.168.137.110 --apiserver-advertise-address=192.168.137.110 --image-repository registry.aliyuncs.com/google_containers --kubernetes-version v1.23.3 --service-cidr=10.96.0.0/12 --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=all</span><br></pre></td></tr></table></figure>
<p>查看K8S运行状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get po -n kube-system</span><br></pre></td></tr></table></figure>
<p>若期望新增节点，则需要重新生成token，默认是24小时有效期，这里可以通过设置ttl=0为永久有效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm token create --print-join-command --ttl=0</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm join 192.168.137.110:6443 --token q4ge2n.rnwke6l5wmtaglrj --discovery-token-ca-cert-hash sha256:b64218fa30ae1ca5f8f7e336f935fc7bf84d561a7e29521800b12d5fe34c6819</span><br></pre></td></tr></table></figure>


<h1 id="flannel-安装"><a href="#flannel-安装" class="headerlink" title="flannel 安装"></a>flannel 安装</h1><p>docker pull quay.io/coreos/flannel:v0.15.1-amd64</p>
<h1 id="创建集群-注意输出最后信息-子节点加入时需要"><a href="#创建集群-注意输出最后信息-子节点加入时需要" class="headerlink" title="创建集群 注意输出最后信息 子节点加入时需要"></a>创建集群 注意输出最后信息 子节点加入时需要</h1><p>kubectl apply -f <a href="https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml">https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</a></p>
<p>节点配置</p>
<h1 id="rpm-gpg引入完成后开始安装所需包"><a href="#rpm-gpg引入完成后开始安装所需包" class="headerlink" title="rpm-gpg引入完成后开始安装所需包"></a>rpm-gpg引入完成后开始安装所需包</h1><p>rpm -import yum-key.gpg</p>
<p>rpm -import rpm-package-key.gpg</p>
<p>#安装所需包，kubelet不用立即启动，在加入k8s后就会启动</p>
<p>yum install docker-ce kubeadm-1.23.3 kubectl-1.23.3 kubelet-1.23.3 -y</p>
<p>systemctl enable docker kubelet</p>
<p>systemctl start docker</p>
<p>#设置</p>
<p>echo 1 &gt; /proc/sys/net/ipv4/ip_forward</p>
<p>echo 1 &gt;/proc/sys/net/bridge/bridge-nf-call-iptables</p>
<h1 id="关闭Swap选项-1"><a href="#关闭Swap选项-1" class="headerlink" title="关闭Swap选项"></a>关闭Swap选项</h1><p>cat &lt;&lt; EOF &gt;/etc/sysconfig/kubelet</p>
<p>KUBELET_EXTRA_ARGS=”–fail-swap-on=false”</p>
<p>EOF</p>
<p>节点加入集群 注意master创建集群信息</p>
<p>kubeadm join 192.168.137.110:6443 –token ls7p8w.db58adnrufdxorjl –discovery-token-ca-cert-hash sha256:dac6495e40d745a50fa37e217355c0895c233e9b9e6a1535df243b4926d4c5a9 –ignore-preflight-errors=Swap</p>
<p>节点下载所需镜像</p>
<p>docker pull registry.aliyuncs.com/google_containers/kube-proxy:v1.23.3</p>
<p>docker pull registry.aliyuncs.com/google_containers/pause:3.6</p>
<p>docker pull quay.io/coreos/flannel:v0.15.1-amd64</p>
<p>docker tag registry.aliyuncs.com/google_containers/kube-proxy:v1.23.3 k8s.gcr.io/kube-proxy:v1.23.3</p>
<p>docker tag registry.aliyuncs.com/google_containers/pause:3.6 k8s.gcr.io/pause:3.6</p>
<p>docker rmi registry.aliyuncs.com/google_containers/kube-proxy:v1.23.3</p>
<p>docker rmi registry.aliyuncs.com/google_containers/pause:3.6</p>
<p>出现的问题:</p>
<p>1.The connection to the server localhost:8080 was refused - did you specify the right host or port?</p>
<p>echo “export KUBECONFIG=/etc/kubernetes/admin.conf” &gt;&gt; /etc/profile</p>
<p>source /etc/profile</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>eureka分布式框架demo（springboot、springcloud、Feign、zuul、Mybatis）</title>
    <url>/post/5ec13099.html</url>
    <content><![CDATA[<p><img src="/../images/eureka%E5%88%86%E5%B8%83%E5%BC%8F%E6%A1%86%E6%9E%B6demo%EF%BC%88springboot%E3%80%81springcloud%E3%80%81Feign%E3%80%81zuul%E3%80%81Mybatis%EF%BC%89/bVbiGtX.jpg" alt="clipboard.png"></p>
<blockquote>
<p>eureka分布式框架，内含以下模块：eureka server、zuul 网关、commons 工具包、pojos 实体类、base<br>服务提供者、order 服务提供者、web 服务消费者</p>
</blockquote>
<h2 id="eureka-demo"><a href="#eureka-demo" class="headerlink" title="eureka_demo"></a>eureka_demo</h2><p><strong>项目介绍</strong></p>
<p>eureka分布式框架，内含以下模块：</p>
<ol>
<li>eureka server</li>
<li>zuul 网关</li>
<li>commons 工具包</li>
<li>pojos 实体类</li>
<li>base 服务提供者（集成Mybatis）</li>
<li>order 服务提供者（集成Mybatis）</li>
<li>web 服务消费者</li>
</ol>
<p><strong>软件架构</strong></p>
<p>eureka分布式框架、集成sringboot、springcloud、Mybatis</p>
<p><strong>使用说明</strong></p>
<p>创建库表，在项目doc目录下有对应的sql文件<br>然后修改server_base和server_order中的数据库链接<br>order服务中创建了两个启动文件，端口不一样，记得配置两个启动即可测试负载 (Intellij Idea)。<br>启动顺序：eureka -&gt; zuul -&gt; base -&gt; order -&gt; web<br>启动完成打开页面访问：<a href="http://localhost/">http://localhost</a>:7070/ 查看eureka管理界面，查看服务是否已经注册进来<br>如下图所示：<br><img src="/../images/eureka%E5%88%86%E5%B8%83%E5%BC%8F%E6%A1%86%E6%9E%B6demo%EF%BC%88springboot%E3%80%81springcloud%E3%80%81Feign%E3%80%81zuul%E3%80%81Mybatis%EF%BC%89/bVbiGuv.jpg" alt="clipboard.png"></p>
<p>具体的请求方式，在web模块controller中都有注释！</p>
<p><strong>模块示例图</strong><br><img src="/../images/eureka%E5%88%86%E5%B8%83%E5%BC%8F%E6%A1%86%E6%9E%B6demo%EF%BC%88springboot%E3%80%81springcloud%E3%80%81Feign%E3%80%81zuul%E3%80%81Mybatis%EF%BC%89/bVbiGuM.jpg" alt="clipboard.png"><br><img src="/../images/eureka%E5%88%86%E5%B8%83%E5%BC%8F%E6%A1%86%E6%9E%B6demo%EF%BC%88springboot%E3%80%81springcloud%E3%80%81Feign%E3%80%81zuul%E3%80%81Mybatis%EF%BC%89/bVbiGuR.jpg" alt="clipboard.png"></p>
<p>因资料太多，后台关注我主页领取免费的学习资源（有Spring，MyBatis，Netty源码分析，高并发、高性能、分布式、微服务架构的原理，JVM性能优化、分布式架构等）</p>
]]></content>
      <categories>
        <category>分布式架构</category>
      </categories>
      <tags>
        <tag>分布式,spring cloud,spring boot,eureka,Feign,zuul,Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>docker的备份和迁移</title>
    <url>/post/15ebb916.html</url>
    <content><![CDATA[<p><strong>备份与迁移</strong></p>
<ul>
<li><h2 id="容器保存为镜像"><a href="#容器保存为镜像" class="headerlink" title="容器保存为镜像"></a><strong>容器保存为镜像</strong></h2></li>
</ul>
<p>我们可以通过以下命令将容器保存为镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker commit pyg_nginx mynginx</span><br></pre></td></tr></table></figure>
<p>pyg_nginx是容器名称</p>
<p>mynginx是新的镜像名称</p>
<p>此镜像的内容就是你当前容器的内容，接下来你可以用此镜像再次运行新的容器</p>
<ul>
<li><h2 id="镜像备份"><a href="#镜像备份" class="headerlink" title="镜像备份"></a><strong>镜像备份</strong></h2></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker save -o mynginx.``tar` `mynginx</span><br></pre></td></tr></table></figure>
<p>-o 输出到的文件</p>
<p>执行后，运行ls命令即可看到打成的tar包</p>
<ul>
<li><h2 id="镜像恢复与迁移"><a href="#镜像恢复与迁移" class="headerlink" title="镜像恢复与迁移"></a><strong>镜像恢复与迁移</strong></h2></li>
</ul>
<p>首先我们先删除掉mynginx镜像</p>
<p>然后执行此命令进行恢复</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker load -i mynginx.``tar</span><br></pre></td></tr></table></figure>
<p>-i 输入的文件</p>
<p>执行后再次查看镜像，可以看到镜像已经恢复</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>dockerkubeadm安装</title>
    <url>/post/49be3a04.html</url>
    <content><![CDATA[<h1 id="dockerkubeadm安装"><a href="#dockerkubeadm安装" class="headerlink" title="dockerkubeadm安装"></a>dockerkubeadm安装</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">配置yum源</span><br><span class="line">wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker.repo</span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF &gt;/etc/yum.repos.d/kubernetes.repo</span><br><span class="line"></span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">enabled=1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">查询</span><br><span class="line">yum list kubelet kubectl kubeadm --showduplicates|sort -r</span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line"></span><br><span class="line">安装</span><br><span class="line">yum install docker-ce -y</span><br><span class="line"></span><br><span class="line">docker pull registry.aliyuncs.com/google_containers/kube-apiserver:v1.23.3</span><br><span class="line">docker pull registry.aliyuncs.com/google_containers/kube-controller-manager:v1.23.3</span><br><span class="line">docker pull registry.aliyuncs.com/google_containers/kube-scheduler:v1.23.3</span><br><span class="line">docker pull registry.aliyuncs.com/google_containers/kube-proxy:v1.23.3</span><br><span class="line">docker pull registry.aliyuncs.com/google_containers/pause:3.6</span><br><span class="line">docker pull registry.aliyuncs.com/google_containers/etcd:3.5.1-0</span><br><span class="line">docker pull registry.aliyuncs.com/google_containers/coredns:v1.8.6</span><br><span class="line"></span><br><span class="line">docker tag registry.aliyuncs.com/google_containers/kube-apiserver:v1.23.3 k8s.gcr.io/kube-apiserver:v1.23.3</span><br><span class="line">docker tag registry.aliyuncs.com/google_containers/kube-controller-manager:v1.23.3 k8s.gcr.io/kube-controller-manager:v1.23.3</span><br><span class="line">docker tag registry.aliyuncs.com/google_containers/kube-scheduler:v1.23.3 k8s.gcr.io/kube-scheduler:v1.23.3</span><br><span class="line">docker tag registry.aliyuncs.com/google_containers/kube-proxy:v1.23.3 k8s.gcr.io/kube-proxy:v1.23.3</span><br><span class="line">docker tag registry.aliyuncs.com/google_containers/pause:3.6 k8s.gcr.io/pause:3.6</span><br><span class="line">docker tag registry.aliyuncs.com/google_containers/etcd:3.5.1-0 k8s.gcr.io/etcd:3.5.1-0</span><br><span class="line">docker tag registry.aliyuncs.com/google_containers/coredns:v1.8.6 k8s.gcr.io/coredns/coredns:v1.8.6</span><br><span class="line"></span><br><span class="line">docker rmi registry.aliyuncs.com/google_containers/kube-apiserver:v1.23.3</span><br><span class="line">docker rmi registry.aliyuncs.com/google_containers/kube-controller-manager:v1.23.3</span><br><span class="line">docker rmi registry.aliyuncs.com/google_containers/kube-scheduler:v1.23.3</span><br><span class="line">docker rmi registry.aliyuncs.com/google_containers/kube-proxy:v1.23.3</span><br><span class="line">docker rmi registry.aliyuncs.com/google_containers/pause:3.6</span><br><span class="line">docker rmi registry.aliyuncs.com/google_containers/etcd:3.5.1-0</span><br><span class="line">docker rmi registry.aliyuncs.com/google_containers/coredns:v1.8.6</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>etcd在docker中使用</title>
    <url>/post/1a241336.html</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>etcd是CoreOS团队于2013年6月发起的开源项目，它的目标是构建一个高可用的分布式键值(key-value)数据库。etcd内部采用raft协议作为一致性算法，etcd基于Go语言实现。</p>
<p>etcd作为服务发现系统，有以下的特点</p>
<ul>
<li>简单：安装配置简单，而且提供了HTTP API进行交互，使用也很简单</li>
<li>安全：支持SSL证书验证</li>
<li>快速：根据官方提供的benchmark数据，单实例支持每秒2k+读操作</li>
<li>可靠：采用raft算法，实现分布式系统数据的可用性和一致性</li>
<li>etcd项目地址：<a href="https://github.com/coreos/etcd/">https://github.com/coreos/etcd/</a></li>
</ul>
<h1 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h1><p>1.创建dockersfile<code>$ sudo touch Dockerfile</code><br>2.<code>$ sudo vim Dockerfile</code>编辑Dockerfile文件,写入内容如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM alpine:latest</span><br><span class="line"></span><br><span class="line">MAINTAINER RinySaint aichn.cn</span><br><span class="line"></span><br><span class="line">ADD etcd /usr/local/bin/</span><br><span class="line">ADD etcdctl /usr/local/bin/</span><br><span class="line">RUN mkdir -p /var/etcd/</span><br><span class="line">RUN mkdir -p /var/lib/etcd/</span><br><span class="line"></span><br><span class="line"># Alpine Linux doesn&#x27;t use pam, which means that there is no /etc/nsswitch.conf,</span><br><span class="line"># but Golang relies on /etc/nsswitch.conf to check the order of DNS resolving</span><br><span class="line"># (see https://github.com/golang/go/commit/9dee7771f561cf6aee081c0af6658cc81fac3918)</span><br><span class="line"># To fix this we just create /etc/nsswitch.conf and add the following line:</span><br><span class="line">RUN echo &#x27;hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4&#x27; &gt;&gt; /etc/nsswitch.conf</span><br><span class="line"></span><br><span class="line">EXPOSE 2379 2380</span><br><span class="line"></span><br><span class="line"># Define default command.</span><br><span class="line">CMD [&quot;/usr/local/bin/etcd&quot;]</span><br></pre></td></tr></table></figure>
<p>3.下载etcd Releases <code>$ wget https://github.com/etcd-io/etcd/releases/download/v3.3.10/etcd-v3.3.10-linux-amd64.tar.gz</code><br>4.解压文件:<code>$ tar -zxvf etcd-v3.3.10-linux-amd64.tar.gz</code><br>5.将<code>etcd</code>和<code>etcdctl</code>移动到和dockerfile同级目录:<code>$ mv etcd-v3.3.10-linux-amd64/etcd etcd-v3.3.10-linux-amd64/etcdctl -t ./</code><br>6.构建etcd镜像<code>docker build -t etcd .</code><br>7.查看构建好的镜像<code>docker images</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost etcd]# docker images;</span><br><span class="line">REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">etcd                       latest              dd11f9fc0096        13 seconds ago      39.5 MB</span><br></pre></td></tr></table></figure>
<h1 id="启动etcd-单服务"><a href="#启动etcd-单服务" class="headerlink" title="启动etcd(单服务)"></a>启动etcd(单服务)</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -v /usr/share/ca-certificates/:/etc/ssl/certs -p 4001:4001 -p 2380:2380 -p 2379:2379 \</span><br><span class="line"> --name etcd etcd /usr/local/bin/etcd \</span><br><span class="line"> -name etcd0 \</span><br><span class="line"> -advertise-client-urls http://192.168.99.106:2379,http://192.168.99.106:4001 \</span><br><span class="line"> -listen-client-urls http://0.0.0.0:2379,http://0.0.0.0:4001 \</span><br><span class="line"> -initial-advertise-peer-urls http://192.168.99.106:2380 \</span><br><span class="line"> -listen-peer-urls http://0.0.0.0:2380 \</span><br><span class="line"> -initial-cluster-token etcd-cluster-1 \</span><br><span class="line"> -initial-cluster etcd0=http://192.168.99.106:2380 \</span><br><span class="line"> -initial-cluster-state new</span><br></pre></td></tr></table></figure>
<h2 id="ETCD参数说明"><a href="#ETCD参数说明" class="headerlink" title="ETCD参数说明"></a>ETCD参数说明</h2><ul>
<li>**data-dir:**指定节点的数据存储目录，这些数据包括节点ID，集群ID，集群初始化配置，Snapshot文件，若未指定—wal-dir，还会存储WAL文件；</li>
<li>**wal-dir:**指定节点的was文件的存储目录，若指定了该参数，wal文件会和其他数据文件分开存储。</li>
<li><strong>name:</strong> 节点名称</li>
<li><strong>initial-advertise-peer-urls:</strong> 告知集群其他节点url.(<code>对于集群内提供服务的url</code>)</li>
<li><strong>listen-peer-urls:</strong> 监听URL，用于与其他节点通讯</li>
<li><strong>advertise-client-urls:</strong> 告知客户端url, 也就是服务的url(<code>对外提供服务的utl</code>)</li>
<li><strong>initial-cluster-token:</strong> 集群的ID</li>
<li><strong>initial-cluster:</strong> 集群中所有节点</li>
</ul>
<h1 id="在docker中运行-集群"><a href="#在docker中运行-集群" class="headerlink" title="在docker中运行(集群)"></a>在docker中运行(集群)</h1><h2 id="node0"><a href="#node0" class="headerlink" title="node0"></a>node0</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 2380:2380 -p 2479:2379 --name etcd0 etcd /usr/local/bin/etcd -name etcd0  -advertise-client-urls http://192.168.3.3:2479  -listen-client-urls http://0.0.0.0:2379 -initial-advertise-peer-urls http://192.168.3.3:2380 -listen-peer-urls http://0.0.0.0:2380  -initial-cluster-token etcd-cluster-1 -initial-cluster &quot;etcd0=http://192.168.3.3:2380,etcd1=http://192.168.3.3:2381&quot; -initial-cluster-state new</span><br></pre></td></tr></table></figure>
<h2 id="node1"><a href="#node1" class="headerlink" title="node1"></a>node1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 2381:2380 -p 2480:2379 --name etcd1 etcd /usr/local/bin/etcd -name etcd1  -advertise-client-urls http://192.168.3.3:2480  -listen-client-urls http://0.0.0.0:2379 -initial-advertise-peer-urls http://192.168.3.3:2381 -listen-peer-urls http://0.0.0.0:2380  -initial-cluster-token etcd-cluster-1 -initial-cluster &quot;etcd0=http://192.168.3.3:2380,etcd1=http://192.168.3.3:2381&quot; -initial-cluster-state new</span><br></pre></td></tr></table></figure>
<p>这里模拟多端口代表多服务器,需要注意的是<code>-listen-client-urls http://0.0.0.0:2379</code>,<code>-listen-peer-urls http://0.0.0.0:2380</code>,这两个参数是服务内端口号,对应的是-p中的<code>2479:2379</code>中后面的2379,所以这里的监听不需要改变.</p>
<h1 id="集群验证"><a href="#集群验证" class="headerlink" title="集群验证"></a>集群验证</h1><h2 id="验证集群members。在集群中的每台机器上查看members，得出的结果应该是相同的"><a href="#验证集群members。在集群中的每台机器上查看members，得出的结果应该是相同的" class="headerlink" title="验证集群members。在集群中的每台机器上查看members，得出的结果应该是相同的"></a>验证集群members。在集群中的每台机器上查看members，得出的结果应该是相同的</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# curl -L http://192.168.3.3:2479/v2/members</span><br><span class="line">&#123;&quot;members&quot;:[&#123;&quot;id&quot;:&quot;4b316424559e0f9d&quot;,&quot;name&quot;:&quot;etcd0&quot;,&quot;peerURLs&quot;:[&quot;http://192.168.3.3:2380&quot;],&quot;clientURLs&quot;:[&quot;http://192.168.3.3:2479&quot;]&#125;,&#123;&quot;id&quot;:&quot;6204f98420b429cc&quot;,&quot;name&quot;:&quot;etcd1&quot;,&quot;peerURLs&quot;:[&quot;http://192.168.3.3:2381&quot;],&quot;clientURLs&quot;:[&quot;http://192.168.3.3:2480&quot;]&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h2 id="某台机器上添加数据，其他机器上查看数据，得出的结果应该是相同的"><a href="#某台机器上添加数据，其他机器上查看数据，得出的结果应该是相同的" class="headerlink" title="某台机器上添加数据，其他机器上查看数据，得出的结果应该是相同的"></a>某台机器上添加数据，其他机器上查看数据，得出的结果应该是相同的</h2><p>A 服务器中执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# curl -L http://192.168.3.3:2479/v2/keys/message -XPUT -d value=&quot;Hello zhenyuyaodidiao&quot;</span><br><span class="line">&#123;&quot;action&quot;:&quot;set&quot;,&quot;node&quot;:&#123;&quot;key&quot;:&quot;/message&quot;,&quot;value&quot;:&quot;Hello zhenyuyaodidiao&quot;,&quot;modifiedIndex&quot;:13,&quot;createdIndex&quot;:13&#125;,&quot;prevNode&quot;:&#123;&quot;key&quot;:&quot;/message&quot;,&quot;value&quot;:&quot;Hello world1&quot;,&quot;modifiedIndex&quot;:11,&quot;createdIndex&quot;:11&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>B 服务上执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#  curl -L http://192.168.3.3:2480/v2/keys/message</span><br><span class="line">&#123;&quot;action&quot;:&quot;get&quot;,&quot;node&quot;:&#123;&quot;key&quot;:&quot;/message&quot;,&quot;value&quot;:&quot;Hello zhenyuyaodidiao&quot;,&quot;modifiedIndex&quot;:13,&quot;createdIndex&quot;:13&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>f-gan生成对抗神经网络进阶第一级</title>
    <url>/post/49c94cd0.html</url>
    <content><![CDATA[<p>在之前我们做始祖Gan的数学推导的时候，其实留下了一堆坑（不知道你注意到了没有哈哈）。当然，牛逼的人就是这样的，指明了一条光明大道，让人知道从哪里走，然后剩下的一些坑坑洼洼刚刚好就能帮助一些博士、硕士毕业或者一些人评副教授、教授啥的。</p>
<p>这篇文章介绍的f-gan就是填的其中一个坑，那就是给V(G,D)这个函数一个更加通用的描述。在始祖文章里面，这个函数是直接写出来的，虽然知道它巧妙得令人窒息，而且也确实是在算拟合网络和实际数据之间的数据分布距离（JS），但具体为什么能那么列式，那么列式之后为什么就刚刚好算的是分布间的某种距离其实我们是不大知道的，这导致的结果就是我们只能用它的，不能改进。而f-gan要解决的就是这个问题，它将告诉我们一道通用公式。在这道公式的约束下，你爱咋整咋整。</p>
<p>首先我们看怎么一般化的表述两个分布之间的距离，f-gan告诉我们是这样的：<br>$$<br>D _ { f } ( P | Q ) = \int _ { x } q ( x ) f \left( \frac { p ( x ) } { q ( x ) } \right) d x<br>$$<br>这里有两个约束，第一：f是凸函数；第二：f(1)=0</p>
<p>由始祖文章的数学推导我们知道，对于神经网络而言，我们去衡量两个分布之间的差距其实不需要那么准，只要当他们有差距的时候，损失函数输出一个正值，而没差距的时候输出一个0就OK。那么f(1)=0就很好理解，当两个分布相同，只要满足这一约束就能使得最后的<br>$$<br>D _ { f } ( P | Q )<br>$$<br>也等于0。剩下我们就只需要证明在两个分布不完全相等的情况下，<br>$$<br>D _ { f } ( P | Q )<br>$$<br>大于0，就可以认为这道式子在表达两个分布之间的某种距离。</p>
<p>证明的过程我们会用到<a href="https://aichn.cn/post/96895f36.html">琴生不等式</a>（要求f是凸函数也跟用到它有关，证明请移步链接所指文章），该不等式告诉我们：<br>$$<br>E ( f ( x ) ) \geq f ( E ( x ) )<br>$$<br>我们可以把<br>$$<br>f \left( \frac { p ( x ) } { q ( x ) } \right)看成f(x)，q(x)看成x的分布，那么D _ { f } ( P | Q )直接就变成E ( f ( x ) )E(f(x))<br>$$<br>，故：<br>$$<br>D _ { f } ( P | Q ) \geq f(\int _ { x } q ( x )  \left( \frac { p ( x ) } { q ( x ) } \right) d x)=f(1)=0<br>$$<br>注意，由于琴生不等式等于号只有在x分布完全均匀的时候取得（在这个应用中几乎不可能发生），因此基本可以判定除非<br>$$<br>D _ { f } ( P | Q )<br>$$<br>中的两个分布完全相等，不然不会取得等于号，这是极好的！避免了我们训练突然因为loss等于0而没反应的情况。</p>
<p>完成了上面的推理，我们得到了两个分布的某种距离的一般表达式。但它还不是V(G,D)，原因是这里面既没有G也没有D（其实有D就好了,G在D里面），也就是说这是道看起来很美但对于Gan完全没用的式子。</p>
<p>那怎么让这道式子跟D网络有关呢？我们可以想D是一个评价数据是不是真实分布的东西，当我们在训练D的时候，我们希望整个距离表达式最大。那么，能不能找到一个式子，当D使得距离表达式取最大值的时候，式子刚刚好就等于上面的<br>$$<br>D _ { f } ( P | Q )= \int _ { x } q ( x ) f \left( \frac { p ( x ) } { q ( x ) } \right) d x<br>$$<br>呢？</p>
<p>要求有点多，但还真有办法实现！</p>
<p>那就是利用<a href="https://aichn.cn/post/e66f8853.html">共轭函数</a>（具体见链接所指博客或自行google），它的定义如下：<br>$$<br>f ^ { * } ( t ) = \max _ { x \in \operatorname { dom } ( f ) } { x t - f ( x ) }<br>$$<br>它告诉我们，假设f(x)是一个凸函数，那么它存在一个共轭函数长上面描述的那样，写作<br>$$<br>f ^ { * } ( t )。<br>$$</p>
<p>$$<br>f ^ { * } ( t )<br>$$</p>
<p>本身也是凸函数，且它的共轭函数是f(x)。也就有：<br>$$<br>f( x ) = \max _ { t \in \operatorname { dom } ( f  ^ { * } ) } { x t - f  ^ { * } ( t ) }<br>$$<br>假设这个时候我们把<br>$$<br>f \left( \frac { p ( x ) } { q ( x ) } \right)<br>$$<br>看成是f(x)（前提是，<br>$$<br>f( 1 ) = \max _ { t \in \operatorname { dom } ( f  ^ { * } ) } { t - f  ^ { * } ( t ) }=0<br>$$<br>，这样f(x)就完全符合<br>$$<br>$D _ { f } ( P | Q ) $<br>$$<br>的要求），可得到：<br>$$<br>D _ { f } ( P | Q ) = \int _ { x } q ( x ) \max _ { t \in \operatorname { dom } ( f  ^ { * } ) } { \frac { p ( x ) } { q ( x ) } t - f  ^ { * } ( t ) } d x<br>$$<br>这个时候的公式其实还是跟D和G网络没什么关系，接着的这一步闪瞎眼，因为它做出了一个神之假设，假设有个神经网络D，输入是x，然后输出是t，这样上面的式子直接就变成<br>$$<br>D _ { f } ( P | Q ) = \int _ { x } q ( x ) \max _ { D(x) \in \operatorname { dom } ( f  ^ { * } ) } { \frac { p ( x ) } { q ( x ) } D(x) - f  ^ { * } ( D(x) ) } d x<br>$$</p>
<p>$$<br>\geq\int _ { x } q ( x ) { \frac { p ( x ) } { q ( x ) } D(x) - f  ^ { * } ( D(x) ) } d x<br>$$</p>
<p>等于号在D(x)刚刚好等于使得积分中的全部式子最大的t的集合时取得。将式子进一步化简得到<br>$$<br>=\int _ { x } p ( x )D(x) - q ( x )f  ^ { * } ( D(x) )  d x<br>$$<br>这道式子牛逼的地方不知道你看出来了没有，它就在于这个≥号，回忆一下始祖gan，D网络的目标是最大化距离式子。而上面这道式子，我们恰恰好就能训练D网络来使得式子取得最大值。这个时候，式子可以写成下面的形式：</p>
<p><img src="/../images/f-gan%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%BF%9B%E9%98%B6%E7%AC%AC%E4%B8%80%E7%BA%A7/HxmWegThKvG1sNjwAnfobKQJWGk8c_rBCTiWt8DHgfY.original.fullsize.png" alt="img"></p>
<p>对于G网络而言，我们目的是最小化距离式子，则写成如下形式：</p>
<p><img src="/../images/f-gan%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%BF%9B%E9%98%B6%E7%AC%AC%E4%B8%80%E7%BA%A7/image-20210102233819152.png" alt="image-20210102233819152"></p>
<p>不知各位看出来没有，它就是通用版本的gan距离计算公式。真的对弄出这个东西的数学家跪服，太牛逼了！</p>
<p>有了这个公式，我们只要找出一个凸函数（这里文章是这么写的，但其实非凸函数的共轭函数也是凸函数，因此不太清楚为什么要有这一条件，先存疑吧，有老哥知道麻烦留意告诉我）符合正实数域上有取值且是连续的，满足t−f(1)=0就可以作为<br>$$<br>f^*。<br>$$<br>文章中也列举了个可选的函数：<br><img src="/../images/f-gan%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%BF%9B%E9%98%B6%E7%AC%AC%E4%B8%80%E7%BA%A7/20190204011004991.png" alt="在这里插入图片描述"><br>经过该篇文章，我们解放了距离函数的限制，让它可以带着镣铐跳舞了，而不是一动不动的木乃伊。</p>
<p>但其实它证明了一个让人哭笑不得的结论，始祖gan之所以效果不太好，跟我们选用的距离函数没有太大关系。也就是说，它的贡献主要在于帮助我们排除了一个错误答案。。。</p>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>-人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>git钩子hookpost-receive</title>
    <url>/post/833d311b.html</url>
    <content><![CDATA[<p>以下为服务端的配置<br>在服务器/www/wwwroot/hook.com上新建两个文件夹<br>public 代码部署<br>git 裸仓库</p>
<p><img src="/../images/git%E9%92%A9%E5%AD%90hookpost-receive/20191109102107457.png" alt="img"></p>
<p>切换到git目录下</p>
<p><img src="/../images/git%E9%92%A9%E5%AD%90hookpost-receive/201911091024493.png" alt="img"></p>
<p>然后进入/www/wwwroot/hook.com/git/test.git/hooks</p>
<p><img src="/../images/git%E9%92%A9%E5%AD%90hookpost-receive/20191109103033600.png" alt="img"></p>
<p>复制一份post-receive.sample 并改名为post-receive</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@iZbp1938t1plpi1gikahmmZ hooks]# cp post-receive.sample post-receive</span><br></pre></td></tr></table></figure>
<p>然后编辑 post-receive 添加如下代码 保存退出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DIR=/www/wwwroot/hook.com/public</span><br><span class="line"></span><br><span class="line">git --work-tree=$&#123;DIR&#125; clean -fd</span><br><span class="line"></span><br><span class="line">git --work-tree=$&#123;DIR&#125; checkout --force</span><br></pre></td></tr></table></figure>

<p>修改post-receive 文件的权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod -R 777 post-receive</span><br></pre></td></tr></table></figure>
<p>以下是本地配置<br>在本地上新建一个文件夹 然后添加为远程仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 初始化一个git仓库</span><br><span class="line">git init</span><br><span class="line">// 添加远程链接 把192.168.1.1 换成你真实服务器的ip</span><br><span class="line">git remote add origin root@192.168.1.1:/www/wwwroor/hook.com/git/test.git</span><br></pre></td></tr></table></figure>
<p><img src="/../images/git%E9%92%A9%E5%AD%90hookpost-receive/20191109105546412.png" alt="img"></p>
<p>推送时会提示如下错误</p>
<p>然后直接执行如下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push --set-upstream origin master</span><br></pre></td></tr></table></figure>
<p>然后输入你的服务器密码即可</p>
<p><img src="/../images/git%E9%92%A9%E5%AD%90hookpost-receive/20191109105649771.png" alt="img"></p>
<p>然后去到服务端</p>
<p><img src="/../images/git%E9%92%A9%E5%AD%90hookpost-receive/20191109105930363.png" alt="img"></p>
<p>服务端直接更新了</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git,钩子,post-receive,pre-receive</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo d部署到个人服务器git仓库上</title>
    <url>/post/24f7247.html</url>
    <content><![CDATA[<p>本篇前置条件：<br>1 个人服务器已安装git，则可创建git仓库，参考<a href="/post/c4bcdb47.html">/post/c4bcdb47.html</a><br>2 本地PC机已安装node，hexo，参考对应官方网站手册即可</p>
<p>以下为具体步骤：<br>第一步：服务端创建对应git仓库：hexo-blog.git</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/git </span><br><span class="line">su - git （因我的git账户名为git，需切换权限）</span><br><span class="line">mkdir hexo-blog.git</span><br><span class="line">cd hexo-blog.git</span><br><span class="line">git --bare init</span><br></pre></td></tr></table></figure>
<p>则此时git地址为：<a href="mailto:&#x67;&#x69;&#116;&#x40;&#49;&#x32;&#x37;&#46;&#x31;&#46;&#x31;&#x2e;&#x31;">&#x67;&#x69;&#116;&#x40;&#49;&#x32;&#x37;&#46;&#x31;&#46;&#x31;&#x2e;&#x31;</a>:/home/git/hexo-blog.git<br>git 为您的账号<br>127.1.1.1 为您的服务器ip<br>/home/git/hexo-blog.git 为仓库目录</p>
<p>可以在本地PC验证服务端git仓库有效性：<br>git clone <a href="mailto:&#103;&#x69;&#x74;&#64;&#x31;&#x32;&#x37;&#x2e;&#x31;&#x2e;&#x31;&#46;&#x31;">&#103;&#x69;&#x74;&#64;&#x31;&#x32;&#x37;&#x2e;&#x31;&#x2e;&#x31;&#46;&#x31;</a>:/home/git/hexo-blog.git</p>
<p>第二步：本地PC端 安装hexo-deployer-git，并配置hexo项目的 _config.yml 文件</p>
<p>hexo项目中安装hexo-deployer-git：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git –save</span><br></pre></td></tr></table></figure>
<p>配置_config.yml 文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  message: update files</span><br><span class="line">  repo: git@127.1.1.1:/home/git/hexo-blog.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>注意，此处有坑！<br>注意，此处有坑！<br>注意，此处有坑！<br>重要的事情说三遍！！！<br>因本地PC机用的window电脑，故冒号后面需带有空格，否则hexo d 不生效<br>即：“type: git”</p>
<p>第三步：提交部署hexo到服务端git仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d （输入您的git账户密码即可）</span><br></pre></td></tr></table></figure>
<p>第四步：用脚本将仓库的资源拉取到nginx代理的对应目录下</p>
<p>让Git仓库每次检测到push行为后，将最新的资源文件Git clone在你要访问的文件夹下，这样达到自动化部署blog项目</p>
<p>1 进入git仓库下的Hooks目录，配置回调post-receive，执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/git/hexo-blog.git/hooks</span><br><span class="line"></span><br><span class="line">touch post-receive</span><br><span class="line"></span><br><span class="line">vim post-receive</span><br></pre></td></tr></table></figure>
<p>2 写入以下脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">GIT_REPO=/home/git/hexo-blog.git</span><br><span class="line">TMP_GIT_CLONE=/home/git/tmp/hexo-blog</span><br><span class="line">PUBLIC_WWW=/home/git/www/hexo</span><br><span class="line"></span><br><span class="line">rm -rf $&#123;TMP_GIT_CLONE&#125;</span><br><span class="line">git clone $GIT_REPO $TMP_GIT_CLONE</span><br><span class="line">rm -rf $&#123;PUBLIC_WWW&#125;</span><br><span class="line">cp -rf $&#123;TMP_GIT_CLONE&#125; $&#123;PUBLIC_WWW&#125;</span><br></pre></td></tr></table></figure>
<p>其中public_www就是用于最终存放nginx映射的静态资源文件目录</p>
<p>3 修改目录权限修</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x post-receive</span><br><span class="line"></span><br><span class="line">chmod 777 -R /home/git/www/hexo</span><br><span class="line"></span><br><span class="line">chmod 777 -R /home/git/tmp/hexo-blog</span><br></pre></td></tr></table></figure>
<p>对应的目录，务必保证有权限，否则不能正确执行脚本，不能拷贝对应目录文件</p>
<p>第五步：nginx配置</p>
<pre><code>server &#123;
    listen 80 ;

    root /home/git/www/hexo;

    server_name hexo.ixiewei.com;                                 

    location / &#123;                                                             

        root /home/git/www/hexo;

        if (-f $request_filename) &#123;

            rewrite ^/(.*)$  /$1 break;

        &#125;

    &#125;                                                  
&#125;</code></pre>
<p>此处保证nginx运行账户，拥有/home/git/www/hexo各级目录权限，否则可能出现403</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo,git服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>ffmpeg 推送、保存rtmp 流命令</title>
    <url>/post/e57818e5.html</url>
    <content><![CDATA[<ol>
<li><p>最近浏览国外网站时候发现，翻译不准确的敬请谅解。</p>
<p>1、将文件当做直播送至live</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ffmpeg -re -i localFile.mp4 -c <span class="built_in">copy</span> -f flv rtmp:<span class="comment">//server/live/streamName</span></span><br></pre></td></tr></table></figure>
<p>2、将直播媒体保存至本地文件</p>
</li>
</ol>
   <figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">ffmpeg -i <span class="attr">rtmp:</span><span class="comment">//server/live/streamName -c copy dump.flv</span></span><br></pre></td></tr></table></figure>
<p>   3、将其中一个直播流，视频改用h264压缩，音频不变，送至另外一个直播服务流</p>
   <figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">ffmpeg -i <span class="symbol">rtmp:</span>/<span class="regexp">/server/live</span><span class="regexp">/originalStream -c:a copy -c:v libx264 -vpre slow -f flv rtmp:/</span><span class="regexp">/server/live</span><span class="regexp">/h264Stream</span></span><br></pre></td></tr></table></figure>


<p>   4、将其中一个直播流，视频改用h264压缩，音频改用faac压缩，送至另外一个直播服务流</p>
   <figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ffmpeg</span> -i rtmp://server/live/originalStream -c:a libfaac -ar <span class="number">44100</span> -ab <span class="number">48</span>k -c:v libx264 -vpre slow -vpre baseline -f flv rtmp://server/live/h264Stream</span><br></pre></td></tr></table></figure>
<p>   5、将其中一个直播流，视频不变，音频改用faac压缩，送至另外一个直播服务流</p>
   <figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">ffmpeg -i <span class="symbol">rtmp:</span>/<span class="regexp">/server/live</span><span class="regexp">/originalStream -acodec libfaac -ar 44100 -ab 48k -vcodec copy -f flv rtmp:/</span><span class="regexp">/server/live</span><span class="regexp">/h264_AAC_Stream</span></span><br></pre></td></tr></table></figure>
<p>   6、将一个高清流，复制为几个不同视频清晰度的流重新发布，其中音频不变</p>
   <figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ffmpeg</span> -re -i rtmp://server/live/high_FMLE_stream -acodec copy -vcodec x264lib -s <span class="number">640</span>×<span class="number">360</span> -b <span class="number">500</span>k -vpre medium -vpre baseline rtmp://server/live/baseline_500k -acodec copy -vcodec x264lib -s <span class="number">480</span>×<span class="number">272</span> -b <span class="number">300</span>k -vpre medium -vpre baseline rtmp://server/live/baseline_300k -acodec copy -vcodec x264lib -s <span class="number">320</span>×<span class="number">200</span> -b <span class="number">150</span>k -vpre medium -vpre baseline rtmp://server/live/baseline_150k -acodec libfaac -vn -ab <span class="number">48</span>k rtmp://server/live/audio_only_AAC_48k</span><br></pre></td></tr></table></figure>
<p>   7、功能一样，只是采用-x264opts选项</p>
   <figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ffmpeg</span> -re -i rtmp://server/live/high_FMLE_stream -c:a copy -c:v x264lib -s <span class="number">640</span>×<span class="number">360</span> -x264opts bitrate=<span class="number">500</span>:profile=baseline:preset=slow rtmp://server/live/baseline_500k -c:a copy -c:v x264lib -s <span class="number">480</span>×<span class="number">272</span> -x264opts bitrate=<span class="number">300</span>:profile=baseline:preset=slow rtmp://server/live/baseline_300k -c:a copy -c:v x264lib -s <span class="number">320</span>×<span class="number">200</span> -x264opts bitrate=<span class="number">150</span>:profile=baseline:preset=slow rtmp://server/live/baseline_150k -c:a libfaac -vn -b:a <span class="number">48</span>k rtmp://server/live/audio_only_AAC_48k</span><br></pre></td></tr></table></figure>
<p>   8、将当前 摄像头 及音频通过DSSHOW 采集 ，视频h264、音频faac压缩后发布</p>
   <figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ffmpeg</span> -r <span class="number">25</span> -f dshow -s <span class="number">640</span>×<span class="number">480</span> -i video=”video source name”:audio=”audio source name” -vcodec libx264 -b <span class="number">600</span>k -vpre slow -acodec libfaac -ab <span class="number">128</span>k -f flv rtmp://server/application/stream_name</span><br></pre></td></tr></table></figure>
<p>   9、将一个JPG 图片 经过h264压缩循环输出为mp4视频</p>
   <figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ffmpeg</span>.exe -i INPUT.jpg -an -vcodec libx264 -coder <span class="number">1</span> -flags +loop -cmp +chroma -subq <span class="number">10</span> -qcomp <span class="number">0</span>.<span class="number">6</span> -qmin <span class="number">10</span> -qmax <span class="number">51</span> -qdiff <span class="number">4</span> -flags2 +dct8x8 -trellis <span class="number">2</span> -partitions +parti8x8+parti4x4 -crf <span class="number">24</span> -threads <span class="number">0</span> -r <span class="number">25</span> -g <span class="number">25</span> -y OUTPUT.mp4</span><br></pre></td></tr></table></figure>
<p>   10、将普通流视频改用h264压缩，音频不变，送至高清流服务(新版本FMS live=1)</p>
   <figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">ffmpeg -i <span class="symbol">rtmp:</span>/<span class="regexp">/server/live</span><span class="regexp">/originalStream -c:a copy -c:v libx264 -vpre slow -f flv “rtmp:/</span><span class="regexp">/server/live</span><span class="regexp">/h264Stream live=1″</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>图像处理</category>
      </categories>
      <tags>
        <tag>图像处理,FFmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>iPhone6/6 Plus怎么换电池</title>
    <url>/post/24717.html</url>
    <content><![CDATA[<p>苹果手机越来越不耐用：用着用着就自动关机，或者一天充2、3次电。这时也许你会有是不是该换手机电池的疑问，外面换个电池不懂好不好、价钱也高！于是迷就试着自己换了电池！整个过程可谓惊心动魄啊！（不小心拆坏了一个配件）换电池看教程好像很简单，但是这绝对不是手残星人的专利，除非你是维修大能，不然iPhone的手机电池绝非网上标榜的能轻轻松松随意更换。自己动手，等待你的可能是更大的损失！所以换不换自己掂量咯！PS：迷的iPhone6自行换的淘宝所谓的原装拆机电池，到现在不到三个月就已经不行了！建议大家还是买第三方牌子有保修的正规电池更换！**</p>
<p>详细步骤：第1步：出门左拐马云家获取下列工具和零件——iPhone 6电池和iPhone维修工具包。主要需要购买一块新电池，一个专用螺丝刀，一个撬片，和一个屏幕吸盘。</p>
<p><img src="/../images/iPhone66Plus%E6%80%8E%E4%B9%88%E6%8D%A2%E7%94%B5%E6%B1%A0/TB2JTvEiKtTMeFjSZFOXXaTiVXa_70246596.jpg" alt="自己动手给iphone6/6 plus更换电池详细图文步骤"></p>
<p>第2步：找到手机充电接口两侧的两颗五角形螺丝。打开iPhone 6你只需要拧开这两颗螺丝。</p>
<p><img src="/../images/iPhone66Plus%E6%80%8E%E4%B9%88%E6%8D%A2%E7%94%B5%E6%B1%A0/ab701685e416b4bcf7a26a0902b4b12f.png" alt="自己动手给iphone6/6 plus更换电池详细图文步骤"></p>
<p>第3步：关掉手机电源，使用工具包里的五角形螺丝刀拧下螺丝。螺丝刀的头部很小，但它跟 iPhone 6底部的小螺丝是匹配的。</p>
<p><img src="/../images/iPhone66Plus%E6%80%8E%E4%B9%88%E6%8D%A2%E7%94%B5%E6%B1%A0/4c5288512ddfe7a4f34f131390346720.png" alt="自己动手给iphone6/6 plus更换电池详细图文步骤"></p>
<p>第4步：使用吸盘在主页键(Home)上方拉出屏幕。把吸盘固定在主页键的正上方，另一只手握住机身，然后往外拉。你只需要在屏幕和机身之间撬开足以塞进一个塑料片的空间。（如果有贴钢化膜记得撕掉）</p>
<p><img src="/../images/iPhone66Plus%E6%80%8E%E4%B9%88%E6%8D%A2%E7%94%B5%E6%B1%A0/0d40969027ed29d20dc228ae736d481b.png" alt="自己动手给iphone6/6 plus更换电池详细图文步骤"></p>
<p>第5步：使用撬片撬出屏幕。从主页键开始绕着屏幕一点一点向上撬。切记不可暴力从下方直接拉开！</p>
<p><img src="/../images/iPhone66Plus%E6%80%8E%E4%B9%88%E6%8D%A2%E7%94%B5%E6%B1%A0/814366689d16a385343ed0ea8d765639.png" alt="自己动手给iphone6/6 plus更换电池详细图文步骤"></p>
<p>第6步：把屏幕部分立起呈90度，但不要超过这个角度。屏幕顶部仍然跟机身连接在一起，所以不要用力拉扯。如图所示，你最多可以把屏幕立起呈90度。</p>
<p><img src="/../images/iPhone66Plus%E6%80%8E%E4%B9%88%E6%8D%A2%E7%94%B5%E6%B1%A0/8b739a449f362670fb8fac96d9f07ced.png" alt="自己动手给iphone6/6 plus更换电池详细图文步骤"></p>
<p>第7步：找到并拧下固定屏幕连线的螺丝。在移除电池的时候取下屏幕是一个好主意，因为电池是用胶水固定的，要移除它可能很费事。拧下保护盖上的螺丝，然后把保护盖也取下来。</p>
<p><img src="/../images/iPhone66Plus%E6%80%8E%E4%B9%88%E6%8D%A2%E7%94%B5%E6%B1%A0/4107bad4b76eec5ec63c7a58b0582411.png" alt="自己动手给iphone6/6 plus更换电池详细图文步骤"></p>
<p>第8步：拆开屏幕的连接器。屏幕和机身之间的连接器有好几个，你可以用小拨子或薄指甲锉把它们从端口中挑出来。</p>
<p><img src="/../images/iPhone66Plus%E6%80%8E%E4%B9%88%E6%8D%A2%E7%94%B5%E6%B1%A0/7247a4071e0154d5ad157bd461069f64.png" alt="自己动手给iphone6/6 plus更换电池详细图文步骤"></p>
<p>第9步：取下电池连接器保护盖。电池连接器保护盖由两个螺丝固定，把它们拧下来，然后把金属保护盖也取走。</p>
<p><img src="/../images/iPhone66Plus%E6%80%8E%E4%B9%88%E6%8D%A2%E7%94%B5%E6%B1%A0/39312a278dfbd924cc0d21f4fdfa00c4.png" alt="自己动手给iphone6/6 plus更换电池详细图文步骤"></p>
<p>第10步：拆开电池连接器。电池跟电路板之间的连接器只有一个，你可以用小拨子或薄指甲锉把它挑开。</p>
<p><img src="/../images/iPhone66Plus%E6%80%8E%E4%B9%88%E6%8D%A2%E7%94%B5%E6%B1%A0/4a4143bb484614bf838d29c60021ecc2.png" alt="自己动手给iphone6/6 plus更换电池详细图文步骤"></p>
<p>第11步：用电吹风加热后盖，把胶水吹软。iPhone 6使用了大量胶水来固定电池，它们需要软化才能把电池取下来。你可以用电吹风加热手机后盖，达到软化胶水的目的。不要使用温度比这更高的加热工具，要以加热时仍能舒服将把手机拿在手中为度。加热过程大概五分钟左右就可以了！或者把胶片拔出来，参考<a href="http://www.usbmi.com/2025.html">自己动手给iPhone5s更换电池详细图文教程</a>的第16个步骤！</p>
<p><img src="/../images/iPhone66Plus%E6%80%8E%E4%B9%88%E6%8D%A2%E7%94%B5%E6%B1%A0/ff6b1e7cde7220c584d09cb06ba49c39.png" alt="自己动手给iphone6/6 plus更换电池详细图文步骤"></p>
<p>第12步：使用信用卡或塑料拨片慢慢撬开电池。你可以使用银行卡、薄拨片或矬子在底部一点一点撬开电池。避开顶部靠近屏幕连接器的部分，因为下面还藏着连接器。另外，不要拿手机零部件当撬电池的支点。尽量让胶水附着在机壳之上，这样你在之后还能将其重新利用起来。</p>
<p><img src="/../images/iPhone66Plus%E6%80%8E%E4%B9%88%E6%8D%A2%E7%94%B5%E6%B1%A0/b0a9608517f9c198bedc81e2bcba87af.png" alt="自己动手给iphone6/6 plus更换电池详细图文步骤"></p>
<p>第13步：连上新电池，并折下连接器。如果没剩下太多胶水，那可以使用超薄双面胶来固定新电池。连接器只需要用一点点力就能回到槽位，但对齐位置可能有点繁琐，需要你花些时间。原来的电池连接器是折叠下来的，所以现在也是一样。如图所示，你可以用小拨子或薄金属锉把它压下去。</p>
<p><img src="/../images/iPhone66Plus%E6%80%8E%E4%B9%88%E6%8D%A2%E7%94%B5%E6%B1%A0/411431bb76b5d9840163062072110536.png" alt="自己动手给iphone6/6 plus更换电池详细图文步骤"></p>
<p>第14步：重新连上屏幕连接器，重新安装电池和屏幕连接器的金属保护盖。按照跟刚才相反的顺序连上屏幕连接器，首先从机身顶部的连接器开始，然后重新安装金属保护盖。</p>
<p><img src="/../images/iPhone66Plus%E6%80%8E%E4%B9%88%E6%8D%A2%E7%94%B5%E6%B1%A0/eb7b6defe6f08e05b2a9802e69ee09ad.png" alt="自己动手给iphone6/6 plus更换电池详细图文步骤"></p>
<p>第15步：合上机壳，安装螺丝。大功告成，开机！</p>
<p><img src="/../images/iPhone66Plus%E6%80%8E%E4%B9%88%E6%8D%A2%E7%94%B5%E6%B1%A0/e01d564fda1800d67657b76e9482eb20.png" alt="自己动手给iphone6/6 plus更换电池详细图文步骤"></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>-技术</tag>
      </tags>
  </entry>
  <entry>
    <title>php7 windows版本启动提示丢失vcruntime140.dll</title>
    <url>/post/d058b584.html</url>
    <content><![CDATA[<p>php7 windows版本启动提示丢失vcruntime140.dll</p>
<p>6月13日 php7终于没有跳票发布了alpha 版本啦，于是在自己的windows8.1上面安装准备体验一下，没想到启动的时候还是提示丢失vcruntime140.dll这个文件，于是上网百度搜索了半天没任何内容（这里严重鄙视百度） 天朝又不让用google 所以只能去官方网站爬一爬英文说明了，发现了点端倪，原来需要安装微软的vc++2015版本才行，下载地址在下方：</p>
<p>VC14需要</p>
<p><a href="https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=48145">https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=48145</a></p>
<p>VC11需要</p>
<p><a href="http://www.microsoft.com/en-us/download/details.aspx?id=30679">http://www.microsoft.com/en-us/download/details.aspx?id=30679</a></p>
<p>VC9需要</p>
<p>64bit: <a href="http://www.microsoft.com/en-us/download/details.aspx?id=15336">http://www.microsoft.com/en-us/download/details.aspx?id=15336</a></p>
<p>32bit: <a href="http://www.microsoft.com/en-us/download/details.aspx?id=5582">http://www.microsoft.com/en-us/download/details.aspx?id=5582</a></p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>-php</tag>
      </tags>
  </entry>
  <entry>
    <title>php实现事件监听与触发的方法</title>
    <url>/post/a76a0e8c.html</url>
    <content><![CDATA[<p>这篇文章主要介绍了php实现事件监听与触发的方法,可实现时间的绑定、触发与注销等功能,具有一定的参考借鉴价值,需要的朋友可以参考下</p>
<p>..本文实例讲述了php实现事件监听与触发的方法。分享给大家供大家参考。具体分析如下：</p>
<p>闲来无事，想了想PHP如何实现事件监听，参考了jQuery的事件绑定思路，简单的实现了一下。</p>
<p>主要功能：</p>
<p>1.绑定事件 支持一个事件绑定多个动作，支持绑定一次性事件</p>
<p>2.触发事件</p>
<p>3.注销事件</p>
<p>复制代码 代码如下:</p>
<p>class Event</p>
<p>{</p>
<p>protected static $listens    = array();</p>
<p>public static function listen($event, $callback, $once=false){</p>
<p>if(!is_callable($callback)) return false;</p>
<p>self::$listens[$event][]   = array(‘callback’=&gt;$callback, ‘once’=&gt;$once);</p>
<p>return true;</p>
<p>}</p>
<p>public static function one($event, $callback){</p>
<p>return self::listen($event, $callback, true);</p>
<p>}</p>
<p>public static function remove($event, $index=null){</p>
<p>if(is_null($index))</p>
<p>unset(self::$listens[$event]);</p>
<p>else</p>
<p>unset(self::$listens[$event][$index]);</p>
<p>}</p>
<p>public static function trigger(){</p>
<p>if(!func_num_args()) return;</p>
<p>$args            = func_get_args();</p>
<p>$event            = array_shift($args);</p>
<p>if(!isset(self::$listens[$event])) return false;</p>
<p>foreach((array) self::$listens[$event] as $index=&gt;$listen){</p>
<p>$callback        = $listen[‘callback’];</p>
<p>$listen[‘once’] &amp;&amp; self::remove($event, $index);</p>
<p>call_user_func_array($callback, $args);</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>以下是一些调用的例子：</p>
<p>复制代码 代码如下:// 增加监听walk事件</p>
<p>Event::listen(‘walk’, function(){</p>
<p>echo “I am walking…n”;</p>
<p>});</p>
<p>// 增加监听walk一次性事件</p>
<p>Event::listen(‘walk’, function(){</p>
<p>echo “I am listening…n”;</p>
<p>}, true);</p>
<p>// 触发walk事件</p>
<p>Event::trigger(‘walk’);</p>
<p>/*</p>
<p>I am walking…</p>
<p>I am listening…</p>
<p>*/</p>
<p>Event::trigger(‘walk’);</p>
<p>/*</p>
<p>I am walking…</p>
<p>*/</p>
<p>Event::one(‘say’, function($name=’’){</p>
<p>echo “I am {$name}n”;</p>
<p>});</p>
<p>Event::trigger(‘say’, ‘deeka’); // 输出 I am deeka</p>
<p>Event::trigger(‘say’, ‘deeka’); // not run</p>
<p>class Foo</p>
<p>{</p>
<p>public function bar(){</p>
<p>echo “Foo::bar() is calledn”;</p>
<p>}</p>
<p>public function test(){</p>
<p>echo “Foo::foo() is called, agrs:”.json_encode(func_get_args()).”n”;</p>
<p>}</p>
<p>}</p>
<p>$foo   = new Foo;</p>
<p>Event::listen(‘bar’, array($foo, ‘bar’));</p>
<p>Event::trigger(‘bar’);</p>
<p>Event::listen(‘test’, array($foo, ‘test’));</p>
<p>Event::trigger(‘test’, 1, 2, 3);</p>
<p>class Bar</p>
<p>{</p>
<p>public static function foo(){</p>
<p>echo “Bar::foo() is calledn”;</p>
<p>}</p>
<p>}</p>
<p>Event::listen(‘bar1’, array(‘Bar’, ‘foo’));</p>
<p>Event::trigger(‘bar1’);</p>
<p>Event::listen(‘bar2’, ‘Bar::foo’);</p>
<p>Event::trigger(‘bar2’);</p>
<p>function bar(){</p>
<p>echo “bar() is calledn”;</p>
<p>}</p>
<p>Event::listen(‘bar3’, ‘bar’);</p>
<p>Event::trigger(‘bar3’);</p>
<p>希望本文所述对大家的PHP程序设计有所帮助。</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>-php</tag>
      </tags>
  </entry>
  <entry>
    <title>linux文件共享之nfs和smaba</title>
    <url>/post/f6a907c.html</url>
    <content><![CDATA[<p> nfs和samba</p>
<p>1、NFS简介</p>
<p>NFS（Network File System）即网络文件系统，是FreeBSD支持的文件系统中的一种，它允许网络中的计算机之间通过TCP/IP网络共享资源。在NFS的应用中，本地NFS的客户端应用可以透明地读写位于远端NFS服务器上的文件，就像访问本地文件一样。</p>
<p>类unix系统之间实现文件共享功能，不能实现跟windows系统之间实现共享；</p>
<p>2、NFS工作过程：</p>
<p>nfs依赖于rpc服务才能工作；</p>
<p>nfs工作过程：nfs客户端/nfs服务端</p>
<p>1、nfs服务端，在本地分区上创建一个extX的文件系统，并将该分区挂载至一个空目录上，注意，此时在服务端，文件系统是extX；</p>
<p>2、nfs服务端，上有个nfs协议，他的目的是，监听服务端套接字，接入用户关于nfs协议的请求，去帮忙访问本地基于extX文件系统的目录数据；</p>
<p>3、nfs客户端也是利用nfs协议。当有用户访问关于远程nfs服务端数据时，其实是启用nfs协议利用rpc的远程过程调用，去调用nfs服务端的extX文件系统的分区目录数据；</p>
<p>注意：nfs客户端能够直接操作本地映射的关于nfs服务器上的资源，是通过客户端利用vfs文件系统转换成nfs结合rpc的远程过程调用来完成的；</p>
<p>nfs服务端，监听关于nfs协议的rpc套接字，将用户请求的资源直接映射到本地的其他文件系统的资源目录中；</p>
<p>nfs客户端其实是通过nfs协议+rpc的远程过程调用去访问远程nfs服务端资源的。资源并不是指nfs文件系统格式的资源。他只是一个协议；</p>
<p>先由rpc监听111端口，再转到nfs的2049端口；</p>
<p>3、NFS安装：</p>
<p>nfs程序包：nfs-utils</p>
<p>[root@localhost ~]# yum -y install nfs-utils      ：安装nfs服务；</p>
<p>[root@localhost ~]# yum -y install rpcbind       ：安装rpc服务；</p>
<p>[root@localhost ~]# service nfs start<br>启动 NFS 服务：                      [确定]<br>关掉 NFS 配额：                      [确定]<br>启动 NFS mountd：                     [确定]<br>启动 NFS 守护进程：                    [确定]<br>正在启动 RPC idmapd：                   [确定]<br>[root@localhost ~]# service nfs status<br>rpc.svcgssd 已停<br>rpc.mountd (pid 2200) 正在运行…<br>nfsd (pid 2215 2214 2213 2212 2211 2210 2209 2208) 正在运行…<br>rpc.rquotad (pid 2196) 正在运行…<br>[root@localhost ~]#                     ：安装和启用nfs服务；</p>
<p>[root@localhost ~]# rpcinfo -p localhost          ：查看nfs启用了哪些进程，及进程端口号；</p>
<p>4、配置和使用nfs：</p>
<p>nfs服务端配置：</p>
<p>共享方式：</p>
<p>在服务端上将共享目录导出到nfs共享目录，然后配置权限，客户端就能访问了；</p>
<p>nfs共享目录的配置格式：</p>
<p>文件系统  客户端1（文件系统属性） 客户端2（文件系统属性）</p>
<p>文件系统：要共享的目录；</p>
<p>客户端：</p>
<p>主机地址。1.1.1.1；</p>
<p>网络名，test.aaa.com；</p>
<p>网段地址,1.1.1.0/24；</p>
<p>文件系统属性：也叫共享权限，多个属性用逗号分开；</p>
<p>rw：读写；</p>
<p>asvnc：异步（默认）；</p>
<p>sync：同步（性能差）；</p>
<p>root_squash：压缩root用户（默认）。如果使用客户端root去访问服务端nfs共享时，则需要基于imapd，自动将root通过网络访问时转换为nfsnobody用户（guest账户）；</p>
<p>注意：guest用户的权限是很小的，压缩很安全；</p>
<p>no_root_squash：不压缩root用户（不安全）；</p>
<p>注意：root可以直接使用自身去访问nfs共享目录了，权限无限制；</p>
<p>all_squash：压缩所有用户。客户端所有用户都不能使用自己的什么去访问服务端上的共享目录（“不能拿自己家的钥匙去开别人家的门”）。提高服务端安全；</p>
<p>anonuid或anongid：指定匿名用户映射为系统上的UID和GID。默认是映射到nfsnobody这个guest账号上来。提高服务端安全；</p>
<p>id nfsnobody ：查看guest账号的uid和gid</p>
<p>nohide：隐藏交叉导出时的目录文件，允许交叉挂载；</p>
<p>例如：/var/nfstest/ 导出来，被客户端挂载了。/var/nfstest/a/导出来，也被客户端挂在了。现在不想让双方客户端看到对方的挂载目录下的文件，怎么办？就是设置nohide属性，挂载到/var/nfstest/下的客户端无法看到/var/nfstest/a/下的所有文件了。安全；</p>
<p>crossmnt：允许交叉挂载。意义同上反过来；</p>
<p>示例1：将NFS服务器上的目录/var/nfstest共享出去；</p>
<p>[root@localhost ~]# vim /etc/exports</p>
<p>/var/nfstest  172.16.0.0/16(rw,no_root_squash)     ：读写挂载，且不压缩root账户</p>
<p>[root@localhost ~]# mkdir /var/nfstest</p>
<p>[root@localhost ~]# service nfs restart</p>
<p>客户端操作：</p>
<p>[root@localhost ~]# mkdir /mnt/nfs</p>
<p>[root@localhost ~]# mount -t nfs 172.16.1.107:/var/nfstest /mnt/nfs<br>[root@localhost ~]# cd /mnt/nfs/</p>
<p>[root@localhost nfs]# touch aa.txt<br>[root@localhost nfs]# touch bb.txt<br>[root@localhost nfs]# ll<br>总用量 0<br>-rw-r–r–. 1 root root 0 4月  4 21:19 aa.txt<br>-rw-r–r–. 1 root root 0 4月  4 21:19 bb.txt<br>[root@localhost nfs]#</p>
<p>：客户端使用挂载的方式，来访问nfs服务端上的文件内容，二者内容是同步的；</p>
<p>示例2：文件共享权限：</p>
<p>场景：在nfs服务端上各自创建一个账号，且uid一样。观察相互在共享目录下创建文件后，各自看到的文件属主和属组；</p>
<p>nfs服务端：</p>
<p>[root@localhost ~]# useradd -u 502 hadoop<br>[root@localhost ~]# vim /etc/exports</p>
<p>/var/nfstest  172.16.0.0/16(rw,no_root_squash)</p>
<p>[root@localhost ~]# setfacl -m u:502:rwx /var/nfstest/    ：为hadoop账号设置访问共享目录的权限；</p>
<p>[root@localhost ~]# service nfs restart</p>
<p>nfs客户端：</p>
<p>[root@localhost /]# useradd -u 502 nfsuser<br>[root@localhost /]# mount -t nfs 172.16.1.107:/var/nfstest /mnt/nfs/<br>[root@localhost /]#                     ：客户端上创建同uid的账号：</p>
<p>[root@localhost /]# su - nfsuser<br>[nfsuser@localhost ~]$<br>[nfsuser@localhost ~]$<br>[nfsuser@localhost ~]$ cd /mnt/nfs/<br>[nfsuser@localhost nfs]$ touch test1.txt<br>[nfsuser@localhost nfs]$ touch test2.txt<br>[nfsuser@localhost nfs]$ ll<br>总用量 0<br>-rw-r–r–. 1 root  root  0 4月  4 21:19 aa.txt<br>-rw-r–r–. 1 root  root  0 4月  4 21:19 bb.txt<br>-rw-rw-r–. 1 nobody nobody 0 4月  4 21:28 test1.txt<br>-rw-rw-r–. 1 nobody nobody 0 4月  4 21:28 test2.txt<br>[nfsuser@localhost nfs]$     ：使用新建的账号去共享目录中创建两个文件；</p>
<p>发现：使用这个uid编号跟服务端uid编号一样的用户去创建文件是的属主和属组都是nobody，并不是自己；</p>
<p>[root@localhost ~]# useradd -u 509 aaa<br>[root@localhost ~]# su - aaa<br>[aaa@localhost ~]$ cd /mnt/nfs/<br>[aaa@localhost nfs]$ touch ttt.txt<br>touch: 无法创建”ttt.txt”: 权限不够<br>[aaa@localhost nfs]$</p>
<p>发现：当我在客户端上重新再创建一个用户时，切换到该用户，去共享目录下新建文件，提示权限不够；</p>
<p>来到nfs服务端：</p>
<p>[root@localhost ~]# cd /var/nfstest/<br>[root@localhost nfstest]# ll<br>总用量 0<br>-rw-r–r–. 1 root  root  0 4月  4 21:19 aa.txt<br>-rw-r–r–. 1 root  root  0 4月  4 21:19 bb.txt<br>-rw-rw-r–. 1 hadoop hadoop 0 4月  4 21:28 test1.txt<br>-rw-rw-r–. 1 hadoop hadoop 0 4月  4 21:28 test2.txt<br>[root@localhost nfstest]#</p>
<p>发现：原本在客户端上创建的文件的属主和属组变成了hadoop了；</p>
<p>权限总结：</p>
<p>1、nfs客户端用户在访问时，其实是映射到服务端上同uid的用户权限上了；</p>
<p>2、服务端同uid用户的权限就是客户端用户的权限；</p>
<p>3、共享目录的权限是文件系统跟nfs配置权限的交集；</p>
<p>4、客户端用户在共享目录下创建的文件统统都会显示成nobody用户；</p>
<p>因此，客户端用户要想在共享目录中有权限，需要两点儿：</p>
<p>1、客户端上用户的uid编号在服务端上必须也有；</p>
<p>2、服务端同uid账号的对共享目录拥有权限；</p>
<p>5、nfs服务端端口优化：</p>
<p>问题：nfs服务端启动后，基于rpc的进程会从rpc中随机得到一个端口号，次端口号有可能会被其他已知服务占用。因此要固定下来；</p>
<p>[root@localhost nfstest]# vim /etc/sysconfig/nfs</p>
<p>MOUNTD_PORT=892</p>
<p>STATD_PORT=662</p>
<p>STATD_OUTGOING_PORT=2020     ：去掉这些原有的注释，启用固定端口；</p>
<p>[root@localhost nfstest]# service nfs restart</p>
<p>[root@localhost nfstest]# rpcinfo -p localhost   ：查看被gudingde端口号；</p>
<p>结束！</p>
<p>2、Samba简介：</p>
<p>Samba是在Linux和UNIX系统上实现SMB协议的一个免费软件，由服务器及客户端程序构成。SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。SMB协议是客户机/服务器型协议，客户机通过该协议可以访问服务器上的共享文件系统、打印机及其他资源。通过设置“NetBIOS over TCP/IP”使得Samba不但能与局域网络主机分享资源，还能与全世界的电脑分享资源。</p>
<p>可以实现linux与windows，linux与linux系统之间的文件共享。不基于nfs；</p>
<p>1、samba安装：</p>
<p>客户端程序：samba-client；</p>
<p>服务器端程序：samba；</p>
<p>[root@localhost ~]# yum -y install samba</p>
<p>[root@localhost samba]# service smb start<br>启动 SMB 服务：                      [确定]<br>[root@localhost samba]# service nmb start<br>启动 NMB 服务：                      [确定]<br>[root@localhost samba]#                  ：启动samba服务；</p>
<p>2、samba用户：</p>
<p>在系统用户的基础之上，为该用户创建访问samba服务de密码即可；</p>
<p>3、samba服务的配置文件：</p>
<p>vim /etc/samba/smb.conf</p>
<p>#开头的都是纯文字注释信息；</p>
<p>;开头的都是可启用的注释选项；</p>
<p>workgroup = ：工作组名称；</p>
<p>server string = ：显示的samba服务器版本；</p>
<p>netbios name = ：netbios的名称；</p>
<p>interfaces = ：表示samba启用的监听接口；</p>
<p>hosts allow = ：表示访问控制白名单。允许哪些段的主机访问；</p>
<p>注意：如果启用了，没写到这里的都会拒绝掉。因为它是白名单。没写入白名单的都拒绝；</p>
<p>log file = ：日志文件位置。%m：宏，表示客户端名称。所以，每个客户端都会生成一个日志文件；</p>
<p>max log size = ：日志文件最大大小；</p>
<p>security = ：安全级别（默认）；</p>
<p>user：根据账号密码认证；</p>
<p>share：无需账号密码，直接访问；</p>
<p>server：集中式账号密码；</p>
<p>passdb backend = ：账号密码的存放格式。默认是tdbsam；</p>
<p>域：</p>
<p>sercurity = domain ：这是域下的安全级别，domain；</p>
<p>passdb backend = ：账号密码存放格式；</p>
<p>password server = ：域认证服务器名；</p>
<p>名称解析选项：wins是windows的本地名称解析服务；</p>
<p>wins support = ：是否启用wins；</p>
<p>wins server =  ：wins服务器；</p>
<p>wins proxy =  ：wins的代理；</p>
<p>dns proxy =</p>
<p>打印机选项：共享打印机</p>
<p>load printers = ：加载打印服务；</p>
<p>文件系统选项；</p>
<p>……..<br>[共享名]                ：共享名；</p>
<p>comment =    ：共享备注信息；</p>
<p>path =     ：实际共享目录路径；</p>
<p>guest ok =   ：是否允许来宾账号查看某些目录；</p>
<p>public =    ：登录samba的用户不是某些共享目录的属主和属组时，是否允许浏览和显示；</p>
<p>browseable =  ：登录samba的用户不是当前共享目录的属主和属组时，是否允许浏览和显示</p>
<p>也就是说，一个目录在共享目录下，当用户不属于我的属主和属组时，当该用户访问时，我是否显示出来。最好别显示，为了安全；</p>
<p>writable =   ：是否启用共享可写权限。针对全部访问者；</p>
<p>write list =  ：共享可写用户列表。只针对该列表中的用户；</p>
<p>read only =   ：是否允许只读。定义了只读，则write list和writable=yes就没有意义了；</p>
<p>示例1：我为samba服务器端创建用户，提供文件共享：<br>[root@localhost ~]# smbpasswd -a centos<br>New SMB password:<br>Retype new SMB password:<br>Added user centos.<br>[root@localhost ~]#</p>
<p>[root@localhost ~]# smbpasswd -a hadoop<br>New SMB password:<br>Retype new SMB password:<br>Added user hadoop.</p>
<p>[root@localhost ~]# service smb restart<br>关闭 SMB 服务：                      [确定]<br>启动 SMB 服务：                      [确定]<br>[root@localhost ~]# service nmb restart<br>关闭 NMB 服务：                      [确定]<br>启动 NMB 服务：                      [确定]<br>[root@localhost ~]#                     ：重启samba服务；</p>
<p>验证上面创建的用户是否能够登录samba服务端：</p>
<p>在windows是上使用unc的方式访问：</p>
<p><img src="/../images/linux%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E4%B9%8Bnfs%E5%92%8Csmaba/wKioL1Uf1_2ibkokAADDjxfgCXg785.jpg" alt="wKioL1Uf1_2ibkokAADDjxfgCXg785.jpg"></p>
<p>输入hadoop的用户名和密码，成功访问到samba中的共享目录：其实访问的是用户自己的家目录；</p>
<p><img src="/../images/linux%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E4%B9%8Bnfs%E5%92%8Csmaba/wKiom1Uf102BPxYcAAEcVH54JrI618.jpg" alt="wKiom1Uf102BPxYcAAEcVH54JrI618.jpg"></p>
<p><img src="/../images/linux%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E4%B9%8Bnfs%E5%92%8Csmaba/wKioL1Uf2MLBLVAQAABNnbWtSC0832.jpg" alt="wKioL1Uf2MLBLVAQAABNnbWtSC0832.jpg"></p>
<p>示例2：基于用户控制，访问公共共享目录；</p>
<p>[root@localhost ~]# mkdir /share/test -pv<br>mkdir: 已创建目录 “/share”<br>mkdir: 已创建目录 “/share/test”<br>[root@localhost ~]# setfacl -m u:centos:rwx /share/test/<br>[root@localhost ~]# vim /etc/samba/smb.conf</p>
<p>[myshared]<br>comment = my share test<br>path = /share/test<br>writable = yes               ：添加共享记录，将目录共享出去；</p>
<p>[root@localhost ~]# testparm                ：检测一下配置文件中的内容；</p>
<p>[root@localhost ~]# service smb restart<br>关闭 SMB 服务：                      [确定]<br>启动 SMB 服务：                      [确定]<br>[root@localhost ~]# service nmb restart<br>关闭 NMB 服务：                      [确定]<br>启动 NMB 服务：                      [确定]<br>[root@localhost ~]#                     ：重启一下samba服务；</p>
<p>使用客户端去测试：</p>
<p>使用centos帐号去测试：</p>
<p><img src="/../images/linux%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E4%B9%8Bnfs%E5%92%8Csmaba/wKioL1Uf2yLA4-1FAAEmi-ZXy8s213.jpg" alt="wKioL1Uf2yLA4-1FAAEmi-ZXy8s213.jpg"></p>
<p>可以看到，能够显示新建的共享目录了。因为设置了文件acl，使得centos账户可以访问这个目录：</p>
<p><img src="/../images/linux%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E4%B9%8Bnfs%E5%92%8Csmaba/wKiom1Uf2jvgprcFAABjTzURfwc095.jpg" alt="wKiom1Uf2jvgprcFAABjTzURfwc095.jpg"></p>
<p>可以新建文件：</p>
<p><img src="/../images/linux%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E4%B9%8Bnfs%E5%92%8Csmaba/wKioL1Uf3PTQOiKaAACGIGDIzdA403.jpg" alt="wKioL1Uf3PTQOiKaAACGIGDIzdA403.jpg"></p>
<p>再次使用hadoop登录查看：</p>
<p><img src="/../images/linux%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E4%B9%8Bnfs%E5%92%8Csmaba/wKioL1Uf3AGhKqgIAAEwut8IChs180.jpg" alt="wKioL1Uf3AGhKqgIAAEwut8IChs180.jpg"></p>
<p>ok，都能看到新建的共享目录了：</p>
<p><img src="/../images/linux%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E4%B9%8Bnfs%E5%92%8Csmaba/wKioL1Uf3A-j-OEUAAB4OSMZiS8949.jpg" alt="wKioL1Uf3A-j-OEUAAB4OSMZiS8949.jpg"></p>
<p>但是hadoop却没权限使用该共享目录；</p>
<p><img src="/../images/linux%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E4%B9%8Bnfs%E5%92%8Csmaba/wKioL1Uf3J3wb4_FAAD5RYqE8rk162.jpg" alt="wKioL1Uf3J3wb4_FAAD5RYqE8rk162.jpg"></p>
<p>注意：共享文件的最终权限取决于文件系统和共享权限二者的交集；</p>
<p>提醒：</p>
<p>基于windows客户端去访问共享时，由于缓存的原因，可能导致有时不能更换账号，可以如下解决：</p>
<p>cmd</p>
<p>net use</p>
<p>net use \共享服务器ip /del                  ：清楚共享账号缓存；</p>
<p>4、smbclient命令：一种使用在samba客户端上的命令：</p>
<p>1、查看samba服务器上的所有共享目录：</p>
<p>格式：smbclient -L SERVER -U USERNAME</p>
<p>例如：</p>
<p>[root@localhost ~]# smbclient -L 172.16.1.105 -U hadoop<br>Enter hadoop’s password:<br>Domain=[MYGROUP] OS=[Unix] Server=[Samba 3.6.23-14.el6_6]</p>
<p>Sharename    Type   Comment</p>
<hr>
<p>myshared    Disk   my share test<br>IPC$      IPC    IPC Service (Samba Server Version 3.6.23-14.el6_6)<br>hadoop     Disk   Home Directories<br>Domain=[MYGROUP] OS=[Unix] Server=[Samba 3.6.23-14.el6_6]</p>
<p>Server        Comment</p>
<hr>
<p>LOCALHOST      Samba Server Version 3.6.23-14.el6_6</p>
<p>Workgroup      Master</p>
<hr>
<p>MYGROUP       LOCALHOST<br>WORKGROUP      CHEN<br>[root@localhost ~]#          ：可以看到刚刚新建的共享目录了；</p>
<p>2、以交互式的方式连入samba服务器共享目录：</p>
<p>格式：smbclient //SERVER/SHARED -U USERNAME</p>
<p>如：</p>
<p>[root@localhost ~]# smbclient //172.16.1.105/myshared -U centos<br>Enter centos’s password:<br>Domain=[MYGROUP] OS=[Unix] Server=[Samba 3.6.23-14.el6_6]<br>smb: &gt; ls                  ：输入命令，去操作共享目录中的内容；</p>
<p>5、挂载共享目录至客户端本地：</p>
<p>1、临时挂载：</p>
<p>格式：mount -t cifs //server/shared /path/to/mount_point -o username=smbuser</p>
<p>[root@localhost ~]# mkdir /mnt/samba<br>[root@localhost ~]# mount -t cifs //172.16.1.105/myshared /mnt/samba -o username=centos<br>Password:</p>
<p>[root@localhost samba]# ll<br>总用量 0<br>-rwxr–r–. 1 centos centos 0 4月  5 04:39 新建文本文档.txt<br>[root@localhost samba]#                    ：临时执行一次手动挂载；</p>
<p>2、开机自动挂载：</p>
<p>vim /etc/fstab</p>
<p>//172.16.1.105/myshared /mnt/samba cifs  defaults,<strong>_netdev</strong>,username=centos,password=password2020   [root@localhost /]# mount -a          ：重载/etc/fstab文件；<br>[root@localhost /]#</p>
<p>[root@localhost /]# mount<br>/dev/mapper/VolGroup-lv_root on / type ext4 (rw)<br>proc on /proc type proc (rw)<br>sysfs on /sys type sysfs (rw)<br>devpts on /dev/pts type devpts (rw,gid=5,mode=620)<br>tmpfs on /dev/shm type tmpfs (rw,rootcontext=”system_u:object_r:tmpfs_t:s0”)<br>/dev/sda1 on /boot type ext4 (rw)<br>none on /proc/sys/fs/binfmt_misc type binfmt_misc (rw)<br>//172.16.1.105/myshared on /mnt/samba type cifs (rw)  ：可以看到，成功被挂载了；</p>
<p>注意：/etc/fstab中有个参数：“_netdev”：表示当无法挂载时放弃挂载。因为共享是基于网络的，当无法挂载时，服务器是无法开机的。所以，要主动放弃；</p>
<p>[root@localhost /]# cd /mnt/sa——mba/<br>[root@localhost samba]#<br>[root@localhost samba]# ll<br>总用量 0<br>-rwxr–r–. 1 centos centos 0 4月  5 04:39 新建文本文档.txt<br>[root@localhost samba]#                   ：挂载成功；</p>
<p>6、web方式管理配置samba：</p>
<p>[root@localhost /]# yum -y install samba-swat xinetd    ：安装samba-swat和xinetd服务；</p>
<p>[root@localhost /]# vim /etc/xinetd.d/swat</p>
<p>port      = 901                ：端口号默认901；</p>
<p>only_from    = 172.16.0.0/16           :修改客户端限制；</p>
<p>disable     = no                ：修改此处为“no”；</p>
<p>[root@localhost /]# service xinetd start<br>正在启动 xinetd：</p>
<p>[root@localhost /]# chkconfig | grep swat<br>swat:        启用                    ：启用samba-swat；</p>
<p>web访问配置：成功访问，可以执行配置了；</p>
<p><img src="/../images/linux%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E4%B9%8Bnfs%E5%92%8Csmaba/wKioL1Uf5q7jyAHAAAGL28uh2QI264.jpg" alt="wKioL1Uf5q7jyAHAAAGL28uh2QI264.jpg"></p>
<p>结束！</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>-linux</tag>
      </tags>
  </entry>
  <entry>
    <title>python三步实现人脸识别</title>
    <url>/post/e86121cf.html</url>
    <content><![CDATA[<p>Face Recognition软件包</p>
<p>这是世界上最简单的人脸识别库了。你可以通过<a href="http://www.roncoo.com/course/view/82b3a098750545f1b80fe789a72d5a81">Python</a>引用或者命令行的形式使用它，来管理和识别人脸。</p>
<p>该软件包使用dlib中最先进的人脸识别深度学习算法，使得识别准确率在《Labled Faces in the world》测试基准下达到了99.38%。</p>
<p>它同时提供了一个叫face_recognition的命令行工具，以便你可以用命令行对一个文件夹中的图片进行识别操作。</p>
<p>特性</p>
<p>在图片中识别人脸</p>
<p>找到图片中所有的人脸</p>
<p><img src="/../images/python%E4%B8%89%E6%AD%A5%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/2C5ibeGc6h6RE3NWwi7njZj3Bh6bEXYB.jpg" alt="face/2C5ibeGc6h6RE3NWwi7njZj3Bh6bEXYB.jpg"></p>
<p><img src="/../images/python%E4%B8%89%E6%AD%A5%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/8J2Cs7fx6KQsAHjpsRR4nFTjQdjbHcHh.jpg" alt="images/8J2Cs7fx6KQsAHjpsRR4nFTjQdjbHcHh.jpg"></p>
<p>找到并操作图片中的脸部特征</p>
<p>获得图片中人类眼睛、鼻子、嘴、下巴的位置和轮廓</p>
<p><img src="/../images/python%E4%B8%89%E6%AD%A5%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/c24aXPRWF2ye3WdTKbC2bdFGZmBCwrtG.jpg" alt="face/c24aXPRWF2ye3WdTKbC2bdFGZmBCwrtG.jpg"></p>
<p><img src="/../images/python%E4%B8%89%E6%AD%A5%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/K5mzWPj8Fn253RNJnyfC4hrc55bEpKCC.jpg" alt="face/K5mzWPj8Fn253RNJnyfC4hrc55bEpKCC.jpg"></p>
<p>找到脸部特征有很多超级有用的应用场景，当然你也可以把它用在最显而易见的功能上：美颜功能（就像美图秀秀那样）。</p>
<p><img src="/../images/python%E4%B8%89%E6%AD%A5%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/d77HG2fa3SHWKH4bnyGW7nYrdXGhMwMJ.jpg" alt="face/d77HG2fa3SHWKH4bnyGW7nYrdXGhMwMJ.jpg"></p>
<p>鉴定图片中的脸</p>
<p>识别图片中的人是谁。</p>
<p><img src="/../images/python%E4%B8%89%E6%AD%A5%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/ayWXswfWKNZxAT7QGTxzXmxYSTsrfirx.jpg" alt="face/ayWXswfWKNZxAT7QGTxzXmxYSTsrfirx.jpg"></p>
<p><img src="/../images/python%E4%B8%89%E6%AD%A5%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/a37YQjhYKN3Gn7Dd4HGSKa2ssPcH8ciM.jpg" alt="images/a37YQjhYKN3Gn7Dd4HGSKa2ssPcH8ciM.jpg"></p>
<p>你甚至可以用这个软件包做人脸的实时识别。</p>
<p><img src="/../images/python%E4%B8%89%E6%AD%A5%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/KyZfSapDPiyisCinDSN6FZSkEQAxDikd.png" alt="face/KyZfSapDPiyisCinDSN6FZSkEQAxDikd.png"></p>
<p>这里有一个实时识别的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam_faster.py</span><br></pre></td></tr></table></figure>
<p>安装</p>
<p>环境要求</p>
<ul>
<li>Python3.3+或者Python2.7</li>
<li>MacOS或者Linux（Windows不做支持，但是你可以试试，也许也能运行）</li>
</ul>
<p>安装步骤</p>
<p>在MacOS或者Linux上安装</p>
<p>首先，确保你安装了dlib，以及该软件的Python绑定接口。如果没有的话，看这篇安装说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://gist.github.com/ageitgey/629d75c1baac34dfa5ca2a1928a7aeaf</span><br></pre></td></tr></table></figure>
<p>然后，用pip安装这个软件包：</p>
<p><img src="/../images/python%E4%B8%89%E6%AD%A5%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/dWRaCAPQaJJew5MypJQKeyRCDSNatSYz.jpg" alt="face/dWRaCAPQaJJew5MypJQKeyRCDSNatSYz.jpg"></p>
<p>如果你安装遇到问题，可以试试这个安装好了的虚拟机：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://medium.com/@ageitgey/try-deep-learning-in-python-now-with-a-fully-pre-configured-vm-1d97d4c3e9b</span><br></pre></td></tr></table></figure>
<p>在树莓派2+上安装</p>
<p>看这篇说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://gist.github.com/ageitgey/1ac8dbe8572f3f533df6269dab35df65</span><br></pre></td></tr></table></figure>
<p>在Windows上安装</p>
<p>虽然Windows不是官方支持的，但是有热心网友写出了一个Windows上的使用指南，请看这里：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/ageitgey/face_recognition/issues/175#issue-257710508</span><br></pre></td></tr></table></figure>
<p>使用已经配置好的虚拟机（支持VMWare和VirtualBox）</p>
<p>看这篇说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://medium.com/@ageitgey/try-deep-learning-in-python-now-with-a-fully-pre-configured-vm-1d97d4c3e9b</span><br></pre></td></tr></table></figure>
<p>使用方法</p>
<p>命令行接口</p>
<p>如果你已经安装了face_recognition，那么你的系统中已经有了一个名为face_recognition的命令，你可以使用它对图片进行识别，或者对一个文件夹中的所有图片进行识别。</p>
<p>首先你需要提供一个文件夹，里面是所有你希望系统认识的人的图片。其中每个人一张图片，图片以人的名字命名。</p>
<p><img src="/../images/python%E4%B8%89%E6%AD%A5%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/3RQG35tpC2cSSjrwwZmSk7aJx8a7h7GE.jpg" alt="images/3RQG35tpC2cSSjrwwZmSk7aJx8a7h7GE.jpg"></p>
<p>然后你需要准备另一个文件夹，里面是你要识别的图片。</p>
<p><img src="/../images/python%E4%B8%89%E6%AD%A5%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/RGAYWwBEkai7KiwBbsrG3HF8YGrX6x64.jpg" alt="images/RGAYWwBEkai7KiwBbsrG3HF8YGrX6x64.jpg"></p>
<p>然后你就可以运行face_recognition命令了，把刚刚准备的两个文件夹作为参数传入，命令就会返回需要识别的图片中都出现了谁。</p>
<p><img src="/../images/python%E4%B8%89%E6%AD%A5%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/iRJb7d4H2Emyfa2wjYabJfR6X4RcextK.jpg" alt="face/iRJb7d4H2Emyfa2wjYabJfR6X4RcextK.jpg"></p>
<p>输出中，识别到的每张脸都单独占一行，输出格式为</p>
<p>通过Python模块使用</p>
<p>你可以通过导入face_recognition模块来使用它，使用方式超级简单，文档在这里：<a href="https://face-recognition.readthedocs.io/">https://face-recognition.readthedocs.io</a></p>
<p>自动找到图片中所有的脸</p>
<p><img src="/../images/python%E4%B8%89%E6%AD%A5%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/7FGab4SdRTHPYKn3fFeFPwrAy6pTHNaN.jpg" alt="face/7FGab4SdRTHPYKn3fFeFPwrAy6pTHNaN.jpg"></p>
<p>看看这个例子自己实践一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_picture_cnn.py</span><br></pre></td></tr></table></figure>
<p>你还可以自定义替换人类识别的深度学习模型。</p>
<p>注意：想获得比较好的性能的话，你可能需要GPU加速（使用英伟达的CUDA库）。所以编译的时候你也需要开启dlib的GPU加速选项。</p>
<p><img src="/../images/python%E4%B8%89%E6%AD%A5%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/zPjiMHkQQ3pGbQaTbWTKFAS6DPeRMiNJ.jpg" alt="images/zPjiMHkQQ3pGbQaTbWTKFAS6DPeRMiNJ.jpg"></p>
<p>你也可以通过这个例子实践一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/ageitgey/face_recognition/blob/master/examples/find_faces_in_batches.py</span><br></pre></td></tr></table></figure>
<p>如果你有很多图片和GPU，你也可以并行快速识别，看这篇文章：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/ageitgey/face_recognition/blob/master/examples/find_facial_features_in_picture.py</span><br></pre></td></tr></table></figure>
<p>自动识别人脸特征</p>
<p><img src="/../images/python%E4%B8%89%E6%AD%A5%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/ADK7prbbQy5nahFGTA5C3AmdXchYe5WH.jpg" alt="face/ADK7prbbQy5nahFGTA5C3AmdXchYe5WH.jpg"></p>
<p>试试这个例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https:``//github.com/ageitgey/face_recognition/blob/master/examples/find_facial_features_in_picture.py</span><br></pre></td></tr></table></figure>


<p>识别人脸鉴定是哪个人</p>
<p><img src="/../images/python%E4%B8%89%E6%AD%A5%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/7GCiTet4wtxJCKMWR8cdtpWyATT534NZ.jpg" alt="images/7GCiTet4wtxJCKMWR8cdtpWyATT534NZ.jpg"></p>
<p>这里是一个例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/ageitgey/face_recognition/blob/master/examples/recognize_faces_in_pictures.py</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>-Python</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot springcloud vue 微服务分布式 activiti 前后端分离</title>
    <url>/post/5a28adf9.html</url>
    <content><![CDATA[<p>代码介绍 ————-</p>
<p>本商品为 ：springcloud + Springboot 微服务\分布式 工作流 前后分离 + 跨域 版本 （权限控制到菜单和按钮）</p>
<p>后台框架 ：springcloud Greenwich.SR1 + springboot 2.1.4 + activiti6.0.0 + mybaits + maven + json 接口</p>
<p>前端页面 ：html +vue.js 形式 jquery ajax 异步跨域 json 格式数据交互 前后分离，前后台分开部署</p>
<p>特别注意 ：前端用的vue.js, 就是html页面引入vue.js形式， 用tomcat部署运行，更适合后台开发者</p>
<p>手机功能 ：IM、工作流任务管理审批，站内信，上传头像，修改资料，好友管理 等</p>
<p>核心技术 —————–</p>
<p>1.代码生成器：(单表、主表、明细表、树形表，快速开发利器)</p>
<p>freemaker模版技术 ,0个代码不用写,生成完整的一个模块,带页面、建表sql脚本、处理类、service等完整模块</p>
<p>2.多数据源：（支持同时连接无数个数据库，可以不同的模块连接不同数的据库）支持N个数据源</p>
<p>3.阿里数据库连接池druid,安全权限框架 shiro（菜单权限和按钮权限）, 缓存框架 ehcache</p>
<p>4.代码编辑器，在线模版编辑，仿开发工具编辑器</p>
<p>5.调用摄像头拍照 自定义裁剪编辑头像，头像图片色度调节</p>
<p>6.websocket 及时站内信并声音提醒、实时在线管理、websocket及时刷新页面（完胜ajax技术）</p>
<p>7.redis存储分布式缓存 自windows redis 绿色版，方便开发者本地开发测试</p>
<p>服务介绍 （各个服务单独运行，高可用、低耦合）</p>
<p>一：springcloud服务 —————-</p>
<p>1.eureka 注册中心：做了两个eureka服务，以此类推可以做多个，互相注册，高可用，集群部署</p>
<p>2.zipkin跟踪服务：分布式跟踪日志,基于内存存储记录</p>
<p>3.zuul网关路由服务：分发请求，统一管理过滤，结合 ribbon 负载均衡、 hystrix断路器</p>
<p>4.springboot-admin 监控中心服务：统一界面管理，查看各个服务运行状态 actuator健康检查</p>
<p>二：工作流服务 ———————————</p>
<p>1.模型管理 ：web在线流程设计器、预览流程xml、导出xml、部署流程</p>
<p>2.流程管理 ：导入导出流程资源文件、查看流程图、根据流程实例反射出流程模型、激活挂起</p>
<p>3.运行中流程：查看流程信息、当前任务节点、当前流程图、作废暂停流程、指派待办人</p>
<p>4.历史的流程：查看流程信息、流程用时、流程状态、查看任务发起人信息</p>
<p>5.待办任务 ：查看本人个人任务以及本角色下的任务、办理、驳回、作废、指派一下代理人</p>
<p>6.已办任务 ：查看自己办理过的任务以及流程信息、流程图、流程状态(作废 驳回 正常完成)</p>
<p>注：当办理完当前任务时，下一任务待办人会即时通讯收到新任务消息提醒，当作废和完结任务时,</p>
<p>任务发起人会收到站内信消息通知</p>
<p>三：系统服务 ——————————–</p>
<p>权限管理：点开二级菜单进入三级菜单显示 角色(基础权限)和按钮权限</p>
<p>角色(基础权限): 分角色组和角色,独立分配菜单权限和增删改查权限。（一个用户可以多个角色）</p>
<p>按钮权限: 给角色分配按钮权限。</p>
<p>按钮管理：自定义按钮管理，维护按钮shiro权限标识等</p>
<p>菜单管理：N级别自定义菜单，选择菜单图标，菜单状态显示隐藏（递归处理）</p>
<p>数据字典：N级别，支持多级别分类。内设编号，排序等</p>
<p>日志管理：记录用户登录退出和一些重要操作记录</p>
<p>在线管理：websocket技术，实时检测在线用户列表，统计在线人数,可强制用户下线 同一用户只能在一个客户端登录</p>
<p>系统用户：对各个基本的用户增删改查，导出到excel表格，批量删除</p>
<p>站内信：收信箱和发信箱，websocket技术通讯技术做的及时收信提醒，可配置语音提示来信</p>
<p>系统设置：修改系统名称，每页显示条数, 邮件服务配置，站内信配置</p>
<p>10.性能监控：drudi监控 各个服务的性能，SQL监控，SQL防火墙，URL监控，SPRING监控，SESSION监控等</p>
<p>四：系统工具服务 ———————</p>
<p>代码生成：生成完整的模块代码，并保留生成记录模版，可复用 （超强悍开发利器）</p>
<p>正向生成: 生成完整的模块，html页面、处理类、mapper层、service层、myabaits的xml 建表的sql脚本等</p>
<p>反向生成: 任意连接其它数据库(mysql、oracle、sqlserver)，根据表反射生成本系统的模块</p>
<p>2 模版管理：代码在线编辑器，管理模版，保存编辑记录，一键还原，代码生成器如虎添翼</p>
<p>五：IM即时通讯服务 ————-</p>
<p>好友管理：搜索、添加、删除、拉黑好友，查看好友资料</p>
<p>好友分组：自定义好友分组</p>
<p>我的群组：创建群组，搜索申请加入别人的群，踢出群成员，管理群聊天记录</p>
<p>通讯模块 单聊群聊发图片发文件 离线消息保留聊天记录</p>
<p>六：数据库管理服务 ———————-</p>
<p>数据库备份：可备份单表(sqlserver不支持)、整库，支持本地和远程备份(java界面编程技术，socket编程技术)</p>
<p>备份定时器：quartz 强大的任务调度，多线程备份数据库，任务启动关闭异步操作</p>
<p>数据库还原：历史备份记录，还原数据库 or 单表(sqlserver不支持)，统计备份时间和文件大小</p>
<p>SQL编辑器：强大的SQL编辑器，支持编辑语句复杂查询语句，生成动态报表，可导出excel</p>
<p>七：OA办公服务 ——————————</p>
<p>请假申请：添加请假单，走工作流请假模型流程</p>
<p>八：表同步服务 ————————–</p>
<p>根据业务需求，需要进行微服务之间的表数据同步，特此用此中间服务处理</p>
<p>菜单权限：分配给每个角色不同的菜单权限, 每个角色看到的菜单不同，N级别菜单</p>
<p>按钮权限：独立分配不同的角色不同的功能权限，增删改查权限分配具体到不同的菜单，自定义按钮管理</p>
<p>支持多用户分权限管理后台, 权限具体到不同的菜单不同的按钮（一个用户可以多个角色）</p>
<p>技术点——————————————</p>
<p>导入 导出 excel 文件 （应用在系统用户中）</p>
<p>2 生成 word文件 （应用在代码生成器生成的doc文档）</p>
<p>IO 流下载文件 （应用在代码生成器中生成后压缩成zip 文件下载）</p>
<p>4 代码 zip 压缩打包 （应用在代码生成器中生成后压缩成zip 文件）</p>
<p>MD5加密 SHA加密（登录密码用此加密）接口加密身份校验</p>
<p>数据库连接池 阿里的 druid。Druid在监控、可扩展性、稳定性和性能方面都有明显的优势,支持并发</p>
<p>7.安全框架 shiro (登录授权)(session管理)（shiro 注解菜单权限拦截）（shiro 标签按钮权限）</p>
<p>8.freemaker模版引擎(代码生成器用)</p>
<p>9.ehcache 自定义缓存 ，选择缓存存放目录，处理并发，增加系统性能</p>
<p>10.tab标签页面功能，标签自由切换，不重复操作数据库（可全部关闭，关闭当前，关闭其它）</p>
<p>11.多数据源技术</p>
<p>12.调用摄像头拍照技术，图片裁剪技术 （用户头像编辑）</p>
<p>13.在线编辑器，仿开发工具 （代码生成器的模版编辑）</p>
<p>单群发邮件，可以发html、纯文本格式</p>
<p>15.根据汉字 解析汉字的全拼(拼音)和首字母(导入excel到用户表，根据用户的汉字姓名生成拼音的用户名)</p>
<p>16.站内信语音提醒，js控制音频播放</p>
<p>17.java 读写 ini 配置文件</p>
<p>18.java websocket 即时通讯技术，点对点，好友、群组，发图片文件，离线消息，保留聊天记录</p>
<p>19.百度富文本编辑器，可上传图片、附件</p>
<p>20.java Quartz 任务调度 （应用在数据库定时备份模块中）</p>
<p>21.ajax 异步跨域技术，跨域上传文件，图片</p>
<p>22.redis 分布式session存储，共享用户授权信息</p>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,分布式,springcloud,springboot,vue,前后端分离</tag>
      </tags>
  </entry>
  <entry>
    <title>主要是为了方便自己复习，所以记录一下。</title>
    <url>/post/47500ee5.html</url>
    <content><![CDATA[<p>主要是为了方便自己复习，所以记录一下。</p>
<p><a href="https://blog.csdn.net/u010734213/article/details/107060544">01 建父工程+idea设置</a><br><a href="https://blog.csdn.net/u010734213/article/details/107062977">02 重构-提取通用模块</a><br><a href="https://blog.csdn.net/u010734213/article/details/107063034">03 Eureka</a><br><a href="https://blog.csdn.net/u010734213/article/details/107063122">04 Eureka集群</a><br><a href="https://blog.csdn.net/u010734213/article/details/107063168">05 微服务信息完善</a><br><a href="https://blog.csdn.net/u010734213/article/details/107063227">06 服务发现Discovery</a><br><a href="https://blog.csdn.net/u010734213/article/details/107063256">07 Eureka自我保护</a><br><a href="https://blog.csdn.net/u010734213/article/details/107063316">08 zookeeper下载安装配置</a><br><a href="https://blog.csdn.net/u010734213/article/details/107063394">09 zookeeper注册中心</a><br><a href="https://blog.csdn.net/u010734213/article/details/107063544">10 consul</a><br><a href="https://blog.csdn.net/u010734213/article/details/107063710">11 Ribbon、OpenFeign</a><br><a href="https://blog.csdn.net/u010734213/article/details/107063809">12 Hystrix断路器</a><br><a href="https://blog.csdn.net/u010734213/article/details/107063909">13 服务监控hystrixDashboard</a><br><a href="https://blog.csdn.net/u010734213/article/details/107063954">14 gateway新一代网关</a><br><a href="https://blog.csdn.net/u010734213/article/details/107079438">15 springcloud config</a><br><a href="https://blog.csdn.net/u010734213/article/details/107080040">16 springcloud bus 消息总线</a><br><a href="https://blog.csdn.net/u010734213/article/details/107149420">17 Spring Cloud Stream</a></p>
<p><a href="https://gitee.com/JayinChan/demo2020">学习代码：https://gitee.com/JayinChan/demo2020</a></p>
<p>待续…</p>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,spring cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>springcloud安全控制token的创建与解析</title>
    <url>/post/6d23ea66.html</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import io.jsonwebtoken.Claims;</span><br><span class="line">import io.jsonwebtoken.Jwts;</span><br><span class="line">import io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import javax.crypto.spec.SecretKeySpec;</span><br><span class="line">import java.security.Key;</span><br><span class="line">import java.util.Base64;</span><br><span class="line">import java.util.UUID;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Create by liping on 2018/9/25</span><br><span class="line"> */</span><br><span class="line">@Service</span><br><span class="line">public class JWTService &#123;</span><br><span class="line">    private static final String encodekeys = &quot;liping&quot;;</span><br><span class="line"></span><br><span class="line">    private static SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS512;</span><br><span class="line">    private static Key key;</span><br><span class="line"></span><br><span class="line">//    @Value(&quot;$&#123;com.idoipo.jwt.encodedKey&#125;&quot;)</span><br><span class="line">//    private String encodedKey;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 初始化操作 @PostConstruct初始化完成后执行</span><br><span class="line">     */</span><br><span class="line">//    @PostConstruct</span><br><span class="line">//    public void init() &#123;</span><br><span class="line">//        signatureAlgorithm = SignatureAlgorithm.HS512;</span><br><span class="line">//        key = deserializeKey(encodedKey);</span><br><span class="line">//    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生成加密解密key</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Key deserializeKey() &#123;</span><br><span class="line">        byte[] decodedKey = Base64.getDecoder().decode(encodekeys);</span><br><span class="line"></span><br><span class="line">        Key key = new SecretKeySpec(decodedKey, JWTService.signatureAlgorithm.getJcaName());</span><br><span class="line">        return key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 创建token 参数应该为自定义模型去传，用来设置token所携带字段</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String createToken()&#123;</span><br><span class="line">        key = deserializeKey();</span><br><span class="line">        String token = Jwts.builder()</span><br><span class="line">                .setSubject(UUID.randomUUID().toString())</span><br><span class="line">                .claim(&quot;userName&quot;, &quot;liping&quot;)</span><br><span class="line">                .setIssuer(&quot;lp&quot;)</span><br><span class="line">                .setAudience(&quot;xixi&quot;)</span><br><span class="line">                .signWith(signatureAlgorithm, key).compact();</span><br><span class="line">        return token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String parseToken(String token)&#123;</span><br><span class="line">        key = deserializeKey();</span><br><span class="line">        Claims claims = Jwts.parser().setSigningKey(key).parseClaimsJws(token).getBody();</span><br><span class="line">        return  claims.get(&quot;userName&quot;).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String token  = JWTService.createToken();</span><br><span class="line">        System.out.println(token);</span><br><span class="line">        String userName = JWTService.parseToken(token);</span><br><span class="line">        System.out.println(userName);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,Spring Cloud,token</tag>
      </tags>
  </entry>
  <entry>
    <title>springcloud项目网关升级：gateway替代zuul以及解决gateway跨域访问问题</title>
    <url>/post/3eb9c17e.html</url>
    <content><![CDATA[<p>注：Spring Cloud Gateway建立在Spring Framework 5，Project Reactor和Spring Boot 2之上，使用非阻塞API。 Websockets得到支持，并且由于它与Spring紧密集成，所以将会是一个更好的 开发 体验。<br>本文只讲述搭建过程，具体源码解析可以参考：<a href="http://www.iocoder.cn/categories/Spring-Cloud-Gateway/">http://www.iocoder.cn/categories/Spring-Cloud-Gateway/</a><br>1.添加maven依赖：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>注：gateway是用过webflux实现，在项目中请不要引用webmvc，否则初始化会报错<br>2.配置过滤器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class loginfiler implements GlobalFilter &#123;</span><br><span class="line">     @Override</span><br><span class="line">    public Mono&lt;Void&gt; filter(ServerWebExchange serverWebExchange, GatewayFilterChain gatewayFilterChain) &#123;</span><br><span class="line">        。。。 </span><br><span class="line">        return gatewayFilterChain.filter(serverWebExchange.mutate().request(build).build());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注：在这里可以实现记录日志和访问权限校验等<br>3.如果是前后端分离的项目，需要增加配置以解决跨域问题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.gameley.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.client.discovery.DiscoveryClient;</span><br><span class="line">import org.springframework.cloud.gateway.discovery.DiscoveryClientRouteDefinitionLocator;</span><br><span class="line">import org.springframework.cloud.gateway.route.RouteDefinitionLocator;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.http.HttpHeaders;</span><br><span class="line">import org.springframework.http.HttpMethod;</span><br><span class="line">import org.springframework.http.HttpStatus;</span><br><span class="line">import org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line">import org.springframework.http.server.reactive.ServerHttpResponse;</span><br><span class="line">import org.springframework.web.cors.reactive.CorsUtils;</span><br><span class="line">import org.springframework.web.server.ServerWebExchange;</span><br><span class="line">import org.springframework.web.server.WebFilter;</span><br><span class="line">import org.springframework.web.server.WebFilterChain;</span><br><span class="line">import reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author wwmxd</span><br><span class="line"> * @create 2018/3/22.</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class RouteConfiguration &#123;</span><br><span class="line">    //这里为支持的请求头，如果有自定义的header字段请自己添加（不知道为什么不能使用*）</span><br><span class="line">    private static final String ALLOWED_HEADERS = &quot;x-requested-with, authorization, Content-Type, Authorization, credential, X-XSRF-TOKEN,token,username,client&quot;;</span><br><span class="line">    private static final String ALLOWED_METHODS = &quot;*&quot;;</span><br><span class="line">    private static final String ALLOWED_ORIGIN = &quot;*&quot;;</span><br><span class="line">    private static final String ALLOWED_Expose = &quot;*&quot;;</span><br><span class="line">    private static final String MAX_AGE = &quot;18000L&quot;;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public WebFilter corsFilter() &#123;</span><br><span class="line">        return (ServerWebExchange ctx, WebFilterChain chain) -&gt; &#123;</span><br><span class="line">            ServerHttpRequest request = ctx.getRequest();</span><br><span class="line">            if (CorsUtils.isCorsRequest(request)) &#123;</span><br><span class="line">                ServerHttpResponse response = ctx.getResponse();</span><br><span class="line">                HttpHeaders headers = response.getHeaders();</span><br><span class="line">                headers.add(&quot;Access-Control-Allow-Origin&quot;, ALLOWED_ORIGIN);</span><br><span class="line">                headers.add(&quot;Access-Control-Allow-Methods&quot;, ALLOWED_METHODS);</span><br><span class="line">                headers.add(&quot;Access-Control-Max-Age&quot;, MAX_AGE);</span><br><span class="line">                headers.add(&quot;Access-Control-Allow-Headers&quot;, ALLOWED_HEADERS);</span><br><span class="line">                headers.add(&quot;Access-Control-Expose-Headers&quot;, ALLOWED_Expose);</span><br><span class="line">                headers.add(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);</span><br><span class="line">                if (request.getMethod() == HttpMethod.OPTIONS) &#123;</span><br><span class="line">                    response.setStatusCode(HttpStatus.OK);</span><br><span class="line">                    return Mono.empty();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return chain.filter(ctx);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">    *</span><br><span class="line">    *如果使用了注册中心（如：Eureka），进行控制则需要增加如下配置</span><br><span class="line">    */</span><br><span class="line">    @Bean</span><br><span class="line">    public RouteDefinitionLocator discoveryClientRouteDefinitionLocator(DiscoveryClient discoveryClient) &#123;</span><br><span class="line">        return new DiscoveryClientRouteDefinitionLocator(discoveryClient);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,Spring Cloud,zuul,gateway</tag>
      </tags>
  </entry>
  <entry>
    <title>systemctl frp自动启动脚本</title>
    <url>/post/893bb738.html</url>
    <content><![CDATA[<h4 id="1、脚本内容"><a href="#1、脚本内容" class="headerlink" title="1、脚本内容"></a>1、脚本内容</h4><p>放置在/lib/systemd/system目录下，由于我这里启动的是服务端，我将该脚本文件命名为:frps.service，完整路径为：/lib/systemd/system/frps.service</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=frps service</span><br><span class="line">After=network.target syslog.target</span><br><span class="line">Wants=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">Restart=always #当程序退出时，自动重启。</span><br><span class="line">#最好使用非root用户启动</span><br><span class="line">User=frp</span><br><span class="line">Group=frp</span><br><span class="line">#启动服务的命令（此处写你的frps的实际安装目录）</span><br><span class="line">ExecStart=/usr/local/frp/frps -c /usr/local/frp/frps.ini</span><br><span class="line">ExecStop=/bin/kill $MAINPID</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>


<h4 id="2、systemctl命令控制"><a href="#2、systemctl命令控制" class="headerlink" title="2、systemctl命令控制"></a>2、systemctl命令控制</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable frps #设置开机自动启动</span><br><span class="line">systemctl disable frps #取消开机自动启动</span><br><span class="line">systemctl start frps #开启frps服务</span><br><span class="line">systemctl stop frps #关闭frps服务</span><br><span class="line">systemctl restart frps #重启frps服务</span><br></pre></td></tr></table></figure>


<h4 id="3、也可以自己写一个脚本，实现frp开机自动启动，或者断线重连"><a href="#3、也可以自己写一个脚本，实现frp开机自动启动，或者断线重连" class="headerlink" title="3、也可以自己写一个脚本，实现frp开机自动启动，或者断线重连"></a>3、也可以自己写一个脚本，实现frp开机自动启动，或者断线重连</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">    result=`ps aux|grep frps.ini|grep -v grep|wc -l`</span><br><span class="line">    if [ $result = &#x27;0&#x27; ]; then</span><br><span class="line">        echo &quot;未运行，开始运行&quot;</span><br><span class="line">        nohup /usr/local/frp/frps -c /usr/local/frp/frps.ini &gt; /dev/null 2&gt;&amp;1  &amp;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;运行中&quot;</span><br><span class="line">    fi</span><br><span class="line">    sleep 15</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>将上面脚本保存，我保存的位置为：/usr/bin/frpwatch</p>
<p>然后在 /etc/rc.local中添加运行命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup /usr/bin/frpwatch &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>内网穿透</category>
      </categories>
      <tags>
        <tag>内网穿透</tag>
      </tags>
  </entry>
  <entry>
    <title>vue+springboot前后端分离实现单点登录跨域问题解决方法</title>
    <url>/post/915379c3.html</url>
    <content><![CDATA[<p>本文章向大家介绍vue+springboot前后端分离实现单点登录跨域问题解决方法，主要包括vue+springboot前后端分离实现单点登录跨域问题解决方法使用实例、应用技巧、基本知识点总结和需要注意事项，具有一定的参考价值，需要的朋友可以参考一下。</p>
<p>最近在做一个后台管理系统，前端是用时下火热的vue.js，后台是基于springboot的。因为后台系统没有登录功能，但是公司要求统一登录，登录认证统一使用.net项目组的认证系统。那就意味着做单点登录咯，至于不知道什么是单点登录的同学，建议去找一下万能的度娘。</p>
<p>刚接到这个需求的时候，老夫心里便不屑的认为：区区登录何足挂齿，但是，开发的过程狠狠的打了我一巴掌（火辣辣的一巴掌）。。。，所以这次必须得好好记录一下这次教训，以免以后再踩这样的坑。</p>
<p>我面临的第一个问题是跨域，浏览器控制台直接报CORS,以我多年开发经验，我果断在后台配置了跨域配置，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class CorsConfiguration &#123;</span><br><span class="line"> @Bean</span><br><span class="line"> public WebMvcConfigurer corsConfigurer() &#123;</span><br><span class="line">  return new WebMvcConfigurerAdapter() &#123;</span><br><span class="line">   @Override</span><br><span class="line">   public void addCorsMappings(CorsRegistry registry) &#123;</span><br><span class="line">    registry.addMapping(&quot;/**&quot;)</span><br><span class="line">      .allowedHeaders(&quot;*&quot;)</span><br><span class="line">      .allowedMethods(&quot;*&quot;)</span><br><span class="line">      .allowedOrigins(&quot;*&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个配置就是允许所有mapping，所有请求头，所有请求方法，所有源。改好配置之后我果断重启项目，看效果，结果发现根本没法重定向跳转到单点登录页面，看浏览器报错是跨域导致的，我先上我登录拦截器的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line"> //用户已经登录</span><br><span class="line"> if (request.getSession().getAttribute(&quot;user&quot;) != null) &#123;</span><br><span class="line">  return true;</span><br><span class="line"> &#125;</span><br><span class="line"> //从单点登录返回之后的状态，本系统还不处于登录状态</span><br><span class="line"> //根据code值去获取access_token，然后再根据access_token去获取用户信息，并将用户信息存到session中</span><br><span class="line"> String state = request.getParameter(&quot;state&quot;);</span><br><span class="line"> String uri = getUri(request);</span><br><span class="line"> if (isLoginFromSSO(state)) &#123;</span><br><span class="line">  String code = request.getParameter(&quot;code&quot;);</span><br><span class="line">  Object cacheUrl = request.getSession().getAttribute(state);</span><br><span class="line">  if (cacheUrl == null) &#123;</span><br><span class="line">   response.sendRedirect(uri);</span><br><span class="line">   return false;</span><br><span class="line">  &#125;</span><br><span class="line">  HttpUtil client = new HttpUtil();</span><br><span class="line">  StringBuffer sb = new StringBuffer();</span><br><span class="line">  sb.append(&quot;code=&quot;).append(code)</span><br><span class="line">    .append(&quot;&amp;grant_type=&quot;).append(&quot;authorization_code&quot;)</span><br><span class="line">    .append(&quot;&amp;client_id=&quot;).append(SSOAuth.ClientID)</span><br><span class="line">    .append(&quot;&amp;client_secret=&quot;).append(SSOAuth.ClientSecret)</span><br><span class="line">    .append(&quot;&amp;redirect_uri=&quot;).append(URLEncoder.encode((String) cacheUrl));</span><br><span class="line">  String resp = client.post(SSOAuth.AccessTokenUrl, sb.toString());</span><br><span class="line">  Map&lt;String, String&gt; map = new Gson().fromJson(resp, Map.class);</span><br><span class="line">  //根据access_token去获取用户信息</span><br><span class="line">  String accessToken = map.get(&quot;access_token&quot;);</span><br><span class="line">  HttpUtil http = new HttpUtil();</span><br><span class="line">  http.addHeader(&quot;Authorization&quot;, &quot;Bearer &quot; + accessToken);</span><br><span class="line">  String encrypt = http.get(SSOAuth.UserUrl);</span><br><span class="line">  String userinfo = decryptUserInfo(encrypt);</span><br><span class="line">  //封装成user对象</span><br><span class="line">  User user = new Gson().fromJson(userinfo, User.class);</span><br><span class="line">  request.getSession().setAttribute(&quot;user&quot;, user);</span><br><span class="line">  return true;</span><br><span class="line"> &#125;</span><br><span class="line"> //跳转到单点登录界面</span><br><span class="line"> state = Const._SSO_LOGIN + Const.UNDERLINE + RandomUtil.getUUID();</span><br><span class="line"> request.getSession().setAttribute(state, uri);</span><br><span class="line"> String redirectUrl = buildAuthCodeUrl(uri, state);</span><br><span class="line"> response.sendRedirect(redirectUrl);</span><br><span class="line"> return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后面把前端vue请求后台的登录接口方式直接用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.location.href=this.$api.config.baseUrl+&quot;/system/user/login&quot;</span><br></pre></td></tr></table></figure>
<p>之后前端访问系统，可以直接跳转到单点登录页面。但是当我输完账号和密码点击登录后回跳到系统，发现所有的请求数据接口都无法正常访问，debug发现所有的请求都没带用户信息，被拦截器识别为未登录，所有请求无法通过。</p>
<p>为什么我明明登录了呀，拦截器也设置了用户信息到session啊，怎么cookies那就没了呢？再次发起请求，发现每次请求的JsessionId都不一样，查了很多资料，发现是需要在前端加一个允许带认证信息的配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">axios.defaults.withCredentials=true;</span><br></pre></td></tr></table></figure>
<p>后台也需要做一个相应的配置allowCredentials(true);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public WebMvcConfigurer corsConfigurer() &#123;</span><br><span class="line"> return new WebMvcConfigurerAdapter() &#123;</span><br><span class="line">  @Override</span><br><span class="line">  public void addCorsMappings(CorsRegistry registry) &#123;</span><br><span class="line">   registry.addMapping(&quot;/**&quot;)</span><br><span class="line">     .allowedHeaders(&quot;*&quot;)</span><br><span class="line">     .allowedMethods(&quot;*&quot;)</span><br><span class="line">     .allowedOrigins(&quot;*&quot;).allowCredentials(true);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>加完这个配置之后，重新执行一遍操作流程，发现登录之后能正常跳转到系统，页面数据也展示正常。</p>
<p>正当我以为大功告成的时候，突然点到一个页面又无法正常显示数据，好纳闷啊，赶紧F12，发现一个之前没见过的请求方式，OPTIONS请求，原来这个请求方式明明是POST呀，怎么就变成了OPTIONS了呢？于是我有点了其他几个POST的请求，发现都变成了OPTIONS请求，一脸懵逼的我赶紧查了一下OPTIONS请求的资料，网上说OPTIONS请求叫做“预检查请求”，就是在你的正式请求执行之前，浏览器会先发起预检查请求，预检查请求通过了，才能执行正式请求。看完恍然大悟，原来OPTIONS被拦截了，所以没法再执行我的POST的请求啊，那我直接让预检查请求通过就好了。只要在拦截器中加一个这个判断就好了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//option预检查，直接通过请求</span><br><span class="line">if (&quot;OPTIONS&quot;.equals(request.getMethod()))&#123;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样拦截器发现请求是预检查请求就直接通过，就可以执行接下来的POST的请求了。</p>
<p><strong>总结</strong></p>
<p>以上所述是小编给大家介绍的vue+springboot前后端分离实现单点登录跨域问题解决方法，希望对大家有所帮助，如果大家有任何疑问请给我留言，小编会及时回复大家的。在此也非常感谢大家对脚本之家网站的支持！</p>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,springboot,vue,前后端分离</tag>
      </tags>
  </entry>
  <entry>
    <title>win10 网络连接0x80070035</title>
    <url>/post/afa9daf5.html</url>
    <content><![CDATA[<p>按window+R键输入gpedit.msc 来启动本地组策略编辑器。</p>
<p>依次找到“计算机配置-管理模板-网络-Lanman工作站”这个节点，在右侧内容区可以看到“启用不安全的来宾登录”这一条策略设置。状态是“未配置”。</p>
<p>双击“启用不安全的来宾登录”这一条策略设置，将其状态修改为“已启用”并单击确定按钮。</p>
<p>设置完成再次尝试访问发现可以正常访问了。</p>
]]></content>
      <categories>
        <category>win10</category>
      </categories>
      <tags>
        <tag>-win10</tag>
      </tags>
  </entry>
  <entry>
    <title>token验证_JAVA架构笔记——1.SpringCloud中Token验证</title>
    <url>/post/7916c53.html</url>
    <content><![CDATA[<h2 id="一-简述"><a href="#一-简述" class="headerlink" title="一.简述"></a>一.简述</h2><p>token其实就是一个身份标识，或者说是一个身份牌，因为几乎所有的应用需要注册登陆，当我们登陆成功的时候，就要有一个登录成功的身份牌，这样那些没有身份牌的访问就会被服务器给拦截掉无法访问，用来过滤非法请求。</p>
<p>以前session的做法毕竟比较局限，而且当我们微服务，多实例的时候，session之间是不能够共享的，我们总不能使用rtc多个实例间调用session验证是否登陆吧? 所以我们使用验证token的方式去校验请求合法性。</p>
<h2 id="二-创建项目"><a href="#二-创建项目" class="headerlink" title="二.创建项目"></a>二.创建项目</h2><p>新建Maven项目，在父目录下新建model</p>
<p><img src="/../images/token%E9%AA%8C%E8%AF%81_JAVA%E6%9E%B6%E6%9E%84%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%941.SpringCloud%E4%B8%ADToken%E9%AA%8C%E8%AF%81/f97ea90c35f38ed5b41bc9bcf1ef9813.png" alt="f97ea90c35f38ed5b41bc9bcf1ef9813.png"></p>
<p>目录结构</p>
<p>suns下pom.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;artifactId&gt;suns&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;groupId&gt;org.zhc&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;sso&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.zhc&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;api&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;com.auth0&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;java-jwt&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;version&gt;3.10.0&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>


<p><img src="/../images/token%E9%AA%8C%E8%AF%81_JAVA%E6%9E%B6%E6%9E%84%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%941.SpringCloud%E4%B8%ADToken%E9%AA%8C%E8%AF%81/17aa5e5af3ecb8db2a7a0918e9ae0c48.png" alt="17aa5e5af3ecb8db2a7a0918e9ae0c48.png"></p>
<p>api目录</p>
<p>api下pom.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;artifactId&gt;suns&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;groupId&gt;org.zhc&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;api&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;version&gt;1.2.60&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>


<p><img src="/../images/token%E9%AA%8C%E8%AF%81_JAVA%E6%9E%B6%E6%9E%84%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%941.SpringCloud%E4%B8%ADToken%E9%AA%8C%E8%AF%81/3295004e3dac0ea55561b8c4f1bd6aa6.png" alt="3295004e3dac0ea55561b8c4f1bd6aa6.png"></p>
<p>sso下pom.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;artifactId&gt;suns&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;groupId&gt;org.zhc&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;sso&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.zhc&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;api&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;com.auth0&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;java-jwt&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;version&gt;3.10.0&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<h2 id="三-项目配置"><a href="#三-项目配置" class="headerlink" title="三.项目配置"></a>三.项目配置</h2><p>sso 主要用来登录处理</p>
<p>api 是所有实例中共用的一些类库，可以自己封装一些工具等</p>
<p>suns 项目的根节点</p>
<p>api和suns中基本没有配置，他们都主要是为了maven版本统一，代码解耦</p>
<p>项目中使用nacos作为服务的注册中心，后面会记录有会记录搭建nacos</p>
<p>Nacos 快速开始nacos.io</p>
<p><img src="/../images/token%E9%AA%8C%E8%AF%81_JAVA%E6%9E%B6%E6%9E%84%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%941.SpringCloud%E4%B8%ADToken%E9%AA%8C%E8%AF%81/811d200d6c9ff08566d70af44452deba.png" alt="811d200d6c9ff08566d70af44452deba.png"></p>
<p>suns下application.yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  port: 8089</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  application:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    name: sso_01</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  cloud:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    nacos:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      discovery:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  redis:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #集群模式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #    cluster:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #      nodes:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #        - 192.198.200.52:6379</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #        - 192.198.200.53:6379</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #        - 192.198.200.54:6379</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #单机模式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    database: 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    host: 127.0.0.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    port: 6379</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    password:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    jedis:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      pool:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        #最大连接数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        max-active: 100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        #最大阻塞等待时间(负数表示没限制)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        max-wait: 60s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        #最大空闲</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        max-idle: 30</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        #最小空闲</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        min-idle: 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      timeout: 100s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      ssl: false</span><br></pre></td></tr></table></figure>
<p>suns下RedisConfig.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.zhc.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.support.spring.FastJsonRedisSerializer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class RedisConfig &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private RedisConnectionFactory factory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public RedisTemplate&lt;String, Object&gt; redisTemplate() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer&lt;&gt;(Object.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = new RedisTemplate&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //更改在redis里面查看key编码问题</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        redisTemplate.setKeySerializer(new StringRedisSerializer());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        redisTemplate.setHashKeySerializer(new StringRedisSerializer());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        redisTemplate.setValueSerializer(new StringRedisSerializer());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        redisTemplate.setHashValueSerializer(new StringRedisSerializer());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//        redisTemplate.setValueSerializer(new StringRedisSerializer());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        redisTemplate.setConnectionFactory(factory);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="四-登录接口"><a href="#四-登录接口" class="headerlink" title="四.登录接口"></a>四.登录接口</h2><p>流程大概是，当客户端在调用接口的时候，携带用户名和密码，或者验证码，然后我们验证登录是否成功，成功的时候使用JWT生成token，将token保存到redis，并且设置过期时间，一般设置个两小时左右，设置的时间不能太久。</p>
<p>至于为什么使用JWT，传统的cookies+redis实际上更好用，不要问，问就是我闲的。其实JWT更适合用在校验上，大有一种申请，考核之类的意思，一般频繁的使用同一个JWT串也是不可靠的，大多在一次性的场景，或者每次都生成新的密文，可能更适合它。</p>
<p>这里我用JWT生成token，添加过期，考虑到安全性和传输数据量，在token中不适合添加太多的数据。</p>
<p>token肯定会有一个过期时间，并且过期时间越短，安全性越高，如果你过期设置几秒的话，那就每个请求到需要重新登录，这岂不是很不方便。</p>
<p>所以，我在JWT生成token的时候，同时生成一个refreshToken将它保存到redis，或者你也可以存到数据库，设置一个比较长的过期时间，一星期，一个月，在返回token的时候，将refreshToken也返回给用户，当用户的token过期之后，就使用refreshToken重新生成新的token，用户可以不需要在重新登录。</p>
<p>当refreshToken也过期的时候，这个时候，我们再去提醒用户，需要重新登录了。</p>
<p>JWT的工具类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.zhc.util;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.auth0.jwt.JWT;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.auth0.jwt.JWTVerifier;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class JwtUtil &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static final String SECRET_KEY = &quot;123456&quot;; //秘钥</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static final long TOKEN_EXPIRE_TIME = 5 * 60 * 1000; //token过期时间 秒</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static final long REFRESH_TOKEN_EXPIRE_TIME =   24 * 60 * 60 * 1000; //refreshToken过期时间 秒</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static final String ISSUER = &quot;tian_wang_gai_du_hu&quot;; //签发人</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     * 生成签名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static String generateToken(String info)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Date now = new Date();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Algorithm algorithm = Algorithm.HMAC256(SECRET_KEY); //算法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String token = JWT.create()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                .withIssuer(ISSUER) //签发人</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                .withIssuedAt(now) //签发时间</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                .withExpiresAt(new Date(now.getTime() + TOKEN_EXPIRE_TIME)) //过期时间</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                .withClaim(&quot;info&quot;, info) //保存身份标识</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                .sign(algorithm);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return token;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     * 验证token</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static boolean verify(String token)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Algorithm algorithm = Algorithm.HMAC256(SECRET_KEY); //算法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            JWTVerifier verifier = JWT.require(algorithm)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    .withIssuer(ISSUER)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    .build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            verifier.verify(token);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            return true;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception ex)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            ex.printStackTrace();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return false;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     * 从token获取username</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static String getUsername(String token)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        try&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            return JWT.decode(token).getClaim(&quot;info&quot;).asString();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;catch(Exception ex)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            ex.printStackTrace();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return &quot;&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>redis工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.zhc.common;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.zhc.util.JwtUtil;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class TokenBuffer &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Resource(name = &quot;redisTemplate&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void put(String key,String value)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        redisTemplate.opsForValue().set(key,value,60*120 , TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public String get(String key)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return (String)redisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void change(String key,String user)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        redisTemplate.opsForValue().set(key,user,60*120 , TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void updateTime(String key,Long timeout)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        redisTemplate.expire(key,timeout,TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void putHash(String key1,String key2,String value)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        redisTemplate.opsForHash().put(key1, key2, value);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public String getHash(String key1,String key2)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         return (String)redisTemplate.opsForHash().get(key1, key2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>登录接口（简化）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class LoginController &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private TokenBuffer tokenBuffer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;login&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public Message login()&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        User user = new User();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        user.setUserId(123456L);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        user.setUserName(&quot;123456&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        user.setPassword(&quot;123456&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //String token = UUID.randomUUID().toString().replace(&quot;-&quot;,&quot;&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String token = JwtUtil.generateToken(user.getUserId());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        tokenBuffer.put(&quot;com.zhc.suns:&quot;+user.getUserId(),user.toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        JSONObject jsonObject = new JSONObject();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        jsonObject.put(&quot;token&quot;,token);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        jsonObject.put(&quot;user&quot;,user);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        log.info(jsonObject.toJSONString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return Message.success(user);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面就完成了一个简单的token验证，说到安全的话还是用https加证书验证去防止抓包。</p>
<p>现在我们把token发给前端，前端再请求的时候加上，我们再写个过滤器去过滤他，当然我这里是微服务的形式，我放到了gateway中去验证的，下个笔记再记，这个用在单体的小项目中也是够用了。</p>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,Spring Cloud,JAVA,token</tag>
      </tags>
  </entry>
  <entry>
    <title>windows下kafka的搭建及配置</title>
    <url>/post/8cd1d92.html</url>
    <content><![CDATA[<h3 id="windows下kafka的搭建及配置"><a href="#windows下kafka的搭建及配置" class="headerlink" title="windows下kafka的搭建及配置"></a>windows下kafka的搭建及配置</h3><ul>
<li><a href="https://blog.csdn.net/weixin_44575542/article/details/88391576#1kafka_2">1、kafka简介</a></li>
<li><ul>
<li><a href="https://blog.csdn.net/weixin_44575542/article/details/88391576#11__3">1.1 介绍</a></li>
<li><a href="https://blog.csdn.net/weixin_44575542/article/details/88391576#12__8">1.2 使用场景</a></li>
<li><a href="https://blog.csdn.net/weixin_44575542/article/details/88391576#13__11">1.3 详细介绍</a></li>
</ul>
</li>
<li><a href="https://blog.csdn.net/weixin_44575542/article/details/88391576#2_21">2、环境</a></li>
<li><a href="https://blog.csdn.net/weixin_44575542/article/details/88391576#3_28">3、安装</a></li>
<li><ul>
<li><a href="https://blog.csdn.net/weixin_44575542/article/details/88391576#31_JDK_29">3.1 JDK安装</a></li>
<li><a href="https://blog.csdn.net/weixin_44575542/article/details/88391576#32_Zookeeper_32">3.2 Zookeeper安装</a></li>
<li><a href="https://blog.csdn.net/weixin_44575542/article/details/88391576#33_Kafka_82">3.3 Kafka安装</a></li>
</ul>
</li>
<li><a href="https://blog.csdn.net/weixin_44575542/article/details/88391576#4_91">4、运行测试</a></li>
<li><ul>
<li><a href="https://blog.csdn.net/weixin_44575542/article/details/88391576#41__97">4.1 创建主题</a></li>
<li><a href="https://blog.csdn.net/weixin_44575542/article/details/88391576#42__104">4.2 创建生产者</a></li>
<li><a href="https://blog.csdn.net/weixin_44575542/article/details/88391576#43__107">4.3 创建消费者</a></li>
<li><a href="https://blog.csdn.net/weixin_44575542/article/details/88391576#44_topic_114">4.4 删除会话topic</a></li>
</ul>
</li>
<li><a href="https://blog.csdn.net/weixin_44575542/article/details/88391576#5_118">5、补充</a></li>
</ul>
<h1 id="1、kafka简介"><a href="#1、kafka简介" class="headerlink" title="1、kafka简介"></a>1、kafka简介</h1><h2 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Kafka 是一个消息系统，原本开发自 LinkedIn，用作 LinkedIn 的活动流（Activity Stream）和运营数据处理管道（Pipeline）的基础。</span><br><span class="line">1.发布和订阅消息流，这个功能类似于消息队列，这也是kafka归类为消息队列框架的原因</span><br><span class="line">2.以容错的方式记录消息流，kafka以文件的方式来存储消息流</span><br><span class="line">3.可以再消息发布的时候进行处理</span><br></pre></td></tr></table></figure>
<h2 id="1-2-使用场景"><a href="#1-2-使用场景" class="headerlink" title="1.2 使用场景"></a>1.2 使用场景</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在系统或应用程序之间构建可靠的用于传输实时数据的管道，消息队列功能</span><br><span class="line">构建实时的流数据处理程序来变换或处理数据流，数据处理功能</span><br></pre></td></tr></table></figure>
<h2 id="1-3-详细介绍"><a href="#1-3-详细介绍" class="headerlink" title="1.3 详细介绍"></a>1.3 详细介绍</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Kafka 专用术语</span><br><span class="line">   Broker：Kafka 集群包含一个或多个服务器，这种服务器被称为 broker。</span><br><span class="line">   Topic：每条发布到 Kafka 集群的消息都有一个类别，这个类别被称为 Topic。（物理上不同 Topic 的消息分开存储，逻辑上一个 Topic 的消息虽然保存于一个或多个 broker 上，但用户只需指定消息的 Topic 即可生产或消费数据而不必关心数据存于何处）。</span><br><span class="line">   Partition：Partition 是物理上的概念，每个 Topic 包含一个或多个 Partition。</span><br><span class="line">   Producer：负责发布消息到 Kafka broker。</span><br><span class="line">   Consumer：消息消费者，向 Kafka broker 读取消息的客户端。</span><br><span class="line">   Consumer Group：每个 Consumer 属于一个特定的 Consumer Group（可为每个 Consumer 指定 group name，若不指定 group name 则属于默认的 group）。</span><br><span class="line"></span><br><span class="line">   Kafka 是一个基于分布式的消息发布-订阅系统，它被设计成快速、可扩展的、持久的。与其他消息发布-订阅系统类似，Kafka 在主题当中保存消息的信息。生产者向主题写入数据，消费者从主题读取数据。由于 Kafka 的特性是支持分布式，同时也是基于分布式的，所以主题也是可以在多个节点上被分区和覆盖的。</span><br></pre></td></tr></table></figure>
<h1 id="2、环境"><a href="#2、环境" class="headerlink" title="2、环境"></a>2、环境</h1><table>
<thead>
<tr>
<th>内容</th>
<th>版本号</th>
</tr>
</thead>
<tbody><tr>
<td>系统版本</td>
<td>windows10</td>
</tr>
<tr>
<td>JDK</td>
<td>1.8.0_201</td>
</tr>
<tr>
<td>kafka</td>
<td>2.12-2.1.1</td>
</tr>
<tr>
<td>zookeeper</td>
<td>3.4.13</td>
</tr>
</tbody></table>
<h1 id="3、安装"><a href="#3、安装" class="headerlink" title="3、安装"></a>3、安装</h1><h2 id="3-1-JDK安装"><a href="#3-1-JDK安装" class="headerlink" title="3.1 JDK安装"></a>3.1 JDK安装</h2><p>下载地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html">http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html</a><br>具体安装过程可百度</p>
<h2 id="3-2-Zookeeper安装"><a href="#3-2-Zookeeper安装" class="headerlink" title="3.2 Zookeeper安装"></a>3.2 Zookeeper安装</h2><p>下载地址：<a href="https://zookeeper.apache.org/releases.html">https://zookeeper.apache.org/releases.html</a><br>1、下载后，解压放在目录F:\bigdata（本文所用的目录）下，关于zookeeper以及kafka的目录，路径中最好不要出现空格，比如D:\Program Files，尽量别用，运行脚本时会有问题。<br>2、进入zookeeper的相关设置所在的文件目录，例如本文的：D:\bigdata\zookeeper-3.4.13\conf<br>3、将”zoo_sample.cfg”重命名为”zoo.cfg”<br>4、打开zoo.cfg(至于使用什么编辑器，根据自己喜好选即可)，找到并编辑：<br>dataDir=/tmp/zookeeper 改为 F:/bigdata/zookeeper-3.4.13/data或 F:\bigdata\zookeeper-3.4.13\data(路径仅为示例，具体可根据需要配置)<br>这里注意，路径要么是”/“分割，要么是转义字符”&quot;，这样才是正确的路径(层级，子目录)。<br>5、在系统环境变量中添加：<br>系统变量中添加ZOOKEEPER_HOME=D:\bigdata\zookeeper-3.4.13<br><img src="/../images/windows%E4%B8%8Bkafka%E7%9A%84%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%85%8D%E7%BD%AE/20190311113742249.png" alt="在这里插入图片描述"><br>编辑系统变量中的path变量，增加%ZOOKEEPER_HOME%\bin<br><img src="/../images/windows%E4%B8%8Bkafka%E7%9A%84%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%85%8D%E7%BD%AE/20190311113904224.png" alt="在这里插入图片描述"><br>6.在zoo.cfg文件中修改默认的Zookeeper端口(默认端口2181)<br>配置文件如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># The number of milliseconds of each tick</span><br><span class="line">tickTime=2000</span><br><span class="line"># The number of ticks that the initial </span><br><span class="line"># synchronization phase can take</span><br><span class="line">initLimit=10</span><br><span class="line"># The number of ticks that can pass between </span><br><span class="line"># sending a request and getting an acknowledgement</span><br><span class="line">syncLimit=5</span><br><span class="line"># the directory where the snapshot is stored.</span><br><span class="line"># do not use /tmp for storage, /tmp here is just </span><br><span class="line"># example sakes.</span><br><span class="line">dataDir=F:/bigdata/zookeeper-3.4.13/data</span><br><span class="line"># the port at which the clients will connect</span><br><span class="line">clientPort=2181</span><br><span class="line"># the maximum number of client connections.</span><br><span class="line"># increase this if you need to handle more clients</span><br><span class="line">#maxClientCnxns=60</span><br><span class="line">#</span><br><span class="line"># Be sure to read the maintenance section of the </span><br><span class="line"># administrator guide before turning on autopurge.</span><br><span class="line">#</span><br><span class="line"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span><br><span class="line">#</span><br><span class="line"># The number of snapshots to retain in dataDir</span><br><span class="line">#autopurge.snapRetainCount=3</span><br><span class="line"># Purge task interval in hours</span><br><span class="line"># Set to &quot;0&quot; to disable auto purge feature</span><br><span class="line">#autopurge.purgeInterval=1</span><br></pre></td></tr></table></figure>
<p>打开cmd窗口，输入zkserver，运行Zookeeper，运行结果如下：<br><img src="/../images/windows%E4%B8%8Bkafka%E7%9A%84%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%85%8D%E7%BD%AE/20190311114948713.png" alt="在这里插入图片描述"><br>恭喜，Zookeeper已经安装完成，已在2181端口运行。</p>
<h2 id="3-3-Kafka安装"><a href="#3-3-Kafka安装" class="headerlink" title="3.3 Kafka安装"></a>3.3 Kafka安装</h2><p>下载地址：<a href="http://kafka.apache.org/downloads">http://kafka.apache.org/downloads</a><br>下载Binary downloads这个类型。下载后，解压放在F:\bigdata目录下。<br>1、进入kafka配置文件所在目录，F:\bigdata\kafka_2.12-2.1.1\config<br>2、编辑文件”server.properties”，找到并编辑：<br>log.dirs=/tmp/kafka-logs 改为 log.dirs=F:/bigdata/kafka_2.12-2.1.1/logs<br>注意事项：log.dirs不能跟安装目录一样，否则会报错。路径要么是”/“分割，要么是转义字符”&quot;，这样会生成正确的路径(层级，子目录)。<br>3、在server.properties文件中，zookeeper.connect=localhost:2181代表kafka所连接的zookeeper所在的服务器IP以及端口，可根据需要更改。本文在同一台机器上使用，故不用修改。<br>4、kafka会按照默认配置，在9092端口上运行，并连接zookeeper的默认端口2181</p>
<h1 id="4、运行测试"><a href="#4、运行测试" class="headerlink" title="4、运行测试"></a>4、运行测试</h1><p>提示：请确保启动kafka服务器前，Zookeeper实例已经在运行，因为kafka的运行是需要zookeeper这种分布式应用程序协调服务。<br>1、进入kafka安装目录F:\bigdata\kafka_2.12-2.1.1<br>2、按下shift+鼠标右键，选择”在此处打开命令窗口”，打开命令行。<br>3、在命令行中输入：.\bin\windows\kafka-server-start.bat .\config\server.properties 回车。<br>到目前为止，zookeeper以及kafka都已正确运行。保持运行状态，不要关闭。</p>
<h2 id="4-1-创建主题"><a href="#4-1-创建主题" class="headerlink" title="4.1 创建主题"></a>4.1 创建主题</h2><p>创建主题，命名为”demo”，replicationfactor=1(因为只有一个kafka服务器在运行)。可根据集群中kafka服务器个数来修改replicationfactor的数量，以便提高系统容错性等。<br>进入kafka安装目录F:\bigdata\kafka_2.12-2.1.1目录下打开新的命令行窗口<br>.\bin\windows\kafka-topics.bat –create –zookeeper localhost:2181 –replication-factor 1 –partitions 1 –topic demo<br>提示返回：Created topic “test”.<br>查看创建的topic<br>bin\windows\kafka-topics.bat –list –zookeeper localhost:2181</p>
<h2 id="4-2-创建生产者"><a href="#4-2-创建生产者" class="headerlink" title="4.2 创建生产者"></a>4.2 创建生产者</h2><p>启动生产者 producer<br>bin\windows\kafka-console-producer.bat –broker-list localhost:9092 –topic demo</p>
<h2 id="4-3-创建消费者"><a href="#4-3-创建消费者" class="headerlink" title="4.3 创建消费者"></a>4.3 创建消费者</h2><p>启动消费者 customer<br>bin\windows\kafka-console-consumer.bat –zookeeper localhost:2181 –topic demo –from-beginning<br>无法启动<br>kafka版本1.2.2后，启动消费者命令变为：<br>bin\windows\kafka-console-consumer.bat –bootstrap-server localhost:9092 –topic demo<br><img src="/../images/windows%E4%B8%8Bkafka%E7%9A%84%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%85%8D%E7%BD%AE/2019031112323512.png" alt="在这里插入图片描述"></p>
<h2 id="4-4-删除会话topic"><a href="#4-4-删除会话topic" class="headerlink" title="4.4 删除会话topic"></a>4.4 删除会话topic</h2><p>bin\windows\kafka-topics.bat –delete –topic demo –zookeeper localhost:2181<br>再使用命令查看<br>bin\windows\kafka-topics.bat –list –zookeeper localhost:2181</p>
<h1 id="5、补充"><a href="#5、补充" class="headerlink" title="5、补充"></a>5、补充</h1><p>Kafka日志及Topic数据清理：<a href="https://www.cnblogs.com/moonandstar08/p/6204581.html">https://www.cnblogs.com/moonandstar08/p/6204581.html</a></p>
]]></content>
      <categories>
        <category>kafka</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>zuul网关升级gateway问题记录</title>
    <url>/post/d39d48a1.html</url>
    <content><![CDATA[<p>最近在做spring cloud的网关升级，遇到了各种各样奇怪的问题，在此做个记录，以防后面在遇到类似问题，好有个解决方案。</p>
<p>也希望能够对一起在技术道路上摸爬滚打的同道有所帮助。</p>
<h2 id="一、启动报错"><a href="#一、启动报错" class="headerlink" title="一、启动报错"></a>一、启动报错</h2><h3 id="问题一：spring-cloud-starter-gateway和spring-boot-starter-web产生冲突"><a href="#问题一：spring-cloud-starter-gateway和spring-boot-starter-web产生冲突" class="headerlink" title="问题一：spring-cloud-starter-gateway和spring-boot-starter-web产生冲突"></a>问题一：spring-cloud-starter-gateway和spring-boot-starter-web产生冲突</h3><p>pom.xml配置文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Finchley.SR2<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>错误说明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Parameter <span class="number">0</span> of method modifyRequestBodyGatewayFilterFactory in org.springframework.cloud.gateway.config.GatewayAutoConfiguration required a bean of type <span class="string">&#x27;org.springframework.http.codec.ServerCodecConfigurer&#x27;</span> that could not be found.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Consider defining a bean of type <span class="string">&#x27;org.springframework.http.codec.ServerCodecConfigurer&#x27;</span> in your configuration.</span><br></pre></td></tr></table></figure>
<p>解决方式：</p>
<p>jar包冲突问题，引入的spring-cloud-starter-gateway和spring-boot-starter-web两个包产生冲突，只需要删除spring-boot-starter-web的引用即可</p>
<h3 id="问题二：spring-boot-starter-parent版本兼容"><a href="#问题二：spring-boot-starter-parent版本兼容" class="headerlink" title="问题二：spring-boot-starter-parent版本兼容"></a>问题二：spring-boot-starter-parent版本兼容</h3><p>pom.xml配置文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Finchley.SR2<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/dependency&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>错误说明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Description:</span><br><span class="line"></span><br><span class="line">The bean <span class="string">&#x27;hiddenHttpMethodFilter&#x27;</span>, defined in <span class="keyword">class</span> <span class="title class_">path</span> resource [org/springframework/cloud/gateway/config/GatewayAutoConfiguration.class], could not be registered. A bean with that name has already been defined in <span class="keyword">class</span> <span class="title class_">path</span> resource [org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfiguration.class] and overriding is disabled.</span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Consider renaming one of the beans or enabling overriding by setting spring.main.allow-bean-definition-overriding=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>解决方式：</p>
<p>降低spring-boot-starter-parent版本，由2.1.x版本降级到2.0.x版本即可正常运行，适应spring cloud的版本</p>
<h3 id="项目案例"><a href="#项目案例" class="headerlink" title="项目案例"></a>项目案例</h3><p>这是我自己的练手项目，感兴趣的可以看一下</p>
<p>gitHub：<a href="https://links.jianshu.com/go?to=https://github.com/ZhangWeiSep/springCloudDemo">https://github.com/ZhangWeiSep/springCloudDemo</a></p>
<p>最后宣传一下自己的博客：<a href="https://links.jianshu.com/go?to=https://zhangweisep.github.io/">https://zhangweisep.github.io/</a><br> 后面很多内容都会发在自己的博客中，欢迎大家一起交流</p>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,zuul,gateway</tag>
      </tags>
  </entry>
  <entry>
    <title>《上古卷轴5：天际》人物美化过程</title>
    <url>/post/6f1c150b.html</url>
    <content><![CDATA[<p>一步一步美化老滚5的人物</p>
<p>首先，论坛上已经有很多版本的一键美化包了，不过里面的东西太多太全，一般使用者不知道里面都有什么，每一个组件是什么版本，作者（或者整合者）是以什么先后顺序整合这些美化补丁组件的。有些人只需要单项的优化，比如眉毛或嘴唇之类的。所以我写了这个帖子，介绍一下自己安装美化人物的各种mod的先后顺序，大家完全可以举一反三，把其中的组件换成自己想要的，打造自己“独一无二”的美化补丁。</p>
<p>其次，本帖不提供下载，仅提供s网链接。一是因为本人网络龟速，二是因为这些mod更新的很快，所以希望大家直接去s网下载，顺便给作者好评。</p>
<p>第三，这里的美化仅指身体模型、身体和脸部贴图、面部细节（眉毛、嘴唇、疤痕等）和头发的美化，包括丰胸、提臀、美白、去皱，不包括npc面部模型改变（即“换脸”）。</p>
<p>最后，纯新手向，老鸟勿喷~~~</p>
<hr>
<p>美化原则，或者说美化思路：</p>
<p>人物美化无非就两件事：模型（这里单指体型）美化和贴图（材质，或者说皮肤）美化。从这个角度讲没有什么必须装的美化补丁，s网美化mod浩如烟海，根据每个人审美观不同各取所需吧。女性的话对我而言，体型常用的是cbbe和unp，我眼拙实在分不出好坏来，考虑到cbbe资源多一些，干脆选它好了；脸部材质更多，我倾向真实系，所以修眉过重的coverwoman和过于幼齿的nidia face是不会用的。这里必须说一下，建议新手选择身体、脸部贴图时尽量选择同一作者的，防止脸和身体出现色差。</p>
<hr>
<p>准备知识：</p>
<p>1.老滚5的人物模型（即身体、头部、手脚模型）、动作文件、人物骨骼文件都放在Meshes\actors文件夹下；人物皮肤、头发贴图之类的都放在Textures\actors文件夹下;</p>
<p>2.更换身体模型、皮肤和头发的材质等，主角和NPC都会同时改变。</p>
<p>3.下面的安装，除了注明可用NMM的外，均不推荐用NMM安装。</p>
<hr>
<p>下面开始正文：</p>
<hr>
<p>首先是女性：</p>
<p>一、安装CHSBHC - BBP - Nude and Jiggly Mod（即俗称的乳摇系统，必装）</p>
<p>下载地址：<a href="http://skyrim.nexusmods.com/downloads/file.php?id=4888">点击进入</a></p>
<p>下载CHSBHC-Body-Physics-ModV2-4-1，把meshes和textures解压到data文件夹下。</p>
<p>简单说一下这个mod的作用。这个mod提供了一个叫CHSBHC的女性体型和对应的皮肤贴图，还提供了一个叫BBP的动作系统，就是大家耳熟能详的乳摇系统了。有了这个BBP系统，再配合对应的身形或衣服，就能实现乳摇。这个CHSBHC身形相对而言不是很受欢迎，所以我们接下来会用其他的体型（和对应的皮肤贴图）替换掉这个身形，但是保留其中的BBP系统。所以这个mod必须最先装。</p>
<p>二、安装Calientes Female Body Mod Big Bottom Edition（即俗称的CBBE身形，目前版本3.1，必装）</p>
<p>下载地址：<a href="http://skyrim.nexusmods.com/downloads/file.php?id=2666">点击进入</a></p>
<p>下载Caliente Female Body Mod BBE v3-1，把meshes和textures解压到data文件夹下，覆盖掉原先的文件。</p>
<p>这个mod提供了一个简称CBBE的女性体型和对应的皮肤贴图，也是现在最通用，资源也是最多的女性身体模型。s网上看到“xxx for cbbe”，基本就能确定这是可以穿的，不会出现断手断脚的问题。</p>
<p>做完这一步，你已经得到了一个可以乳摇的cbbe的体型了，完全可以穿各种支持BBP的衣服，正常乳摇而不会跳出。缺点是貌似不支持果体乳摇，这一点我也不确定，不过无所谓，我们接下来用支持果体乳摇的身形文件把CBBE默认的身形替换掉。但是CBBE安装包里带了手、脚的模型文件还有对应的身体、手贴图，这些是不用替换的，所以这个CBBE必须第二位、在接下来的身形之前安装。</p>
<p>三、安装支持乳摇的CBBE V3M身形（选装，强烈推荐）</p>
<p>下载地址：<a href="http://bbs.3dmgame.com/thread-3078908-1-1.html">点击进入</a></p>
<p>把meshes解压到data文件夹下，覆盖掉原先的文件。</p>
<p>这个mod提供了smgygfa修改的CBBE V3M身形，兼容CBBE v3身形，所以手脚之类的不会出现裂痕。CBBE V3M是s网MAK修改的CBBE v3身形，臀部和大腿更丰满。smgygfa修改后支持果体乳摇。但是安装文件里没有对应的手脚模型和身体贴图，所以必须先安装CBBE v3.1。</p>
<p>四、安装The skeleton of female models（即俗称的女性九头身骨骼，选装，推荐）</p>
<p>下载地址：<a href="http://skyrim.nexusmods.com/downloads/file.php?id=11064">点击进入</a></p>
<p>把meshes解压到data文件夹下，覆盖掉原先的文件。</p>
<p>没啥好说的，女性骨骼文件（和体型不冲突），装了以后女性不管用什么身形，下半身更修长，整体比例更好。</p>
<p>五、安装CBBE skin texture V2 V3 plus Thepal and UNP compatible （cbbe可选身体/面部贴图，选装，强烈推荐）</p>
<p>下载地址：<a href="http://skyrim.nexusmods.com/downloads/file.php?id=6554">点击进入</a></p>
<p>这个mod可选项较多，包括CBBE可用的皮肤、脸部贴图，均有多种贴图可选。</p>
<p>1.CBBE skin texture v1_8 shaved MAIN FILE (lite)是身体贴图，带LITE的是低分辨率版，机器差可以用</p>
<p>2.Female Face skin v1_8 Fuller Lips v2 （LITE） 是脸部贴图，带LITE的是低分辨率版，机器差可以用</p>
<p>3.Vanilla skin texture那几个是原版游戏风格的皮肤，不推荐</p>
<p>4.CBBE skin texture v1_8 feminine arm toned abs PATCH这个是让女性手臂线条更柔和的补丁，推荐</p>
<p>5.CBBE skin texture v1_8 hairy landingstrip (strip/wild/trimmed)body PATCH 这几个是修改女性死厨毛发的补丁，我用的是landingstrip，推荐用photoshop打开贴图挨个看看，自己选择</p>
<p>6.CBBE skin texture v1_8 muscular body PATCH 女性身体更多肌肉的贴图，喜欢的可以试试</p>
<p>7.Darker liptint mask for more opaque lip color</p>
<p>Female Face skin v1_8 rev1 Fuller Lips and more character PATCH</p>
<p>Female Face skin v1_8 rev1 Fuller Lips with makeup PATCH这几个好像改了女性面部和嘴唇的贴图，我装了第三个，可选装</p>
<p>8.后面几个带 Vanilla字眼的都是原版风格贴图，不推荐</p>
<p>最后说一下我装的吧，注意安装顺序：</p>
<p>CBBE_skin_texture_v1_8_shaved_MAIN_FILE-6554-1-8.7z</p>
<p>Female_Face_skin_v1_8_Fuller_Lips_v2_-6554.7z</p>
<p>CBBE_skin_texture_v1_8_feminine_arm_toned_abs_PATCH-6554-1-8.7z</p>
<p>CBBE_skin_texture_v1_8_hairy_landingstrip_body_PATCH-6554-1-8.7z</p>
<p>Female_Face_skin_v1_8_rev1_Fuller_Lips_with_makeup_PATCH-6554-1-8.7z</p>
<p>这样保证了身体材质和脸部材质都是同一个作者，不会出现色差。</p>
<p>六、安装HD Normals v1 - Female Faces （选装，推荐）</p>
<p>下载地址：<a href="http://skyrim.nexusmods.com/downloads/file.php?id=1039">点击进入</a></p>
<p>注意这个mod只需要其中一个文件！即Data\Textures\Actors\Character\femaleold\femalehead_msn.dds，复制到游戏目录对应的目录下覆盖掉原文件，其他的文件不要安装。</p>
<p>为什么要覆盖掉这个文件？因为步骤五里安装了脸部贴图，其中老年女性的面部贴图跟原版相差甚远，几乎没啥皱纹，所以用这个文件替换一下。其实不替换也没啥问题。</p>
<p>至此女性美化文件基本安装完了（其实没完，看下边），我们来看看男性美化。</p>
<p>更多相关内容请关注：<a href="http://www.gamersky.com/z/tes5/">上古卷轴5专区</a></p>
<p>更多相关内容请关注：<a href="http://www.gamersky.com/z/tes5/">上古卷轴5：天际专区</a></p>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>-游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>【刷机教程】【四核RK3128芯迪优美特X5】4个最新安卓固件〖附详细教程〗</title>
    <url>/post/a50b72fa.html</url>
    <content><![CDATA[<p>（1月24日更新添加2个固件，3月6日再增加一个最快固件，共4个固件供大家选择)四核RK3128芯片刷安卓最新刷机包教程和固件：</p>
<p>不同盒子有不同的固件，市面上四核的盒子有部分都是 3128芯片的，（拆开盒子最显眼的那个芯片上面有标注） 理论讲，提供的这个固件适用与所有rk3128芯片的盒子 确认盒子是不是3128不一定非要拆机，进YunOS后，系统信息里显示 R31或者R312X或者XX28都是RK3128芯片，实在不知道什么芯片的就找到原厂包（官网下载）后直接刷安卓包，不能开就刷回原厂包，线刷不怕变砖！！</p>
<p>刷机方法：详细教程在云盘里面</p>
<p>提前准备双USB线（双公头）</p>
<p>拿<a href="http://www.tvapk.net/forum-74-1.html">迪优美特</a>X5做例子四核RK3128芯片刷安卓</p>
<p>1、安装驱动（下面云盘下载） 解压3128刷机工具，打开“3128刷机工具\usb驱动工具\Release_DriverAssitant\DriverInstall.exe”安装驱动很简单 2、刷机工具 打开“3128刷机工具\工厂工具\FactoryTool_v1.303\FactoryTool.exe”点击固件，加载固件后，升级改为修复然后点启动 3、连接盒子刷机（刷机是不用连接电源或其他设备） 迪优美特X5需要拆机短接，按住复位键，插上USB，等3.4秒钟后放开复位键，电脑识别到迪优美特，再拿下短接线，这样电脑就可以自动装上迪优美特驱动。然后再用刷机工具，选择修复，然后启动，就可以刷机了。</p>
<p>好多新手卡在了这里，不同的盒子不同的短接方式</p>
<p><img src="/../images%5C%E3%80%90%E5%88%B7%E6%9C%BA%E6%95%99%E7%A8%8B%E3%80%91%E3%80%90%E5%9B%9B%E6%A0%B8RK3128%E8%8A%AF%E8%BF%AA%E4%BC%98%E7%BE%8E%E7%89%B9X5%E3%80%914%E4%B8%AA%E6%9C%80%E6%96%B0%E5%AE%89%E5%8D%93%E5%9B%BA%E4%BB%B6%E3%80%96%E9%99%84%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%E3%80%97/clip_image001.jpg" alt="img"></p>
<p>短接点在右侧红圈处</p>
<p>迪优美特X5 1.短接：智美视和迪优美特是拆机后里面有两个需要短路的点，然后插USB 2.按住复位键（两个USB中间小孔里按键）插USB（靠网口的USB口）</p>
<p><img src="/../images%5C%E3%80%90%E5%88%B7%E6%9C%BA%E6%95%99%E7%A8%8B%E3%80%91%E3%80%90%E5%9B%9B%E6%A0%B8RK3128%E8%8A%AF%E8%BF%AA%E4%BC%98%E7%BE%8E%E7%89%B9X5%E3%80%914%E4%B8%AA%E6%9C%80%E6%96%B0%E5%AE%89%E5%8D%93%E5%9B%BA%E4%BB%B6%E3%80%96%E9%99%84%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%E3%80%97/clip_image002.jpg" alt="img"></p>
<p>用导线短接红圈处</p>
<p>型号太多不列举了，自己度娘下你的盒子的短接方式</p>
<p>如果没提示发现新硬件那就换个USB试试，一般是挨着网线插口的那个USB</p>
<p>刷机工具界面 出现正在低格然后写入程序，出百分比直至完成。</p>
<p>另：如果刷机后不能开机或遥控不匹配，请刷回原厂固件（官网一般都有）或者换其他安卓版本，总有一款适合你</p>
<p>注意：迪优美特部分机型做了底包加密，刷机时出现“测试设备失败”或者“低格失败”，先下载原厂包刷一下，等出现“正在低格0%”快速拔下USB，换安卓固件后就可以刷了。</p>
<p>迪优美特X5原厂固件下载地址</p>
<h4 id="本帖隐藏的内容"><a href="#本帖隐藏的内容" class="headerlink" title="本帖隐藏的内容"></a>本帖隐藏的内容</h4><p><a href="http://pan.baidu.com/s/1hqyfJUG">http://pan.baidu.com/s/1hqyfJUG</a></p>
<p>其实刷盒子比刷手机简单，刷机没想象中那么复杂，一回生二回熟，刷成一个你才发现刷机这么简单工具和固件地址（只适合rk3128芯片的，方法交给大家了其他型号固件自己找吧，多多利用度娘.</p>
<p>1。刷机工具和当贝桌面固件地址和详细方法：</p>
<h4 id="本帖隐藏的内容-1"><a href="#本帖隐藏的内容-1" class="headerlink" title="本帖隐藏的内容"></a>本帖隐藏的内容</h4><p><a href="http://pan.baidu.com/s/1bn5H3AJ">http://pan.baidu.com/s/1bn5H3AJ</a></p>
<p>备用链接: <a href="http://pan.baidu.com/s/1gduJUJD">http://pan.baidu.com/s/1gduJUJD</a> 密码:</p>
<h4 id="本帖隐藏的内容-2"><a href="#本帖隐藏的内容-2" class="headerlink" title="本帖隐藏的内容"></a>本帖隐藏的内容</h4><p>5myb</p>
<p><img src="/../images%5C%E3%80%90%E5%88%B7%E6%9C%BA%E6%95%99%E7%A8%8B%E3%80%91%E3%80%90%E5%9B%9B%E6%A0%B8RK3128%E8%8A%AF%E8%BF%AA%E4%BC%98%E7%BE%8E%E7%89%B9X5%E3%80%914%E4%B8%AA%E6%9C%80%E6%96%B0%E5%AE%89%E5%8D%93%E5%9B%BA%E4%BB%B6%E3%80%96%E9%99%84%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%E3%80%97/clip_image003.jpg" alt="img"></p>
<p><img src="/../images%5C%E3%80%90%E5%88%B7%E6%9C%BA%E6%95%99%E7%A8%8B%E3%80%91%E3%80%90%E5%9B%9B%E6%A0%B8RK3128%E8%8A%AF%E8%BF%AA%E4%BC%98%E7%BE%8E%E7%89%B9X5%E3%80%914%E4%B8%AA%E6%9C%80%E6%96%B0%E5%AE%89%E5%8D%93%E5%9B%BA%E4%BB%B6%E3%80%96%E9%99%84%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%E3%80%97/clip_image004.jpg" alt="img"></p>
<p><img src="/../images%5C%E3%80%90%E5%88%B7%E6%9C%BA%E6%95%99%E7%A8%8B%E3%80%91%E3%80%90%E5%9B%9B%E6%A0%B8RK3128%E8%8A%AF%E8%BF%AA%E4%BC%98%E7%BE%8E%E7%89%B9X5%E3%80%914%E4%B8%AA%E6%9C%80%E6%96%B0%E5%AE%89%E5%8D%93%E5%9B%BA%E4%BB%B6%E3%80%96%E9%99%84%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%E3%80%97/clip_image005.jpg" alt="img"></p>
<p>2、沙发桌面简洁版本介绍：色彩艳丽，流畅不卡，可以自由下载直播<a href="http://www.znds.com/bbs-37-1.html">软件</a>。</p>
<p>桌面简洁版本固件下载地址：</p>
<h4 id="本帖隐藏的内容-3"><a href="#本帖隐藏的内容-3" class="headerlink" title="本帖隐藏的内容"></a>本帖隐藏的内容</h4><p><a href="http://pan.baidu.com/s/1mgTS3wO">http://pan.baidu.com/s/1mgTS3wO</a> 密码: 6sfh</p>
<p><img src="/../images%5C%E3%80%90%E5%88%B7%E6%9C%BA%E6%95%99%E7%A8%8B%E3%80%91%E3%80%90%E5%9B%9B%E6%A0%B8RK3128%E8%8A%AF%E8%BF%AA%E4%BC%98%E7%BE%8E%E7%89%B9X5%E3%80%914%E4%B8%AA%E6%9C%80%E6%96%B0%E5%AE%89%E5%8D%93%E5%9B%BA%E4%BB%B6%E3%80%96%E9%99%84%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%E3%80%97/clip_image006.jpg" alt="img"></p>
<p><img src="/../images%5C%E3%80%90%E5%88%B7%E6%9C%BA%E6%95%99%E7%A8%8B%E3%80%91%E3%80%90%E5%9B%9B%E6%A0%B8RK3128%E8%8A%AF%E8%BF%AA%E4%BC%98%E7%BE%8E%E7%89%B9X5%E3%80%914%E4%B8%AA%E6%9C%80%E6%96%B0%E5%AE%89%E5%8D%93%E5%9B%BA%E4%BB%B6%E3%80%96%E9%99%84%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%E3%80%97/clip_image007.jpg" alt="img"></p>
<p>3、最新桌面丰富版本介绍：色彩艳丽，流畅不卡，已经下载直播软件。</p>
<p>桌面丰富版本固件下载地址：</p>
<h4 id="本帖隐藏的内容-4"><a href="#本帖隐藏的内容-4" class="headerlink" title="本帖隐藏的内容"></a>本帖隐藏的内容</h4><p><a href="http://pan.baidu.com/s/1c0OJg7e">http://pan.baidu.com/s/1c0OJg7e</a> 密码: a61g</p>
<p><img src="/../images%5C%E3%80%90%E5%88%B7%E6%9C%BA%E6%95%99%E7%A8%8B%E3%80%91%E3%80%90%E5%9B%9B%E6%A0%B8RK3128%E8%8A%AF%E8%BF%AA%E4%BC%98%E7%BE%8E%E7%89%B9X5%E3%80%914%E4%B8%AA%E6%9C%80%E6%96%B0%E5%AE%89%E5%8D%93%E5%9B%BA%E4%BB%B6%E3%80%96%E9%99%84%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%E3%80%97/clip_image008.jpg" alt="img"></p>
<p><img src="/../images/%E3%80%90%E5%88%B7%E6%9C%BA%E6%95%99%E7%A8%8B%E3%80%91%E3%80%90%E5%9B%9B%E6%A0%B8RK3128%E8%8A%AF%E8%BF%AA%E4%BC%98%E7%BE%8E%E7%89%B9X5%E3%80%914%E4%B8%AA%E6%9C%80%E6%96%B0%E5%AE%89%E5%8D%93%E5%9B%BA%E4%BB%B6%E3%80%96%E9%99%84%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%E3%80%97/clip_image009.jpg" alt="img"></p>
<p>4、四核RK3128芯片刷安卓16年最流畅极速版刷机包16年3月6日发布，版本介绍：是色彩艳丽，最流畅不会卡，速度最快的版本。 固件下载地址：<a href="http://www.tvapk.net/forum.php?mod=viewthread&tid=1626995&extra=page=1&page=1">http://www.tvapk.net/forum.php?mod=viewthread&amp;tid=1626995&amp;extra=page%3D1&amp;page=1</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>-技术</tag>
      </tags>
  </entry>
  <entry>
    <title>【吉他伴奏版】See You Again【Igor Presnyakov】</title>
    <url>/post/22e374f1.html</url>
    <content><![CDATA[<p>【吉他伴奏版】See You Again【Igor Presnyakov】</p>
<p><a href="http://static.hdslb.com/miniloader.swf?aid=3291901&amp;page=1">http://static.hdslb.com/miniloader.swf?aid=3291901&amp;page=1</a></p>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>-音乐</tag>
      </tags>
  </entry>
  <entry>
    <title>【dubbo】使用IDEA搭建简单的dubbo项目</title>
    <url>/post/799d0e10.html</url>
    <content><![CDATA[<p><strong>1.dubbo_demo:</strong></p>
<p><img src="/../images/%E3%80%90dubbo%E3%80%91%E4%BD%BF%E7%94%A8IDEA%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84dubbo%E9%A1%B9%E7%9B%AE/20180723172543951.jpg" alt="img"></p>
<p><img src="/../images/%E3%80%90dubbo%E3%80%91%E4%BD%BF%E7%94%A8IDEA%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84dubbo%E9%A1%B9%E7%9B%AE/20180723172702953.jpg" alt="img"></p>
<p>pom.xml文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;com.wj&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;dubbo_demo&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;dubbo_demo&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http://www.example.com&lt;/url&gt;</span><br><span class="line"></span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;</span><br><span class="line">    &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;</span><br><span class="line">    &lt;motan.version&gt;0.3.0&lt;/motan.version&gt;</span><br><span class="line">    &lt;dubbo.version&gt;2.5.3&lt;/dubbo.version&gt;</span><br><span class="line">    &lt;dubbox.version&gt;2.8.4&lt;/dubbox.version&gt;</span><br><span class="line">    &lt;spring.version&gt;4.3.6.RELEASE&lt;/spring.version&gt;</span><br><span class="line">    &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;dubbo&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.5.3&lt;/version&gt;</span><br><span class="line">      &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">      &lt;/exclusions&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.github.sgroschupf&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;zkclient&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;0.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- spring相关 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-orm&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.3.12.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-jms&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.2.1.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;aspectjrt&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.7.4&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.6.11&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">  &lt;modules&gt;</span><br><span class="line">    &lt;module&gt;dubbo_api&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;dubbo_consumer&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;dubbo_provider&lt;/module&gt;</span><br><span class="line">  &lt;/modules&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<p><strong>2.dubbo_provider:</strong></p>
<p>新建New Module，需要注意Parent，要选择dubbo_demo</p>
<p><img src="/../images/%E3%80%90dubbo%E3%80%91%E4%BD%BF%E7%94%A8IDEA%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84dubbo%E9%A1%B9%E7%9B%AE/20180723172400523.jpg" alt="img"></p>
<p><img src="/../images/%E3%80%90dubbo%E3%80%91%E4%BD%BF%E7%94%A8IDEA%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84dubbo%E9%A1%B9%E7%9B%AE/20180723172456987.jpg" alt="img"></p>
<p>pom.xml:</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;dubbo_demo&lt;/artifactId&gt;
        &lt;groupId&gt;com.wj&lt;/groupId&gt;
        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;groupId&gt;com.wj&lt;/groupId&gt;
    &lt;artifactId&gt;dubbo_provider&lt;/artifactId&gt;
    &lt;name&gt;dubbo_provider&lt;/name&gt;
    &lt;url&gt;http://www.example.com&lt;/url&gt;
&lt;properties&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;
    &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;
&lt;/properties&gt;

&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.wj&lt;/groupId&gt;
        &lt;artifactId&gt;dubbo_api&lt;/artifactId&gt;
        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
        &lt;scope&gt;compile&lt;/scope&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
&lt;/project&gt;</code></pre>
<p>3.dubbo_api:</p>
<p>File-&gt;new Module,Parent，要选择dubbo_demo,和新建dubbo_provider一样</p>
<p>pom.xml:</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;dubbo_demo&lt;/artifactId&gt;
        &lt;groupId&gt;com.wj&lt;/groupId&gt;
        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
&lt;groupId&gt;com.wj&lt;/groupId&gt;
&lt;artifactId&gt;dubbo_api&lt;/artifactId&gt;

&lt;name&gt;dubbo_api&lt;/name&gt;
&lt;url&gt;http://www.example.com&lt;/url&gt;

&lt;properties&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;
    &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;
&lt;/properties&gt;

&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.11&lt;/version&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
&lt;/project&gt;</code></pre>
<p><strong>4.dubbo_consumer:</strong></p>
<p>当搭建网页时，该module要为web项目。</p>
<p><img src="/../images/%E3%80%90dubbo%E3%80%91%E4%BD%BF%E7%94%A8IDEA%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84dubbo%E9%A1%B9%E7%9B%AE/20180806173347422.jpg" alt="img"></p>
<p>pom.xml:</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;dubbo_demo&lt;/artifactId&gt;
        &lt;groupId&gt;com.wj&lt;/groupId&gt;
        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;groupId&gt;com.wj&lt;/groupId&gt;
&lt;artifactId&gt;dubbo_consumer&lt;/artifactId&gt;

&lt;name&gt;dubbo_consumer&lt;/name&gt;
&lt;!-- FIXME change it to the project&#39;s website --&gt;
&lt;url&gt;http://www.example.com&lt;/url&gt;

&lt;properties&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;
    &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;
&lt;/properties&gt;

&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.wj&lt;/groupId&gt;
        &lt;artifactId&gt;dubbo_api&lt;/artifactId&gt;
        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
        &lt;scope&gt;compile&lt;/scope&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
&lt;/project&gt;</code></pre>
<p>项目结构为：</p>
<p><img src="/../images/%E3%80%90dubbo%E3%80%91%E4%BD%BF%E7%94%A8IDEA%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84dubbo%E9%A1%B9%E7%9B%AE/20180723174541877.jpg" alt="img"></p>
<p>配置文件和编写代码：</p>
<p>在dubbo_api中定义服务接口：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.wj.service;</span><br><span class="line"></span><br><span class="line">public interface HelloService &#123;</span><br><span class="line">    String sayHello(String name);</span><br><span class="line">&#125;</span><br><span class="line">在dubbo_provider中实现接口：</span><br><span class="line"></span><br><span class="line">package com.wj.impl;</span><br><span class="line"></span><br><span class="line">import com.wj.service.HelloService;</span><br><span class="line"></span><br><span class="line">public class HelloServiceImpl implements HelloService&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String sayHello(String name) &#123;</span><br><span class="line">        return &quot;Hello World！&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>dubbo_provider项目中的resource文件包含dubbo-provider.xml和springmvc.xml配置文件，没有resource，自己新建，并标记为Resources Root</p>
<p>其中dubbo-provider.xml如下：</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://code.alibabatech.com/schema/dubbo
    http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&gt;
&lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;
&lt;dubbo:application name=&quot;dubbo_provider&quot;  /&gt;

&lt;!-- 使用zookeeper注册中心暴露服务地址 --&gt;
&lt;dubbo:registry address=&quot;zookeeper://127.0.0.1:2181&quot; /&gt;

&lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;
&lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot; /&gt;

&lt;!-- 声明需要暴露的服务接口 --&gt;
&lt;dubbo:service interface=&quot;com.wj.service.HelloService&quot; ref=&quot;helloService&quot; /&gt;

&lt;!-- 接口实现类--&gt;
&lt;bean id=&quot;helloService&quot; class=&quot;com.wj.impl.HelloServiceImpl&quot;/&gt;
&lt;/beans&gt;</code></pre>
<p>springmvc.xml:</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xmlns:util=&quot;http://www.springframework.org/schema/util&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-4.0.xsd&quot;
       default-autowire=&quot;byName&quot;&gt;
&lt;aop:aspectj-autoproxy /&gt;
&lt;context:component-scan base-package=&quot;com&quot; /&gt;
&lt;import resource=&quot;classpath:dubbo-provider.xml&quot; /&gt;
&lt;/beans&gt;</code></pre>
<p>编写测试类:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.wj.test;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class ProviderTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(&quot;classpath:springmvc.xml&quot;);</span><br><span class="line">        context.start();</span><br><span class="line">        System.out.println(&quot;Dubbo provider&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            System.in.read();   // 按任意键退出</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>dubbo_consumer在resource下新建dubbo-consumer.xml:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://code.alibabatech.com/schema/dubbo</span><br><span class="line">        http://code.alibabatech.com/schema/dubbo/dubbo.xsd &quot;&gt;</span><br><span class="line">    &lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt;</span><br><span class="line">    &lt;dubbo:application name=&quot;dubbo_consumer&quot; /&gt;</span><br><span class="line">    &lt;!-- 使用multicast广播注册中心暴露发现服务地址 --&gt;</span><br><span class="line">    &lt;dubbo:registry  protocol=&quot;zookeeper&quot; address=&quot;zookeeper://127.0.0.1:2181&quot; /&gt;</span><br><span class="line">    &lt;!-- 生成远程服务代理，可以和本地bean一样使用demoService --&gt;</span><br><span class="line">    &lt;dubbo:reference id=&quot;helloService&quot; interface=&quot;com.wj.service.HelloService&quot; /&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<p>springmvc.xml:</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xmlns:util=&quot;http://www.springframework.org/schema/util&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-4.0.xsd&quot;
       default-autowire=&quot;byName&quot;&gt;
&lt;aop:aspectj-autoproxy /&gt;
&lt;context:component-scan base-package=&quot;com&quot; /&gt;
&lt;import resource=&quot;classpath:/dubbo-consumer.xml&quot; /&gt;
&lt;/beans&gt;</code></pre>
<p>编写消费者的测试：</p>
<pre><code>package com.wj.test;

import com.wj.service.HelloService;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import java.io.IOException;

public class ConsumerTest &#123;
    public static void main(String[] args) &#123;
        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[] &#123; &quot;classpath:springmvc.xml&quot; &#125;);
context.start();
    HelloService demoService = (HelloService) context.getBean(&quot;helloService&quot;);

    System.out.println(demoService.sayHello(&quot;Hello World!wj&quot;));
    try &#123;
        System.in.read();
    &#125; catch (IOException e) &#123;
        e.printStackTrace();
    &#125;
&#125;
&#125;</code></pre>
<p>按照先后顺序，首先启动Zookeeper：zkServer.cmd      然后启动服务生产者测试类，最后启动服务消费者的测试类，当控制台输出以下结果，则代表成功。</p>
<p>log4j:WARN No appenders could be found for logger (org.springframework.core.env.StandardEnvironment).<br>log4j:WARN Please initialize the log4j system properly.<br>Dubbo provider start…</p>
<p>Process finished with exit code 1<br>log4j:WARN Please initialize the log4j system properly.<br>Hello World！</p>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,dubbo,IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>【2016-02-22】改华硕【N14U N54U】5G 2G的7620老毛子Padavan固件(百度云同步 aria2 QOS)</title>
    <url>/post/4248109d.html</url>
    <content><![CDATA[<p>固件是免费、开源<br>这固件是从<a href="https://bitbucket.org/padavan/rt-n56u/src">Padavan固件源码:</a><a href="https://bitbucket.org/padavan/rt-n56u/src%E6%90%AC%E8%BF%90%E6%BA%90%E7%A0%81%E6%B1%89%E5%8C%96%E5%90%8E%E7%BC%96%E8%AF%91%E5%87%BA%E6%9D%A5%E7%9A%84%E3%80%82%E5%A6%82%E6%9C%89%E9%9C%80%E8%A6%81%E5%8F%AF%E4%BB%A5%E5%88%B0%E7%BD%91%E7%9B%98%E4%B8%8B%E8%BD%BD%E6%B1%89%E5%8C%96%E6%96%87%E4%BB%B6%E8%87%AA%E8%A1%8C%E7%BC%96%E8%AF%91%E3%80%82%EF%BC%88[HowToMakeFirmware](https://bitbucket.org/padavan/rt-n56u/wiki/EN/HowToMakeFirmware)%E7%BC%96%E8%AF%91%E6%95%99%E7%A8%8B%E8%A7%81%E7%BD%91%E7%9B%98%EF%BC%89">https://bitbucket.org/padavan/rt-n56u/src搬运源码汉化后编译出来的。如有需要可以到网盘下载汉化文件自行编译。（[HowToMakeFirmware](https://bitbucket.org/padavan/rt-n56u/wiki/EN/HowToMakeFirmware)编译教程见网盘）</a></p>
<p>清除配置方法：<br>由于刷机不清除配置，如果按键10秒也不能清除配置，或者开机后不能启动，可能是配置冲突，需要手动清除配置(nvram)重置机器。<br>（操作前备份编程器固件以备不时之需(已经备份可以跳过)）<br>清除方法：进入breed - 恢复出厂设置 - 选择 【Config 分区 公版】- 上传华硕固件 - 更新</p>
<p>如果出现升级固件后没更新内容，可以换其他浏览器试试，因为有些IE内核浏览器的兼容问题导致升级固件失败。如果aria2配置失败也可能是兼容问题，建议换用Chrome浏览器</p>
<p>由于有些路由兼容性问题，中继显示连接失败，可以试试改WIFI的信道带宽20MHz。有网友试过改WIFI的信道带宽20MHz后中继连接正常。</p>
<p>2016年02月22日 同步Padavan源码更新<br>源码更新内容：<a href="https://bitbucket.org/padavan/rt-n56u/commits/all">https://bitbucket.org/padavan/rt-n56u/commits/all</a> 本次更新到：  <a href="https://bitbucket.org/padavan/rt-n56u/commits/fd112f7350f8bf420103fab72fade4177efb8791">fd112f7</a>    固件版本升到3.4.3.9-099</p>
<p>注意事项:配置说明看下面内容，有些路由刷入后WAN和LAN接口反转<br>很多附加功能都是脚本命令实现的，如果觉得启用功能太多导致不稳定，可以不启用附加功能，这样就是原版固件了，也可以清空脚本。<br>很多人启动S-S后不能用。估计是DNS被污染了。可以电脑设置：DNS自动获取路由的ip。电脑运行cmd输入【ipconfig /flushdns】，清理浏览器缓存。</p>
<p>2016-02-22更新：新增优酷路由宝挖坑功能；新增s-s脚本指定WAN的域名或IP中转设置。<br><a href="http://www.newbandeng.com/thread-24798-1-1.html">感谢陈生的优酷插件</a>，感谢<a href="http://www.right.com.cn/forum/space-uid-286223.html">101048689</a> 提供优酷插件脚本支持 和提供 <a href="http://www.right.com.cn/forum/thread-182340-1-1.html">7620老毛子Padavan固件 ngrok使用教程 </a><br>2016-02-22更新注意事项：本次更新了脚本。更新、复位脚本方法：①升级到最新固件②进入管理页面 - 路由器内部存储 (/etc/storage) - 原厂默认值（第二个红色按钮）<br>2016-02-22更新注意事项：（本次更新了opt文件，需要启动自动更新或者删除U盘根目录“opt”文件夹后重启自动下载更新，也可手动下载opt解压覆盖文件更新，安装方法看下面说明）</p>
<p>旧更新记录：<br>2016-02-16更新：新增脚本自动更新（重启后更新）；新增s-s脚本的UDP转发（能用来玩游戏了）；建议转发的TCP端口填上22,80,443【强烈建议更新此版本后更新脚本】<br>2016-02-04更新：①在使用防火墙 - 网址过滤、 MAC访问控制的过滤程序时，若启动adbyby、SS，需要开启【阻止访问路由器的主机】功能，才能成功过滤。<br>②S-S脚本修改，不用每次启动下载chnroutes。<br>2016-01-30更新：①降低闪存的SPI频率（估计以前的频率太高有些路由不能开机）。<br>②S-S添加DNS 服务程序选择，抵抗DNS污染（如果出现一些网页不能打开，可以尝试其他DNS 服务程序）。<br>③添加计划任务开关（默认关闭，需要手动开启【系统管理 - 服务 - cron守护程序】）。<br>如果百度云不能启动，需要把U盘的opt删掉，等脚本自动更新就能启动了<br>2016-01-22更新：1、感谢<a href="http://www.right.com.cn/forum/space-uid-13905.html">bigandy</a>提供的S-S源码和WebUI模板，现在已经内置固件里面了。<br>2、添加了WebUI，经过十来天的脚本代码重构适配WebUI，初步测试可以用，但是脚本大改后会出现BUG，大量BUG等你发现。(遇到问题请回贴说明设置、日志等情况，我都会看的)<br>3、修复百度云同步软件1小时后关闭问题，添加adbyby的IPSET过滤模式。<br>2016-01-02 更新：修复01-01版本的VPN错误；添加KMS服务程序（在【运行路由器启动后】脚本设置启动）；添加排除IP设置，可停用指定IP的S-S、adbyby功能；更新aria2-1.19.3。<br>2015-12-28更新：【重要，建议更新】修复24号脚本一处BUG：只启用adbyby时添加规则错误问题。添加中继守护功能。添加按钮启动功能：可不设置脚本启动参数启动功能<br>添加【youkuL2】和【newifi2D1】固件【cpu:7621】，注意备份：原厂uboot、eeprom<br>修正脚本添加ADbyby的加白名单方式，建议不要用第三方规则，免得过滤失效。<br>建议开启【opt 自动更新】（替换覆盖opt文件夹） upopt=1<br>1、修复爱奇艺播放器黑屏【需要更新、复位脚本】，添加Pcap_DNSProxy选项(替换ChinaDNS、pdnsd)，脚本增加resolveip，server_ip可输入域名和IP<br>2、使用 pdnsd+chinadns、添加自定义Crontab定时任务配置、添加自定义按钮脚本、添加一个自动下载更新opt文件选项(默认关闭，也可手动下载opt解压覆盖文件更新)<br>3、添加Emong’s Qos脚本，添加adbyby过滤白名单（删除规则实现加白），花生壳内网版(可免U盘运行)、添加迅雷快鸟脚本(可免U盘运行)、添加自动切换中继信号功能、添加VPN智能分流脚本<br>4、支持任意网段限速、固件版本号添加日期以便区分、添加WIFI的SSID中文支持<br>5、添加多次检测断线后自动重启功能、更新脚本修复自动安装自定义名称的U盘失效问题、可以安装到SD卡。<br>6、修复中文乱码、Busybox支持中文显示、添加迅雷脚本、添加QOS脚本、增加多次检测断线后自动重启功能、修复代理方案一CPU占用100%的问题、修复aria2配置错误问题<br>7、添加安装到内存运行轻量级隧道代理启（需要空余内存：10M）、添加代理方案二，提醒一下，电脑的DNS服务器的IP设置路由IP，全部交给路由器去解析<br>8、调整脚本配置到一个页面，添加SyncY——可在路由器上运行的百度网盘同步软件<br>9、添加轻量级隧道代理启动脚本（可以ss和adbyby同时运行），下面有设置教程<br>10、自定义脚本adbyby添加CPU负载监控（满负载自动关闭adbyby），自定义adblock规则、重启和DDNS子程序（32M内存建议不要用adblock规则）</p>
<p>Y1S的3个USB能正常供电使用了，感谢绿色的蝈蝈提供gpio<br>根据<a href="http://www.right.com.cn/forum/space-uid-6034.html">luhua</a>分享的定时任务方法，脚本添加定时重启设置<br>轻量级隧道代理启动脚本大部分参考<a href="http://www.router008.com/">HOUZI的博客</a>内容，谢谢提供</p>
<p>改华硕[N14U N54U]5G 2G的7620老毛子Padavan固件(有transmission aria2)</p>
<p>Padavan固件的UI打开、设置速度比原厂固件响应迅速，虽然Padavan固件去掉QoS(和IPv4 H/W NAT一起工作会出现问题), 但是添加很多功能,有transmission、aria2和HWNAT硬件加速的功能。</p>
<p><img src="/" alt="img"> </p>
<p>默认密码<br>192.168.1.1<br>admin/admin<br>wifi:1234567890<br>刷机不恢复默认值</p>
<p>注意事项<br>1、按键10秒原厂默认值<br>2、使用transmission、aria前，需要在u盘上建一个transmission目录或aria目录。（文件名必须小写字母）<br>3、使用Optware、Entware前，需要在u盘上建一个opt目录。（文件名必须小写字母）</p>
<p>转：[N56U、N65U、N54U、N14U]Padavan韧体学习与研究：（云盘有doc版）<br><a href="http://www.5i01.cn/topicdetail.php?f=110&amp;t=3772592&amp;p=1">http://www.5i01.cn/topicdetail.php?f=110&amp;t=3772592&amp;p=1</a></p>
<p>Padavan固件源码：<br><a href="https://bitbucket.org/padavan/rt-n56u/src">https://bitbucket.org/padavan/rt-n56u/src</a></p>
<p>建议配合使用H大的breed使用：<br><a href="http://www.right.com.cn/forum/thread-161906-1-1.html">http://www.right.com.cn/forum/thread-161906-1-1.html</a></p>
<p>下载地址：<br><a href="http://pan.baidu.com/s/1qWr367y">http://pan.baidu.com/s/1qWr367y</a></p>
<p>固件说明<br>基本上CPU是MT7620A/N的路由，只要配置相同，复位键相同就能用</p>
<table>
<thead>
<tr>
<th>固件</th>
<th>配置</th>
</tr>
</thead>
<tbody><tr>
<td>RT-N14U_GPIO_1_OYE01_128M</td>
<td>MT7620A/N通用，复位键GPIO#1，16M闪存，128M内存，2.4GWi-Fi，USB，SD卡</td>
</tr>
<tr>
<td>RT-N14U_GPIO_1_youku1_128M</td>
<td>优酷路由宝，复位键GPIO#1，16M闪存，128M内存，2.4GWi-Fi，USB，SD卡</td>
</tr>
<tr>
<td>RT-N14U_GPIO_12_xiaodu_ji1S_128M</td>
<td>小度路由/极路由-极壹S（HC5661），复位键GPIO#12，16M闪存，128M内存，2.4GWi-Fi，USB，SD卡</td>
</tr>
<tr>
<td>RT-N14U_GPIO_1_RY1_64M</td>
<td>如意云ry1，复位键GPIO#1，8/16M闪存，64M内存，2.4GWi-Fi，USB，SD卡</td>
</tr>
<tr>
<td>RT-N14U_GPIO_26_ZTEQ7_64M</td>
<td>中兴ZTEQ7，复位键GPIO#26，8/16M闪存，64M内存，2.4GWi-Fi，USB，SD卡</td>
</tr>
<tr>
<td>RT-N14U_GPIO_2_FIR300M_32M</td>
<td>斐讯FIR300M/302M，复位键GPIO#2，4M闪存，32M内存，2.4GWi-Fi</td>
</tr>
<tr>
<td>RT-AC51U_GPIO_12_ji2_128M</td>
<td>极路由-极贰（HC5761），复位键GPIO#12，16M闪存，128M内存，2.4/5GWi-Fi，USB，SD卡</td>
</tr>
<tr>
<td>RT-AC54U_GPIO_11_newifimini_128M</td>
<td>联想Y1（newifi mini），复位键GPIO#11，16M闪存，128M内存，2.4/5GWi-Fi，USB</td>
</tr>
<tr>
<td>RT-AC54U_GPIO_30_xiaomimini_128M</td>
<td>小米Mini，复位键GPIO#30，16M闪存，128M内存，2.4/5GWi-Fi，USB</td>
</tr>
<tr>
<td>RT-AC1200HP_GPIO_11_Y1S_256M</td>
<td>联想Y1S（newifi），复位键GPIO#11，16M闪存，256M内存，2.4/5GWi-Fi，USB * 3个，WAN、LAN各一个千兆口（端口反转）</td>
</tr>
<tr>
<td>RT-N14U-GPIO-53-BUFFALO-WHR-300HP2-64M</td>
<td>BUFFALO-WHR-300HP2，WPS键GPIO#53，8M闪存，64M内存，2.4GWi-Fi</td>
</tr>
<tr>
<td>RT-AC51U_GPIO_1_PSG712_64M</td>
<td>斐讯PSG712，WPS键GPIO#1，8M闪存，64M内存，2.4/5GWi-Fi</td>
</tr>
<tr>
<td>RT-AC54U_GPIO_1_PSG1208_64M</td>
<td>斐讯PSG1208，WPS键GPIO#1，8M闪存，64M内存，2.4/5GWi-Fi</td>
</tr>
<tr>
<td>RT-N14U_GPIO_1_WT3020H_64M</td>
<td>乐携WT3020迷你无线路由器，WPS键GPIO#1，8M闪存，64M内存，2.4Wi-Fi，USB</td>
</tr>
<tr>
<td>RT-N56UB1_newif2D1_256M</td>
<td>联想newif2(D1)，WPS键GPIO#15，复位键键GPIO#18，32M闪存，256M内存，2.4/5GWi-Fi，USB2.0 * 2个，SD卡</td>
</tr>
<tr>
<td>RT-N56UB1_youkuL2_256M</td>
<td>优酷路由宝L2，WPS键GPIO#17，复位键键GPIO#18，16M闪存，256M内存，2.4/5GWi-Fi，USB3.0，SD卡</td>
</tr>
<tr>
<td>RT-AC51U、RT-N56U、RT-N65U</td>
<td>RT-AC51U、RT-N56U、RT-N65U华硕专用版</td>
</tr>
</tbody></table>
<p>更新、复位脚本方法</p>
<p>①升级到最新固件②路由器内部存储 (/etc/storage) - 原厂默认值</p>
<p>共享查看SD卡说明</p>
<p>管理网页UI那里只显示U盘，不显示SD卡，很多人以为SD不能用，其实极1S和极2的固件我都启用的SD卡驱动， 插入SD卡后，你到看看路由是否有这个文件 【/dev/mmcblk[0-9]p[0-9]】<br>如果有，就说明驱动成功，正常情况会自动挂载到【/media/AiDisk_01】路径。<br>再去看看【/media/AiDisk_01】，如果有文件夹就说明自动挂载成功（需要共享查看可以看下面图片设置），可以在脚本选择opt安装模式1，就能把opt放到SD卡里。</p>
<p><img src="/" alt="img"> </p>
<p>控制台说明<br>控制台刷breed或者原厂uboot方法<br>1.查看uboot分区名：cat /proc/mtd<br>2.通过winscp或其他方式，将breed.bin文件上传至路由器/tmp/目录下，breed.bin必须小于等于128kb。<br>3.mtd_write write /tmp/breed.bin Bootloader<br>4.等2秒搞定，重启<br><img src="/" alt="img"> </p>
<p>VPN客户端智能分流脚本<br>由于有些外服游戏限制IP，而且游戏端口无法使用S/s端口，所以用VPN能解决大部分游戏封锁<br>加入智能分流脚本后就能减轻vpn的负担, 和增加访问国内网站的速度.（VPN分流脚本来自：<a href="https://github.com/fivesheep/chnroutes%EF%BC%89">https://github.com/fivesheep/chnroutes）</a><br>首页要有VPN的账号密码，接下来按照下图设置保存设置。</p>
<p><img src="/" alt="img"> </p>
<p>轻量级隧道代理、ADBYBY脚本（可以ss和adbyby同时运行）</p>
<p>①更新、复位脚本方法：①升级到最新固件②路由器内部存储 (/etc/storage) - 原厂默认值</p>
<p><img src="/" alt="img"> </p>
<p>②ADBYBY默认关闭的，需要进入脚本修改启动。（自定义设置 - 脚本 - 运行路由器启动后：)</p>
<p><img src="/" alt="img"> </p>
<p>③轻量级隧道代理默认关闭的，需要进入脚本修改启动。（自定义设置 - 脚本 - 运行后WAN上/下活动：)<br>自动安装（替换覆盖opt文件夹）方法：<br>一、安装到U盘<br>1、拔出U盘<br>2、用电脑删除U盘根目录“opt”文件夹（自动安装时会自动创建）【下载地址失效时手动安装方法：网盘下载opt.tgz到U盘的opt文件夹里面】<br>3、【1；安装到U盘】请设置：①修改脚本参数：installs=1；修改服务器信息，②USB 应用程序 - 其它设置 - 允许运行Optware？选择”Entware”<br>4、插入U盘<br>5、应用设置，点击右上角重启按钮（不能断电重启，要点击右上角重启按钮）<br>6、重启后完成</p>
<p>二、安装到内存<br>1、拔出U盘<br>2、【2；安装到内存，需要空余内存：10M】①修改脚本参数：syncys=0；installs=2；修改服务器信息，②请设置：USB 应用程序 - 其它设置 - 允许运行Optware？选择”否”<br>3、应用设置，点击右上角重启按钮（不能断电重启，要点击右上角重启按钮）<br>4、重启后完成</p>
<p><img src="/" alt="img"> </p>
<p>可添加方案二的gfwlist内部网络(LAN) - DHCP服务器 - 自定义配置文件 “dnsmasq.servers”<br>添加例子<br>server=/.tvb.com/208.67.222.222#443<br>ipset=/.tvb.com/gfw_black_list</p>
<p>额外功能:<br>使用内网访问控制：禁止指定的 IP 可以使用轻量级隧道代理（清除DNS缓存、重启浏览器或重启该 IP 的电脑后生效）禁止以下 IP 使用 轻量级隧道代理（系统管理 - 控制台输入以下命令）<br>ipset add ss_spec_lan_ac 192.168.1.17 #把该内网IP加入该ss_spec_lan_ac集合<br>取消禁止方法：<br>ipset del ss_spec_lan_ac 192.168.1.17 #把该内网IP从该ss_spec_lan_ac集合中删除</p>
<p>自定义按钮脚本</p>
<p>按钮控制脚本在【按WPS / FN 运行按钮脚本：】</p>
<p><img src="/" alt="img"> </p>
<p>SyncY同步软件脚本<br>SyncY——可在路由器上运行的百度网盘同步软件<br>SyncY同步软件技术博客：<a href="http://www.syncy.cn/">http://www.syncy.cn/</a><br>自动安装（替换覆盖opt文件夹）方法：<br>按照上面【一、安装到U盘】的方式设置后，把修改参数syncys=1，修改脚本参数：installs=1，重启后完成</p>
<p># syncy 功能 0关闭；1启动(需要插入U盘安装opt)<br>syncys=1<br>#SyncY配置文件路径（写字板打开修改）：\192.168.1.1\Media\AiDisk_a1\opt\etc\syncy<br>#配置说明：<a href="http://www.syncy.cn/index.php/syncyconfighelp/">http://www.syncy.cn/index.php/syncyconfighelp/</a><br>#同步模式类型：upload,upload+,download,download+,sync （同步模式需要自行打开配置文件修改）</p>
<p>#SyncY配置文件路径（记事本打开修改）：\192.168.1.1\Media\AiDisk_a1\opt\etc\syncy<br>#SyncY配置文件说明：<a href="http://www.syncy.cn/index.php/syncyconfighelp/&quot;">http://www.syncy.cn/index.php/syncyconfighelp/&quot;</a><br>#可以多个同步目录，直接修改配置文件：复制多一个config syncpath配置节，然后修改相应的localpath、remotepath等就可以了。<br>#默认本地同步目录：option localpath ‘/media/AiDisk_a1/SyncY’<br>#默认云端目录（与/我的应用数据/SyncY的相对目录）：option remotepath ‘/apps/SyncY/AiDisk_a1’<br>#默认同步模式-本地上传云端备份（如需下载或同步模式可按照上面网页说明修改配置）：option synctype ‘upload+’</p>
<p>第一次绑定设备需要不断点击“刷新”获取用户码进行进行授权（请在出现用户码后100秒内进行绑定，超时需重启路由重再次授权）<br>百度授权页面 <a href="https://openapi.baidu.com/device">https://openapi.baidu.com/device</a><br><img src="/" alt="img"><br>删除授权方法：修改配置文件，删除config syncytoken配置节内容即可</p>
<p>自定义DDNS脚本、花生壳内网版<br>自定义DDNS脚本（取自网络）<br><img src="/" alt="img"> </p>
<p>花生壳内网版<br>需要安装opt<br>设置脚本开关1启动功能<br>需要CPU、内存比较多，建议使用swap增加内存<br>运行后【刷新日志】获取SN码。使用SN账号在【 <a href="http://b.oray.com/">http://b.oray.com</a> 】默认密码是admin登录.。默认密码是admin，然后进行修改默认密码、手机验证、邮箱验证和已有的花生壳账号绑定，首次使用需要支付宝验证。<br>绑定后需【提交】内部存储，不然重启会丢失绑定。需要重新短信验证再绑定<br>系统管理 - 恢复/导出/上传设置 - 路由器内部存储 (/etc/storage) - 【提交】</p>
<p><img src="/" alt="img"><br>如果打勾连不上可以试试取消打勾</p>
<p><img src="/" alt="img"> </p>
<p>启动：/opt/phddns2/oraynewph.sh start &amp;<br>查看状态：/opt/phddns2/oraynewph.sh status &amp;<br>重置应用：/opt/phddns2/oraynewph.sh reset &amp;<br>停止：/opt/phddns2/oraynewph.sh stop &amp;<br>卸载：/opt/phddns2/oraynewph.sh uninstall &amp;<br>卸载能解除SN绑定</p>
<p>swap分区自动挂载功能<br>用MiniTool分区U盘，前面NTFS分区格式，后面swap分区格式。插入后就能自动挂载了。<br>![img](../images/【2016-02-22】改华硕【N14U N54U】5G 2G的7620老毛子Padavan固件【百度云同步 aria2 QOS】/223637bazt2t1sqtzo8sea.jpg)</p>
<p>Aria2下载管理器<br>1、使用Aria2前，需要在u盘上建一个aria目录。（文件名必须小写字母）<br>2、打开 <a href="http://aria2c.com/">http://aria2c.com/</a> 进行设置，默认没加密：<a href="http://192.168.1.1:6800/jsonrpc">http://192.168.1.1:6800/jsonrpc</a><br><img src="/" alt="img"> </p>
<p>3、如果提示 Aria2 RPC 服务器错误 按照以下方法修改（如配置失败可清空aria目录重新开始配置）<br>如需加密请手动修改配置文件<br>选项设置为: 配置文件中rpc-secret=xxxxxx<br>选项设置为: <a href="http://token:xxxxxx@host:port/jsonrpc">http://token:xxxxxx@host:port/jsonrpc</a><br>host: 指运行 Aria2 所在机器的 IP 或者DDNS绑定的网址<br>port: 使用 –rpc-listen-port 选项设置的端口, 未设置则是 6800<br>配置DDNS使用能达到远程下载的效果</p>
<p>迅雷远程下载安装<br>1、改脚本中参数1<br># 迅雷远程下载xunlei 功能【0关闭】；【1启动】说明看系统日志<br>xunleis=1<br>2、启动后系统日志会提示说明</p>
<p>启动xunlei,绑定设备页面<a href="http://yuancheng.xunlei.com/">http://yuancheng.xunlei.com</a><br>在浏览器中输入<a href="http://192.168.1.1:9000/getsysinfo%EF%BC%88IP%E6%9B%BF%E6%8D%A2%E4%B8%BA%E4%BD%A0%E8%B7%AF%E7%94%B1%E5%99%A8%E7%9A%84IP%EF%BC%8C%E7%AB%AF%E5%8F%A3%E6%8D%A2%E4%B8%BA%E4%BD%A0%E7%9A%84%E6%8E%A7%E5%88%B6%E7%AB%AF%E5%8F%A3%EF%BC%89%EF%BC%8C%E4%BC%9A%E7%9C%8B%E5%88%B0%E7%B1%BB%E4%BC%BC%E5%A6%82%E4%B8%8B%E4%BF%A1%E6%81%AF%EF%BC%9A">http://192.168.1.1:9000/getsysinfo（IP替换为你路由器的IP，端口换为你的控制端口），会看到类似如下信息：</a><br>     [ 0, 1, 1, 0, “42SND1”,1, “201_2.1.3.121”, “”, 1 ]<br>其中有用的几项为：<br>第一项：0表示返回结果成功<br>第二项：1表示检测网络正常，0表示检测网络异常<br>第四项：1表示已绑定成功，0表示未绑定<br>第五项：未绑定的情况下，为绑定的需要的激活码<br>第六项：1表示磁盘挂载检测成功，0表示磁盘挂载检测失败</p>
<p>迅雷快鸟<br>一个可以运行在路由器的迅雷快鸟(diǎo)客户端（脚本来自：<a href="https://github.com/fffonion/Xunlei-FastDick%EF%BC%89">https://github.com/fffonion/Xunlei-FastDick）</a></p>
<p>①在【运行路由器启动后：】脚本里配置功能开关改为1、迅雷账号和密码，修改脚本参数：installs=1，重启。（需要插入U盘安装opt）<br>②根据提示，稍等几分钟，可以ssh到路由，或者控制台输入ps命令查看swjsq进程是否存在，是否正常启动，提速是否成功。<br>③由于是后台脚本运行，看不到输出信息提示，如果想看什么错误问题，可以在控制台输入【python /opt/FastDick/swjsq.py】查看错误信息</p>
<p>修复Entware安装问题</p>
<p>感谢twovl提供Entware安装方法：<br>Entware按照github上不好用，还得按照google code上说的才行，主要就是在u盘上创建opt文件夹，然后卸载u盘，打开entware功能，再重新插上u盘就好了（如果/opt/里面没文件可以试试先关闭再打开entware功能刷新文件）<br>Entware出现【’/opt/lib/libstdc++.so.6’ is not an ELF file】错误修复方法：<a href="http://www.right.com.cn/forum/thread-164518-1-1.html">http://www.right.com.cn/forum/thread-164518-1-1.html</a><br>Entware软件: <a href="https://www.hqt.ro/category/entware/">https://www.hqt.ro/category/entware/</a>  <a href="https://www.asuswrt.eu/category/entware/">https://www.asuswrt.eu/category/entware/</a><br>Entware软件安装例子:<a href="http://www.chiphell.com/thread-933249-1-1.html">http://www.chiphell.com/thread-933249-1-1.html</a></p>
<p>SD卡问题<br>SD卡不能激活USB程序的服务，服务功能还是需要插U盘</p>
<p>手动挂载命令（按自己需求修改路径）：<br>“exfat”<br>mount -t exfat /dev/mmcblk0p1 /media/AiDisk_01 -o noatime,umask=0,iocharset=utf8</p>
<p>“vfat”<br>mount -t vfat /dev/mmcblk0p1 /media/AiDisk_01 -o noatime,umask=0,iocharset=utf8,codepage=936,shortname=winnt</p>
<p>“ntfs”<br>mount -t ufsd /dev/mmcblk0p1 /media/AiDisk_01 -o noatime,sparse,nls=utf8,force</p>
<p>“ext4”<br>mount -t ext4 -o noatime /dev/mmcblk0p1 /media/AiDisk_01</p>
<p>无线中继方法<br>建议使用 20MHz 信道带宽<br>AP + AP Client，受限制的万能，兼容任何厂牌的上级AP，毋须设置上级AP，受上级AP的信道影响。（需要固定上级路由的信道，增强功能：可用自动切换中继信号脚本搜寻信道、信号）<br>路由中继选项：<br>无线AP-Client角色：接LAN就要关闭本路由DHCP，上级路由开启DHCP，本路由的IP不能和上级一样。例子：一个是192.168.1.1，另一个是192.168.1.2。<br>无线AP-Client角色：接WAN就要开启本路由DHCP，上级路由开启DHCP，本路由的IP不能和上级同网段。例子：一个是192.168.1.1，另一个是192.168.2.1。</p>
<p><img src="/" alt="img"> </p>
<p>首先取得中继信号的配置信息，按照下图说明填写参数。<br>当在中继状态下断线，路由会自动搜寻设定的信号</p>
<p>启动功能需要配置两个参数：<br># AP中继连接守护功能，当中继信号断开时启动自动搜寻<br>apauto=1</p>
<p># 【自动切换中继信号】功能 0关闭；填写配置参数启动<br>ap2g5g=”2@4@1@ASUS@1234567890”</p>
<p><img src="/" alt="img"> </p>
<p>QOS脚本</p>
<p>建议只使用脚本1<br>脚本①任意网段限速QOS脚本：<br>1、改脚本中参数1启动脚本<br>#qos 功能 0关闭；1启动<br>qoss=1<br>2、配置参数<br>禁用硬件NAT：”请设置：①外部网络(WAN) - 互联网设置 -&gt; Hardware Offload NAT/Routing IPv4(HWNAT加速)： -&gt; Disable”<br>①IP限速设置，单位[KB/S]<br>一定要设置IP限速，未定义的IP带宽减半，如启用adbyby，因7620的CPU瓶颈，宽带峰值50M<br>配置单IP自定义限制速率，注意数字之间的空格： （可选项：删除前面的#可生效）<br>IP地址 最大下载速度 下载保证速度 最大上传速度 上传保证速度<br>#192.168.1.115 2560 100 200 20<br>192.168.1.2-192.168.1.244 2560 100 100 15</p>
<p>②连接数限制<br>如果开启该功能后，打开下载软件可能会导致QQ等聊天软件掉线。（因为连接数量会被占光）<br>IP地址 TCP连接数 UDP连接数 （可选项：删除前面的#可生效）<br>#192.168.1.10 100 100<br>192.168.1.20-192.168.1.25 100 100</p>
<p>③端口优先优先端口不会被打标记进入列队（不会被流量控制和处理优先级），可添加对延迟要求高的应用端口。<br>请勿添加下载应用的端口80、8080等等。由于没有被流量控制和处理优先级，下载应用会占用大量资源导致网络卡<br>（可选项：删除前面的#可生效）<br>UDP 53<br>TCP 22<br>TCP 23<br>#TCP 443<br>TCP 1723<br>#TCP 3389<br>TCP 3724,1119,1120<br>TCP 28012,10008,13006,2349,7101:7103<br>UDP 2349,12000:12175</p>
<p><img src="/" alt="img"> </p>
<p>3、点击应用保存脚本并重启，不能断电重启，要点击右上角重启按钮</p>
<p>备注：此脚本是从Emong’s Qos脚本修改移植</p>
<p>脚本②：<br>启动方法：<br>1、禁用硬件NAT：”QOS” “请设置：①外部网络(WAN) - 互联网设置 -&gt; Hardware Offload NAT/Routing IPv4(HWNAT加速)： -&gt; Disable”<br>2、SSH（OR WinSCP）打开路由器/etc/storage/qos.conf的配置文件：修改的QoS功能的变量QOS_ENABLED=”YES”（全部大写）<br>3、重启后生效</p>
<p>由于只有优先级控制，比较鸡肋的QOS，有能力大神可以尝试整合其他Tomato QOS脚本<br>## 变量的顺序是（优先级最低在前）：<br>## TCP_BULK, UDP_BULK, TCP_PRIO, UDP_PRIO, TCP_EXPR, UDP_EXPR<br>## TOS_BULK,             TOS_PRIO,            TOS_EXPR<br>## DSCP_BULK,            DSCP_PRIO,           DSCP_EXPR<br>## IP_BULK,                IP_PRIO,              IP_EXPR</p>
<p>备注：此脚本是从moonman的QOS脚本修改移植，原文地址：<a href="https://github.com/moonman/rt-n56u">https://github.com/moonman/rt-n56u</a></p>
<p>SSH可执行命令：</p>
<table>
<thead>
<tr>
<th>Pcap_DNSProxy</th>
<th>killall</th>
<th>restart_firewall</th>
</tr>
</thead>
<tbody><tr>
<td>[</td>
<td>klogd</td>
<td>restart_networkmap</td>
</tr>
<tr>
<td>[[</td>
<td>l2tp-control</td>
<td>restart_vpn_client</td>
</tr>
<tr>
<td>addgroup</td>
<td>l2tpd</td>
<td>restart_vpn_server</td>
</tr>
<tr>
<td>adduser</td>
<td>lan_eeprom_mac</td>
<td>restart_wan</td>
</tr>
<tr>
<td>aria.sh</td>
<td>lanauth</td>
<td>rm</td>
</tr>
<tr>
<td>aria2c</td>
<td>ldconfig</td>
<td>rmdir</td>
</tr>
<tr>
<td>arp</td>
<td>ldd</td>
<td>rmmod</td>
</tr>
<tr>
<td>arping</td>
<td>lld2d</td>
<td>route</td>
</tr>
<tr>
<td>ash</td>
<td>ln</td>
<td>rpc.mountd</td>
</tr>
<tr>
<td>automount.sh</td>
<td>logger</td>
<td>rpc.nfsd</td>
</tr>
<tr>
<td>awk</td>
<td>login</td>
<td>rstats</td>
</tr>
<tr>
<td>badblocks</td>
<td>lpd</td>
<td>rt2860apd</td>
</tr>
<tr>
<td>basename</td>
<td>ls</td>
<td>rtinicapd</td>
</tr>
<tr>
<td>bash</td>
<td>lsmod</td>
<td>run_aria</td>
</tr>
<tr>
<td>bcrelay</td>
<td>lsof</td>
<td>run_firefly</td>
</tr>
<tr>
<td>blkid</td>
<td>lsusb</td>
<td>run_ftp</td>
</tr>
<tr>
<td>brctl</td>
<td>md5sum</td>
<td>run_ftpsamba</td>
</tr>
<tr>
<td>bunzip2</td>
<td>mdev</td>
<td>run_minidlna</td>
</tr>
<tr>
<td>busybox</td>
<td>mdev_lp</td>
<td>run_nfsd</td>
</tr>
<tr>
<td>bzcat</td>
<td>mdev_net</td>
<td>run_samba</td>
</tr>
<tr>
<td>bzip2</td>
<td>mdev_sd</td>
<td>run_telnetd</td>
</tr>
<tr>
<td>cat</td>
<td>mdev_sg</td>
<td>run_transmission</td>
</tr>
<tr>
<td>check_svc.sh</td>
<td>mdev_sr</td>
<td>scp</td>
</tr>
<tr>
<td>chgrp</td>
<td>mdev_tty</td>
<td>sed</td>
</tr>
<tr>
<td>chinadns</td>
<td>mdev_wdm</td>
<td>sendmail</td>
</tr>
<tr>
<td>chmod</td>
<td>microcom</td>
<td>seq</td>
</tr>
<tr>
<td>chown</td>
<td>mii_mgr</td>
<td>sh</td>
</tr>
<tr>
<td>chpasswd</td>
<td>mii_mgr_cl45</td>
<td>shutdown</td>
</tr>
<tr>
<td>chroot</td>
<td>minidlnad</td>
<td>sleep</td>
</tr>
<tr>
<td>clear</td>
<td>miniupnpd</td>
<td>smbd</td>
</tr>
<tr>
<td>comgt</td>
<td>mkdir</td>
<td>smbmulti</td>
</tr>
<tr>
<td>cp</td>
<td>mke2fs</td>
<td>smbpasswd</td>
</tr>
<tr>
<td>cpu</td>
<td>mkfs.ext2</td>
<td>sn_youku</td>
</tr>
<tr>
<td>crond</td>
<td>mkfs.ext3</td>
<td>sort</td>
</tr>
<tr>
<td>crontab</td>
<td>mkfs.ext4</td>
<td>spindown.sh</td>
</tr>
<tr>
<td>curl</td>
<td>mknod</td>
<td>ss-local</td>
</tr>
<tr>
<td>cut</td>
<td>mkswap</td>
<td>ss-redir</td>
</tr>
<tr>
<td>date</td>
<td>modprobe</td>
<td>ss-rules</td>
</tr>
<tr>
<td>dd</td>
<td>more</td>
<td>ss-server</td>
</tr>
<tr>
<td>ddns_updated</td>
<td>mount</td>
<td>ss-tunnel</td>
</tr>
<tr>
<td>detect_internet</td>
<td>mountpoint</td>
<td>ssh</td>
</tr>
<tr>
<td>detect_link</td>
<td>mt-daapd</td>
<td>sshd.sh</td>
</tr>
<tr>
<td>detect_wan</td>
<td>mtd_storage.sh</td>
<td>start-stop-daemon</td>
</tr>
<tr>
<td>dev_init.sh</td>
<td>mtd_write</td>
<td>start_ddns</td>
</tr>
<tr>
<td>df</td>
<td>mtk_esw</td>
<td>stat</td>
</tr>
<tr>
<td>dhcp6c</td>
<td>mv</td>
<td>stop_aria</td>
</tr>
<tr>
<td>dirname</td>
<td>netstat</td>
<td>stop_firefly</td>
</tr>
<tr>
<td>dmesg</td>
<td>networkmap</td>
<td>stop_ftp</td>
</tr>
<tr>
<td>dnsdomainname</td>
<td>nfsd.sh</td>
<td>stop_ftpsamba</td>
</tr>
<tr>
<td>dnsmasq</td>
<td>nice</td>
<td>stop_minidlna</td>
</tr>
<tr>
<td>dos2unix</td>
<td>nmbd</td>
<td>stop_nfsd</td>
</tr>
<tr>
<td>dosfsck</td>
<td>nslookup</td>
<td>stop_samba</td>
</tr>
<tr>
<td>dropbear</td>
<td>ntpc_updated</td>
<td>stop_transmission</td>
</tr>
<tr>
<td>dropbearconvert</td>
<td>ntpd</td>
<td>stop_wan</td>
</tr>
<tr>
<td>dropbearkey</td>
<td>nvram</td>
<td>strings</td>
</tr>
<tr>
<td>dropbearmulti</td>
<td>on_hotplug_printer.sh</td>
<td>swapoff</td>
</tr>
<tr>
<td>du</td>
<td>on_wps.sh</td>
<td>swapon</td>
</tr>
<tr>
<td>e2fsck</td>
<td>openssl</td>
<td>switch</td>
</tr>
<tr>
<td>e2undo</td>
<td>openvpn</td>
<td>switch_root</td>
</tr>
<tr>
<td>e4defrag</td>
<td>openvpn-cert.sh</td>
<td>sync</td>
</tr>
<tr>
<td>ebtables</td>
<td>opkg</td>
<td>sysctl</td>
</tr>
<tr>
<td>echo</td>
<td>opkg.sh</td>
<td>syslogd</td>
</tr>
<tr>
<td>egrep</td>
<td>opt-ipkg-upd.sh</td>
<td>tail</td>
</tr>
<tr>
<td>eject</td>
<td>opt-mkswap</td>
<td>tar</td>
</tr>
<tr>
<td>ejusb</td>
<td>opt-mount.sh</td>
<td>tc</td>
</tr>
<tr>
<td>ejusb1</td>
<td>opt-opkg-upd.sh</td>
<td>tcpdump</td>
</tr>
<tr>
<td>env</td>
<td>opt-start.sh</td>
<td>tee</td>
</tr>
<tr>
<td>ether-wake</td>
<td>opt-umount.sh</td>
<td>telnetd</td>
</tr>
<tr>
<td>exportfs</td>
<td>ovpn_export_client</td>
<td>test</td>
</tr>
<tr>
<td>expr</td>
<td>p910nd</td>
<td>test_share</td>
</tr>
<tr>
<td>FALSE</td>
<td>parted</td>
<td>time</td>
</tr>
<tr>
<td>fdisk</td>
<td>passwd</td>
<td>top</td>
</tr>
<tr>
<td>fgrep</td>
<td>pdnsd</td>
<td>touch</td>
</tr>
<tr>
<td>find</td>
<td>pdnsd-ctl</td>
<td>tr</td>
</tr>
<tr>
<td>flock</td>
<td>pgrep</td>
<td>traceroute</td>
</tr>
<tr>
<td>free</td>
<td>pidof</td>
<td>traceroute6</td>
</tr>
<tr>
<td>fsck.ext2</td>
<td>pids</td>
<td>transmission-daemon</td>
</tr>
<tr>
<td>fsck.ext3</td>
<td>ping</td>
<td>transmission.sh</td>
</tr>
<tr>
<td>fsck.ext4</td>
<td>ping6</td>
<td>TRUE</td>
</tr>
<tr>
<td>fuser</td>
<td>portmap</td>
<td>tune2fs</td>
</tr>
<tr>
<td>getykbdlink</td>
<td>pppd</td>
<td>u2ec</td>
</tr>
<tr>
<td>grep</td>
<td>pptpctrl</td>
<td>udhcpc</td>
</tr>
<tr>
<td>guard</td>
<td>pptpd</td>
<td>udpxy</td>
</tr>
<tr>
<td>gunzip</td>
<td>printf</td>
<td>umount</td>
</tr>
<tr>
<td>gzip</td>
<td>ps</td>
<td>uname</td>
</tr>
<tr>
<td>halt</td>
<td>pwd</td>
<td>uniq</td>
</tr>
<tr>
<td>hddtune.sh</td>
<td>python</td>
<td>unix2dos</td>
</tr>
<tr>
<td>hdparm</td>
<td>python2</td>
<td>unlink</td>
</tr>
<tr>
<td>head</td>
<td>python2.7</td>
<td>update_iptables.sh</td>
</tr>
<tr>
<td>hostname</td>
<td>qos.sh</td>
<td>uptime</td>
</tr>
<tr>
<td>hotplug</td>
<td>radio2_disable</td>
<td>uqmi</td>
</tr>
<tr>
<td>httpd</td>
<td>radio2_eeprom_mac</td>
<td>usb_modeswitch</td>
</tr>
<tr>
<td>https-cert.sh</td>
<td>radio2_enable</td>
<td>usleep</td>
</tr>
<tr>
<td>hub-ctrl</td>
<td>radio2_guest_disable</td>
<td>vconfig</td>
</tr>
<tr>
<td>hw_nat</td>
<td>radio2_guest_enable</td>
<td>vi</td>
</tr>
<tr>
<td>ifconfig</td>
<td>radio2_restart</td>
<td>vsftpd</td>
</tr>
<tr>
<td>igmpproxy</td>
<td>radio2_toggle</td>
<td>wan_eeprom_mac</td>
</tr>
<tr>
<td>ikuacc</td>
<td>radio2_toggle_off</td>
<td>watch</td>
</tr>
<tr>
<td>inadyn</td>
<td>radio2_toggle_on</td>
<td>watchdog</td>
</tr>
<tr>
<td>inetd</td>
<td>radio5_disable</td>
<td>wc</td>
</tr>
<tr>
<td>infosvr</td>
<td>radio5_eeprom_mac</td>
<td>wget</td>
</tr>
<tr>
<td>init</td>
<td>radio5_enable</td>
<td>which</td>
</tr>
<tr>
<td>insmod</td>
<td>radio5_guest_disable</td>
<td>whoami</td>
</tr>
<tr>
<td>ip</td>
<td>radio5_guest_enable</td>
<td>wpa_cli</td>
</tr>
<tr>
<td>ip6tables</td>
<td>radio5_restart</td>
<td>wpa_supplicant</td>
</tr>
<tr>
<td>ip6tables-restore</td>
<td>radio5_toggle</td>
<td>xargs</td>
</tr>
<tr>
<td>ip6tables-save</td>
<td>radio5_toggle_off</td>
<td>xl2tpd</td>
</tr>
<tr>
<td>ipkg.sh</td>
<td>radio5_toggle_on</td>
<td>xtables-multi</td>
</tr>
<tr>
<td>ipset</td>
<td>radvd</td>
<td>xupnpd</td>
</tr>
<tr>
<td>iptables</td>
<td>rc</td>
<td>yes</td>
</tr>
<tr>
<td>iptables-restore</td>
<td>reboot</td>
<td>zcat</td>
</tr>
<tr>
<td>iptables-save</td>
<td>reset_ss.sh</td>
<td>zcip</td>
</tr>
<tr>
<td>iwconfig</td>
<td>reset_to_defaults</td>
<td>zerocd</td>
</tr>
<tr>
<td>iwpriv</td>
<td>restart_dhcpd</td>
<td></td>
</tr>
<tr>
<td>kill</td>
<td>restart_dns</td>
<td></td>
</tr>
</tbody></table>
<p>![img](../images/【2016-02-22】改华硕【N14U N54U】5G 2G的7620老毛子Padavan固件【百度云同步 aria2 QOS】/zip.gif) <a href="http://www.right.com.cn/forum/plugin.php?id=imc_attachad:ad&aid=MTA5MTE3fDRhMmU1ZmVjfDE0NTYzNjkyMzB8MHwxNjEzMjQ=">padavan华硕固件源码汉化文件2015-5-17.zip</a> (535.61 KB, 下载次数: 303) </p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>-技术</tag>
      </tags>
  </entry>
  <entry>
    <title>【君子兰】如何强制刷新MSI的VBIOS让Clevo蓝天的5870M支持Powerplay自动降频,Overdrive超频教程</title>
    <url>/post/945e81c2.html</url>
    <content><![CDATA[<p>对于买到了Clevo蓝天的5870M这张卡准备给自己的M15X或者M17X的兄弟们应该非常郁闷吧<br>这张Clevo蓝天的卡真是巨雷无比,不支持overdrive超频,更可怕的是不能支持powerplay自动降频降压…<br>GPU全天候的工作在700 1000 1.15V的电压下<br>电池撑不了多久,温度也非常的高</p>
<p>不过前一阵子MSI给GX740发布了新的VBIOS 0.31版 (2011年5月16号)<br>经过测试,Clevo蓝天的5870M强刷了MSI的这个VBIOS后可以非常完美的支持powerplay降频降压,以及overdrive超频了<br>同时,3D模式下的电压被控制在1.05V 2D被控制在0.9V,温度也降低了很多</p>
<p>刷新显卡VBIOS有风险,而且只适合Clevo蓝天的5870m一款显卡,其他的牌子请勿尝试!!!<br>如果刷新了MSI的VBIOS之后发现有闪屏情况,请刷回原始的VBIOS(工具包里面有)</p>
<p>现在来说说步骤<br>需要的工具以及软件:<br>\1. U盘一个<br>\2. USBoot<br>\3. MSI已经Clevo蓝天的BIOS<br>(2和3都可以在附件里面下载)</p>
<p>步骤:<br>\1. 首先将U盘插入电脑,格式化,接着打开USBoot,点击U盘,在”点击此处选择工作模式”里面选择”ZIP模式” (中间会要求你拔出U盘,接着重新插入,制作成功会有提示)</p>
<p>\2. 将工具包里面的VBIOS文件夹复制到U盘的根目录, 里面应该有 “5870mmsi.rom” “5870mstock.rom” “atiflash.chg” “atiflash” 和 “VFalsh” 这几个文件</p>
<p>\3. 重新启动机器,开机按F12,选择USB Device启动项,或者进入BIOS吧USB Device设置成最先启动</p>
<p>\4. 这时候你应该已经进入DOS了,<br>先输入 cd vbios<br>接着输入 atiflash -p -f 0 5870mmsi.rom<br>等待VBIOS刷新完成,系统会提示reboot,也就是重启电脑</p>
<p>重启电脑之后,进系统,进入CCC里面,你应该会发现overdrive出现了,而且你现在2D运行在 100 150 0.90V下面了<br>我在overdrive里面只能超频到 750 1050,运行甜甜圈1920X1080 4X MSAA近1小时,温度稳定在74-75度</p>
<p>来张刷完后的图图</p>
<p><img src="/../images/%E3%80%90%E5%90%9B%E5%AD%90%E5%85%B0%E3%80%91%E5%A6%82%E4%BD%95%E5%BC%BA%E5%88%B6%E5%88%B7%E6%96%B0MSI%E7%9A%84VBIOS%E8%AE%A9Clevo%E8%93%9D%E5%A4%A9%E7%9A%845870M%E6%94%AF%E6%8C%81Powerplay%E8%87%AA%E5%8A%A8%E9%99%8D%E9%A2%91Overdrive%E8%B6%85%E9%A2%91%E6%95%99%E7%A8%8B/1004403rvrvyvrbrvr2by2.jpg" alt="img"></p>
<p>PS: 刷新到了MSI这个VBIOS之后是无法修改VBIOS的电压,以及频率,因此在1.05的电压下我的显卡最多也只能超到750 1050绝对稳定(也许个别同学的神卡可以超到860 1200),看个人RP了. 所以不用尝试的调节VBIOS的各种设定了,即使刷上去了还是原始的设置</p>
<p>还有关于屏幕闪动问题<br>进CCC里面的powerplay设置,把接电源改成,电池最大化(原始应该是性能最大化),这样2D频率就会从100 150变成200 1000了……(虽然很奇怪,但是这样之后屏幕就不会闪动了)</p>
<p>驱动请下D大的驱动: <a href="http://dell.benyouhui.it168.com/thread-1920699-1-1.html">http://dell.benyouhui.it168.com/thread-1920699-1-1.html</a></p>
<p>分割线————————————————————————————————————————————————–</p>
<p>如果你不幸的刷黑屏了,工具包里面还有一个Clevo蓝天我备份的原始VBIOS, 文件名是 5870mstock.rom</p>
<p>\1. 插入优盘,启动电脑,一直按F12,差不多感觉ok了按一下下键,接着按ENTER (个人建议一开始就把USB Device设置成最先启动)</p>
<p>\2. 输入 cd vbios<br>  输入 atiflash -p -f 0 5870mstock.rom<br>  等待2分钟之后重启电脑,应该就能亮了,如果没亮,再重新开始一次<br>  如果试过好几次都不行那就是显卡烧掉了或者其他的问题了</p>
<p><img src="/../images/%E3%80%90%E5%90%9B%E5%AD%90%E5%85%B0%E3%80%91%E5%A6%82%E4%BD%95%E5%BC%BA%E5%88%B6%E5%88%B7%E6%96%B0MSI%E7%9A%84VBIOS%E8%AE%A9Clevo%E8%93%9D%E5%A4%A9%E7%9A%845870M%E6%94%AF%E6%8C%81Powerplay%E8%87%AA%E5%8A%A8%E9%99%8D%E9%A2%91Overdrive%E8%B6%85%E9%A2%91%E6%95%99%E7%A8%8B/rar.gif" alt="img"> <a href="http://dell.benyouhui.it168.com/forum.php?mod=misc&action=attachpay&aid=2092791&tid=1927022">工具包.rar</a> <em>(764.29 KB, 下载次数: 84,)</em> </p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>-技术</tag>
      </tags>
  </entry>
  <entry>
    <title>【算法】超详细的遗传算法(Genetic Algorithm)解析</title>
    <url>/post/d601a254.html</url>
    <content><![CDATA[<h1 id="00-目录"><a href="#00-目录" class="headerlink" title="00 目录"></a>00 目录</h1><ul>
<li>遗传算法定义</li>
<li>生物学术语</li>
<li>问题导入</li>
<li>大体实现</li>
<li>具体细节</li>
<li>代码实现</li>
</ul>
<h1 id="01-什么是遗传算法？"><a href="#01-什么是遗传算法？" class="headerlink" title="01 什么是遗传算法？"></a>01 什么是遗传算法？</h1><h2 id="1-1-遗传算法的科学定义"><a href="#1-1-遗传算法的科学定义" class="headerlink" title="1.1 遗传算法的科学定义"></a>1.1 遗传算法的科学定义</h2><p>遗传算法（Genetic Algorithm, GA）是模拟达尔文生物进化论的自然选择和遗传学机理的生物进化过程的计算模型，是一种通过模拟自然进化过程搜索最优解的方法。</p>
<p>其主要特点是直接对结构对象进行操作，不存在求导和函数连续性的限定；具有内在的隐并行性和更好的全局寻优能力；采用概率化的寻优方法，不需要确定的规则就能自动获取和指导优化的搜索空间，自适应地调整搜索方向。</p>
<p>遗传算法以一种群体中的所有个体为对象，并利用随机化技术指导对一个被编码的参数空间进行高效搜索。其中，选择、交叉和变异构成了遗传算法的遗传操作；参数编码、初始群体的设定、适应度函数的设计、遗传操作设计、控制参数设定五个要素组成了遗传算法的核心内容。</p>
<h2 id="1-2-遗传算法的执行过程-参照百度百科"><a href="#1-2-遗传算法的执行过程-参照百度百科" class="headerlink" title="1.2 遗传算法的执行过程(参照百度百科)"></a>1.2 遗传算法的执行过程(参照百度百科)</h2><p>遗传算法是从代表问题可能潜在的解集的一个种群（population）开始的，而一个种群则由经过基因（gene）编码的一定数目的个体(individual)组成。每个个体实际上是染色体(chromosome)带有特征的实体。</p>
<p>染色体作为遗传物质的主要载体，即多个基因的集合，其内部表现（即基因型）是某种基因组合，它决定了个体的形状的外部表现，如黑头发的特征是由染色体中控制这一特征的某种基因组合决定的。因此，在一开始需要实现从表现型到基因型的映射即编码工作。由于仿照基因编码的工作很复杂，我们往往进行简化，如二进制编码。</p>
<p>初代种群产生之后，按照适者生存和优胜劣汰的原理，逐代（generation）演化产生出越来越好的近似解，在每一代，根据问题域中个体的适应度（fitness）大小选择（selection）个体，并借助于自然遗传学的遗传算子（genetic operators）进行组合交叉（crossover）和变异（mutation），产生出代表新的解集的种群。</p>
<p>这个过程将导致种群像自然进化一样的后生代种群比前代更加适应于环境，末代种群中的最优个体经过解码（decoding），可以作为问题近似最优解。</p>
<h2 id="1-3-遗传算法过程图解"><a href="#1-3-遗传算法过程图解" class="headerlink" title="1.3 遗传算法过程图解"></a>1.3 遗传算法过程图解</h2><p><img src="/../images/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E8%B6%85%E8%AF%A6%E7%BB%86%E7%9A%84%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95-Genetic-Algorithm-%E8%A7%A3%E6%9E%90/10386940-f6a0d1d8226405fa.jpg" alt="img"></p>
<p>image</p>
<h1 id="02-相关生物学术语"><a href="#02-相关生物学术语" class="headerlink" title="02 相关生物学术语"></a>02 相关生物学术语</h1><p>为了大家更好了解遗传算法，在此之前先简单介绍一下相关生物学术语，大家了解一下即可。</p>
<ul>
<li>基因型(genotype)：性状染色体的内部表现；</li>
<li>表现型(phenotype)：染色体决定的性状的外部表现，或者说，根据基因型形成的个体的外部表现；</li>
<li>进化(evolution)：种群逐渐适应生存环境，品质不断得到改良。生物的进化是以种群的形式进行的。</li>
<li>适应度(fitness)：度量某个物种对于生存环境的适应程度。</li>
<li>选择(selection)：以一定的概率从种群中选择若干个个体。一般，选择过程是一种基于适应度的优胜劣汰的过程。</li>
<li>复制(reproduction)：细胞分裂时，遗传物质DNA通过复制而转移到新产生的细胞中，新细胞就继承了旧细胞的基因。</li>
<li>交叉(crossover)：两个染色体的某一相同位置处DNA被切断，前后两串分别交叉组合形成两个新的染色体。也称基因重组或杂交；</li>
<li>变异(mutation)：复制时可能（很小的概率）产生某些复制差错，变异产生新的染色体，表现出新的性状。</li>
<li>编码(coding)：DNA中遗传信息在一个长链上按一定的模式排列。遗传编码可看作从表现型到基因型的映射。</li>
<li>解码(decoding)：基因型到表现型的映射。</li>
<li>个体（individual）：指染色体带有特征的实体；</li>
<li>种群（population）：个体的集合，该集合内个体数称为种群</li>
</ul>
<h1 id="03-问题引出与解决"><a href="#03-问题引出与解决" class="headerlink" title="03 问题引出与解决"></a>03 问题引出与解决</h1><h2 id="3-1-一元函数最大值问题"><a href="#3-1-一元函数最大值问题" class="headerlink" title="3.1 一元函数最大值问题"></a>3.1 一元函数最大值问题</h2><p>如下的函数图像：</p>
<p><img src="/../images/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E8%B6%85%E8%AF%A6%E7%BB%86%E7%9A%84%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95-Genetic-Algorithm-%E8%A7%A3%E6%9E%90/10386940-8f50b192fccef92e.jpg" alt="img"></p>
<p>image</p>
<blockquote>
<p>现在我们要在既定的区间内找出函数的最大值。</p>
</blockquote>
<p>学过高中数学的孩纸都知道，上面的函数存在着很多的极大值和极小值。而最大值则是指定区间的极大值中的最大的那一个。从图像上具体表现为，极大值像是一座座山峰，极小值则是像一座座山谷。因此，我们也可以把遗传算法的过程看作是一个在多元函数里面求最优解的过程。</p>
<p>这些山峰对应着局部最优解，其中有一个山峰是海拔最高的，这个山峰则对应的是全局最优解。那么，遗传算法要做的就是尽量爬到最高峰，而不是困在较低的小山峰上。（如果问题求解是最小值，那么要做的就是尽量走到最低谷，道理是一样的）。</p>
<p><img src="/../images/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E8%B6%85%E8%AF%A6%E7%BB%86%E7%9A%84%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95-Genetic-Algorithm-%E8%A7%A3%E6%9E%90/10386940-517221056cd4af43.jpg" alt="img"></p>
<h2 id="3-2-“袋鼠蹦跳”"><a href="#3-2-“袋鼠蹦跳”" class="headerlink" title="3.2 “袋鼠蹦跳”"></a>3.2 “袋鼠蹦跳”</h2><p>既然我们把函数曲线理解成一个一个山峰和山谷组成的山脉。那么我们可以设想所得到的每一个解就是一只袋鼠，我们希望它们不断的向着更高处跳去，直到跳到最高的山峰。<strong>所以求最大值的过程就转化成一个“袋鼠跳”的过程。</strong></p>
<p>下面介绍介绍“袋鼠跳”的几种方式。</p>
<ul>
<li>爬山算法：一只袋鼠朝着比现在高的地方跳去。它找到了不远处的最高的山峰。但是这座山不一定是最高峰。这就是爬山算法，它不能保证局部最优值就是全局最优值。</li>
<li>模拟退火：袋鼠喝醉了。它随机地跳了很长时间。这期间，它可能走向高处，也可能踏入平地。但是，它渐渐清醒了并朝最高峰跳去。这就是模拟退火算法。</li>
<li>遗传算法：有很多袋鼠，它们降落到喜玛拉雅山脉的任意地方。这些袋鼠并不知道它们的任务是寻找珠穆朗玛峰。但每过几年，就在一些海拔高度较低的地方射杀一些袋鼠。于是，不断有袋鼠死于海拔较低的地方，而越是在海拔高的袋鼠越是能活得更久，也越有机会生儿育女。就这样经过许多年，这些袋鼠们竟然都不自觉地聚拢到了一个个的山峰上，可是在所有的袋鼠中，只有聚拢到珠穆朗玛峰的袋鼠被带回了美丽的澳洲。</li>
</ul>
<h1 id="04-大体实现过程"><a href="#04-大体实现过程" class="headerlink" title="04 大体实现过程"></a>04 大体实现过程</h1><p>遗传算法中每一条染色体，对应着遗传算法的一个解决方案，一般我们用适应性函数（fitness function）来衡量这个解决方案的优劣。所以从一个基因组到其解的适应度形成一个映射。<strong>遗传算法的实现过程实际上就像自然界的进化过程那样。</strong></p>
<p>下面我们用袋鼠跳中的步骤一一对应解释，以方便大家理解：</p>
<ol>
<li>首先寻找一种对问题潜在解进行“数字化”编码的方案。（建立表现型和基因型的映射关系）</li>
<li>随机初始化一个种群（那么第一批袋鼠就被随意地分散在山脉上），种群里面的个体就是这些数字化的编码。</li>
<li>接下来，通过适当的解码过程之后（得到袋鼠的位置坐标）。</li>
<li>用适应性函数对每一个基因个体作一次适应度评估（袋鼠爬得越高当然就越好，所以适应度相应越高）。</li>
<li>用选择函数按照某种规定择优选择（每隔一段时间，射杀一些所在海拔较低的袋鼠，以保证袋鼠总体数目持平。）。</li>
<li>让个体基因变异（让袋鼠随机地跳一跳）。</li>
<li>然后产生子代（希望存活下来的袋鼠是多产的，并在那里生儿育女）。</li>
</ol>
<p><strong>遗传算法并不保证你能获得问题的最优解，但是使用遗传算法的最大优点在于你不必去了解和操心如何去“找”最优解。（你不必去指导袋鼠向那边跳，跳多远。）而只要简单的“否定”一些表现不好的个体就行了。（把那些总是爱走下坡路的袋鼠射杀，这就是遗传算法的精粹！）</strong></p>
<p>由此我们可以得出遗传算法的一般步骤：</p>
<ol>
<li>随机产生种群。</li>
<li>根据策略判断个体的适应度，是否符合优化准则，若符合，输出最佳个体及其最优解，结束。否则，进行下一步。</li>
<li>依据适应度选择父母，适应度高的个体被选中的概率高，适应度低的个体被淘汰。</li>
<li>用父母的染色体按照一定的方法进行交叉，生成子代。</li>
<li>对子代染色体进行变异。</li>
</ol>
<p><strong>由交叉和变异产生新一代种群，返回步骤2，直到最优解产生。</strong></p>
<p>具体图解可以回到1.3查看。</p>
<h1 id="05-开始我们的进化-具体实现细节"><a href="#05-开始我们的进化-具体实现细节" class="headerlink" title="05 开始我们的进化(具体实现细节)"></a>05 开始我们的进化(具体实现细节)</h1><h2 id="5-1-先从编码说起"><a href="#5-1-先从编码说起" class="headerlink" title="5.1 先从编码说起"></a>5.1 先从编码说起</h2><p>编码是应用遗传算法时要解决的首要问题，也是设计遗传算法时的一个关键步骤。编码方法影响到交叉算子、变异算子等遗传算子的运算方法，大很大程度上决定了遗传进化的效率。</p>
<p>迄今为止人们已经提出了许多种不同的编码方法。总的来说，这些编码方法可以分为三大类：二进制编码法、浮点编码法、符号编码法。下面分别进行介绍：</p>
<h3 id="5-1-1-二进制编码法"><a href="#5-1-1-二进制编码法" class="headerlink" title="5.1.1 二进制编码法"></a>5.1.1 二进制编码法</h3><p>就像人类的基因有AGCT 4种碱基序列一样。不过在这里我们只用了0和1两种碱基,然后将他们串成一条链形成染色体。一个位能表示出2种状态的信息量，因此足够长的二进制染色体便能表示所有的特征。这便是二进制编码。如下：<br>1110001010111</p>
<p>它由二进制符号0和1所组成的二值符号集。它有以下一些优点：</p>
<ol>
<li>编码、解码操作简单易行</li>
<li>交叉、变异等遗传操作便于实现</li>
<li>合最小字符集编码原则</li>
<li>利用模式定理对算法进行理论分析。</li>
</ol>
<p>二进制编码的缺点是：对于一些连续函数的优化问题，由于其随机性使得其局部搜索能力较差，如对于一些高精度的问题（如上题），当解迫近于最优解后，由于其变异后表现型变化很大，不连续，所以会远离最优解，达不到稳定。</p>
<h3 id="5-1-２-浮点编码法"><a href="#5-1-２-浮点编码法" class="headerlink" title="5.1.２ 浮点编码法"></a>5.1.２ 浮点编码法</h3><p>二进制编码虽然简单直观，但明显地。但是存在着连续函数离散化时的映射误差。个体长度较短时，可能达不到精度要求，而个体编码长度较长时，虽然能提高精度，但增加了解码的难度，使遗传算法的搜索空间急剧扩大。</p>
<p>所谓浮点法，是指个体的每个基因值用某一范围内的一个浮点数来表示。在浮点数编码方法中，必须保证基因值在给定的区间限制范围内，遗传算法中所使用的交叉、变异等遗传算子也必须保证其运算结果所产生的新个体的基因值也在这个区间限制范围内。如下所示：</p>
<p>1.2-3.2-5.3-7.2-1.4-9.7</p>
<p>浮点数编码方法有下面几个优点：</p>
<ol>
<li>适用于在遗传算法中表示范围较大的数</li>
<li>适用于精度要求较高的遗传算法</li>
<li>便于较大空间的遗传搜索</li>
<li>改善了遗传算法的计算复杂性，提高了运算交率</li>
<li>便于遗传算法与经典优化方法的混合使用</li>
<li>便于设计针对问题的专门知识的知识型遗传算子</li>
<li>便于处理复杂的决策变量约束条件</li>
</ol>
<h3 id="5-1-3-符号编码法"><a href="#5-1-3-符号编码法" class="headerlink" title="5.1.3 符号编码法"></a>5.1.3 符号编码法</h3><p>符号编码法是指个体染色体编码串中的基因值取自一个无数值含义、而只有代码含义的符号集如｛A,B,C…｝。<br>符号编码的主要优点是：</p>
<ol>
<li>符合有意义积术块编码原则</li>
<li>便于在遗传算法中利用所求解问题的专门知识</li>
<li>便于遗传算法与相关近似算法之间的混合使用。</li>
</ol>
<h2 id="5-2-为我们的袋鼠染色体编码"><a href="#5-2-为我们的袋鼠染色体编码" class="headerlink" title="5.2 为我们的袋鼠染色体编码"></a>5.2 为我们的袋鼠染色体编码</h2><p>在上面介绍了一系列编码方式以后，那么，如何利用上面的编码来为我们的袋鼠染色体编码呢？首先我们要明确一点：编码无非就是建立从基因型到表现型的映射关系。这里的表现型可以理解为个体特征（比如身高、体重、毛色等等）。那么，在此问题下，我们关心的个体特征就是：袋鼠的位置坐标（因为我们要把海拔低的袋鼠给杀掉）。无论袋鼠长什么样，爱吃什么。我们关心的始终是袋鼠在哪里，并且只要知道了袋鼠的位置坐标（位置坐标就是相应的染色体编码，可以通过解码得出），我们就可以：</p>
<ol>
<li>在喜马拉雅山脉的地图上找到相应的位置坐标，算出海拔高度。（相当于通过自变量求得适应函数的值）然后判读该不该射杀该袋鼠。</li>
<li>可以知道染色体交叉和变异后袋鼠新的位置坐标。</li>
</ol>
<p>回到3.1中提的求一元函数最大值的问题。在上面我们把极大值比喻为山峰，那么，袋鼠的位置坐标可以比喻为区间[-1, 2]的某一个x坐标（有了x坐标，再通过函数表达式可以算出函数值 &lt;==&gt; 得到了袋鼠染色体编码，解码得到位置坐标，在喜马拉雅山脉地图查询位置坐标算出海拔高度）。这个x坐标是一个实数，现在，说白了就是怎么对这个x坐标进行编码。下面我们以二进制编码为例讲解，不过这种情况下以二进制编码比较复杂就是了。（如果以浮点数编码，其实就很简洁了，就一浮点数而已。）</p>
<p>我们说过，一定长度的二进制编码序列，只能表示一定精度的浮点数。在这里假如我们要求解精确到六位小数，由于区间长度为2 - (-1) = 3 ,为了保证精度要求，至少把区间[-1,2]分为3 × 10^6等份。又因为</p>
<blockquote>
<p>2^21 = 2097152 &lt; 3*10^6 &lt; 2^22 = 4194304</p>
</blockquote>
<p>所以编码的二进制串至少需要22位。</p>
<p><strong>把一个二进制串(b0,b1,….bn)转化为区间里面对应的实数值可以通过下面两个步骤：</strong></p>
<ol>
<li><p>将一个二进制串代表的二进制数转化为10进制数：</p>
<p><img src="/../images/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E8%B6%85%E8%AF%A6%E7%BB%86%E7%9A%84%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95-Genetic-Algorithm-%E8%A7%A3%E6%9E%90/10386940-bdafc578b24fa1c6.jpg" alt="img"></p>
<p>image</p>
</li>
<li><p>对应区间内的实数：</p>
<p><img src="/../images/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E8%B6%85%E8%AF%A6%E7%BB%86%E7%9A%84%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95-Genetic-Algorithm-%E8%A7%A3%E6%9E%90/10386940-1f0dda5c0fab787b.jpg" alt="img"></p>
<p>image</p>
</li>
</ol>
<p>例如一个二进制串(1000101110110101000111)2通过上面换算以后，表示实数值0.637197。</p>
<p>好了，上面的编码方式只是举个例子让大家更好理解而已，编码的方式千奇百怪，层出不穷，每个问题可能采用的编码方式都不一样。在这一点上大家要注意。</p>
<h2 id="5-3-评价个体的适应度–适应度函数（fitness-function）"><a href="#5-3-评价个体的适应度–适应度函数（fitness-function）" class="headerlink" title="5.3 评价个体的适应度–适应度函数（fitness function）"></a>5.3 评价个体的适应度–适应度函数（fitness function）</h2><p>前面说了，适应度函数主要是通过个体特征从而判断个体的适应度。在本例的袋鼠跳中，我们只关心袋鼠的海拔高度，以此来判断是否该射杀该袋鼠。这样一来，该函数就非常简单了。只要输入袋鼠的位置坐标，在通过相应查找运算，返回袋鼠当前位置的海拔高度就行。</p>
<p>适应度函数也称评价函数，是根据目标函数确定的用于区分群体中个体好坏的标准。适应度函数总是非负的，而目标函数可能有正有负，故需要在目标函数与适应度函数之间进行变换。</p>
<p>评价个体适应度的一般过程为：</p>
<ol>
<li>对个体编码串进行解码处理后，可得到个体的表现型。</li>
<li>由个体的表现型可计算出对应个体的目标函数值。</li>
<li>根据最优化问题的类型，由目标函数值按一定的转换规则求出个体的适应度。</li>
</ol>
<h2 id="5-4-射杀一些袋鼠–选择函数（selection）"><a href="#5-4-射杀一些袋鼠–选择函数（selection）" class="headerlink" title="5.4 射杀一些袋鼠–选择函数（selection）"></a>5.4 射杀一些袋鼠–选择函数（selection）</h2><p>遗传算法中的选择操作就是用来确定如何从父代群体中按某种方法选取那些个体，以便遗传到下一代群体。选择操作用来确定重组或交叉个体，以及被选个体将产生多少个子代个体。前面说了，我们希望海拔高的袋鼠存活下来，并尽可能繁衍更多的后代。但我们都知道，在自然界中，适应度高的袋鼠越能繁衍后代，但这也是从概率上说的而已。毕竟有些适应度低的袋鼠也可能逃过我们的眼睛。</p>
<p>那么，怎么建立这种概率关系呢？</p>
<p><strong>下面介绍几种常用的选择算子：</strong></p>
<ol>
<li><p>轮盘赌选择（Roulette Wheel Selection）：是一种回放式随机采样方法。每个个体进入下一代的概率等于它的适应度值与整个种群中个体适应度值和的比例。选择误差较大。</p>
</li>
<li><p>随机竞争选择（Stochastic Tournament）：每次按轮盘赌选择一对个体，然后让这两个个体进行竞争，适应度高的被选中，如此反复，直到选满为止。</p>
</li>
<li><p>最佳保留选择：首先按轮盘赌选择方法执行遗传算法的选择操作，然后将当前群体中适应度最高的个体结构完整地复制到下一代群体中。</p>
</li>
<li><p>无回放随机选择（也叫期望值选择Excepted Value Selection）：根据每个个体在下一代群体中的生存期望来进行随机选择运算。方法如下:</p>
<p>（1） 计算群体中每个个体在下一代群体中的生存期望数目N。</p>
<p>（2） 若某一个体被选中参与交叉运算，则它在下一代中的生存期望数目减去0.5，若某一个体未  被选中参与交叉运算，则它在下一代中的生存期望数目减去1.0。</p>
<p>（3） 随着选择过程的进行，若某一个体的生存期望数目小于0时，则该个体就不再有机会被选中。</p>
</li>
<li><p>确定式选择：按照一种确定的方式来进行选择操作。具体操作过程如下：</p>
<p>（1） 计算群体中各个个体在下一代群体中的期望生存数目N。</p>
<p>（2） 用N的整数部分确定各个对应个体在下一代群体中的生存数目。</p>
<p>（3） 用N的小数部分对个体进行降序排列，顺序取前M个个体加入到下一代群体中。至此可完全确定出下一代群体中Ｍ个个体。</p>
</li>
<li><p>无回放余数随机选择：可确保适应度比平均适应度大的一些个体能够被遗传到下一代群体中，因而选择误差比较小。</p>
</li>
<li><p>均匀排序：对群体中的所有个体按期适应度大小进行排序，基于这个排序来分配各个个体被选中的概率。</p>
</li>
<li><p>最佳保存策略：当前群体中适应度最高的个体不参与交叉运算和变异运算，而是用它来代替掉本代群体中经过交叉、变异等操作后所产生的适应度最低的个体。</p>
</li>
<li><p>随机联赛选择：每次选取几个个体中适应度最高的一个个体遗传到下一代群体中。</p>
</li>
<li><p>排挤选择：新生成的子代将代替或排挤相似的旧父代个体，提高群体的多样性。</p>
</li>
</ol>
<p>下面以轮盘赌选择为例给大家讲解一下：</p>
<p>假如有５条染色体，他们的适应度分别为５、８、３、７、２。</p>
<p>那么总的适应度为：F = 5 + 8 + 3 + 7 + 2 = 25。</p>
<p>那么各个个体的被选中的概率为：</p>
<p>α1 = ( 5 / 25 ) * 100% = 20%</p>
<p>α2 = ( 8 / 25 ) * 100% = 32%</p>
<p>α3 = ( 3 / 25 ) * 100% = 12%</p>
<p>α4 = ( 7 / 25 ) * 100% = 28%</p>
<p>α5 = ( 2 / 25 ) * 100% = 8%</p>
<p>所以转盘如下：</p>
<p><img src="/../images/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E8%B6%85%E8%AF%A6%E7%BB%86%E7%9A%84%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95-Genetic-Algorithm-%E8%A7%A3%E6%9E%90/10386940-bf5ce56a414e10db.jpg" alt="img"></p>
<p>image</p>
<p>当指针在这个转盘上转动，停止下来时指向的个体就是天选之人啦。可以看出，适应性越高的个体被选中的概率就越大。</p>
<h2 id="5-５-遗传–染色体交叉-crossover"><a href="#5-５-遗传–染色体交叉-crossover" class="headerlink" title="5.５ 遗传–染色体交叉(crossover)"></a>5.５ 遗传–染色体交叉(crossover)</h2><p>遗传算法的交叉操作，是指对两个相互配对的染色体按某种方式相互交换其部分基因，从而形成两个新的个体。</p>
<p>适用于二进制编码个体或浮点数编码个体的交叉算子：</p>
<ol>
<li><p>单点交叉（One-point Crossover）：指在个体编码串中只随机设置一个交叉点，然后再该点相互交换两个配对个体的部分染色体。</p>
</li>
<li><p>两点交叉与多点交叉：</p>
<p>(1) 两点交叉（Two-point Crossover）：在个体编码串中随机设置了两个交叉点，然后再进行部分基因交换。</p>
<p>(2) 多点交叉（Multi-point Crossover）</p>
</li>
<li><p>均匀交叉（也称一致交叉，Uniform Crossover）：两个配对个体的每个基因座上的基因都以相同的交叉概率进行交换，从而形成两个新个体。</p>
</li>
<li><p>算术交叉（Arithmetic Crossover）：由两个个体的线性组合而产生出两个新的个体。该操作对象一般是由浮点数编码表示的个体。</p>
</li>
</ol>
<p>咳咳，根据国际惯例。还是抓一个最简单的二进制单点交叉为例来给大家讲解讲解。</p>
<p>二进制编码的染色体交叉过程非常类似高中生物中所讲的同源染色体的联会过程――随机把其中几个位于同一位置的编码进行交换，产生新的个体。</p>
<p><img src="/../images/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E8%B6%85%E8%AF%A6%E7%BB%86%E7%9A%84%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95-Genetic-Algorithm-%E8%A7%A3%E6%9E%90/10386940-38df5ee1440b2fbc.jpg" alt="img"></p>
<p>image</p>
<p>对应的二进制交叉：</p>
<p><img src="/../images/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E8%B6%85%E8%AF%A6%E7%BB%86%E7%9A%84%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95-Genetic-Algorithm-%E8%A7%A3%E6%9E%90/10386940-dba7fdf2300f0e55.jpg" alt="img"></p>
<p>image</p>
<h2 id="5-6-变异–基因突变-Mutation"><a href="#5-6-变异–基因突变-Mutation" class="headerlink" title="5.6 变异–基因突变(Mutation)"></a>5.6 变异–基因突变(Mutation)</h2><p>遗传算法中的变异运算，是指将个体染色体编码串中的某些基因座上的基因值用该基因座上的其它等位基因来替换，从而形成新的个体。</p>
<p>例如下面这串二进制编码：</p>
<p>101101001011001</p>
<p>经过基因突变后，可能变成以下这串新的编码：</p>
<p><strong>0</strong>011010<strong>1</strong>1011001</p>
<p>以下变异算子适用于二进制编码和浮点数编码的个体：</p>
<ol>
<li>基本位变异（Simple Mutation）：对个体编码串中以变异概率、随机指定的某一位或某几位仅因座上的值做变异运算。</li>
<li>均匀变异（Uniform Mutation）：分别用符合某一范围内均匀分布的随机数，以某一较小的概率来替换个体编码串中各个基因座上的原有基因值。（特别适用于在算法的初级运行阶段）</li>
<li>边界变异（Boundary Mutation）：随机的取基因座上的两个对应边界基因值之一去替代原有基因值。特别适用于最优点位于或接近于可行解的边界时的一类问题。</li>
<li>非均匀变异：对原有的基因值做一随机扰动，以扰动后的结果作为变异后的新基因值。对每个基因座都以相同的概率进行变异运算之后，相当于整个解向量在解空间中作了一次轻微的变动。</li>
<li>高斯近似变异：进行变异操作时用符号均值为Ｐ的平均值，方差为P**2的正态分布的一个随机数来替换原有的基因值。</li>
</ol>
<h1 id="06-代码实现环节"><a href="#06-代码实现环节" class="headerlink" title="06 代码实现环节"></a>06 代码实现环节</h1><p>好了，上面我们介绍了一大截具体原理。现在就是把各个具体的零部件组装起来，动手写我们的代码了。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>-算法</tag>
      </tags>
  </entry>
  <entry>
    <title>【教程】自制解锁bios，加slic，改logo和添加序列号</title>
    <url>/post/89080ece.html</url>
    <content><![CDATA[<p>今日放假，给大家发些我的心得，其实技术就是一层纸，一捅就破解锁bios什么的听起来高大上，其实没什么难度。我现在就给大家分享一下。（各种电脑bios解锁原理大同小异，今天以p775dm2g为例）</p>
<p>用到的工具有rw everything，AMIBCP5.01.0014 ，UEFITool ， ChangeLogo 5.0.0.2 ，phoenixtool 。</p>
<p>教程开始</p>
<p>首先根据电脑型号在<a href="http://jump.bdimg.com/safecheck/index?url=rN3wPs8te/qbcLzWBl/RW4zMiwubX/xvWaradDzoQEzXjPfwV/i0jfMRfhec8gePPLBQPbWwUIJiRR7/sVRYQw7xFUSAhTAdBah3aBIyVP8ZkoQYdFPNPPXl0gK0SNcDzgGXzQWatLPKq8EYKcRO9DA8Zu4mdgY0">https://repo.palkeo.com/clevo-mirror </a>里找到对应bios刷新包并下载，我的775下载后得到一个P7xxDM3G_B10602.zip文件，解压后找到到一个8m的P7xxDM3.bin和一个5m的P7xxDM3.rom因为要修改序列号（bios文件中没有序列号，需要我们自己添加，否则会导致修改后的bios刷入后没有序列号的问题，各种用了大神的解锁bios的已经中枪，因为fpt刷新bios会覆盖原来所以block，如果刷入的bios没有序列号，那么刷完就没有）所以我们用8m的P7xxDM3.bin进行修改。</p>
<p>用AMIBCP打开P7xxDM3.bin打开DMI Tables</p>
<p><img src="/../images/%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91%E8%87%AA%E5%88%B6%E8%A7%A3%E9%94%81bios%EF%BC%8C%E5%8A%A0slic%EF%BC%8C%E6%94%B9logo%E5%92%8C%E6%B7%BB%E5%8A%A0%E5%BA%8F%E5%88%97%E5%8F%B7/142bd243ad4bd113fdb0fa6e53afa40f4afb05af.jpg" alt="img"></p>
<p>再打开rw everything</p>
<p><img src="/../images/%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91%E8%87%AA%E5%88%B6%E8%A7%A3%E9%94%81bios%EF%BC%8C%E5%8A%A0slic%EF%BC%8C%E6%94%B9logo%E5%92%8C%E6%B7%BB%E5%8A%A0%E5%BA%8F%E5%88%97%E5%8F%B7/5d753adbb6fd5266ac527048a218972bd50736ab.jpg" alt="img"><br>点击上面的倒数第八项sm bios会出现上图，这时点击左侧第三项 bios board information<br>会出现下图<img src="/../images/%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91%E8%87%AA%E5%88%B6%E8%A7%A3%E9%94%81bios%EF%BC%8C%E5%8A%A0slic%EF%BC%8C%E6%94%B9logo%E5%92%8C%E6%B7%BB%E5%8A%A0%E5%BA%8F%E5%88%97%E5%8F%B7/6080b23533fa828be9e3d2bff41f4134950a5aec.jpg" alt="img"><br>我们可以看到 serial number 对应的是string4 </p>
<p>再到rw everything左侧点击第二项system information，也会看到一个 serial number条目，对应的也是string4，这时可以关闭rw everything了回到AMIBCP 我们之前就已经在DMI Tables选项卡了 如下图所示<br><img src="/../images/%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91%E8%87%AA%E5%88%B6%E8%A7%A3%E9%94%81bios%EF%BC%8C%E5%8A%A0slic%EF%BC%8C%E6%94%B9logo%E5%92%8C%E6%B7%BB%E5%8A%A0%E5%BA%8F%E5%88%97%E5%8F%B7/82618eb1cb13495434f9a1385f4e9258d3094ac1.jpg" alt="img"></p>
<p>右下角的第四条就是string4 但是我们需要修改2条这个号码，一个是左边第二个选项卡system information的string4 一个是左边第三个选项卡base board的string4，把它替换为自己的序列号，一般电脑后面都有贴，那些刷过大神制作的解锁bios的人可以通过这个补救（刚才在rw everything中serial number后面的引号里就是序列号，这里可以直接粘贴过来要是显示为Not Applicable说明序列号被刷掉了）然后点击上面的保存即可。</p>
<p>下面开始解锁bios在AMIBCP中打开setup configuration选项卡<img src="/../images/%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91%E8%87%AA%E5%88%B6%E8%A7%A3%E9%94%81bios%EF%BC%8C%E5%8A%A0slic%EF%BC%8C%E6%94%B9logo%E5%92%8C%E6%B7%BB%E5%8A%A0%E5%BA%8F%E5%88%97%E5%8F%B7/155416ce36d3d53942bc459f3387e950342ab02c.jpg" alt="img"><img src="/../images/%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91%E8%87%AA%E5%88%B6%E8%A7%A3%E9%94%81bios%EF%BC%8C%E5%8A%A0slic%EF%BC%8C%E6%94%B9logo%E5%92%8C%E6%B7%BB%E5%8A%A0%E5%BA%8F%E5%88%97%E5%8F%B7/aab74836acaf2eddb38ffcb5841001e9380193aa.jpg" alt="img">点击上图所示加号弹出下图<img src="/../images/%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91%E8%87%AA%E5%88%B6%E8%A7%A3%E9%94%81bios%EF%BC%8C%E5%8A%A0slic%EF%BC%8C%E6%94%B9logo%E5%92%8C%E6%B7%BB%E5%8A%A0%E5%BA%8F%E5%88%97%E5%8F%B7/8b9212dfa9ec8a13a10ae3bcfe03918fa1ecc09d.jpg" alt="img"></p>
<p>打开setup的加号我这里为了示范打开main选项卡后弹出下图<img src="/../images/%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91%E8%87%AA%E5%88%B6%E8%A7%A3%E9%94%81bios%EF%BC%8C%E5%8A%A0slic%EF%BC%8C%E6%94%B9logo%E5%92%8C%E6%B7%BB%E5%8A%A0%E5%BA%8F%E5%88%97%E5%8F%B7/ed13c8ef76094b36a109afb1aacc7cd98c109d15.jpg" alt="img"></p>
<p>所谓解锁就是有些选项卡的Access/Use默认是Default可能是不开放的，我们把权限强制调整为user在低权限下开放就行这个bios有好多可以调整的地方，方便起见我解锁上面那页。<br><img src="/../images/%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91%E8%87%AA%E5%88%B6%E8%A7%A3%E9%94%81bios%EF%BC%8C%E5%8A%A0slic%EF%BC%8C%E6%94%B9logo%E5%92%8C%E6%B7%BB%E5%8A%A0%E5%BA%8F%E5%88%97%E5%8F%B7/4bb4334e251f95ca9f9524eac0177f3e6609524c.jpg" alt="img"></p>
<p>总之要解锁什么就把对应条目的Access/Use由Default改成user即可（有的Default在默认状态下也是显示的，不用改。还有些空条目如第十四行，这些保持Default就好，不用动了。）解锁完保存就行。添加slic模块<br>添加slic模块可以oem激活windows，除了win10 win8以外windows都可以激活，但是win10 可以用windows server 2016代替，win8可以用server 2012代替，所以其实变相激活了win10 win8 而且服务器版本windows更加稳定，功能齐全。就是有些繁琐。适合能琢磨的人。</p>
<p>打开phoenixtool（最新版本2.66）用phoenixtool打开修改好的bios文件P7xxDM3.bin，选好主板厂商（主板厂商没有clevo，直接选个dell 戴尔）和slic文件这里我们刷dell的slic2.4（等下会提供地址）<br><img src="/../images/%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91%E8%87%AA%E5%88%B6%E8%A7%A3%E9%94%81bios%EF%BC%8C%E5%8A%A0slic%EF%BC%8C%E6%94%B9logo%E5%92%8C%E6%B7%BB%E5%8A%A0%E5%BA%8F%E5%88%97%E5%8F%B7/d069922397dda1445019d1eebbb7d0a20df4869d.jpg" alt="img"><br>点击高级，并勾除常规选项里的2，3，5项<br><img src="/../images/%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91%E8%87%AA%E5%88%B6%E8%A7%A3%E9%94%81bios%EF%BC%8C%E5%8A%A0slic%EF%BC%8C%E6%94%B9logo%E5%92%8C%E6%B7%BB%E5%8A%A0%E5%BA%8F%E5%88%97%E5%8F%B7/68318f5494eef01f1ce3a599e9fe9925bd317d31.jpg" alt="img"></p>
<p>点击完成后回到主页面再点击执行，会生成一个P7xxDM3_SLIC.bin的文件，我们下面就用这个文件进行操作。</p>
<p>为了安全起见，我们还需要再向P7xxDM3_SLIC.bin中加一个slic头文件来确保成功（不添加没试过，这里不评论，此处引用<a href="http://jump.bdimg.com/safecheck/index?url=x+Z5mMbGPAsDFYW2HqnwkaDRjkrD11q/cYQkE10N22RcMgJTrvpu7I8isJhwUWTPGmT1ugAiyeQYQSBtpbfyfjywUD21sFCCYkUe/7FUWEMO8RVEgIUwHQWod2gSMlT/GZKEGHRTzTz15dICtEjXA84Bl80FmrSzyqvBGCnETvQwPGbuJnYGNA==">http://bbs.bios.net.cn/thread-4527211-1-1.html</a>)打开UEFItool，并用UEFItool打开P7xxDM3_SLIC.bin按照上面的引用贴的方法找到需要添加的位置（由于我们之前用了phoenixtool，会含有pubkey模块和marker模块所以我们直接搜索这些模块的GUID就可以直接确定位置）我们打开搜索框转到搜索GUID选项卡输入69009842<img src="/../images/%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91%E8%87%AA%E5%88%B6%E8%A7%A3%E9%94%81bios%EF%BC%8C%E5%8A%A0slic%EF%BC%8C%E6%94%B9logo%E5%92%8C%E6%B7%BB%E5%8A%A0%E5%BA%8F%E5%88%97%E5%8F%B7/bf9961d0f703918f0c359396583d26975beec4c1.jpg" alt="img"><br>摁ok下面的messages框里会出现上面的消息，点击第二条消息，会把你直接带到要找的模块。<br><img src="/../images/%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91%E8%87%AA%E5%88%B6%E8%A7%A3%E9%94%81bios%EF%BC%8C%E5%8A%A0slic%EF%BC%8C%E6%94%B9logo%E5%92%8C%E6%B7%BB%E5%8A%A0%E5%BA%8F%E5%88%97%E5%8F%B7/be6ef403918fa0eca523ca512f9759ee3f6ddbc1.jpg" alt="img"></p>
<p>在那个模块上摁右键点击insert before，插入4C494E55-5849-5342-4554-544552212121.ffs文件（等下提供，这个不能用引用贴的slic表头文件，这里是slic2.4，引用贴是slic2.3，表头文件不同。然后点击UEFItool左上角的file，点save image file保存，这时软件会自动重新构架这个bios文件，并提示你是否打开修改过的文件，我们选择是，下面就是重点了。</p>
<p>注意，这步很重要，要删除8m的bios文件中多余的部分，有些人会问为什么不直接用5m的P7xxDM3.rom，因为5m的bios可以解锁bios（有些不能），可以加slic2.4，可以改logo，但是不能改序列号，因此不选用。</p>
<p>如图展开intel image项<img src="/../images/%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91%E8%87%AA%E5%88%B6%E8%A7%A3%E9%94%81bios%EF%BC%8C%E5%8A%A0slic%EF%BC%8C%E6%94%B9logo%E5%92%8C%E6%B7%BB%E5%8A%A0%E5%BA%8F%E5%88%97%E5%8F%B7/a74a09d162d9f2d3f6868fb3a0ec8a136227cc12.jpg" alt="img"></p>
<p>在bios region上摁右键点击extract as is…会让你保存。随便保存一个名字，但是扩展名为.rgn我们直接把.rgn改成.rom就行。这样提取的bios就是5m了，前面3m是校验用的。下面更改logo<br>用ChangeLogo 5.0.0.2打开上面的文件，直接用想用的logo替换里面的logo就行，但是要注意logo文件大小和画面大小还有文件格式，这里不做太多说明。</p>
<p>最后就是刷入了，我们选用fpt方法刷入，用<a href="http://tieba.baidu.com/p/4936939406">@827270744</a><br>大神提供的工具<br><img src="/../images/%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91%E8%87%AA%E5%88%B6%E8%A7%A3%E9%94%81bios%EF%BC%8C%E5%8A%A0slic%EF%BC%8C%E6%94%B9logo%E5%92%8C%E6%B7%BB%E5%8A%A0%E5%BA%8F%E5%88%97%E5%8F%B7/e994c55c103853432156137d9a13b07ecb808814.jpg" alt="img"></p>
<p>做好启动盘后把我们修改完的bios重命名为P7DM2G.ROM，替换原来启动盘里的P7DM2G.ROM，然后重启进入dos，执行fpt.bat刷新就行。<img src="/../images/%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91%E8%87%AA%E5%88%B6%E8%A7%A3%E9%94%81bios%EF%BC%8C%E5%8A%A0slic%EF%BC%8C%E6%94%B9logo%E5%92%8C%E6%B7%BB%E5%8A%A0%E5%BA%8F%E5%88%97%E5%8F%B7/6d8b30fa828ba61e8ee259734834970a314e5998.jpg" alt="img"> 下面提供所用工具和各种文件<br><img src="http://imgsrc.baidu.com/forum/w%3D580/sign=f76968d36581800a6ee58906813433d6/6d8b30fa828ba61e8ee259734834970a314e5998.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>-技术</tag>
      </tags>
  </entry>
  <entry>
    <title>【解决方案】WordPress无法建立到WordPress。org的安全连接</title>
    <url>/post/17062.html</url>
    <content><![CDATA[<p>服务器一直使用03系统，为了更好的满足需求决定升级系统，然而升级的路程的坎坷的，各种问题不曾间断，经过一夜努力终于在第二天的天明前完成了系统的各项配置。</p>
<p>自以为风雨过后能见彩虹了，没想到这才是开始…</p>
<p>安装好wordpress后发现许多需要跟wordpress.org进行连接的页面都无法打开了。</p>
<p>期初以为是因为程序卡导致链接超时无法打开，于是就想到WordPress 的主题还有它的后台都会用到 Google 字体，在国内访问 Google 会遇到问题，这就是打开 WordPress 网站慢的主要原因。</p>
<p>解决的办法是去安装一个叫 useso-take-over-google 的插件，它会用国内的 useso 替换 google，但是安装好后之前的问题仍然存在。</p>
<p>于是又想到 WordPress 默认为用户使用的是 Gravatar 头像，我们访问这个网站也会遇到问题，虽然已经有现成的解决方案但仍然不太理想。</p>
<p>解决办法：我们可以先禁用掉用户的头像功能，打开 <em>设置 – 讨论 – 头像显示</em>，去掉勾选显示头像，保存更改。</p>
<p>OK 现在应该不会卡慢了，但是问题依旧，没办法自己的能力有限只能搜搜往上看有没有人遇到同样的问题。</p>
<p>结果搜到了很多同样的问题，但是都没有得到解决，只有个别说到是因为空间商屏蔽了wordpress服务器IP，还有个别说要修改DNS为谷歌的DNS。</p>
<p>但在尝试过后发现都不可用，于是我的脑细胞又开始了疯狂的自杀…</p>
<p>想到曾经谷歌翻译不能用的时候会在host文件里添加记录就可以使用谷歌翻译了，于是开始尝试向host文件添加记录，首先ping一下api.wordpress.org的服务器IP得到66.155.40.249 打开host文件添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">66.155.40.249 api.wordpress.org</span><br></pre></td></tr></table></figure>
<p>保存，刷新后台，完美！！</p>
<p>win系统下host文件路径：c:\windows\system32\drivers\etc</p>
<p>linux系统的host文件路径？</p>
<p>施主请百度去吧，贫僧没搞过啊！！！</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>-技术</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据可视化】电视产品精准营销推荐</title>
    <url>/post/89c41659.html</url>
    <content><![CDATA[<p>获奖经历：</p>
<p>2017年4月:美国大学生数学建模竞赛二等奖</p>
<p>2017年11月:数学建模竞赛国家一等奖</p>
<p>2017年11月:数学竞赛国家二等奖</p>
<p>2018年4月:美国大学生数学建模竞赛二等奖</p>
<p>2018年5月:泰迪杯数据挖掘竞赛国家二等家</p>
<p>兴趣爱好：羽毛球，读书</p>
<p>个人生活照：（1-2张）</p>
<p><img src="/../images/%E3%80%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E7%94%B5%E8%A7%86%E4%BA%A7%E5%93%81%E7%B2%BE%E5%87%86%E8%90%A5%E9%94%80%E6%8E%A8%E8%8D%90/v2-6aa9dfa6d6d152c4f2772709a2a1645a_hd.jpg" alt="img"></p>
<p><strong>一、实验目的</strong></p>
<p>1、实验背景</p>
<p>本实验项目来自于第六届泰迪杯数据挖掘竞赛，共包含用户观看信息和电视产品信息两组数据，通过对数据进行处理，实现产品的精准营销推荐，并将并将结果进行可视化展示。</p>
<p>2、实验目的</p>
<p>基于电视产品及用户信息数据对产品进行精准营销推荐，并将结果进行可视化展示。主要实现以下两个目的：</p>
<p>（1）产品的精准营销推荐</p>
<p>根据用户观看记录信息数据，分析用户的收视偏好，并给出电视产品的营销推荐方案。</p>
<p>（2）相似偏好用户的产品打包推荐</p>
<p>为了更好地为用户服务，扩大营销范围，利用数据对相似偏好的用户进行分类（用户标签），对产品进行分类打包（产品标签），并给出营销推荐方案。</p>
<p>3、实验内容与要求</p>
<p>（1）对数据进行处理，并根据用户的收视信息对用户偏好进行分析，将分析结果用图像进行表示。</p>
<p>（2）整理产品信息，重新对产品分类，将产品类别通过可视化方式表达。</p>
<p>（3）利用推荐算法和聚类算法对产品进行推荐，将具体过程进行展示。</p>
<p>（4）对结果进行分析，得出精准的营销推荐方案以及有效的可视化展示结果。</p>
<p>4、实验所用工具</p>
<p>l Excle</p>
<p>利用其中的统计和编程工具对数据进行处理和分析</p>
<p>l Echarts</p>
<p>含有多类图像，在没有可视化思路时，可以利用它寻找灵感，代码易改易实施</p>
<p>l Rstudio</p>
<p>其中的ggplot/echarts绘画包中图像丰富，语句简单</p>
<p>l Microsoft Visio</p>
<p>适合流程图说明图的绘制，简单易操作</p>
<p><strong>二、实验过程</strong></p>
<p>1、数据介绍</p>
<p>数据来源于泰迪杯数据挖掘竞赛官网，包括用户收看电视的信息记录和产品的各项参数。</p>
<p>用户信息：</p>
<p><img src="/../images/%E3%80%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E7%94%B5%E8%A7%86%E4%BA%A7%E5%93%81%E7%B2%BE%E5%87%86%E8%90%A5%E9%94%80%E6%8E%A8%E8%8D%90/v2-7843daa10ca16682f8ee2eec62fd3bb0_hd.jpg" alt="img"></p>
<p>图1.用户信息数据</p>
<p>产品信息：</p>
<p><img src="/../images/%E3%80%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E7%94%B5%E8%A7%86%E4%BA%A7%E5%93%81%E7%B2%BE%E5%87%86%E8%90%A5%E9%94%80%E6%8E%A8%E8%8D%90/v2-74c8bce2a6c41f42c435698510b93c2b_hd.jpg" alt="img"></p>
<p>图2.产品信息数据</p>
<p>2、数据清洗</p>
<p>（1）删除重复内容，以及错误信息：对数据进行初步整理，删掉无效数据</p>
<p>（2）提取产品标签 =TEXT(E2,”h:mm”)转化时间</p>
<p>=TEXT(H2-G2,”[m]”)求时间差</p>
<p>用数据透视表求频数</p>
<p>（3）提取用户标签，分析用户偏好：将产品类别与用户信息偏好类别进行统一，在用户信息表中添加偏好类型、是否高清、时间段、观看频数、时长标签</p>
<p>3、清洗后数据</p>
<p>用户信息：</p>
<p><img src="/../images/%E3%80%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E7%94%B5%E8%A7%86%E4%BA%A7%E5%93%81%E7%B2%BE%E5%87%86%E8%90%A5%E9%94%80%E6%8E%A8%E8%8D%90/v2-77a3ca99d39565ebd4194ff15daa95e7_hd.jpg" alt="img"></p>
<p>产品信息：</p>
<p><img src="/../images/%E3%80%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E7%94%B5%E8%A7%86%E4%BA%A7%E5%93%81%E7%B2%BE%E5%87%86%E8%90%A5%E9%94%80%E6%8E%A8%E8%8D%90/v2-81cdcd6f0673f75820c8b561f4ea5999_hd.jpg" alt="img"></p>
<p>图3.数据清洗后数据</p>
<p><strong>三、可视化展示及结果</strong></p>
<p>1.旭日图</p>
<p>主题：对产品类别进行展示（使用工具：Echarts ）</p>
<p><img src="/../images/%E3%80%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E7%94%B5%E8%A7%86%E4%BA%A7%E5%93%81%E7%B2%BE%E5%87%86%E8%90%A5%E9%94%80%E6%8E%A8%E8%8D%90/v2-882533662c432170019ffeeab963aee8_hd.jpg" alt="img"></p>
<p>图4.产品类别图</p>
<p>由图可知产品主要分为两类：电影和电视剧，其中电影又分为：动作电影、恐怖电影、爱情电影、动画电影、喜剧电影与其他；</p>
<p>电视剧又分为：抗日剧、古装剧、综艺娱乐、仙侠科幻、都市情感与动画片；</p>
<p>电影类产品中动作类电影产品最多；其中产品“碟中谍”热度最高</p>
<p>电视剧中古装剧产品最多，其中“独孤天下”热度最高</p>
<p>2.嵌套环形图</p>
<p>主题：以10853号用户为例，对用户偏好进行展示（使用工具：Echarts）</p>
<p><img src="/../images/%E3%80%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E7%94%B5%E8%A7%86%E4%BA%A7%E5%93%81%E7%B2%BE%E5%87%86%E8%90%A5%E9%94%80%E6%8E%A8%E8%8D%90/v2-173e2ed83e61fafa367ab8978c6ae8c6_hd.jpg" alt="img"></p>
<p>图5.用户偏好</p>
<p>10853用户喜欢四类产品类型：家庭影院、纪录片、综艺娱乐、大陆剧场，其中最喜欢观看家庭影院类型产品，在众多节目中喜欢观看舌尖上的中国和味道中国等美食节目。</p>
<p>3.碎石图</p>
<p>主题：针对本文所研究的问题，需要对影视产品进行打包，进而以产品包为单位向用户进行推荐。为此我们引入K-means 聚类分析理论，将同种类型的产品进行打包，此时问题重点是探索所推荐的产品包中影视产品的最佳数量和产品包的最终分类结果。</p>
<p><img src="/../images/%E3%80%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E7%94%B5%E8%A7%86%E4%BA%A7%E5%93%81%E7%B2%BE%E5%87%86%E8%90%A5%E9%94%80%E6%8E%A8%E8%8D%90/v2-4f03d0fca6b3b21c7c2e1a0d8f17a87f_hd.jpg" alt="img"></p>
<p>由图可知，最佳聚类数目分别为2和6，电视剧场/欧美剧场分类中还可以将产品细分为2类，大陆剧场/日韩剧场这个分类中则可以将产品细化为6类。</p>
<p>\4. 折线图</p>
<p>对产品进行打包后，采用推荐算法对产品进行推荐。本项目采用协同过滤推荐算法、热点推荐算法和随机推荐算法三种推荐方式。为了实现产品的个性化推荐，自定义推荐产品包数目，通过十折交叉验证检测准确率和召回率。</p>
<p>两个主题：</p>
<p>（1）通过准确率和召回率对三种推荐方式进行比较。</p>
<p>（2）选择合适的产品包推荐数目。</p>
<p><img src="/../images/%E3%80%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E7%94%B5%E8%A7%86%E4%BA%A7%E5%93%81%E7%B2%BE%E5%87%86%E8%90%A5%E9%94%80%E6%8E%A8%E8%8D%90/v2-03e8ebf306066033233f7a96a0c1c571_hd.jpg" alt="img"></p>
<p>图7.三种推荐方式对比</p>
<p>由图知，热点推荐模型和协同过滤推荐模型的准确度和召回率均远远高于随机推荐，说明热点推荐模型和协同过滤模型对于重要价值用户的个性化推荐效果显著。其中热点推荐效模型效果好于协同过滤推荐，并且，热点推荐和协同过滤推荐在产品包推荐数目为 1 时同时达到精准率最大值，同时也是召回率最小值。当推荐打包数为 20 个时，协同过滤推荐和热点推荐的召回率均达到最大值，但此时精准率达到最小值。</p>
<p>5.气泡图</p>
<p>因为精准率与召回率二者评价模型的标准均为越接近于1越好，但是在保证精准率的前提下，召回率就难以得到保障，同样地在保障召回率的前提下，精准率就不能得到保障，因此，本文根据精准率和召回率计算得到平衡F分数（F1 的值，它可以同时兼顾模型的精准率和召回率，如下：</p>
<p><img src="/../images/%E3%80%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E7%94%B5%E8%A7%86%E4%BA%A7%E5%93%81%E7%B2%BE%E5%87%86%E8%90%A5%E9%94%80%E6%8E%A8%E8%8D%90/v2-c5702ce83ae2c8ef0ee5a8540a273172_hd.jpg" alt="img"></p>
<p>两个主题：</p>
<p>（1）通过可视化寻找三类推荐算法用户最佳推荐个数，根据最佳推荐个数为用户推荐产品</p>
<p>（2）对三类推荐算法进行比较，选择平衡分数最高的推荐算法进行推荐。</p>
<p><img src="/../images/%E3%80%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E7%94%B5%E8%A7%86%E4%BA%A7%E5%93%81%E7%B2%BE%E5%87%86%E8%90%A5%E9%94%80%E6%8E%A8%E8%8D%90/v2-11362594149cd0bd979a616b4275a781_hd.jpg" alt="img"></p>
<p>图7.平衡分数</p>
<p>由图可知热点推荐模型形状最大，其平衡分数最高，协同过滤推荐其次，随机推荐最低</p>
<p>6.产品介绍图</p>
<p>主题：对协同过滤推荐算法的具体过程及原理进行介绍（使用工具：Microsoft Visio）</p>
<p><img src="/../images/%E3%80%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E7%94%B5%E8%A7%86%E4%BA%A7%E5%93%81%E7%B2%BE%E5%87%86%E8%90%A5%E9%94%80%E6%8E%A8%E8%8D%90/v2-2fee4e20f7b3835a3066739fa4a6c806_hd.jpg" alt="img"></p>
<p>基于用户的协同过滤算法：我们知道樱桃小丸子喜欢葡萄、草莓、西瓜和橘子，而我们通过某种方法了解到小丸子和花伦有相似的喜好，所以我们会把小丸子喜欢的而花伦还未选择的水果（葡萄和橘子）推荐给花伦。</p>
<p><img src="/../images/%E3%80%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E7%94%B5%E8%A7%86%E4%BA%A7%E5%93%81%E7%B2%BE%E5%87%86%E8%90%A5%E9%94%80%E6%8E%A8%E8%8D%90/v2-81c610cd2702a6bea1d6e68a39383292_hd.jpg" alt="img"></p>
<p>图9.基于物品的协同过滤算法</p>
<p>基于物品的协同过滤算法：给用户推荐那些和他们之前喜欢的物品相似的物品。比如，我们知道樱桃小丸子和小玉都喜欢葡萄和西瓜，那么我们就认为葡萄和西瓜有较高的相似度，在花伦选择了西瓜的情况下，我们会把葡萄推荐给花伦。</p>
<p>\7. 漏斗图</p>
<p>主题：以10853号用户为例，对推荐结果进行展示（使用工具：Echarts ）</p>
<p><img src="/../images/%E3%80%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E7%94%B5%E8%A7%86%E4%BA%A7%E5%93%81%E7%B2%BE%E5%87%86%E8%90%A5%E9%94%80%E6%8E%A8%E8%8D%90/v2-760c22a1e97c9aa1f67b72823d88929f_hd.jpg" alt="img"></p>
<p>图10.推荐结果展示</p>
<p>根据推荐算法进行分析，共对用户10853推荐8个产品。其中英超联赛推荐指数最高，新闻联播次之。</p>
<p><strong>四、图表制作</strong></p>
<p>1、旭日图制作</p>
<p>步骤：</p>
<p>（1）对一级指标“电影/电视剧”进行修改，将data第一个name标签内容替换。</p>
<p>（2）对二级指标“动作电影/喜剧电影等”修改，将第一个children类下的name标签替换。</p>
<p>（3）对三级指标产品名称如“摔跤吧爸爸”等进行修改，将第二个children类下的name标签内容替换。</p>
<p>（4）若多增加标签，则增添children[{name:’’},{name:’’}]</p>
<p>程序：</p>
<p><img src="/../images/%E3%80%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E7%94%B5%E8%A7%86%E4%BA%A7%E5%93%81%E7%B2%BE%E5%87%86%E8%90%A5%E9%94%80%E6%8E%A8%E8%8D%90/v2-35229aea6165fc1e58a4fc5aae1aaaf3_hd.jpg" alt="img"></p>
<p>图11.旭日图程序</p>
<p>2.嵌套环形图制作</p>
<p>步骤：</p>
<p>（1）对图像标题进行修改</p>
<p>（2）对图像内容进行替换，并将各部分占比进行修改</p>
<p>程序：</p>
<p><img src="/../images/%E3%80%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E7%94%B5%E8%A7%86%E4%BA%A7%E5%93%81%E7%B2%BE%E5%87%86%E8%90%A5%E9%94%80%E6%8E%A8%E8%8D%90/v2-f1bb592944773ee628d96b07cbb926b4_hd.jpg" alt="img"></p>
<p><img src="/../images/%E3%80%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E7%94%B5%E8%A7%86%E4%BA%A7%E5%93%81%E7%B2%BE%E5%87%86%E8%90%A5%E9%94%80%E6%8E%A8%E8%8D%90/v2-31e971f029d030c9025dd9792b5b161c_hd.jpg" alt="img"></p>
<p>图12.嵌套环形图程序</p>
<p>3.碎石图制作</p>
<p>步骤：</p>
<p>（1）对于产品内容进行中文分词，并构成 dtm 矩阵。</p>
<p>（2）基于dtm 矩阵，采用 Kmeans 均值聚类计算产品数目大于30的类别之间的距离，采用碎石图，得到每一个一级标签分类的最佳聚类数</p>
<p>形成的dtm矩阵如下：</p>
<p><img src="/../images/%E3%80%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E7%94%B5%E8%A7%86%E4%BA%A7%E5%93%81%E7%B2%BE%E5%87%86%E8%90%A5%E9%94%80%E6%8E%A8%E8%8D%90/v2-1fba03748172a555ad72b2c51ff68ea8_hd.jpg" alt="img"></p>
<p>图13.DTM矩阵</p>
<p>程序：</p>
<p><img src="/../images/%E3%80%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E7%94%B5%E8%A7%86%E4%BA%A7%E5%93%81%E7%B2%BE%E5%87%86%E8%90%A5%E9%94%80%E6%8E%A8%E8%8D%90/v2-c733035f3d41d485489cc90934c114d9_hd.jpg" alt="img"></p>
<p>4.折线图制作</p>
<p>步骤：</p>
<p>（1）采用三种推荐算法，基于用户偏好进行产品推荐。</p>
<p>（2）通过十折交叉验证对推荐结果进行验证，得到不同推荐产品包数目的结果准确率与召回率，这里探究自定义产品包数目为（1,3,5,7, 8,10,15,20）时的准确率与召回率。</p>
<p>（3）对三种推荐算法在不同推荐情况下的准确率与召回率进行可视化表达，探索最优算法</p>
<p>程序：</p>
<p><img src="/../images/%E3%80%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E7%94%B5%E8%A7%86%E4%BA%A7%E5%93%81%E7%B2%BE%E5%87%86%E8%90%A5%E9%94%80%E6%8E%A8%E8%8D%90/v2-8a35fc29bd35c9da24d3f6156b4d0b1c_hd.jpg" alt="img"></p>
<p>5.气泡图制作</p>
<p>步骤：</p>
<p>（1）导入平衡分数计算公式</p>
<p>（2）对三类推荐算法在不同推荐情况下的平衡分数进行可视化表达，对折线图、气泡图两种表达方式进行对比，最终选择气泡图，因为其可以动态的表示每点数据情况。</p>
<p><img src="/../images/%E3%80%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E7%94%B5%E8%A7%86%E4%BA%A7%E5%93%81%E7%B2%BE%E5%87%86%E8%90%A5%E9%94%80%E6%8E%A8%E8%8D%90/v2-56188e430a46333cd9b6abb378f5afd3_hd.jpg" alt="img"></p>
<p><img src="/../images/%E3%80%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E7%94%B5%E8%A7%86%E4%BA%A7%E5%93%81%E7%B2%BE%E5%87%86%E8%90%A5%E9%94%80%E6%8E%A8%E8%8D%90/v2-11362594149cd0bd979a616b4275a781_hd.jpg" alt="img"></p>
<p>图14.推荐算法比较</p>
<p>程序：</p>
<p><img src="/../images/%E3%80%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E7%94%B5%E8%A7%86%E4%BA%A7%E5%93%81%E7%B2%BE%E5%87%86%E8%90%A5%E9%94%80%E6%8E%A8%E8%8D%90/v2-11f7bd323058a8307ed1b4bc49f41741_hd.jpg" alt="img"></p>
<p>6.产品介绍图制作</p>
<p>步骤：</p>
<p>（1）使用visio2003创建一个新文件</p>
<p>（2）选择对应形状拖动进绘画板</p>
<p>（3）文件保存，发布</p>
<p><img src="/../images/%E3%80%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E7%94%B5%E8%A7%86%E4%BA%A7%E5%93%81%E7%B2%BE%E5%87%86%E8%90%A5%E9%94%80%E6%8E%A8%E8%8D%90/v2-20bdfac8ac2625f59a30d3bf3e087277_hd.jpg" alt="img"></p>
<p><img src="/../images/%E3%80%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E7%94%B5%E8%A7%86%E4%BA%A7%E5%93%81%E7%B2%BE%E5%87%86%E8%90%A5%E9%94%80%E6%8E%A8%E8%8D%90/v2-ee6d21f434a5dc1d6c922dae698cf427_hd.jpg" alt="img"></p>
<p>图15.visio绘图</p>
<p>7.漏斗图制作</p>
<p>步骤：</p>
<p>1.对legend数据框中data的内容进行修改，对图例内容进行替换。</p>
<p>2.对图中数据进行替换，并对各数据占比进行修改，数据皆为百分制</p>
<p>程序：</p>
<p><img src="/../images/%E3%80%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E7%94%B5%E8%A7%86%E4%BA%A7%E5%93%81%E7%B2%BE%E5%87%86%E8%90%A5%E9%94%80%E6%8E%A8%E8%8D%90/v2-a167093b48fb988b52138cad18e0d790_hd.jpg" alt="img"></p>
<p><img src="/../images/%E3%80%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E7%94%B5%E8%A7%86%E4%BA%A7%E5%93%81%E7%B2%BE%E5%87%86%E8%90%A5%E9%94%80%E6%8E%A8%E8%8D%90/v2-78c6498505976e674e7a84f660e2d962_hd.jpg" alt="img"></p>
<p>图16.漏斗图程序</p>
<p><a href="http://link.zhihu.com/?target=http://weixin.qq.com/r/GT9EXHfEnyrgrTM-92oL">http://weixin.qq.com/r/GT9EXHfEnyrgrTM-92oL</a> (二维码自动识别)</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>-大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>一条短信直接崩溃iPhone，几乎所有iOS设备躺枪</title>
    <url>/post/3420606c.html</url>
    <content><![CDATA[<p>iPhone 又出 Bug 了！国外有网友发现，只要给用 iPhone 的好友发送一段含有特殊字符的短信或者是 iMessage 消息，就会让对方的 iPhone 崩溃重启，这条信息最先出现在 Reddit 网站。这段字符信息包含了英文、阿拉伯文、中文和特殊符号：</p>
<p><img src="/" alt="messagescrashingbug.jpg"></p>
<blockquote>
<p>Power<br>لُلُصّبُلُلصّبُررً ॣ ॣh ॣ ॣ<br>冗</p>
</blockquote>
<p>如果用户接收到这条短信，就会导致短信程序崩溃，手机重启。如果以短信应用的消息列表打开收到的短信，则会发生再次崩溃，如果进入了这条包含特殊字符的消息列表，这个对话窗口并不会崩溃，但如果再跳转到其他对话，消息应用又会崩溃，进入一个死循环。</p>
<p>这个 BUG 目前影响苹果运行 iOS 8.3 的设备，包括 iPhone 和 iPad，也包括其他版本的 iOS 系统。如果 iPhone 处于安全模式下，则攻击不会生效，如果 iPhone 已经越狱，则越狱的 iPhone 会转入到安全模式。</p>
<p>这可能是 iOS 通知中心预览功能处理 Unicode 字符时存在的一个 BUG，通知中心会在推送时会直接打开预览功能，所以会导致整个系统崩溃。</p>
<p>如果收到这种短信，解决的办法有以下几种，例如能够在短信应用打开这条短信，可以回复对方一条短信来解决崩溃（例如再发送一条同样的短信进行报复 XD），如果是在消息列表中收到这种短信，可以尝试使用其他方法例如语音控制或者是社交软件分享一条消息给自己来解决崩溃。</p>
<p>目前苹果已经知道了这个问题，正在进行修复，会不会提前发布小更新或者让 iOS 8.4 提前发布暂时还未清楚。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>-其他</tag>
      </tags>
  </entry>
  <entry>
    <title>不拆机仅用SD卡为Thinkpad E450 E460作磁盘永久缓存加速</title>
    <url>/post/c234aa14.html</url>
    <content><![CDATA[<p>**Thinkpad E450 E460 的特点：<br>**一般标配机械硬盘，没有多余的光驱和内置硬盘接口。<br>ngff M.2接口被阉割，截至目前，有人尝试自行焊接M.2插槽，失败。可能是BIOS里面的问题，而不是仅仅焊接一个插槽这么简单。个人猜测，未经验证。</p>
<p><strong>Windows Superfetch：</strong><br>将你经常运行的程序、经常读写的文件建立一个磁盘缓存，在系统预测的时刻读进内存。并且，将用户使用过程中的文件在内存复制一份，下次读写，只要文件内容没改，直接在内存中读取。<br>缺点：开机后才有效，不能加速启动过程。</p>
<p><strong>Windows ReadyBoost：</strong><br>利用闪存盘的随机读写远大于机械硬盘特点，将superfetch的文件放置在优盘等闪存上，实现硬盘读写的加速。<br>注意ReadyBoost不是扩展内存。<br>缺点：<br>ReadyBoost每次关机都会清除缓存文件，每次开机再次从C盘将缓存文件读出来在闪存中重建。</p>
<p><strong>联想ExpressCache：</strong><br>本来是用在固态硬盘为机械硬盘作高速缓存的机型上。它是将磁盘经常都写的文件在缓存盘（原装SSD）作永久缓存，开关机不会消失。<br>在启动过程中，只要ExpressCache的驱动载入后，即可享受缓存加速的效果，此时系统还未完全启动完毕，用户还未登录。所以，加速启动是有效果的。</p>
<p><strong>使用SD卡做为ExpressCache的载体：</strong> Thinkpad E450 E460既然不能加装SSD，作为高速缓存或者RAID。那么结合Readyboost闪存读写快读和Express永久缓存的优点，绕过了readyboost关机后缓存消失的缺点，提出使用SD卡做为ExpressCache的载体方案。</p>
<p><strong>购买一个SD卡：</strong><br>我用的是Sandisk 8GB Class10<br>插入内置读卡器，在左手掌托下。不要用外置读卡器。</p>
<p><strong>软件下载：</strong><br>ExpressCache Software for Windows 10 (64bit) - Laptop, ThinkCentre联想官方下载：<br><a href="http://support.lenovo.com/us/en/downloads/ds104444">http://support.lenovo.com/us/en/downloads/ds104444</a><br>正常安装。重启。</p>
<p><strong>准备磁盘：</strong></p>
<ol>
<li>Microsoft Windows [Version 10.0.10586]</li>
<li>(c) 2015 Microsoft Corporation. All rights reserved.</li>
<li>C:\Windows\system32&gt;diskpart</li>
<li>Microsoft DiskPart version 10.0.10586</li>
<li>Copyright (C) 1999-2013 Microsoft Corporation.</li>
<li>On computer: ***</li>
<li>DISKPART&gt; list disk</li>
<li> Disk ### Status      Size   Free   Dyn Gpt</li>
<li><hr>
</li>
<li> Disk 0  Online      465 GB 6144 KB     *</li>
<li> Disk 1  Online     7580 M    0 B</li>
<li>DISKPART&gt; select disk 1</li>
<li>Disk 1 is now the selected disk.</li>
<li>DISKPART&gt; list partition</li>
<li> Partition ### Type         Size   Offset</li>
<li><hr>
</li>
<li> Partition 1  Primary     7578 M 1024 KB</li>
<li>DISKPART&gt; select partition 1</li>
<li>Partition 1 is now the selected partition.</li>
<li>DISKPART&gt;</li>
</ol>
<p><em>复制代码</em></p>
<p>记住7578 MB这个数字，下一步会用到。这是你的SD卡磁盘分区格式化最大可用空间，不是7580 MB那个数字。</p>
<p>windows10 系统下，管理员权限运行命令提示符，Win+X，A。<br>eccmd命令查看用法</p>
<ol>
<li>eccmd /?</li>
</ol>
<p><em>复制代码</em></p>
<p>作者默认读者机器上没有其它硬盘优盘，只有内置硬盘和一个SD卡。</p>
<ol>
<li>eccmd -partition 1 7578</li>
<li>eccmd -format</li>
</ol>
<p><em>复制代码</em></p>
<p>格式化后用DiskGennius查看分区格式为73，是HFS么？求证。如果后期不小心把SD卡弹出了，或格式化为fat、ntfs，再插进去是没法用的，必须再次执行eccmd的分区与格式化。<br>此时使用以下命令可以查看SD卡里的缓存情况</p>
<ol>
<li>eccmd -info</li>
</ol>
<p><em>复制代码</em></p>
<p>刚建立，什么都没有，运行一段时间再次查看，Cache Read Percent  : x.xx% Cache Write Percent : x.xx%这两组数字应该变大。<br>多重启几次，这个数字应该更大，作者的情况是，缓存读取比例可大于80%。<br>完毕。</p>
<p><strong>讨论：</strong><br>SD卡毕竟不是SSD，加速效果有限，但仍然比内置机械硬盘快，在4K随机读写性能上。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>-技术</tag>
      </tags>
  </entry>
  <entry>
    <title>一个项目的SpringCloud微服务改造过程</title>
    <url>/post/cb33e573.html</url>
    <content><![CDATA[<p>SSO是公司一个已经存在了若干年的项目，后端采用SpringMVC、MyBatis，数据库使用MySQL，前端展示使用Freemark。今年，我们对该项目进行了一次革命性的改进，将其改造成Spring Cloud架构，并且把前后端分离，前端采用Vue框架。</p>
<p>一、使用SpringCloud架构进行改造</p>
<p><strong>1.1 为什么使用Spring Cloud</strong></p>
<p>Spring Cloud的核心是Spring Boot，相比较于传统的Spring，Spring Cloud具有以下优点：</p>
<ul>
<li>部署简单，Spring Boot内置了Tomcat容器，可以将程序直接编译成一个jar，通过java-jar来运行。</li>
<li>编码简单，Spring Boot只需要在pom文件中添加一个starter-web依赖，即可帮助开发者快速启动一个Web容器，非常方便。</li>
<li>配置简单，Spring Boot可以通过简单的注解方式来代替原先Spring非常复杂的xml方式。如果我想把一个普通的类交给Spring管理，只需要添加@Configuration和@Bean两个注解即可。</li>
<li>监控简单，我们可以引入spring-boot-start-actuator依赖，直接使用REST方式来获取进程的运行期性能参数，从而达到监控的目的。</li>
</ul>
<p><strong>1.2 一个常规项目都需要改造哪些部分</strong></p>
<p><strong>1.2.1 配置文件</strong></p>
<p>SSO项目改造前充斥着大量的配置文件，主要包含以下这些部分：</p>
<ul>
<li>静态资源相关</li>
<li>数据源</li>
<li>MyBatis配置</li>
<li>Redis配置</li>
<li>事务</li>
<li>拦截器拦截内容</li>
<li>监听器、过滤器</li>
<li>组件扫描路径配置</li>
</ul>
<p>本文着重介绍以下几个部分：</p>
<p>1）静态资源处理：</p>
<p>SpringMVC中，如果mvc:interceptors配置的URL规则如下，则不会拦截静态资源。</p>
<ol>
<li><pre><code>&lt;mvc:mapping path=&quot;/*.do&quot; /&gt;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">但是如果配置的是：</span><br><span class="line"></span><br><span class="line">1. ```</span><br><span class="line">   &lt;mvc:mapping path=&quot;/**&quot; /&gt;</span><br></pre></td></tr></table></figure>

</code></pre>
</li>
</ol>
<p>方案1：在web.xml中配置default，用defaultServlet先处理请求如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">&lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line">&lt;url-pattern&gt;*.jpg&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">&lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line">&lt;url-pattern&gt;*.png&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">&lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line">&lt;url-pattern&gt;*.gif&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">&lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line">&lt;url-pattern&gt;*.ico&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">&lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line">&lt;url-pattern&gt;*.gif&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">&lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line">&lt;url-pattern&gt;*.js&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">&lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line">&lt;url-pattern&gt;*.css&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure>
<p>方案2：使用标签声明静态资源路径：</p>
<ol>
<li>```<br>&lt;mvc:resources mapping=”/resources/js/**” location=”/js/“ /&gt;<br>&lt;mvc:resources mapping=”/resources/images/**” location=”/images/“ /&gt;<br>&lt;mvc:resources mapping=”/resources/css/**” location=”/css/“ /&gt;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">方案3：使用mvc:default-servlet-handler/标签：</span><br><span class="line"></span><br><span class="line">1. SpringBoot解决方案：继承WebMvcConfigurerAdapter实现addResourceHandlers方法。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
public void addResourceHandlers(ResourceHandlerRegistry registry) {<br>registry.addResourceHandler(“/**”)<br>.addResourceLocations(“classpath:/resource/“)//sso静态资源<br>.addResourceLocations(“classpath:/META-INF/resources/“)//swagger静态资源<br>.setCachePeriod(0);//0表示不缓存<br>}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">SSO静态资源文件路径如图：</span><br><span class="line"></span><br><span class="line">![img](../images/一个项目的SpringCloud微服务改造过程/6897f6fac9b944bdad78658031e3ec33.png)</span><br><span class="line"></span><br><span class="line">2）拦截器：</span><br><span class="line"></span><br><span class="line">SpringMVC配置文件内容：</span><br><span class="line"></span><br><span class="line">拦截任何请求并且初始化参数，有些请求是不需要拦截的，有的请求登录后不需要经过权限校验直接放行。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<a href="mvc:interceptors">mvc:interceptors</a><br><a href="mvc:interceptor">mvc:interceptor</a><br>&lt;mvc:mapping path=”/**” /&gt;<bean class="自定义拦截器PermissionInterceptor">
<!-- 未登录即可访问的地址 -->
<property name="excludeUrls">
<list><value>请求地址<value></value></value></list>
</property>
<!-- 只要登录了就不需要拦截的资源 -->
<property name="LogInExcludeUrls">
<list><value>请求地址<value></value></value></list>
</property>
</bean>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">SpringBoot中添加拦截器只需继承WebMvcConfigurerAdapter，并重写addInterceptors方法即可。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
/*** 拦截器
\* @param registry</li>
</ol>
<p>*/<br>@Override<br>public void addInterceptors(InterceptorRegistry registry) {<br>registry.addInterceptor(permissionInterceptor).<br>addPathPatterns(“/**”);<br>super.addInterceptors(registry);<br>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">自定义的拦截器需要初始化一些参数，因此需要在注册拦截器之前注册，这里我们设置为懒加载。免登录拦截的路径，以及登录后不需要判断权限的路径都写在yml文件了，通过系统环境变量Environment获取值。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>@Autowired<br>@Lazy<br>private PermissionInterceptor permissionInterceptor;<br>@Autowired<br>private Environment environment;</p>
<p>/**<br>*<br>*/<br>@Bean<br>public PermissionInterceptor permissionInterceptor {<br>PermissionInterceptor permissionInterceptor = new PermissionInterceptor;<br>List<String> excludeUrls = Arrays.asList(environment.getProperty(“intercept.exclude.path”).split(“,”));<br>List<String> commonUrls = Arrays.asList(environment.getProperty(“intercept.login.exclude.path”).split(“,”));<br>permissionInterceptor.setCommonUrls(commonUrls);<br>permissionInterceptor.setExcludeUrls(excludeUrls);<br>return permissionInterceptor;<br>}</String></String></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3）数据库和MyBatis配置：</span><br><span class="line"></span><br><span class="line">A、数据源配置</span><br><span class="line"></span><br><span class="line">数据源注入的三种情况：</span><br><span class="line"></span><br><span class="line">【情况一】</span><br><span class="line"></span><br><span class="line">- 条件：不引⼊druid-spring-boot-starter只依赖druid.jar，不指定spring.datasource.type。</span><br><span class="line">- 结果：注入的数据源是tomcat的数据源。</span><br><span class="line">- 解析：依赖的mybatis-spring-boot-starter工程依赖了tomcat的数据源，spring-boot-autoconfigure-starter的DataSourceAutoConfiguration自动注入类会在不指定数据源的情况下，判断路径中是否存在默认的4种数据源（Hikari，Tomcat，Dbcp，Dbcp2）的其一，如果有就注入。</span><br><span class="line"></span><br><span class="line">【情况二】</span><br><span class="line"></span><br><span class="line">- 条件：不引入druid-spring-boot-starter只依赖druid.jar，指定spring.datasource.type为DruidDataSource。</span><br><span class="line">- 结果：注入了DruidDataSource数据源，但配置文件中的druid配置不会生效。</span><br><span class="line">- 解析：指定了依赖的数据源后，spring自动注入的starter会将指定的数据源注入，yml指定了druid数据源。@ConfigurationProperties注解的DataSourceProperties没处理druid部分的性能参数属性，只处理了数据源部分的属性。</span><br><span class="line"></span><br><span class="line">【情况三】</span><br><span class="line"></span><br><span class="line">- 条件：引⼊ druid-spring-boot-starter 不依赖druid.jar，指定spring.datasource.type为DruidDataSource。</span><br><span class="line">- 结果：注入了DruidDataSource数据源，配置文件中的druid配置也会生效。</span><br><span class="line">- 解析：druid-spring-boot-starter自动配置类会在DataSourceAutoConfiguration之前先创建数据源，并且@ConfigurationProperties注入的DataSourceProperties包含了配置文件中druid的属性。</span><br><span class="line"></span><br><span class="line">pom.xml依赖：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<!-- 情况一、二 测试引入的依赖 -->
<!--<dependency>-->
<!--<groupId>com.alibaba</groupId>-->
<!--<artifactId>druid</artifactId>-->
<!--<version>${druid.version}</version>-->
<!--</dependency>-->
<dependency>
<groupId>com.alibaba</groupId>
<artifactId>druid-spring-boot-starter</artifactId>
<version>1.1.10</version>
</dependency>
<dependency>
<groupId>org.mybatis.spring.boot</groupId>
<artifactId>mybatis-spring-boot-starter</artifactId>
<version>RELEASE</version>
</dependency>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">yml配置：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
spring:
    datasource:
    type: com.alibaba.druid.pool.DruidDataSource # 当前数据源操作类型
    driver-class-name: com.mysql.jdbc.Driver # mysql驱动包
    url: jdbc:mysql://yourURL # 数据库名称
    username: yourusername
    password: yourpassword
druid:
    initial-size: 5 # 初始化大小
    min-idle: 5 # 最小
    max-active: 20 # 最大
    max-wait: 60000 # 连接超时时间
    time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    min-evictable-idle-time-millis: 300000 # 指定一个空闲连接最少空闲多久后可被清除，单位是毫秒
    validationQuery: select 'x'
    test-while-idle: true # 当连接空闲时，是否执行连接测试
    test-on-borrow: false # 当从连接池借用连接时，是否测试该连接
    test-on-return: false # 在连接归还到连接池时是否测试该连接
filters: config，wall，stat
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">B、MyBatis配置</span><br><span class="line"></span><br><span class="line">通过引入mybatis-spring-boot-starter依赖，可以简单配置MyBatis上手使用。</span><br><span class="line"></span><br><span class="line">下面简单分析mybatis-starter的源码以及如何配置MyBatis。</span><br><span class="line"></span><br><span class="line">先看mybatis-spring-boot-starter中mybatis-spring-boot-autoconfigure的spring.factories文件。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
# Auto Configure
org.springframework.boot.autoconfigure.EnableAutoConfiguration=org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">可以看到自动注入类是MybatisAutoConfiguration，我们从这个类入手分析可以知道，必须先创建好了数据源后，才会加载MyBatis的sqlSessionFactory。</span><br><span class="line"></span><br><span class="line">@EnableConfigurationProperties(&#123;MybatisProperties.class&#125;)注解指定了配置文件中 prefix = &quot;mybatis&quot; 那部分属性有效，这部分属性值将注入到已创建的SqlSessionFactoryBean中，最后生成SqlSessionFactory对象。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
@Configuration
//当SqlSessionFactory，SqlSessionFactoryBean存在的情况下加载当前Bean
@ConditionalOnClass({SqlSessionFactory.class, SqlSessionFactoryBean.class})
//当指定数据源在容器中只有一个或者有多个但是只指定首选数据源
@ConditionalOnSingleCandidate(DataSource.class)
@EnableConfigurationProperties({MybatisProperties.class})
//当数据源注入到Spring容器后才开始加载当前Bean
@AutoConfigureAfter({DataSourceAutoConfiguration.class})
public class MybatisAutoConfiguration implements InitializingBean {
private final MybatisProperties properties;
@Bean
@ConditionalOnMissingBean
public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {
SqlSessionFactoryBean factory = new SqlSessionFactoryBean;
factory.setDataSource(dataSource);
factory.setVfs(SpringBootVFS.class);
//设置mybatis配置文件所在路径
if (StringUtils.hasText(this.properties.getConfigLocation)) {
factory.setConfigLocation(this.resourceLoader.getResource
(this.properties.getConfigLocation)); }
}
//设置其他MyBatisProperties对象中有的属性略....
return factory.getObject;
}
}
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">MybatisProperties含有的属性：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
@ConfigurationProperties(prefix = "mybatis" )
public class MybatisProperties {
public static final String MYBATIS_PREFIX = "mybatis";
private static final ResourcePatternResolver resourceResolver = new PathMatchingResourcePatternResolver;
private String configLocation;
private String[] mapperLocations;
private String typeAliasesPackage;
private Class<?> typeAliasesSuperType;
private String typeHandlersPackage;
private boolean checkConfigLocation = false;
private ExecutorType executorType;
private Properties configurationProperties;
@NestedConfigurationProperty
private Configuration configuration;
}
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">C、使用MyBatis</span><br><span class="line"></span><br><span class="line">配置文件：</span><br><span class="line"></span><br><span class="line">application.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure>
mybatis:
config-location: classpath:mybatis.xml # mybatis配置文件所在路径
type-aliases-package: com.creditease.permission.model # 所有Entity别名类所在包
mapper-locations: classpath:mybatis/*/.xml
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">从上面的MybatisProperties可以看出，MyBatis可以指定一些configuration，比如自定义拦截器pageHelper。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
mybatis.xml
<?xml version="1.0" encoding="UTF-8" ?>
"http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
<plugins>
<plugin interceptor="com.github.pagehelper.PageInterceptor"></plugin>
<plugin interceptor="com.creditease.permission.manager.MybatisInterceptor"></plugin>
</plugins>
</configuration>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">在启动类上加入@MapperScan注解：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
@MapperScan("com.creditease.permission.dao")//mapper类所在目录
public class SsoApplication {
public static void main(String[] args) {
SpringApplication.run(SsoApplication.class, args);
}
}
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">4）事务</span><br><span class="line"></span><br><span class="line">Spring事务有两种处理方式：</span><br><span class="line"></span><br><span class="line">- 编程式 用TransactionTemplate或者直接使用底层的PlatformTransactionManager将事务代码写在业务代码中。 优点：可以在代码块中处理事务，比较灵活。 缺点：对代码具有侵入性。</span><br><span class="line">- 声明式 采用@Transactional注解或者基于配置文件方式，在方法前后进行拦截。 优点：非侵入性不会污染代码。 缺点：事务只能在方法和类上控制，粒度较小。</span><br><span class="line"></span><br><span class="line">A、使用@Transactional注解。</span><br><span class="line"></span><br><span class="line">非SpringBoot工程，需要在配置文件中加入配置：</span><br><span class="line"></span><br><span class="line">1. &lt;tx:annotation-driven/&gt;</span><br><span class="line"></span><br><span class="line">Spring Boot工程可以用@EnableTransactionManagement注解代替上面的配置内容。</span><br><span class="line"></span><br><span class="line">B、采用配置文件方式 。</span><br><span class="line"></span><br><span class="line">之前的SSO是基于配置的方式，配置代码如下：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
aop:config
<aop:pointcut expression="execution(public * com.creditease.permission.service.impl.Impl.(..))" id="pointcut">
<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut">
/aop:config
<tx:advice id="txAdvice" transaction-manager="transactionManager">
tx:attributes
<tx:method name="query*" propagation="REQUIRED" read-only="true">
<tx:method name="find*" propagation="REQUIRED" read-only="true">
<tx:method name="save*" propagation="REQUIRED">
<tx:method name="delete*" propagation="REQUIRED">
<tx:method name="add*" propagation="REQUIRED">
<tx:method name="modify*" propagation="REQUIRED">

</tx:method></tx:method></tx:method></tx:method></tx:method></tx:method></tx:advice>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">改造后的Spring Boot基于Java代码：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
@Aspect
@Configuration
public class TransactionAdviceConfig {

<p>/**</p>
<ul>
<li>指定切入点</li>
<li>/<br>private static final String AOP_POINTCUT_EXPRESSION = “execution(public * com.creditease.permission.service.impl.Impl.(..))”;</li>
</ul>
<p>@Resource<br>DruidDataSource dataSource;</p>
<p>/**</p>
<ul>
<li>指定处理事务的PlatformTransactionManager</li>
<li>@return</li>
<li>/<br>@Bean<br>public DataSourceTransactionManager transactionManager {</li>
</ul>
<p>return new DataSourceTransactionManager(dataSource);</p>
<p>}</p>
<p>/**</p>
<ul>
<li>指定切入点处理逻辑，执行事务</li>
<li>@return</li>
<li>/<br>@Bean<br>public TransactionInterceptor txAdvice {</li>
</ul>
<p>DefaultTransactionAttribute txAttrRequired = new DefaultTransactionAttribute;<br>txAttrRequired.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);</p>
<p>DefaultTransactionAttribute txAttrRequiredReadonly = new DefaultTransactionAttribute;<br>txAttrRequiredReadonly.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);<br>txAttrRequiredReadonly.setReadOnly(true);</p>
<p>NameMatchTransactionAttributeSource source = new NameMatchTransactionAttributeSource;<br>source.addTransactionalMethod(“query*”, txAttrRequiredReadonly);<br>source.addTransactionalMethod(“find*”, txAttrRequiredReadonly);<br>source.addTransactionalMethod(“save*”, txAttrRequired);<br>source.addTransactionalMethod(“delete*”, txAttrRequired);<br>source.addTransactionalMethod(“add*”, txAttrRequired);<br>source.addTransactionalMethod(“modify*”, txAttrRequired);<br>return new TransactionInterceptor(transactionManager, source);<br>}</p>
<p>/**</p>
<ul>
<li>Advisor组装配置，将Advice的代码逻辑注入到Pointcut位置</li>
<li>@return</li>
<li>/<br>@Bean<br>public Advisor txAdviceAdvisor {<br>AspectJExpressionPointcut pointcut = new AspectJExpressionPointcut;<br>pointcut.setExpression(AOP_POINTCUT_EXPRESSION);<br>return new DefaultPointcutAdvisor(pointcut, txAdvice);<br>}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">5）全局异常处理</span><br><span class="line"></span><br><span class="line">一般编码时有异常我们都会try-catch捕获异常，有时为了区分不同的异常还会一次catch多个异常，大量的try-catch语句，这样使得代码也不够优雅；一个相同的异常处理写多次代码也比较冗余，所以引入全局的异常处理非常必要。</span><br><span class="line"></span><br><span class="line">改造前的异常处理配置文件：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<!--定义异常处理页面-->
<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
<property name="exceptionMappings">
<props>
<prop key="com.creditease.permissionapi.exception.NopermissionException">/permission/noSecurity</prop>
</props>
</property>
</bean>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">使用SimpleMappingExceptionResolver类处理异常，设置自定义异常类型NopermissionException，以及异常发生后的请求路径/permission/noSecurity。</span><br><span class="line"></span><br><span class="line">SpringBoot中采用@RestControllerAdvice或者@ControllerAdvice设置全局异常类。这两者区别类似于@Controller和@RestController注解。</span><br><span class="line"></span><br><span class="line">SSO中定义了三种全局的异常处理：普通的Exception处理；自定的NopermissionException异常和参数校验异常。</span><br><span class="line"></span><br><span class="line">全局异常处理代码如下：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
@Configuration
@Slf4j
@RestControllerAdvice
public class GlobalExceptionConfig {

</li>
</ul>
<p>//无权限处理<br>@ExceptionHandler(value = {NopermissionException.class})<br>public void noPermissionExceptionHandler(HttpServletRequest request, Exception ex, HttpServletResponse response, @Value(“${sso.server.prefix}”) String domain) throws IOException {<br>printLog(request,ex);<br>response.sendRedirect(“跳转到无权限页面地址”);<br>}</p>
<p>//参数校验处理<br>@ExceptionHandler(value = {BindException.class})<br>public ResultBody BindExceptionHandler(BindException bindException){<br>List<ObjectError> errors = bindException.getBindingResult.getAllErrors;<br>//这个ResultBody是一个返回结果对象，这里需要返回json，里面包含了状态码和提示信息<br>return ResultBody.buildFailureResult(errors.get(0).getDefaultMessage);<br>}</ObjectError></p>
<p>//所有未捕获的异常处理逻辑<br>@ExceptionHandler(value = {Exception.class})<br>public ResultBody exceptionHandler(HttpServletRequest request,Exception ex){<br>printLog(request,ex);<br>return ResultBody.buildExceptionResult;<br>}</p>
<p>//将请求参数和异常打印出来，结合@slf4j注解<br>public void printLog(HttpServletRequest request,Exception ex){<br>String parameters = JsonHelper.toString(request.getParameterMap);<br>log.error(“url&gt;&gt;&gt;:{},params&gt;&gt;&gt;:{} ,printLog&gt;&gt;&gt;:{}”,request.getRequestURL,parameters,ex);<br>}<br>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">@RestControllerAdvice结合@Validation，可以对Bean进行校验，校验不通过会抛出BindException异常。通过注解可以少写if-else代码，判断请求的接口参数是否为空，提高代码的美观性。例如：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>//常规做法<br>if(StringUtils.isEmpty(ssoSystem.getSysCode)</p>
<p>//SSO做法<br>//在Controller请求方法上添加@Valid注解<br>@RequestMapping(value = “/add”, method = RequestMethod.POST)<br>public ResultBody add(@Valid @RequestBody SsoSystem ssoSystem) {</p>
<p>}</p>
<p>//在需要处理的SsoSystem Bean的属性上加@NotNull注解<br>@NotNull(message = “系统编号不能为空”)<br>private String sysCode;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">当sysCode传入参数为空时，就会抛出BindException被全局的异常处理类，捕获处理返回json格式的参数：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>{<br>“resultCode”:2,<br>“resultMsg”:”系统编号不能为空”,<br>“resultData”:null<br>}</p>
<p>```</p>
<p><strong>1.3 注意事项</strong></p>
<p><strong>1.3.1 内置Tomcat版本太高引发的问题</strong></p>
<p>Spring Boot1.5默认使用内嵌Tomcat 8.5版本，而原来SpringMVC的SSO部署在Tomcat 7上。Tomcat的升级对这次改造影响最明显的就是cookie。Tomcat 8后采用的cookie校验协议是Rfc6265CookieProcessor。该协议要求domain的命名必须遵循以下规则：</p>
<ul>
<li>必须是1-9、a-z、A-Z、. 、- 这几个字符组成。</li>
<li>必须是数字或字母开头（之前是以.creditease.corp 会报错tomcat cookie domain validation异常，最后改成了 creditease.corp）。</li>
<li>必须是数字或字母结尾。</li>
</ul>
<p>二、前后端分离</p>
<p><strong>2.1 解决跨域问题</strong></p>
<p>由于是两个不同的应用，必然会有两个不同的端口。不同的端口就会有跨域问题，SSO采用的方式是通过nginx区分来自前后端的请求，反向代理请求对应到不同的服务去。</p>
<ul>
<li>sso.creditease.com对应的是后端的应用服务。</li>
<li>sso.creditease.com/web对应的是前端的静态资源应用服务。</li>
</ul>
<p><strong>2.2 方便联调效率，引入swagger</strong></p>
<p>swagger是后端接口展示的插件，通过修改拦截器代码，mock登录对象免登录，直接访问接口进行前后端的调试。在swagger插件上可以看到具体接口请求路径和参数、参数是否必须、返回值、接口统计信息等。</p>
<p>接口统计信息：</p>
<p><img src="/../images/%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E7%9A%84SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%94%B9%E9%80%A0%E8%BF%87%E7%A8%8B/1577ba78f52e4efd89c52e243667dee4.jpeg" alt="img"></p>
<p>请求参数和路径：</p>
<p><img src="/../images/%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E7%9A%84SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%94%B9%E9%80%A0%E8%BF%87%E7%A8%8B/9115c3e4e9dc44d99ffe0ed3cf5e6a96.jpeg" alt="img"></p>
<p>返回值：</p>
<p><img src="/../images/%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E7%9A%84SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%94%B9%E9%80%A0%E8%BF%87%E7%A8%8B/a9990ae606fe4063807cf491fbdd5f74.jpeg" alt="img"></p>
<p><strong>2.3 跳转接口修改</strong></p>
<p>之前是通过SpringMvc的modeAndview方式跳转的，现在做了两种处理：</p>
<ul>
<li>改成restful接口的形式，前端控制跳转然后直接获取数据。</li>
<li>直接通过response.sendRedirect跳转页面。</li>
</ul>
<p>注意：老代码跳转采用的是通过SpringMvc在return的页面路径前加redirect的形式，如：return “redirect:index”，这样默认会在return的URL后加jessionID。</p>
<p><strong>2.4 静态资源地址变更可能引发的问题</strong></p>
<p>特别需要注意代码中的相关校验路径的地方。比如在这次改造过程中路径修改会影响以下几个方面。</p>
<ul>
<li>菜单权限校验的时候，之前人、角色和路径已经绑定了，修改菜单访问路径会导致没权限。</li>
<li>扫码登录的接口判断了refer来源，修改路径会导致请求失败。</li>
<li>之前的sso-dome工程引用了静态资源，修改路径会报404。</li>
</ul>
</aop:advisor></aop:pointcut>]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,spring cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>三种负载均衡 Nginx、Dubbo、Ribbon 区别</title>
    <url>/post/6a79e366.html</url>
    <content><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>1.Dubbo负载均衡：支持4种（随机，轮循，最少活跃，hash），引入了JVM预热时间加权、权重自定义配置的规则，同时支持控制台动态配置权重值参数，所以是最灵活的。</p>
<p>2.Nginx负载均衡：支持4种，自带 轮询（支持权重）、IP_Hash（避免Session共享的问题）、最少连接数策略，可以扩展fair（响应时间）策略，更专注于功能。</p>
<p>3.Ribbon负载均衡：支持6种，不支持权重：轮询、随机、最少连接数、最短响应时间（随机+响应时间加权）、过滤异常节点+轮询，负载策略最全的</p>
<h1 id="Dubbo-负载均衡-2-6-x"><a href="#Dubbo-负载均衡-2-6-x" class="headerlink" title="Dubbo 负载均衡(2.6.x)"></a>Dubbo 负载均衡(2.6.x)</h1><p>Dubbo提供4种负载均衡算法,引入了JVM预热时间加权、权重自定义配置的规则，同时支持控制台动态配置权重值参数，所以最灵活。</p>
<ul>
<li>Random LoadBalance：按照权重随机分配Provider，比如随机且权重Node1:Node2= 2:1，那么运行30次，大约有20次在Node1上，10次在Node2上。</li>
<li>RoundRobin LoadBalance：按照权重轮询分配。比如权重Node1:Node2= 20:10，那么运行30次：前20次里面轮询Node1和Node2大家各10次，第20次到30次，全部选择Node1。因为Dubbo默认是不会做公约数的处理，只有完成一个完整的20+10次运算，才能保证负载均衡的权重比例准确，如果Consumer只调用了20次，那么这里配置的权重的结果就是1:1了，该算法很不平滑。在2.6.5版本中修复了，跟Nginx的实现方法一样。</li>
<li>LeastActive LoadBalance：节点处理越快分配更多，避免慢节点堆积，每次筛选Provider的时候，都只取Active值最小的节点，如果最小Active值的节点有多个，则按照权重随机选取。Provider每获取到一个任务Active值++，每结束一个任务Active值–。</li>
<li>ConsistentHash LoadBalance：唯一忽略权重配置和JVM预热的算法。先把所有Provider都分配160个虚拟节点，通过Hash算法，全部分散到Hash圆上。每次Consumer调用时，会根据参数值做Hash换算，最后映射到Hash圆上，找到邻近的虚拟节点，最终获取到提供服务的Provider。但是Dubbo在实现的时候违背了Hash一致性的原则，每次Porvider发生改变的时候（新增或者剔除)，都会重新创建一个Hash圆，而不是在之前的Hash圆上新增或者剔除不合格的Porvider。</li>
</ul>
<h1 id="Nginx-负载均衡算法"><a href="#Nginx-负载均衡算法" class="headerlink" title="Nginx 负载均衡算法"></a>Nginx 负载均衡算法</h1><p>Nginx目前有4种负载均衡配置：</p>
<ul>
<li><p>round_robin，加权轮询，是默认的HTTP负载均衡算法，适用于知道机器的性能，且默认所有的请求对于服务器而言，处理的时间相差不大。比如我Server1 比Server2的配置要高一倍，我设置为2:1的权重，可以实现比较科学的负载。算法实现上，简单的轮询很简单，给每个Server依次编号，然后只要记录一个调用index，既可以实现轮询。</p>
</li>
<li><p>ip_hash，IP哈希，可保持会话</p>
</li>
<li><p>least_conn; 避免了慢堆积，会取连接数最小的server提供服务，可以避免有些请求耗时长，有些耗时端的情况。根据实际的连接数选择服务器。</p>
</li>
<li><p>fair，需要插件扩展该功能，根据后端服务器的响应时间来分配请求，响应时间短的优先分配，避免慢堆积。</p>
<p>权重配置：而且采用的是平滑的负载均衡算法，比如node1:node2:node3=1:2:5 –&gt; node3，node3，node2，node3，node1，node3，node2，node3。</p>
</li>
</ul>
<h1 id="Ribbon-负载均衡概述"><a href="#Ribbon-负载均衡概述" class="headerlink" title="Ribbon 负载均衡概述"></a>Ribbon 负载均衡概述</h1><ul>
<li>RoundRobinRule：轮询。默认超过10次获取到的server都不可用，会返回一个空的server</li>
<li>RandomRule：随机，如果随机到的server为null或者不可用的话，会while不停的循环选取</li>
<li>RetryRule：一定时限内循环重试。默认继承RoundRobinRule，也支持自定义注入，RetryRule会在每次选取之后，对选举的server进行判断，是否为null，是否alive，并且在500ms内会不停的选取判断。而RoundRobinRule失效的策略是超过10次，RandomRule是没有失效时间的概念，只要serverList没都挂。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public IRule ribbonRule() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     return new RetryRule(new BestAvailableRule());//这里配置策略，和配置文件对应</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>BestAvailableRule：最小连接数。遍历serverList，选取出可用的且连接数最小的一个server。该算法里面有一个LoadBalancerStats的成员变量，会存储所有server的运行状况和连接数。如果选取到的server为null，那么会调用RoundRobinRule重新选取。</li>
<li>WeightedResponseTimeRule：最小响应时间。这个策略整合了随机算法和响应时间加权算法。会开启定时任务，每30秒计算一次所有Provider的响应时间，以响应时间作为权重，响应时间越短的服务器被选中的概率越大。比如Node1:node2:node3的平均响应时间为100ms：200ms:300ms，那么nodes的的权重值是300:500:600，每次以600为基础*随机值，那么落在 0–300的概率为50%，300–500的概率33%，100–600的概率为17%，也就是平均响应时间越短的节点，被选中的概率越大。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">double totalResponseTime = 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//遍历获取所有节点的总的平均响应时间</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for (Server server : nlb.getAllServers()) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ServerStats ss = stats.getSingleServerStat(server);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    totalResponseTime += ss.getResponseTimeAvg();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Double weightSoFar = 0.0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//然后从第一个节点开始设置自增的weightSoFar，每个结点的权重值weight为总响应时间-自己的相应时间，也就是说，node的响应时间越短，weight的值就越大，就越有可能被随机数命中</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">List&lt;Double&gt; finalWeights = new ArrayList&lt;Double&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for (Server server : nlb.getAllServers()) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ServerStats ss = stats.getSingleServerStat(server);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    double weight = totalResponseTime - ss.getResponseTimeAvg();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    weightSoFar += weight;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    finalWeights.add(weightSoFar);   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setWeights(finalWeights);</span><br></pre></td></tr></table></figure>
<ul>
<li>AvailabilityFilteringRule 过滤+轮询策略，先过滤出故障的或并发请求大于阈值一部分服务实例，然后再轮询。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private boolean shouldSkipServer(ServerStats stats) &#123;        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   if ((CIRCUIT_BREAKER_FILTERING.get() &amp;&amp; stats.isCircuitBreakerTripped()) || stats.getActiveRequestsCount() &gt;= activeConnectionsLimit.get()) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       return true;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   return false;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>ZoneAvoidanceRule 扩展了轮询策略，继承了2个过滤器：ZoneAvoidancePredicate和AvailabilityPredicate，除了过滤超时和链接数过多的server，还会过滤掉不符合要求的zone里面的所有节点。</li>
</ul>
<p>Ribbon和Feign都是用于调用其他服务的，不过方式不同。</p>
<p>1.启动类使用的注解不同，Ribbon用的是@RibbonClient，Feign用的是@EnableFeignClients。</p>
<p>2.服务的指定位置不同，Ribbon是在@RibbonClient注解上声明，Feign则是在定义抽象方法的接口中使用@FeignClient声明。</p>
<p>3.调用方式不同，Ribbon需要自己构建http请求，模拟http请求然后使用RestTemplate发送给其他服务，步骤相当繁琐。</p>
<p>Feign则是在Ribbon的基础上进行了一次改进，采用接口的方式，将需要调用的其他服务的方法定义成抽象方法即可，</p>
<p>不需要自己构建http请求。不过要注意的是抽象方法的注解、方法签名要和提供服务的方法完全一致。</p>
]]></content>
      <categories>
        <category>分布式架构</category>
      </categories>
      <tags>
        <tag>负载均衡,Nginx,Dubbo,Ribbon</tag>
      </tags>
  </entry>
  <entry>
    <title>不用Docker，实现群晖+阿里云DDNS解决动态IP访问</title>
    <url>/post/39dfe659.html</url>
    <content><![CDATA[<p><strong>摘要：</strong></p>
<p>题记：此文只为我们这些小白提供更直白的解决方法，解决阿里云DDNS访问自己的群晖问题。所有的技术性内容都不是本人原创，只是原作者的解释很多像我这样小白都不懂，我拿来整合解释如何使用而已。看了 rucent 发表的《群晖+aliDDNS解决动态IP访问》，根据说明还是搞不定。突然在评论区里面发现了干货。可以用脚本进行更新。</p>
<p>注：本稿件最初发布在《什么值得买》网。</p>
<p>题记：此文只为我们这些小白提供更直白的解决方法，解决阿里云DDNS访问自己的<a href="https://b.gx86.cn/zb_users/theme/zbpNana/goto/?url=http://pinpai.smzdm.com/2315/">群晖</a>问题。所有的技术性内容都不是本人原创，只是原作者的解释很多像我这样小白都不懂，我拿来整合解释如何使用而已。</p>
<p>看了 rucent 发表的《<a href="https://b.gx86.cn/zb_users/theme/zbpNana/goto/?url=https://post.smzdm.com/p/571595/">群晖+aliDDNS解决动态IP访问</a>》，根据说明还是搞不定。突然在评论区里面发现了干货。有更简单的解决方法“ <a href="https://b.gx86.cn/zb_users/theme/zbpNana/goto/?url=https://zhiyou.smzdm.com/member/1497333417">可爱的排骨</a> ： 我这有自己写的4个(dnspod, qcloud, aliyun, cloudxns) ddns更新脚本, 放到群晖某个<a href="https://b.gx86.cn/zb_users/theme/zbpNana/goto/?url=https://www.smzdm.com/fenlei/wenjianjia/">文件夹</a>里, 直接计划任务里添加就能用, 不需要装python也不需要手工ssh。”</p>
<p><img src="/../images/%E4%B8%8D%E7%94%A8Docker%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%BE%A4%E6%99%96+%E9%98%BF%E9%87%8C%E4%BA%91DDNS%E8%A7%A3%E5%86%B3%E5%8A%A8%E6%80%81IP%E8%AE%BF%E9%97%AE/201901141547476289578493.jpg" alt="不用Docker，实现群晖+阿里云DDNS解决动态IP访问第1张-来时的路"></p>
<p><strong>环境：</strong></p>
<p>有公网非固定IP；</p>
<p>防火墙/<a href="https://b.gx86.cn/zb_users/theme/zbpNana/goto/?url=https://www.smzdm.com/fenlei/luyouqi/">路由器</a>能做端口映射；</p>
<p>有阿里云顶级域名，或者在阿里云做域名解释（我就是腾讯云的域名，搞不定腾讯云的动态解析，就接在阿里云做解析）！</p>
<p><strong>一、有域名</strong>。关于申请域名申请和accesskey申请，请参考rucent 的《<a href="https://b.gx86.cn/zb_users/theme/zbpNana/goto/?url=https://post.smzdm.com/p/571595/">群晖+aliDDNS解决动态IP访问</a>》 的步骤1-3。</p>
<p><strong>二、部署群晖</strong>。</p>
<p>1、下载源文件：<a href="https://b.gx86.cn/zb_users/theme/zbpNana/goto/?url=https://github.com/cuteribs/ribsnetwork/tree/master/ddns">点我</a>（点击进去后，记得是对文件右键另存为，切勿是打开文本复制新建脚本文件，否则会乱码错误），里面有6个文件，其实单单下载 aliyun.sh 即可。</p>
<p>2、上传文件到群晖的某个目录。我的是放在web文件夹下，图中路径为setting/aliddns/aliyun.sh，但实际路径应该是： /volume1/setting/aliddns/aliyun.sh，建议建立独立的文件夹。</p>
<p><img src="/../images/%E4%B8%8D%E7%94%A8Docker%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%BE%A4%E6%99%96+%E9%98%BF%E9%87%8C%E4%BA%91DDNS%E8%A7%A3%E5%86%B3%E5%8A%A8%E6%80%81IP%E8%AE%BF%E9%97%AE/201901141547476289735081.png" alt="#原创新人#不用Docker，实现群晖+阿里云DDNS解决动态IP访问"></p>
<p><img src="/../images/%E4%B8%8D%E7%94%A8Docker%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%BE%A4%E6%99%96+%E9%98%BF%E9%87%8C%E4%BA%91DDNS%E8%A7%A3%E5%86%B3%E5%8A%A8%E6%80%81IP%E8%AE%BF%E9%97%AE/201901141547476289321600.png" alt="#原创新人#不用Docker，实现群晖+阿里云DDNS解决动态IP访问"></p>
<p>3、写执行代码的任务计划。</p>
<p> 在控制面板-任务计划–新增 </p>
<p><img src="/../images/%E4%B8%8D%E7%94%A8Docker%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%BE%A4%E6%99%96+%E9%98%BF%E9%87%8C%E4%BA%91DDNS%E8%A7%A3%E5%86%B3%E5%8A%A8%E6%80%81IP%E8%AE%BF%E9%97%AE/201901141547476290224212.png" alt="#原创新人#不用Docker，实现群晖+阿里云DDNS解决动态IP访问"></p>
<p>填写任务名称随意填。时间频率，根据实际情况吧，5-20分钟都有人用。</p>
<p><img src="/../images/%E4%B8%8D%E7%94%A8Docker%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%BE%A4%E6%99%96+%E9%98%BF%E9%87%8C%E4%BA%91DDNS%E8%A7%A3%E5%86%B3%E5%8A%A8%E6%80%81IP%E8%AE%BF%E9%97%AE/201901141547476290851659.png" alt="#原创新人#不用Docker，实现群晖+阿里云DDNS解决动态IP访问"></p>
<p><strong>关键是任务脚本的填写。格式为 sh aliyun.sh {AccessKeyId} {AccessKeySecret} ex<a href="https://b.gx86.cn/zb_users/theme/zbpNana/goto/?url=http://pinpai.smzdm.com/36085/">ample</a>.com www，要注意空格，每个子域名一行，</strong></p>
<p><img src="/../images/%E4%B8%8D%E7%94%A8Docker%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%BE%A4%E6%99%96+%E9%98%BF%E9%87%8C%E4%BA%91DDNS%E8%A7%A3%E5%86%B3%E5%8A%A8%E6%80%81IP%E8%AE%BF%E9%97%AE/201901141547476290686688.png" alt="#原创新人#不用Docker，实现群晖+阿里云DDNS解决动态IP访问"></p>
<p>此处为隐藏内容，请评论后查看隐藏内容，谢谢！</p>
<p>最终访问域名为s.g<strong>6.cn f.g</strong>6.cn <a href="http://www.g**6.cn/">www.g**6.cn</a> 遗憾的是，测试发现不支持主域名修改，原因不明，但是看代码里面是有@的判断，只是我不懂此类语言，也是大概猜的。 </p>
<p>填好后，保存，在选中刚建立的任务，再点击“运行”一下，就可以在阿里云消息看到结果了。</p>
<p><img src="/../images/%E4%B8%8D%E7%94%A8Docker%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%BE%A4%E6%99%96+%E9%98%BF%E9%87%8C%E4%BA%91DDNS%E8%A7%A3%E5%86%B3%E5%8A%A8%E6%80%81IP%E8%AE%BF%E9%97%AE/201901141547476290823463.png" alt="#原创新人#不用Docker，实现群晖+阿里云DDNS解决动态IP访问"></p>
<p>后记：原作者的<a href="https://b.gx86.cn/zb_users/theme/zbpNana/goto/?url=https://github.com/cuteribs/ribsnetwork/blob/master/ddns/qcloud.sh">qcloud.sh</a>，经后期测试，腾讯云API（DDNS）也是可以使用的，而且还支持主域名@的修改，KEY生成的地址：<a href="https://b.gx86.cn/zb_users/theme/zbpNana/goto/?url=https://console.cloud.tencent.com/cam/capi">点我</a>。 </p>
<p>本人也转用qcloud，如下图。</p>
<p><img src="/../images/%E4%B8%8D%E7%94%A8Docker%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%BE%A4%E6%99%96+%E9%98%BF%E9%87%8C%E4%BA%91DDNS%E8%A7%A3%E5%86%B3%E5%8A%A8%E6%80%81IP%E8%AE%BF%E9%97%AE/201901141547476290352345.png" alt="#原创新人#不用Docker，实现群晖+阿里云DDNS解决动态IP访问"></p>
]]></content>
      <categories>
        <category>ddns</category>
      </categories>
      <tags>
        <tag>ddns</tag>
      </tags>
  </entry>
  <entry>
    <title>主元分析（PCA）在计算机图形学中的应用</title>
    <url>/post/146ab2c6.html</url>
    <content><![CDATA[<p>本文首先简要介绍主元分析，然后侧重于举例说明主元分析在计算机图形学中的应用，最后给出主元分析的计算步骤与其作用于三维数据的相应代码。</p>
<h5 id="一-简介"><a href="#一-简介" class="headerlink" title="一. 简介"></a>一. 简介</h5><p>  主元分析，即Principal Component Analysis，简称PCA，是一种对数据进行分析的技术。如其名字所述，它的作用是分析数据分布的主要元素/结构。主元分析会由主到次找到数据的分布方向，通过舍去那些次要的分布方向，它可以用于去除噪声、数据降维等。其计算简单，在多个领域有着广泛的应用。</p>
<p>  以二维平面数据可以形象地说明主元分析。如图 1所示，给定XA、YA坐标系下的一些2维数据点（图中圆圈），我们希望找到方向轴Xp、Yp，其中Xp代表了数据的主要分布方向（主元轴），当Yp方向的变化很小时，我们可以认为Yp方向的变化为噪声所产生，因此可以去掉Yp这一维。</p>
<p><img src="/../images/%E4%B8%BB%E5%85%83%E5%88%86%E6%9E%90%EF%BC%88PCA%EF%BC%89%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/201101052003595514.gif" alt="img"></p>
<p>图 1 主元分析示意图</p>
<p>  设图1中原来的有一个数据P为（3.05, 2.95），即</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/ArenAK/201101/201101052003598479.gif"><img src="/../images/%E4%B8%BB%E5%85%83%E5%88%86%E6%9E%90%EF%BC%88PCA%EF%BC%89%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/201101052004001445.gif" alt="CodeCogsEqn (10)"></a></p>
<p>  主元分析获得主元轴Xp、Yp后，P可以表示为</p>
<p><a href="http://images.cnblogs.com/cnblogs_com/ArenAK/201101/201101052004014410.gif"><img src="/../images/%E4%B8%BB%E5%85%83%E5%88%86%E6%9E%90%EF%BC%88PCA%EF%BC%89%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/201101052004025740.gif" alt="CodeCogsEqn (11)"></a>   此时P仍为2维数据，但是因为Xp轴的存在，只用一个坐标4.184表示就可以了。</p>
<p>  教程“A tutorial on Principal Components Analysis, Lindsay I Smith”给出了十分浅显易懂的主元分析推理，你可以在本文附件中获得此教程，同时本文附件中的代码实现了该教程的方法（教程中的代码仅限于对三维数据的分析）。</p>
<h5 id="二-主元分析在图形学中的应用"><a href="#二-主元分析在图形学中的应用" class="headerlink" title="二. 主元分析在图形学中的应用"></a>二. 主元分析在图形学中的应用</h5><p>  在此举出本人在计算机图形学领域利用PCA的几个地方:</p>
<ol>
<li>通过降维找出一堆顶点数据的分布特征（或者说模式pattern）：分析网格数据（如对人物的网格进行分析从而发现其骨架拓扑）时，有时会得到一堆散乱分布在关节附近的顶点数据，利用主元分析对这些散乱的顶点进行降维，如从3维降到2维，则可以发现这些顶点数据的分布特征。<br>如图 2所示，图 2a在3ds Max中以Top、Front、Left、Perspective视角显示了原数据，图 2b中的蓝色线条表示主元分析得到的前两个主元轴，去掉最不重要的一个轴后，点数据表示在两个主元轴下，可看出此时数据更好的呈现出了圆环分布的特征。</li>
</ol>
<ol start="2">
<li>求给定三角形网格的有向包围盒（OBB）。OBB是一种对模型进行视锥裁剪与碰撞检测的有效方式，然而通常网格模型表示在一个与世界坐标系平行的框架中，可以利用主元分析求得模型所在的各个自然轴，如一个斜放着的圆柱其第一个自然轴是有圆柱底面中心指向圆柱顶面中心的方向。求得各个自然轴后，通过各顶点坐标与单位自然轴的点积，即可获得各顶点在自然轴上的分布范围，进而得到OBB。</li>
</ol>
<ol start="3">
<li>对人物动画进行特征提取。例如数据捕捉采集到的人体步行动画通常由不同时刻各个关节（约40~60个）的角度来表示，当数据量很大时，对数据的存储与处理都是一件耗费资源的事情。而普通的步行动作中，当一个人左臂向前摆动时右臂总向后摆动，这就是说这些数据有耦合，从而可以利用主元分析进行特征提取与压缩。由此也可以想象得到主元分析另一个强大的地方：对于一些高维度的数据，很难用三维图形的方式去展现，因此很难观察出其分布特征，而主元分析计算则可以发现这些特征。</li>
</ol>
<p><img src="/../images/%E4%B8%BB%E5%85%83%E5%88%86%E6%9E%90%EF%BC%88PCA%EF%BC%89%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/201101052004054264.jpg" alt="img"><br>a 原始数据<br><img src="/../images/%E4%B8%BB%E5%85%83%E5%88%86%E6%9E%90%EF%BC%88PCA%EF%BC%89%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/201101052004095504.jpg" alt="img"></p>
<p>b 主元分析后的数据</p>
<p>图 2 三维点数据降维</p>
<h5 id="三-主元分析计算步骤与代码"><a href="#三-主元分析计算步骤与代码" class="headerlink" title="三. 主元分析计算步骤与代码"></a>三. 主元分析计算步骤与代码</h5><p>  那么如何进行主元分析呢，教程“A tutorial on Principal Components Analysis》，Lindsay I Smith”已经给出了近乎于完美的讲解，在此，本人列出其计算步骤（以m维数据为例）：</p>
<ol>
<li><p>获取数据<a href="http://images.cnblogs.com/cnblogs_com/ArenAK/201101/201101052004118686.gif"><img src="/../images/%E4%B8%BB%E5%85%83%E5%88%86%E6%9E%90%EF%BC%88PCA%EF%BC%89%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/201101052004122175.gif" alt="CodeCogsEqn (1)"></a> （每一个数据为一个m维列向量）</p>
</li>
<li><p>求出数据平均值<a href="http://images.cnblogs.com/cnblogs_com/ArenAK/201101/201101052004122665.gif"><img src="/../images/%E4%B8%BB%E5%85%83%E5%88%86%E6%9E%90%EF%BC%88PCA%EF%BC%89%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/201101052004133156.gif" alt="CodeCogsEqn (2)"></a> ，并用原数据减去均值得到<a href="http://images.cnblogs.com/cnblogs_com/ArenAK/201101/201101052004148912.gif"><img src="/../images/%E4%B8%BB%E5%85%83%E5%88%86%E6%9E%90%EF%BC%88PCA%EF%BC%89%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/201101052004154320.gif" alt="CodeCogsEqn (3)"></a></p>
</li>
<li><p>计算协方差矩阵<a href="http://images.cnblogs.com/cnblogs_com/ArenAK/201101/201101052004164810.gif"><img src="/../images/%E4%B8%BB%E5%85%83%E5%88%86%E6%9E%90%EF%BC%88PCA%EF%BC%89%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/201101052004165301.gif" alt="CodeCogsEqn (4)"></a></p>
</li>
<li><p>计算协方差矩阵的特征值<a href="http://images.cnblogs.com/cnblogs_com/ArenAK/201101/201101052004172203.gif"><img src="/../images/%E4%B8%BB%E5%85%83%E5%88%86%E6%9E%90%EF%BC%88PCA%EF%BC%89%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/201101052004172693.gif" alt="CodeCogsEqn (5)"></a> 与特征向量<a href="http://images.cnblogs.com/cnblogs_com/ArenAK/201101/201101052004187959.gif"><img src="/../images/%E4%B8%BB%E5%85%83%E5%88%86%E6%9E%90%EF%BC%88PCA%EF%BC%89%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/2011010520041886.gif" alt="CodeCogsEqn (6)"></a> （特征值与特征向量成对出现）。</p>
</li>
<li><p>由大到小依次排列特征值得<a href="http://images.cnblogs.com/cnblogs_com/ArenAK/201101/201101052004199954.gif"><img src="/../images/%E4%B8%BB%E5%85%83%E5%88%86%E6%9E%90%EF%BC%88PCA%EF%BC%89%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/201101052004205220.gif" alt="CodeCogsEqn (7)"></a> ，对应特征向量为<a href="http://images.cnblogs.com/cnblogs_com/ArenAK/201101/201101052004207347.gif"><img src="/../images/%E4%B8%BB%E5%85%83%E5%88%86%E6%9E%90%EF%BC%88PCA%EF%BC%89%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/201101052004212613.gif" alt="CodeCogsEqn (8)"></a> 。特征向量代表了原数据的分布方向，其对应的特征值越大，则该向量越重要（即为主元）；其对应的特征值越小，则该向量越次要。</p>
<p>此时即可根据特征值的大小来决定取舍了。如一个特征值为10，而另一个特征值为0.1，在说明这两个分布差了100倍，通常我们会舍弃特征值为0.1的方向的那个维度，因此就可以对数据进行降维表示了。例如我们取了前k个特征值，则就可以将数据表示在以前K个特征向量为基轴的坐标系下了。</p>
</li>
</ol>
<p>  你可以在<a href="http://www.cnblogs.com/ArenAK/archive/2010/12/19/1910404.html#PCAcode">这里</a>下载本文C++代码。</p>
<p>  代码以SampleData.txt中的三维数据点作为输入，程序的输出存放在Results目录，</p>
<p>  输出的目录中包括3个文件：</p>
<ol>
<li><p>PCAResult.txt 存放经主元分析后在主元轴坐标系下的数据坐标。</p>
</li>
<li><p>DisplaySamples.ms 为3ds Max脚本文件，用3ds Max打开后可看到SampleData.txt表示的数据点。</p>
</li>
<li><p>DisplayResult.ms 为3ds Max脚本文件，用3ds Max打开后可看到将原3维数据在主元轴坐标系下降到2维后的数据点；同时该文件还显示了主元分析得到的前两个主元轴。</p>
<p>更加通用的pca代码（Matlab代码）在<a href="http://files.cnblogs.com/ArenAK/matlabpca.zip">这里</a>下载。</p>
</li>
</ol>
<p>–ArenAK–</p>
]]></content>
      <categories>
        <category>图像处理</category>
      </categories>
      <tags>
        <tag>大数据,图形学,PCA</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么交叉熵能作为损失函数及其弥补了平方差损失什么缺陷</title>
    <url>/post/7c5ef9ec.html</url>
    <content><![CDATA[<p>在很多二分类问题中，特别是正负样本不均衡的分类问题中，常使用交叉熵作为loss对模型的参数求梯度进行更新，那为何交叉熵能作为损失函数呢，我也是带着这个问题去找解析的。</p>
<p>以下仅为个人理解，如有不当地方，请读到的看客能指出。</p>
<p>我们都知道，各种机器学习模型都是模拟输入的分布，使得模型输出的分布尽量与训练数据一致，最直观的就是MSE（均方误差，Mean squared deviation), 直接就是输出与输入的差值平方，尽量保证输入与输出相同。这种loss我们都能理解。</p>
<p>以下按照（1）熵的定义（2）交叉熵的定义 (3) 交叉熵的由来 （4）交叉熵作为loss的优势 作为主线来一步步理清思路。</p>
<p>（1）熵的定义 各种熵的名称均来自信息论领域，这方面的背景就不介绍了，随便就能找到很多。</p>
<p>根据维基的定义，熵的定义如下：熵是接收的每条消息中包含的信息的平均量，又被称为信息熵、信源熵、平均自信息量。直白地解释就是信息中含的信息量的大小，其定义如下：</p>
<p><img src="/../images/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BA%A4%E5%8F%89%E7%86%B5%E8%83%BD%E4%BD%9C%E4%B8%BA%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E5%8F%8A%E5%85%B6%E5%BC%A5%E8%A1%A5%E4%BA%86%E5%B9%B3%E6%96%B9%E5%B7%AE%E6%8D%9F%E5%A4%B1%E4%BB%80%E4%B9%88%E7%BC%BA%E9%99%B7/20170827110906555" alt="img"></p>
<p>其曲线如下所示：</p>
<p><img src="/../images/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BA%A4%E5%8F%89%E7%86%B5%E8%83%BD%E4%BD%9C%E4%B8%BA%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E5%8F%8A%E5%85%B6%E5%BC%A5%E8%A1%A5%E4%BA%86%E5%B9%B3%E6%96%B9%E5%B7%AE%E6%8D%9F%E5%A4%B1%E4%BB%80%E4%B9%88%E7%BC%BA%E9%99%B7/20170827111213829" alt="img"></p>
<p>可以看出，一个事件的发生的概率离0.5越近，其熵就越大，概率为0或1就是确定性事件，不能为我们带信息量。也可以看作是一件事我们越难猜测是否会发生，它的信息熵就越大</p>
<p>（2）交叉熵的定义 交叉熵的公式定义如下：</p>
<p><img src="/../images/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BA%A4%E5%8F%89%E7%86%B5%E8%83%BD%E4%BD%9C%E4%B8%BA%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E5%8F%8A%E5%85%B6%E5%BC%A5%E8%A1%A5%E4%BA%86%E5%B9%B3%E6%96%B9%E5%B7%AE%E6%8D%9F%E5%A4%B1%E4%BB%80%E4%B9%88%E7%BC%BA%E9%99%B7/20170827112109611" alt="img"></p>
<p>其中p(x)在机器学习中为样本label，q(x)为模型的预估，分别代表训练样本和模型的分布，如果只是根据这个公式，是看不出来什么的，暂且放下，继续往下看</p>
<p>（3）交叉熵的由来 将上面的交叉熵的公式减去一个固定的值（H(p), 训练样本的熵，训练样本定，该值即为固定值），即训练样本分布p(x)的熵，可得如下：</p>
<p><img src="/../images/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BA%A4%E5%8F%89%E7%86%B5%E8%83%BD%E4%BD%9C%E4%B8%BA%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E5%8F%8A%E5%85%B6%E5%BC%A5%E8%A1%A5%E4%BA%86%E5%B9%B3%E6%96%B9%E5%B7%AE%E6%8D%9F%E5%A4%B1%E4%BB%80%E4%B9%88%E7%BC%BA%E9%99%B7/20170827181853299" alt="img"></p>
<p>最后得到的为相对熵或KL散度(Kullback-Leibler divergence), 亦可称为KL距离，是用于评判两个分布的差异程序，看到这里，应该明白为何交叉熵为何能作为loss了。即可以使得模型输出的分布尽量与训练样本的分布一致</p>
<p>（4）交叉熵作为loss的优势 模型训练的loss有很多，交叉熵作为loss有很多应用场景，其最大的好处我认为是可以避免梯度消散，因为一般我们使用平方差作为损失函数，（<img src="/../images/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BA%A4%E5%8F%89%E7%86%B5%E8%83%BD%E4%BD%9C%E4%B8%BA%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E5%8F%8A%E5%85%B6%E5%BC%A5%E8%A1%A5%E4%BA%86%E5%B9%B3%E6%96%B9%E5%B7%AE%E6%8D%9F%E5%A4%B1%E4%BB%80%E4%B9%88%E7%BC%BA%E9%99%B7/gif.latex" alt="\hat{y}">-y）^2作为损失函数，这种损失函数在进行梯度下降计算的时候会出现梯度弥散，导致学习速率下降，使用交叉熵作为损失函数可以很好的解决这个问题。</p>
<p>那我们再讨论一下，平方差为什么会梯度弥散，而交叉熵不会：</p>
<p><img src="/../images/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BA%A4%E5%8F%89%E7%86%B5%E8%83%BD%E4%BD%9C%E4%B8%BA%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E5%8F%8A%E5%85%B6%E5%BC%A5%E8%A1%A5%E4%BA%86%E5%B9%B3%E6%96%B9%E5%B7%AE%E6%8D%9F%E5%A4%B1%E4%BB%80%E4%B9%88%E7%BC%BA%E9%99%B7/20180924084311715" alt="img"></p>
<p>因为y求导为y(y-1)所以趋近于0或1时上述倒数趋近于零，梯度弥散。</p>
<p><img src="/../images/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BA%A4%E5%8F%89%E7%86%B5%E8%83%BD%E4%BD%9C%E4%B8%BA%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E5%8F%8A%E5%85%B6%E5%BC%A5%E8%A1%A5%E4%BA%86%E5%B9%B3%E6%96%B9%E5%B7%AE%E6%8D%9F%E5%A4%B1%E4%BB%80%E4%B9%88%E7%BC%BA%E9%99%B7/20180924084812961" alt="img"></p>
<p>与sigmoid导数无关，从而避免了梯度弥散。</p>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>-人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>交叉熵</title>
    <url>/post/ea101373.html</url>
    <content><![CDATA[<p>我们简单介绍了相对熵的概念，知道了相对熵可以用来表达真实事件和理论拟合出来的事件之间的差异。</p>
<p>相对熵的公式如下：<br>$$<br>D _ { K L } ( p | q ) = \sum _ { i = 1 } ^ { N }p \left( x _ { i } \right)\log p \left( x _ { i } \right)-\sum _ { i = 1 } ^ { N }p \left( x _ { i } \right)\log q \left( x _ { i } \right)<br>$$<br>可以看到前面一项是真实事件的信息熵取反，我们可以直接写成<br>$$<br>D _ { K L } ( p | q ) = -H(p)-\sum _ { i = 1 } ^ { N }p \left( x _ { i } \right)\log q \left( x _ { i } \right)<br>$$<br>在神经网络训练中，我们要训练的是<br>$$<br>q ( x _ { i })<br>$$<br>使得其与真实事件的分布越接近越好，也就是说在神经网络的训练中，相对熵会变的部分只有后面的部分，我们希望它越小越好，而前面的那部分是不变的。因此我们可以把后面的部分单独取出来，那部分就是交叉熵，写作：<br>$$<br>H(p，q) = -\sum _ { i = 1 } ^ { N }p \left( x _ { i } \right)\log q \left( x _ { i } \right)<br>$$<br>这就是我们经常在神经网络训练中看到的交叉熵损失函数。如果要了解它的内涵，要回头去看相对熵。</p>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>-人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>人工智能神经网络四种算法</title>
    <url>/post/cbd530a7.html</url>
    <content><![CDATA[<p>人工神经网络的许多算法已在智能信息处理系统中获得广泛采用，尤为突出是是以下4种算法：ART网络、LVQ网络、Kohonen网络Hopfield网络，下面就具体介绍一下这这四种算法：</p>
<p><strong>1．自适应谐振理论（ART）网络</strong></p>
<p>自适应谐振理论（ART）网络具有不同的方案。一个ART-1网络含有两层一个输入层和一个输出层。这两层完全互连，该连接沿着正向（自底向上）和反馈（自顶向下）两个方向进行。</p>
<p>当ART-1网络在工作时，其训练是连续进行的，且包括下列算法步骤：</p>
<p>（1）对于所有输出神经元，如果一个输出神经元的全部警戒权值均置为1，则称为独立神经元，因为它不被指定表示任何模式类型。</p>
<p>（2）给出一个新的输入模式x。</p>
<p>（3）使所有的输出神经元能够参加激发竞争。</p>
<p>（4）从竞争神经元中找到获胜的输出神经元，即这个神经元的x·W值为最大；在开始训练时或不存在更好的输出神经元时，优胜神经元可能是个独立神经元。</p>
<p>（5）检查该输入模式x是否与获胜神经元的警戒矢量V足够相似。</p>
<p>（6）如果r≥p，即存在谐振，则转向步骤（7）；否则，使获胜神经元暂时无力进一步竞争，并转向步骤（4），重复这一过程直至不存在更多的有能力的神经元为止。</p>
<p><img src="/../images/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%9B%E7%A7%8D%E7%AE%97%E6%B3%95/u=1076120041,773083672&fm=173&app=49&f=JPEG" alt="img">ART网络</p>
<p><strong>2．学习矢量量化（LVQ）网络</strong></p>
<p>学习矢量量化（LVQ）网络，它由三层神经元组成，即输入转换层、隐含层和输出层。该网络在输入层与隐含层之间为完全连接，而在隐含层与输出层之间为部分连接，每个输出神经元与隐含神经元的不同组相连接。</p>
<p>最简单的LVQ训练步骤如下：</p>
<p>（1）预置参考矢量初始权值。</p>
<p>（2）供给网络一个训练输入模式。</p>
<p>（3）计算输人模式与每个参考矢量间的Euclidean距离。</p>
<p>（4）更新最接近输入模式的参考矢量（即获胜隐含神经元的参考矢量）的权值。如果获胜隐含神经元以输入模式一样的类属于连接至输出神经元的缓冲器，那么参考矢量应更接近输入模式。否则，参考矢量就离开输人模式。</p>
<p>（5）转至步骤（2），以某个新的训练输入模式重复本过程，直至全部训练模式被正确地分类或者满足某个终止准则为止。</p>
<p><img src="/../images/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%9B%E7%A7%8D%E7%AE%97%E6%B3%95/u=81949266,355555348&fm=173&app=49&f=JPEG" alt="img">LVQ网络</p>
<p><strong>3．Kohonen网络</strong></p>
<p>Kohonen网络或自组织特征映射网络含有两层，一个输入缓冲层用于接收输入模式，另一个为输出层，输出层的神经元一般按正则二维阵列排列，每个输出神经元连接至所有输入神经元。连接权值形成与已知输出神经元相连的参考矢量的分量。</p>
<p>训练一个Kohonen网络包含下列步骤：</p>
<p>（1）对所有输出神经元的参考矢量预置小的随机初值。</p>
<p>（2）供给网络一个训练输入模式。</p>
<p>（3）确定获胜的输出神经元，即参考矢量最接近输入模式的神经元。参考矢量与输入矢量间的Euclidean距离通常被用作距离测量。</p>
<p>（4）更新获胜神经元的参考矢量及其近邻参考矢量。这些参考矢量（被引至）更接近输入矢量。对于获胜参考矢量，其调整是最大的，而对于离得更远的神经元，减少调整个神经元邻域的大小随着训练的进行而相对减小，到训练结束，只有获胜神经元的参考矢量被调整。</p>
<p><img src="/../images/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%9B%E7%A7%8D%E7%AE%97%E6%B3%95/u=3981122705,166961606&fm=173&app=49&f=JPEG" alt="img">Kohonen网络</p>
<p><strong>4．Hopfield网络</strong></p>
<p>Hopfield网络是一种典型的递归网络，这种网络通常只接受二进制输入（0或1）以及双极输入（+1或-1）。它含有一个单层神经元，每个神经元与所有其他神经元连接，形成递归结构。</p>
<p><img src="/../images/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%9B%E7%A7%8D%E7%AE%97%E6%B3%95/20180112110954464" alt="img"></p>
<p>上图为Hopfield神经网络结构图。</p>
<p>   首先，网络结构上，Hopfield神经网络是一种单层互相全连接的反馈型神经网络。每个神经元既是输入也是输出，网络中的每一个神经元都将自己的输出通过连接权传送给所有其它神经元，同时又都接收所有其它神经元传递过来的信息。即：网络中的神经元在t时刻的输出状态实际上间接地与自己t-1时刻的输出状态有关。神经元之间互连接，所以得到的权重矩阵将是对称矩阵。</p>
<p>​    同时，Hopfield神经网络成功引入能量函数的概念，使网络运行地稳定性判断有了可靠依据。基本的Hopfield神经网络是一个由非线性元件构成的全连接型单层递归系统。其状态变化可以用差分方程来表示。递归型网络的一个重要特点就是它具有稳定状态‘当网络达到稳定状态的时候，也就是它的能量函数达到最小的时候。这里的能量函数不是物理意义上的能量函数，而是在表达形式上与物理意义上的能量概念一致，即它表征网络状态的变化趋势，并可以依据Hopfield网络模型的工作运行规则不断地进行状态变化，最终能够到达具有某个极小值的目标函数。网络收敛就是指能量函数达到极小值。</p>
<p>​    如果把一个最优化在着递归信号，网络的状态是随时间的变化而变化的，其运动轨迹必然存在着稳定性的问题。这就是递归网络与前向网络在网络性能分析上最大的区别之一在使用递归网络时，必须对其稳定性进行专门的分析与讨论，合理选择网络的参数变化范围，才能确保递归网络的正常工作。</p>
<p>​    Hopfield神经网络模型有离散型和连续性两种，离散型适用于联想记忆，连续性适合处理优化问题。</p>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>-人工智能 -神经网络 -算法</tag>
      </tags>
  </entry>
  <entry>
    <title>人類學雜記——24. 中國人的超級祖先</title>
    <url>/post/13526.html</url>
    <content><![CDATA[<p>人類學雜記——24. 中國人的超級祖先</p>
<p> <img src="/../images/%E4%BA%BA%E9%A1%9E%E5%AD%B8%E9%9B%9C%E8%A8%98%E2%80%94%E2%80%9424%E4%B8%AD%E5%9C%8B%E4%BA%BA%E7%9A%84%E8%B6%85%E7%B4%9A%E7%A5%96%E5%85%88/clip_image002.png" alt="http://simg.sinajs.cn/blog7style/images/common/sg_trans.gif"> (2013-10-18 12:53:53)</p>
<p>（溫馨提示：簡化字版本見後。）</p>
<p>2013年10月15日，我在arXiv文章數據庫掛出了一篇文章（<a href="http://arxiv.org/abs/1310.3897">http://arxiv.org/abs/1310.3897</a> ，帶附件的下載地址見<a href="http://vdisk.weibo.com/s/qGPNPvCSIf0t">http://vdisk.weibo.com/s/qGPNPvCSIf0t</a> ），題目是«Y Chromosomes of 40% Chinese Are Descendants of Three Neolithic Super-grandfathers»，即《40%的中國人的Y染色體來自三個新石器時代的超級祖先》，基本內容如下：首先是對110個東亞樣本做Y染色體測序，得到質量可以接受的序列共78個。從裏面找到了4000多個新的SNP位點，命名以F（復旦）打頭。因爲我們捕獲來測序的範圍是隨機的（取的Y染色體上沒有重複的約4 Mbp的很多不連續片段的集合，與已知支系信息無關），範圍又比較大，所以可以畫一棵明確且沒有偏向的演化樹（因爲絕大多數位點都是沒有回復突變的），然後就能按傳統的分子鐘方法計算時閒了。</p>
<p>計算相對時閒只要數每支的突變個數再相比就行了（因爲有波動，具體時閒還是按最大似然法綜合算的），但絕對時閒，就是說平均一個突變到底需要多少年，是需要標定的。這裏我們先只用了一個1×10-9/年/鹼基的突變率。文裏用SNP算的相對時閒能比用STR算出來的準很多（文中說了，準確度的誤差範圍和用於計算時閒的SNP數開根号成反比）。標定的絕對年代（即SNP的絕對突變率）也許還有些誤差，但至少結果也在以往各種方法估出來的範圍之中（以往算出走出非洲年齡最小的不到4万年，最大的8万年，我們算出5.4万）。</p>
<p><img src="/../images/%E4%BA%BA%E9%A1%9E%E5%AD%B8%E9%9B%9C%E8%A8%98%E2%80%94%E2%80%9424%E4%B8%AD%E5%9C%8B%E4%BA%BA%E7%9A%84%E8%B6%85%E7%B4%9A%E7%A5%96%E5%85%88/clip_image004.jpg" alt="img"></p>
<p> <img src="/../images/%E4%BA%BA%E9%A1%9E%E5%AD%B8%E9%9B%9C%E8%A8%98%E2%80%94%E2%80%9424%E4%B8%AD%E5%9C%8B%E4%BA%BA%E7%9A%84%E8%B6%85%E7%B4%9A%E7%A5%96%E5%85%88/clip_image006.jpg" alt="img"></p>
<p>文章的結論</p>
<p>文章最大的亮點有兩個，一個是<strong>能相對以往準確得多地算出分支時閒，至少是相對時閒</strong>，另一個是<strong>發現**</strong>O3**<strong>下面的三個大的星狀擴張</strong>（下面具體談到）。以往用Y-SNP不能算時閒是因爲實驗是特地挑的已知SNP來做的，數量少，且本身帶有偏向性。而本實驗是不帶任何人羣方面的預設來找的SNP，是不帶偏向性的。線粒體全測能算時閒也是同樣道理。當然因爲Y染色體位點多，平均每100年左右就能有一個突變（用全序，即10Mbp左右的範圍），而線粒體平均要2000多年纔能在全長上有一次突變，因此Y染色體算出的時閒精度能比線粒體好很多。</p>
<p>支系方面比較重要的結論有以下幾點：</p>
<p>\1. 走出非洲的C、DE、F三大支的分支年代在5万多年。雖然C和F在一起而DE是早分出的，而因爲E主體的分佈是在非洲，本來有人提出CF和D可能是兩批分別走出非洲的，但我們發現CF共有的SNP只有3個，對應大概不到1000年，這樣C, DE和F仍是準三叉，根據奧卡姆剔刀原理，還是M168+整體遷出非洲然後E那支再回流非洲的可能性稍大一些。</p>
<p>\2. F支經歷過極強的瓶頸，以致於和C分開後過了差不多2万年纔再一次產生下游分支G, H, IJ, K，K下面的分化也很快（NO, P和LT目前來看也是個準三叉，M和S因爲沒有樣本，現在拓撲關係還不明朗），也就是說，F支下面按字母分的單倍羣從樹幹上分出的時閒大體都在3.6 – 2.4万年前之閒，尤其3.6 – 3万年前是一個快速擴張的時期。O3-M122與O1-M119、O2-M268分開後不久，O1、O2再分開。而下游的分化總的次序是O2最早，其次O3，而O1最晚（不過可能和這次測序的O1樣本多數取自華東有關，多取一些南方少數民族的O1樣本可能會有一些更早的分支。）</p>
<p>\3. O系的地理佈散，尤其是O3a-M324（占中國人口的一半以上），主要發生在1.9 – 1万年前，即末次冰盛期（2.3 – 1.8万年前）之後的舊石器時代。這段時閒全球氣候逐漸回暖，海平面從現在海面以下上百米一直升到和目前海平面接近的高度，人類的可活動範圍大大擴展，技術上也有了一些創新，比如陶器的發明，農業也出現了萌芽。</p>
<p>\4. 在樹上觀察到，<strong>5000**</strong>到**<strong>6000**</strong>多年前左右，在中國出現了三個超級祖先，一個在**<strong>M117**</strong>下，一個在**<strong>M134**</strong>的另一個分支，即**<strong>F444**</strong>下，還有一個在**<strong>002611**</strong>的下游**<strong>F11**</strong>下<strong>。這三個超級祖先出現的年代很接近（次序按不同方法算出來有所區別）。</strong>我把他們分別稱爲**<strong>Oα, Oβ**</strong>和**<strong>Oγ**</strong>，算作對現有單倍羣命名系統的一個改進<strong>。</strong>這三個大約**<strong>6000**</strong>年前的人的後代構成了現在漢族人羣的**<strong>40%**</strong>以上<strong>。之所以很特別（因爲一個人羣往上推總會推到某個時候有個祖先的後代占了一大半），是因爲在</strong>這三個擴張以前的**<strong>Y**</strong>染色體樹的所有分支，都是二叉，而這三個擴張是星狀擴張**，即突然從一個人演化出難以分出先後（這篇文章的測序精度是平均250年一個突變）的5 – 7個支系，而且這5 – 7支是都有後代一直延續到現在的。長支或二叉當中的那些古人當然不是說那些人都沒有兄弟，而是說無數輩的兄弟都沒能傳下男性後代，當時的人口擴張也相對緩慢，只有這幾支幸運兒的後代終於活到了現代。</p>
<p>\5. C3-M217是占中國10%左右的大支系，很清楚分爲南北兩支，2.6万年前分開，比O3和O1’2分開還略早。結合STR結果來看，漢族的C3基本都是南支，且存在一個6000多年前的擴張（可能比O3下的三大簇略早）。漢族和北方民族都常見的C3d-M407屬於南支那個擴張下游的。而星簇（star cluster，以前Zerjal et al.說是成吉思汗生出來的）、448-del兩個重要支系（應該也有C3c-M48）屬於北支。C3的北支基本在漢族裏不存在。關於C單倍羣的更多細節，我的同事蘭海應該會發表一篇paper來說明。</p>
<p>\6. N單倍羣的最早分化也在1.6万年前。也分爲南北兩支。結合STR來看，原先的N1a-M128和N1c-M46（應該也有N1b-P43）都是北支的。關於N的更多細節，我也會另外寫一篇paper來講。</p>
<p>文章裏沒寫的（因爲文章本來要投大雜誌的，因篇幅有限或說了會被審稿人挑刺所以沒放在文章裏，或者被別人搶去的，或是證據不足的猜想）：</p>
<p>\7. 時閒估計的不精確性。因爲原先文章裏的用STR計算突變率有一些問題，在後來投的稿裏這部分被砍掉了。但相對的STR時閒計算是沒有問題的。這裏給出兩張散點圖，比較相同的兩個樣本用17-STR得出的時閒和直接數相差的SNP數的對比。前一張圖是所有樣本閒的兩兩比較。後一張圖是Oγ星狀擴張中每對共祖於星點的兩個樣本的STR計算時閒和相差的SNP數的對比。因爲是同一個星，理論上兩個樣本的共祖時閒幾乎相同。可見<strong>SNP**</strong>算出的時閒精度遠好於**<strong>STR**</strong>算出的，而**<strong>STR**</strong>得到的結果經常可能差出一個數量級以上**。或者說，兩個樣本STR很遠的可以排除近期的共祖，但STR近的，實際共祖時閒可能很晚但也不排除實際很早但是因爲巧合而STR接近了。經常有人問，我們兩個人STR差4個點，到底能差多少年，我說100年到1万年都沒準，這確實不是搪塞。</p>
<p><img src="/../images/%E4%BA%BA%E9%A1%9E%E5%AD%B8%E9%9B%9C%E8%A8%98%E2%80%94%E2%80%9424%E4%B8%AD%E5%9C%8B%E4%BA%BA%E7%9A%84%E8%B6%85%E7%B4%9A%E7%A5%96%E5%85%88/clip_image008.jpg" alt="img"></p>
<p><img src="/../images/%E4%BA%BA%E9%A1%9E%E5%AD%B8%E9%9B%9C%E8%A8%98%E2%80%94%E2%80%9424%E4%B8%AD%E5%9C%8B%E4%BA%BA%E7%9A%84%E8%B6%85%E7%B4%9A%E7%A5%96%E5%85%88/clip_image010.jpg" alt="img"></p>
<p>\8. 這三個超級祖先到底是什麼人。首先，這個擴張年代正好在五六千年前，屬新石器時代晚期，對應的文化包括仰韶時代晚期和大汶口文化晚期等（我知道有人認爲這三個擴張不是發生於黃河流域的，留以後發現更多證據，尤其是古DNA證據來回答了。）這個時代我知道的有兩個大的變革，一個是農業的大發展，穀類從採集、狩獵的輔助食物變成了食物的主體部分，人們的食物開始嚴重依賴農業，同時聚落的分佈密度大大增加，說明人口增加。同時又有一個社會結構的變化，墓葬從羣體葬逐漸發展出了單人葬和對偶葬，說明社會從母系社會變成了父系社會。因此，對於這三個超級祖先，有兩種解釋：其一，他們是最早的集約化農民，因爲生產力（穀物和人口的）大幅發展，成了超級祖先，因此<strong>稱**</strong>Oα, Oβ**<strong>和**</strong>Oγ**<strong>分別爲**</strong>“**<strong>農民甲**</strong>”**<strong>、**</strong>“**<strong>農民乙**</strong>”**<strong>和**</strong>“**<strong>農民丙**</strong>”<strong>。有人不相信這種解釋，認爲他們肯定是很偉大的部落首領，有巨大的權力而能占有很多女人，建議用三皇來稱呼，我按照計算出的時閒，分別把</strong>Oγ, Oβ**<strong>和**</strong>Oα**<strong>分別稱作**</strong>“**<strong>天皇**</strong>”**<strong>、**</strong>“**<strong>地皇**</strong>”**<strong>和**</strong>“**<strong>泰皇**</strong>”**。（還有建議把他們稱作“炎帝”、“黃帝”和“蚩尤”的，因爲時閒不符合，而且因爲可能有歷史原型而對應支系可能被證僞，再加上“蚩尤”從民族學上看大概對應苗瑤的O3a2b-M7而不屬這三大簇，所以我覺得還是用純神化的三皇更合適一些。）當然用三皇命名有些人會覺得神棍一些，甯可用“農民”，不過其實把人類父系共祖稱作“Y染色體亞當”同樣神棍。我覺得反正這三簇是客觀存在的，短時閒也不容易證明到底他們是什麼樣的人物，那稱作農民還是三皇就看個人信仰了。</p>
<p>\9. 除了三個O3下面的超級祖先，另有兩支也需要關注，一個是C3下面F1144的下游擴張，即南支，擴張時閒可能比O3的三大簇略早，另一個是O1a1下面F78的下游擴張，年代可能只有4000年不到。這兩支的人口大概也各占了漢族的10%上下，但因爲高通量測序時沒有足夠的樣本或有的樣本測序質量不好，尚未能表現出星狀擴張，但我相信如果能擴大測序樣本的數目，也是能找到類似星簇的擴張的。（我還暫時沒有給這兩支起名字。）這樣，把這兩支也加上，<strong>這五個新石器祖先的後代就能占到漢族及中國人**</strong>60%<strong>**的比例</strong>了。</p>
<p><img src="/../images/%E4%BA%BA%E9%A1%9E%E5%AD%B8%E9%9B%9C%E8%A8%98%E2%80%94%E2%80%9424%E4%B8%AD%E5%9C%8B%E4%BA%BA%E7%9A%84%E8%B6%85%E7%B4%9A%E7%A5%96%E5%85%88/clip_image012.png" alt="img"><img src="/../images/%E4%BA%BA%E9%A1%9E%E5%AD%B8%E9%9B%9C%E8%A8%98%E2%80%94%E2%80%9424%E4%B8%AD%E5%9C%8B%E4%BA%BA%E7%9A%84%E8%B6%85%E7%B4%9A%E7%A5%96%E5%85%88/clip_image014.png" alt="img"><img src="/../images/%E4%BA%BA%E9%A1%9E%E5%AD%B8%E9%9B%9C%E8%A8%98%E2%80%94%E2%80%9424%E4%B8%AD%E5%9C%8B%E4%BA%BA%E7%9A%84%E8%B6%85%E7%B4%9A%E7%A5%96%E5%85%88/clip_image016.png" alt="img"><img src="/../images/%E4%BA%BA%E9%A1%9E%E5%AD%B8%E9%9B%9C%E8%A8%98%E2%80%94%E2%80%9424%E4%B8%AD%E5%9C%8B%E4%BA%BA%E7%9A%84%E8%B6%85%E7%B4%9A%E7%A5%96%E5%85%88/clip_image018.png" alt="img"><img src="/../images/%E4%BA%BA%E9%A1%9E%E5%AD%B8%E9%9B%9C%E8%A8%98%E2%80%94%E2%80%9424%E4%B8%AD%E5%9C%8B%E4%BA%BA%E7%9A%84%E8%B6%85%E7%B4%9A%E7%A5%96%E5%85%88/clip_image020.png" alt="img"></p>
<p> （上圖是五支祖先大致的分佈範圍和所占人口比例。不是嚴格計算，漢族之外的支系判斷可能有錯。）</p>
<p>\10. 關於華夏的起源。因爲這篇文章計算了時閒，所以明確了，<strong>漢族（或中華民族）的大多數姓氏的都起源於一個幾千年前叫黃帝的共同父系祖先必然是不可能的</strong>。新石器時代晚期最大的簇（Oα）也不過占漢族父系的16%。不過，這篇文章同樣也說明了，史前不遠的時代，<strong>華夏確實有少數幾個超級祖先，他們短時閒繁殖出了大量的後代，也就是說這些有關共同祖先的傳說確實是有其原型的，只不過其重要程度被誇大了</strong>。</p>
<p>文章發表歷經的坎坷</p>
<p>很多人，包括愛好者和業內人士，都知道我的結果早就出來了，這兩年一直都在催問我文章什麼時候能出來，位點什麼時候能公佈。首先，按照通常的科硏規範，似乎文章沒有經過同行評議，文章沒有發出，是不能對外發佈消息的。其次，文章是實驗室老師辛苦申請基金、多人多年合作做出的結果，隨便公佈數據而沒有相應文章發表是損害實驗室利益的，而今後繼續申請科硏基金、評職稱等等，按目前中國的體制，全看文章的影響因子，且只有一作和通訊作者算數。其他的，至少對於生物學來說，發中文文章不算有效工作，合作作者不算，出書不算，做科普不算，這些只能在有閑的時候做。所以，對於這篇文章，首先只能攷慮發paper，而且雜誌分數越高越好。</p>
<p>這篇文章首次投出是2011年11月，這兩年先後投過Nature, Science, Nature Genetics, Nature Communications, PNAS。有的雜誌是被編輯直接斃掉，還有的雜誌是跟審稿人撦了好幾次皮，先後投過3個版本，歷經9個月，最後被拒掉的。幾次投出之閒還有過好幾次大的內容的刪改，比如突變率的計算方法和SNP-STR對照比較等，還有改文章的着重點等。前一次拒掉和下一次投出之閒改文章經常又要花幾個月。這兩年，好幾篇實驗做得並不如我們的文章登上了Science或Genome Research這樣的雜誌，我們文章的新穎性也越來越差。</p>
<p>最終爲了避免文章中的發現變得一錢不值，我出於促進知識傳播和對我的青春負責的理念，決定還是先把文章公開到arXiv上。這個數據庫是沒有同行評審的，也就是說只有靠讀者來衡量文章的價值。但這上面的文章能被引用。有同行評審的雜誌我也還在投着，就算能發出去，分數也沒多少了。從攷覈體系角度看，這四年的我和同事的工作和花的硏究經費就算餵狗了，我的穩定教职也沒戲了，只能繼續做一個二站的博後。（話說，有時候很明顯從編輯和審稿人打回的意見裏能感覺到對中國或東方人的歧視。這篇文章的作者全都是中國人，復旦大學或者中科院計算生物所的成員。因爲發表時閒拖久了，文章本來的亮點一個個被別人的文章搶了去，也只得把題目從一個全球性的時閒計算改成關於中國人祖先擴張的，導致文章更難發表。如果是關於猶太人或者歐洲人的文章，經常是隨便一點兒數據都能發到高分雜誌。之前曹操後代那篇文章也只投到了日本的Journal of Human Genetics雜誌。）</p>
<p>這期閒我如果做錯了什麼，或者什麼原因造成的文章難以發表，有什麼更好的信息發佈方案，都可以幫忙指出，如果有辦法能同時兼顧知識傳播和實驗室利益，我會很感激的。</p>
<p>===============以下是簡化字版本=================</p>
<p>2013年10月15日，我在arXiv文章数据库挂出了一篇文章（<a href="http://arxiv.org/abs/1310.3897">http://arxiv.org/abs/1310.3897</a> ，带附件的下载地址见<a href="http://vdisk.weibo.com/s/qGPNPvCSIf0t">http://vdisk.weibo.com/s/qGPNPvCSIf0t</a> ），题目是«Y Chromosomes of 40% Chinese Are Descendants of Three Neolithic Super-grandfathers»，即《40%的中国人的Y染色体来自三个新石器时代的超级祖先》，基本内容如下：首先是对110个东亚样本做Y染色体测序，得到质量可以接受的序列共78个。从里面找到了4000多个新的SNP位点，命名以F（复旦）打头。因为我们捕获来测序的范围是随机的（取的Y染色体上没有重复的约4 Mbp的很多不连续片段的集合，与已知支系信息无关），范围又比较大，所以可以画一棵明确且没有偏向的演化树（因为绝大多数位点都是没有回复突变的），然后就能按传统的分子钟方法计算时间了。</p>
<p>计算相对时间只要数每支的突变个数再相比就行了（因为有波动，具体时间还是按最大似然法综合算的），但绝对时间，就是说平均一个突变到底需要多少年，是需要标定的。这里我们先只用了一个1×10-9/年/碱基的突变率。文里用SNP算的相对时间能比用STR算出来的准很多（文中说了，准确度的误差范围和用于计算时间的SNP数开根号成反比）。标定的绝对年代（即SNP的绝对突变率）也许还有些误差，但至少结果也在以往各种方法估出来的范围之中（以往算出走出非洲年龄最小的不到4万年，最大的8万年，我们算出5.4万）。</p>
<p><img src="/../images/%E4%BA%BA%E9%A1%9E%E5%AD%B8%E9%9B%9C%E8%A8%98%E2%80%94%E2%80%9424%E4%B8%AD%E5%9C%8B%E4%BA%BA%E7%9A%84%E8%B6%85%E7%B4%9A%E7%A5%96%E5%85%88/clip_image021.jpg" alt="img"></p>
<p> <img src="/../images/%E4%BA%BA%E9%A1%9E%E5%AD%B8%E9%9B%9C%E8%A8%98%E2%80%94%E2%80%9424%E4%B8%AD%E5%9C%8B%E4%BA%BA%E7%9A%84%E8%B6%85%E7%B4%9A%E7%A5%96%E5%85%88/clip_image022.jpg" alt="img"></p>
<p>文章的结论</p>
<p>文章最大的亮点有两个，一个是<strong>能相对以往准确得多地算出分支时间，至少是相对时间</strong>，另一个是<strong>发现**</strong>O3**<strong>下面的三个大的星状扩张</strong>（下面具体谈到）。以往用Y-SNP不能算时间是因为实验是特地挑的已知SNP来做的，数量少，且本身带有偏向性。而本实验是不带任何人群方面的预设来找的SNP，是不带偏向性的。线粒体全测能算时间也是同样道理。当然因为Y染色体位点多，平均每100年左右就能有一个突变（用全序，即10Mbp左右的范围），而线粒体平均要2000多年才能在全长上有一次突变，因此Y染色体算出的时间精度能比线粒体好很多。</p>
<p>支系方面比较重要的结论有以下几点：</p>
<p>\1. 走出非洲的C、DE、F三大支的分支年代在5万多年。虽然C和F在一起而DE是早分出的，而因为E主体的分布是在非洲，本来有人提出CF和D可能是两批分别走出非洲的，但我们发现CF共有的SNP只有3个，对应大概不到1000年，这样C, DE和F仍是准三叉，根据奥卡姆剔刀原理，还是M168+整体迁出非洲然后E那支再回流非洲的可能性稍大一些。</p>
<p>\2. F支经历过极强的瓶颈，以致于和C分开后过了差不多2万年才再一次产生下游分支G, H, IJ, K，K下面的分化也很快（NO, P和LT目前来看也是个准三叉，M和S因为没有样本，现在拓扑关系还不明朗），也就是说，F支下面按字母分的单倍群从树干上分出的时间大体都在3.6 – 2.4万年前之间，尤其3.6 – 3万年前是一个快速扩张的时期。O3-M122与O1-M119、O2-M268分开后不久，O1、O2再分开。而下游的分化总的次序是O2最早，其次O3，而O1最晚（不过可能和这次测序的O1样本多数取自华东有关，多取一些南方少数民族的O1样本可能会有一些更早的分支。）</p>
<p>\3. O系的地理布散，尤其是O3a-M324（占中国人口的一半以上），主要发生在1.9 – 1万年前，即末次冰盛期（2.3 – 1.8万年前）之后的旧石器时代。这段时间全球气候逐渐回暖，海平面从现在海面以下上百米一直升到和目前海平面接近的高度，人类的可活动范围大大扩展，技术上也有了一些创新，比如陶器的发明，农业也出现了萌芽。</p>
<p>\4. 在树上观察到，<strong>5000**</strong>到**<strong>6000**</strong>多年前左右，在中国出现了三个超级祖先，一个在**<strong>M117**</strong>下，一个在**<strong>M134**</strong>的另一个分支，即**<strong>F444**</strong>下，还有一个在**<strong>002611**</strong>的下游**<strong>F11**</strong>下<strong>。这三个超级祖先出现的年代很接近（次序按不同方法算出来有所区别）。</strong>我把他们分别称为**<strong>Oα, Oβ**</strong>和**<strong>Oγ**</strong>，算作对现有单倍群命名系统的一个改进。这三个大约**<strong>6000**</strong>年前的人的后代构成了现在汉族人群的**<strong>40%**</strong>以上<strong>。之所以很特别（因为一个人群往上推总会推到某个时候有个祖先的后代占了一大半），是因为</strong>在这三个扩张以前的**<strong>Y**</strong>染色体树的所有分支，都是二叉，而这三个扩张是**<strong>星状扩张</strong>，即突然从一个人演化出难以分出先后（这篇文章的测序精度是平均250年一个突变）的5 – 7个支系，而且这5 – 7支是都有后代一直延续到现在的。长支或二叉当中的那些古人当然不是说那些人都没有兄弟，而是说无数辈的兄弟都没能传下男性后代，当时的人口扩张也相对缓慢，只有这几支幸运儿的后代终于活到了现代。</p>
<p>\5. C3-M217是占中国10%左右的大支系，很清楚分为南北两支，2.6万年前分开，比O3和O1’2分开还略早。结合STR结果来看，汉族的C3基本都是南支，且存在一个6000多年前的扩张（可能比O3下的三大簇略早）。汉族和北方民族都常见的C3d-M407属于南支那个扩张下游的。而星簇（star cluster，以前Zerjal et al.说是成吉思汗生出来的）、448-del两个重要支系（应该也有C3c-M48）属于北支。C3的北支基本在汉族里不存在。关于C单倍群的更多细节，我的同事兰海应该会发表一篇paper来说明。</p>
<p>\6. N单倍群的最早分化也在1.6万年前。也分为南北两支。结合STR来看，原先的N1a-M128和N1c-M46（应该也有N1b-P43）都是北支的。关于N的更多细节，我也会另外写一篇paper来讲。</p>
<p>文章里没写的（因为文章本来要投大杂志的，因篇幅有限或说了会被审稿人挑刺所以没放在文章里，或者被别人抢去的，或是证据不足的猜想）：</p>
<p>\7. 时间估计的不精确性。因为原先文章里的用STR计算突变率有一些问题，在后来投的稿里这部分被砍掉了。但相对的STR时间计算是没有问题的。这里给出两张散点图，比较相同的两个样本用17-STR得出的时间和直接数相差的SNP数的对比。前一张图是所有样本间的两两比较。后一张图是Oγ星状扩张中每对共祖于星点的两个样本的STR计算时间和相差的SNP数的对比。因为是同一个星，理论上两个样本的共祖时间几乎相同。可见<strong>SNP**</strong>算出的时间精度远好于**<strong>STR**</strong>算出的，而**<strong>STR**</strong>得到的结果经常可能差出一个数量级以上**。或者说，两个样本STR很远的可以排除近期的共祖，但STR近的，实际共祖时间可能很晚但也不排除实际很早但是因为巧合而STR接近了。经常有人问，我们两个人STR差4个点，到底能差多少年，我说100年到1万年都没准，这确实不是搪塞。</p>
<p><img src="/../images/%E4%BA%BA%E9%A1%9E%E5%AD%B8%E9%9B%9C%E8%A8%98%E2%80%94%E2%80%9424%E4%B8%AD%E5%9C%8B%E4%BA%BA%E7%9A%84%E8%B6%85%E7%B4%9A%E7%A5%96%E5%85%88/clip_image023.jpg" alt="img"></p>
<p><img src="/../images/%E4%BA%BA%E9%A1%9E%E5%AD%B8%E9%9B%9C%E8%A8%98%E2%80%94%E2%80%9424%E4%B8%AD%E5%9C%8B%E4%BA%BA%E7%9A%84%E8%B6%85%E7%B4%9A%E7%A5%96%E5%85%88/clip_image024.jpg" alt="img"></p>
<p>\8. 这三个超级祖先到底是什么人。首先，这个扩张年代正好在五六千年前，属新石器时代晚期，对应的文化包括仰韶时代晚期和大汶口文化晚期等（我知道有人认为这三个扩张不是发生于黄河流域的，留以后发现更多证据，尤其是古DNA证据来回答了。）这个时代我知道的有两个大的变革，一个是农业的大发展，谷类从采集、狩猎的辅助食物变成了食物的主体部分，人们的食物开始严重依赖农业，同时聚落的分布密度大大增加，说明人口增加。同时又有一个社会结构的变化，墓葬从群体葬逐渐发展出了单人葬和对偶葬，说明社会从母系社会变成了父系社会。因此，对于这三个超级祖先，有两种解释：其一，他们是最早的集约化农民，因为生产力（谷物和人口的）大幅发展，成了超级祖先，因此<strong>称**</strong>Oα, Oβ**<strong>和**</strong>Oγ**<strong>分别为**</strong>“**<strong>农民甲**</strong>”**<strong>、**</strong>“**<strong>农民乙**</strong>”**<strong>和**</strong>“**<strong>农民丙**</strong>”<strong>。有人不相信这种解释，认为他们肯定是很伟大的部落首领，有巨大的权力而能占有很多女人，建议用三皇来称呼，我按照计算出的时间，分别</strong>把**<strong>Oγ, Oβ**</strong>和**<strong>Oα**</strong>分别称作**<strong>“**</strong>天皇**<strong>”**</strong>、**<strong>“**</strong>地皇**<strong>”**</strong>和**<strong>“**</strong>泰皇**<strong>”</strong>。（还有建议把他们称作“炎帝”、“黄帝”和“蚩尤”的，因为时间不符合，而且因为可能有历史原型而对应支系可能被证伪，再加上“蚩尤”从民族学上看大概对应苗瑶的O3a2b-M7而不属这三大簇，所以我觉得还是用纯神化的三皇更合适一些。）当然用三皇命名有些人会觉得神棍一些，宁可用“农民”，不过其实把人类父系共祖称作“Y染色体亚当”同样神棍。我觉得反正这三簇是客观存在的，短时间也不容易证明到底他们是什么样的人物，那称作农民还是三皇就看个人信仰了。</p>
<p>\9. 除了三个O3下面的超级祖先，另有两支也需要关注，一个是C3下面F1144的下游扩张，即南支，扩张时间可能比O3的三大簇略早，另一个是O1a1下面F78的下游扩张，年代可能只有4000年不到。这两支的人口大概也各占了汉族的10%上下，但因为高通量测序时没有足够的样本或有的样本测序质量不好，尚未能表现出星状扩张，但我相信如果能扩大测序样本的数目，也是能找到类似星簇的扩张的。（我还暂时没有给这两支起名字。）这样，把这两支也加上，<strong>这五个新石器祖先的后代就能占到汉族及中国人**</strong>60%<strong>**的比例了</strong>。</p>
<p><img src="/../images/%E4%BA%BA%E9%A1%9E%E5%AD%B8%E9%9B%9C%E8%A8%98%E2%80%94%E2%80%9424%E4%B8%AD%E5%9C%8B%E4%BA%BA%E7%9A%84%E8%B6%85%E7%B4%9A%E7%A5%96%E5%85%88/clip_image025.png" alt="img"><img src="/../images/%E4%BA%BA%E9%A1%9E%E5%AD%B8%E9%9B%9C%E8%A8%98%E2%80%94%E2%80%9424%E4%B8%AD%E5%9C%8B%E4%BA%BA%E7%9A%84%E8%B6%85%E7%B4%9A%E7%A5%96%E5%85%88/clip_image026.png" alt="img"><img src="/../images/%E4%BA%BA%E9%A1%9E%E5%AD%B8%E9%9B%9C%E8%A8%98%E2%80%94%E2%80%9424%E4%B8%AD%E5%9C%8B%E4%BA%BA%E7%9A%84%E8%B6%85%E7%B4%9A%E7%A5%96%E5%85%88/clip_image027.png" alt="img"><img src="/../images/%E4%BA%BA%E9%A1%9E%E5%AD%B8%E9%9B%9C%E8%A8%98%E2%80%94%E2%80%9424%E4%B8%AD%E5%9C%8B%E4%BA%BA%E7%9A%84%E8%B6%85%E7%B4%9A%E7%A5%96%E5%85%88/clip_image028.png" alt="img"></p>
<p> <img src="/../images/%E4%BA%BA%E9%A1%9E%E5%AD%B8%E9%9B%9C%E8%A8%98%E2%80%94%E2%80%9424%E4%B8%AD%E5%9C%8B%E4%BA%BA%E7%9A%84%E8%B6%85%E7%B4%9A%E7%A5%96%E5%85%88/clip_image029.png" alt="img"></p>
<p>（上图是五支祖先大致的分布范围和所占人口比例。不是严格计算，汉族之外的支系判断可能有错。）</p>
<p>\10. 关于华夏的起源。因为这篇文章计算了时间，所以明确了，<strong>汉族（或中华民族）的大多数姓氏的都起源于一个几千年前叫黄帝的共同父系祖先必然是不可能的</strong>。新石器时代晚期最大的簇（Oα）也不过占汉族父系的16%。不过，这篇文章同样也说明了，史前不远的时代，<strong>华夏确实有少数几个超级祖先，他们短时间繁殖出了大量的后代，也就是说这些有关共同祖先的传说确实是有其原型的，只不过其重要程度被夸大了</strong>。</p>
<p>文章发表历经的坎坷</p>
<p>很多人，包括爱好者和业内人士，都知道我的结果早就出来了，这两年一直都在催问我文章什么时候能出来，位点什么时候能公布。首先，按照通常的科研规范，似乎文章没有经过同行评议，文章没有发出，是不能对外发布消息的。其次，文章是实验室老师辛苦申请基金、多人多年合作做出的结果，随便公布数据而没有相应文章发表是损害实验室利益的，而今后继续申请科研基金、评职称等等，按目前中国的体制，全看文章的影响因子，且只有一作和通讯作者算数。其他的，至少对于生物学来说，发中文文章不算有效工作，合作作者不算，出书不算，做科普不算，这些只能在有闲的时候做。所以，对于这篇文章，首先只能考虑发paper，而且杂志分数越高越好。</p>
<p>这篇文章首次投出是2011年11月，这两年先后投过Nature, Science, Nature Genetics, Nature Communications, PNAS。有的杂志是被编辑直接毙掉，还有的杂志是跟审稿人撦了好几次皮，先后投过3个版本，历经9个月，最后被拒掉的。几次投出之间还有过好几次大的内容的删改，比如突变率的计算方法和SNP-STR对照比较等，还有改文章的着重点等。前一次拒掉和下一次投出之间改文章经常又要花几个月。这两年，好几篇实验做得并不如我们的文章登上了Science或Genome Research这样的杂志，我们文章的新颖性也越来越差。</p>
<p>最终为了避免文章中的发现变得一钱不值，我出于促进知识传播和对我的青春负责的理念，决定还是先把文章公开到arXiv上。这个数据库是没有同行评审的，也就是说只有靠读者来衡量文章的价值。但这上面的文章能被引用。有同行评审的杂志我也还在投着，就算能发出去，分数也没多少了。从考核体系角度看，这四年的我和同事的工作和花的研究经费就算喂狗了，我的稳定教职也没戏了，只能继续做一个二站的博后。（话说，有时候很明显从编辑和审稿人打回的意见里能感觉到对中国或东方人的歧视。这篇文章的作者全都是中国人，复旦大学或者中科院计算生物所的成员。因为发表时间拖久了，文章本来的亮点一个个被别人的文章抢了去，也只得把题目从一个全球性的时间计算改成关于中国人祖先扩张的，导致文章更难发表。如果是关于犹太人或者欧洲人的文章，经常是随便一点儿数据都能发到高分杂志。之前曹操后代那篇文章也只投到了日本的Journal of Human Genetics杂志。）</p>
<p>这期间我如果做错了什么，或者什么原因造成的文章难以发表，有什么更好的信息发布方案，都可以帮忙指出，如果有办法能同时兼顾知识传播和实验室利益，我会很感激的。</p>
<p>首發於2013.10.18，新浪博客<br> 修改於2014.01.30</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>-杂记</tag>
      </tags>
  </entry>
  <entry>
    <title>似然函数</title>
    <url>/post/fbf175a6.html</url>
    <content><![CDATA[<p>似然（likelihood）这个词其实和概率（probability）是差不多的意思，但是在统计里面，似然函数和概率函数却是两个不同的概念。</p>
<p>对于函数：P(x∣θ)，输入有两个：x表示某一个具体的数据；θ表示模型的参数。</p>
<p>如果θ是确定的，x是变量，这个函数叫做概率函数(probability function)，它描述对于不同的样本点x，其出现概率是多少。</p>
<p>比如我们已经知道了一个箱子里有19个黑球和一个白球，现在问你从箱子里抽出两个球，是两个黑球的概率是多少，这个时候我们的模型参数是完全知道了，就是19个黑球和一个白球，不知道的是抽出的具体的球是什么。这个时候，P(x∣θ)就是概率函数。</p>
<p>如果x是已知确定的，θ是变量，这个函数叫做似然函数(likelihood function)，它描述对于不同的模型参数，出现x这个样本点的概率是多少。</p>
<p>比如我们有一箱子球，已经从里面抽出了1个黑球8个白球，问你箱子里面黑球和白球的分布模型参数是什么。这个时候我们是不知道箱子里面的具体情况的，但我们知道抽出球的样本分布，那么我们要用样本的分布来评估箱子里的球的模型分布，这个时候P(x∣θ)就是似然函数。</p>
<p>参考文章：<a href="https://blog.csdn.net/u011508640/article/details/72815981">https://blog.csdn.net/u011508640/article/details/72815981</a></p>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>-人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>使用python来访问Hadoop HDFS存储实现文件的操作</title>
    <url>/post/2073f49.html</url>
    <content><![CDATA[<h2 id="使用python来访问Hadoop-HDFS存储实现文件的操作"><a href="#使用python来访问Hadoop-HDFS存储实现文件的操作" class="headerlink" title="使用python来访问Hadoop HDFS存储实现文件的操作"></a>使用python来访问Hadoop HDFS存储实现文件的操作</h2><p>在调试环境下，咱们用hadoop提供的shell接口测试增加删除查看，但是不利于复杂的逻辑编程</p>
<p><a href="https://s1.51cto.com/attachment/201307/101434538.jpg"><img src="/../images/%E4%BD%BF%E7%94%A8python%E6%9D%A5%E8%AE%BF%E9%97%AEHadoop%20HDFS%E5%AD%98%E5%82%A8%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E7%9A%84%E6%93%8D%E4%BD%9C/5f38c33fa291a41a946f34d91a38131f.JPEG" alt="101434538.jpg"></a></p>
<p>查看文件内容</p>
<p><a href="https://s1.51cto.com/attachment/201307/101517360.jpg"><img src="/../images/%E4%BD%BF%E7%94%A8python%E6%9D%A5%E8%AE%BF%E9%97%AEHadoop%20HDFS%E5%AD%98%E5%82%A8%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E7%9A%84%E6%93%8D%E4%BD%9C/8b7eab9bb5459f7e06596ec5519011d4.JPEG" alt="101517360.jpg"></a></p>
<p>用python访问hdfs是个很头疼的事情。。。。</p>
<p>这个是pyhdfs的库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pyhdfs</span><br><span class="line">fs = pyhdfs.connect(&quot;192.168.1.1&quot;, 9000)</span><br><span class="line">pyhdfs.get(fs, &quot;/rui/111&quot;, &quot;/var/111&quot;)</span><br><span class="line">f = pyhdfs.open(fs, &quot;/test/xxx&quot;, &quot;w&quot;)</span><br><span class="line">pyhdfs.write(fs, f, &quot;fuck\0gfw\n&quot;)</span><br><span class="line">pyhdfs.close(fs, f)</span><br><span class="line">pyhdfs.disconnect(fs)</span><br></pre></td></tr></table></figure>


<p>pyhdfs的安装过程很吐血</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">svn checkout http://libpyhdfs.googlecode.com/svn/trunk/ libpyhdfs</span><br><span class="line">cd libpyhdfs</span><br><span class="line">cp /usr/lib/hadoop-0.20/hadoop-core-0.20.2-cdh3u0.jar lib/hadoop-0.20.1-core.jar</span><br><span class="line">cp /usr/lib/hadoop-0.20/lib/commons-logging-1.0.4.jar lib/</span><br><span class="line">cp /usr/lib/libhdfs.so.0 lib/</span><br><span class="line">ln –s lib/libhdfs.so.0 lib/libhdfs.so</span><br><span class="line">python setup.py install --prefix=&quot;/usr/local&quot;</span><br></pre></td></tr></table></figure>


<p>还有就是把 selinux也给关了   不然会出现莫名的问题</p>
<p>如果出现</p>
<p>/usr/lib/jvm/java-6-sun/include/jni.h:27:20: error: jni_md.h: No such file or directory</p>
<p>搜下find / -name jni.h</p>
<p>然后修改#include “jni_md.h”  为  #include “linux/jni_md.h”</p>
<p>这个是用pydoop的库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pydoop.hdfs as hdfs</span><br><span class="line">with hdfs.open(&#x27;/user/myuser/filename&#x27;) as f:</span><br><span class="line">    for line in f:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure>




<p>我现在使用的方法是用subprocess ，哈哈，方法很搓吧，主要原因是我这边没有太多的性能估计，只是单纯的把mapreduce的接口给搞出来而已。</p>
<p>这么简单用用也还可以的~</p>
<p>需要把很多自己常用的指定都封装成库  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat = subprocess.Popen([&quot;hadoop&quot;, &quot;fs&quot;, &quot;-cat&quot;, &quot;/path/to/myfile&quot;], stdout=subprocess.PIPE)</span><br><span class="line">for line in cat.stdout:</span><br><span class="line">    print line</span><br></pre></td></tr></table></figure>




<p>补充下（从视hadoop为儿戏到现在对mapreduce半斤八两，对我自己来说，还是有很大的进步的。所以关于hadoop python操作不能再用以前的方法啦。）：</p>
<p>   最近了解了更加方便的库，算是文档和利用最好的了。</p>
<p>pyhdfs是对libhdfs的python封装库. 它提供了一些常用方法来处理HDFS上的文件和目录, 比如读写文件, 枚举目录文件, 显示HDFS可用空间, 显示文件的复制块数等。</p>
<p>libhdfs 是HDFS的底层C函数库, 由hadoop官方提供, pyhdfs使用swig技术, 对libhdfs提供的绝大多数函数进行了封装, 目的是提供更简单的调用方式.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如何连接hadoop集群？</span><br><span class="line">    fs = hadoop.HadoopDFS(&quot;username&quot;,&quot;password&quot;,&quot;ugi&quot;,64310)</span><br><span class="line">    fs.disconnect()</span><br><span class="line">如何获取当前工作目录?</span><br><span class="line">    fs = hadoop.HadoopDFS(&quot;username&quot;,&quot;password&quot;,&quot;ugi&quot;,64310)</span><br><span class="line">    print fs.getWorkingDirectory()</span><br><span class="line">    fs.disconnect()</span><br><span class="line">如何更改当前工作目录？</span><br><span class="line">    fs = hadoop.HadoopDFS(&quot;username&quot;,&quot;password&quot;,&quot;ugi&quot;,64310)</span><br><span class="line">    print fs.setWorkingDirectory(&quot;/user/ns-lsp/logs&quot;)</span><br><span class="line">    fs.disconnect()</span><br><span class="line">如果目录不存在setWorkingDirectory()返回-1,如果执行成功，返回0</span><br><span class="line">如果目录不存在setWorkingDirectory()返回-1,如果执行成功，返回0</span><br><span class="line">如何判断某个文件/目录是否存在？</span><br><span class="line">    fs = hadoop.HadoopDFS(&quot;username&quot;,&quot;password&quot;,&quot;ugi&quot;,64310)</span><br><span class="line">    print fs.pathExists(&quot;/user/ns-lsp/logs&quot;)</span><br><span class="line">    fs.disconnect()</span><br><span class="line">文件/目录存在，返回0，如果不存在，返回-1</span><br><span class="line">如何创建一个目录?</span><br><span class="line">    fs = hadoop.HadoopDFS(&quot;username&quot;,&quot;password&quot;,&quot;ugi&quot;,64310)</span><br><span class="line">    print fs.createDirectory(&quot;/user/ns-lsp/logs/cjj&quot;)</span><br><span class="line">    fs.disconnect()</span><br><span class="line">如果目录已经存在，则返回-1，如果目录创建成功，返回0</span><br><span class="line">如何获得当前默认块大小？</span><br><span class="line">    fs = hadoop.HadoopDFS(&quot;username&quot;,&quot;password&quot;,&quot;ugi&quot;,64310)</span><br><span class="line">    print fs.getDefaultBlockSize()</span><br><span class="line">    fs.disconnect()</span><br><span class="line">如何获得当期目录下的文件/目录？</span><br><span class="line">    fs = hadoop.HadoopDFS(&quot;username&quot;,&quot;password&quot;,&quot;ugi&quot;,64310)</span><br><span class="line">    print fs.listDirectory(&quot;/user/ns-lsp/logs&quot;)</span><br><span class="line">    fs.disconnect()</span><br><span class="line">如何移动一个文件/目录?</span><br><span class="line">同一HDFS内移动文件：</span><br><span class="line">    fs = hadoop.HadoopDFS(&quot;username&quot;,&quot;password&quot;,&quot;ugi&quot;,64310)</span><br><span class="line">    print fs.move(&quot;/user/ns-lsp/logs/cjj&quot;,&quot;/user/ns-lsp/logs/cjj_new&quot;)</span><br><span class="line">    fs.disconnect()</span><br><span class="line">不同HDFS之间移动文件：</span><br><span class="line">    target_fs = hadoop.HadoopDFS(&quot;username&quot;,&quot;password&quot;,&quot;ugi&quot;,64310)</span><br><span class="line">    fs = hadoop.HadoopDFS(&quot;username&quot;,&quot;password&quot;,&quot;ugi&quot;,64310)</span><br><span class="line">    print fs.move(&quot;/user/ns-lsp/logs/cjj&quot;,&quot;/user/ns-lsp/logs/cjj_new&quot;,target_fs)</span><br><span class="line">    fs.disconnect()</span><br><span class="line">如何删除一个文件/目录?</span><br><span class="line">    fs = hadoop.HadoopDFS(&quot;username&quot;,&quot;password&quot;,&quot;ugi&quot;,64310)</span><br><span class="line">    print fs.delete(&quot;/user/ns-lsp/logs/cjj_new&quot;)</span><br><span class="line">    fs.disconnect()</span><br><span class="line">如何重命名一个文件/目录?</span><br><span class="line">    fs = hadoop.HadoopDFS(&quot;username&quot;,&quot;password&quot;,&quot;ugi&quot;,64310)</span><br><span class="line">    print fs.rename(&quot;/user/ns-lsp/logs/cjj&quot;,&quot;/user/ns-lsp/logs/cjj1&quot;)</span><br><span class="line">    fs.disconnect()</span><br><span class="line">如何修改一个文件/目录的权限?</span><br><span class="line">    fs = hadoop.HadoopDFS(&quot;username&quot;,&quot;password&quot;,&quot;ugi&quot;,64310)</span><br><span class="line">    print fs.chmod(&quot;/user/ns-lsp/logs/cjj&quot;,7)</span><br><span class="line">    fs.disconnect()</span><br><span class="line">如何文件块所在的服务器名?</span><br><span class="line">有时我们需要查找某些文件块所在的服务器名是什么，可以如下使用:</span><br><span class="line">    fs = hadoop.HadoopDFS(&quot;username&quot;,&quot;password&quot;,&quot;ugi&quot;,64310)</span><br><span class="line">    print fs.getHosts(&quot;/user/ns-lsp/logs/cjj/a&quot;,0,1)</span><br><span class="line">    fs.disconnect()</span><br><span class="line">返回包含服务器名的列表.</span><br><span class="line">   $ python gethosts.py</span><br><span class="line">   [&#x27;xxxx&#x27;]</span><br><span class="line">如何获取一个文件/目录的信息?</span><br><span class="line">    fs = hadoop.HadoopDFS(&quot;username&quot;,&quot;password&quot;,&quot;ugi&quot;,64310)</span><br><span class="line">    pathinfo = fs.getPathInfo(&quot;/user/ns-lsp/logs/cjj&quot;)</span><br><span class="line">    fs.disconnect()</span><br><span class="line">getPathInfo()返回一个hdfsFileInfo类。</span><br><span class="line">如何指定文件的备份数?</span><br><span class="line">    fs = hadoop.HadoopDFS(&quot;username&quot;,&quot;password&quot;,&quot;ugi&quot;,64310)</span><br><span class="line">    print fs.setReplication(&quot;/user/ns-lsp/logs/cjj/a&quot;,3)</span><br><span class="line">    fs.disconnect()</span><br><span class="line">如何打开一个文件，并读取数据?</span><br><span class="line">要操作文件，需要创建一个HadoopFile对象，并利用read()方法读取数据.</span><br><span class="line">    fs = hadoop.HadoopDFS(&quot;username&quot;,&quot;password&quot;,&quot;ugi&quot;,64310)</span><br><span class="line">    fh = hadoop.HadoopFile(fs,&#x27;/user/ns-lsp/logs/cjj/a&#x27;)</span><br><span class="line">    print fh.read()</span><br><span class="line">    fh.close()</span><br><span class="line">    fs.disconnect()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>-python</tag>
      </tags>
  </entry>
  <entry>
    <title>使用idea创建springcloud项目（入门）</title>
    <url>/post/c43d77ca.html</url>
    <content><![CDATA[<p>刚使用idea，并且刚入门springcloud，所以知识很初级，记录一下过程。<br>本文主要参考（链接）</p>
<p>父模块springcloud的创建</p>
<p>File-New-Project 选择maven-next</p>
<p><img src="/../images/%E4%BD%BF%E7%94%A8idea%E5%88%9B%E5%BB%BAspringcloud%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%85%A5%E9%97%A8%EF%BC%89/202001122037051.png" alt="img"></p>
<p>填写groupId和artifaceId</p>
<p><img src="/../images/%E4%BD%BF%E7%94%A8idea%E5%88%9B%E5%BB%BAspringcloud%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%85%A5%E9%97%A8%EF%BC%89/20200112203833993.png" alt="img"></p>
<p>继续next-finish项目创建完成如图(src目录删除)</p>
<p><img src="/../images/%E4%BD%BF%E7%94%A8idea%E5%88%9B%E5%BB%BAspringcloud%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%85%A5%E9%97%A8%EF%BC%89/20200112204546973.png" alt="img"></p>
<p>接下来创建子模块</p>
<p>选中父项目(springcloud)右键，new-moudle-spring initializr</p>
<p><img src="/../images/%E4%BD%BF%E7%94%A8idea%E5%88%9B%E5%BB%BAspringcloud%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%85%A5%E9%97%A8%EF%BC%89/20200112205049996.png" alt="img"><img src="/../images/%E4%BD%BF%E7%94%A8idea%E5%88%9B%E5%BB%BAspringcloud%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%85%A5%E9%97%A8%EF%BC%89/20200112205126204.png" alt="img"></p>
<p>选择eureka server</p>
<p><img src="/../images/%E4%BD%BF%E7%94%A8idea%E5%88%9B%E5%BB%BAspringcloud%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%85%A5%E9%97%A8%EF%BC%89/20200112205143680.png" alt="img"></p>
<p>子模块生成，添加enableEurekaServer注解</p>
<p><img src="/../images/%E4%BD%BF%E7%94%A8idea%E5%88%9B%E5%BB%BAspringcloud%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%85%A5%E9%97%A8%EF%BC%89/20200112205400533.png" alt="img"></p>
<p>下面是eureka的application.properties(从网上找的，具体还不太清除)</p>
<pre><code>server.port=8002
spring.application.name=eureka1
#实例名称 名字可以自己定
eureka.instance.hostname=eureka1
#eureka client 信息是否被其他eureka client 发现它的信息
eureka.client.register-with-eureka=false
#此客户端是否应该从eureka server 获取eureka注册信息
eureka.client.fetch-registry=false
#关闭保护模式
eureka.server.enable-self-preservation=false
#设置清理的间隔时间，毫秒单位（默认是60秒）
eureka.server.eviction-interval-timer-in-ms=1000</code></pre>
<p><img src="/../images/%E4%BD%BF%E7%94%A8idea%E5%88%9B%E5%BB%BAspringcloud%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%85%A5%E9%97%A8%EF%BC%89/20200112210520795.png" alt="img"></p>
<p>结果：</p>
<p>运行EurekaApplication.java，浏览器访问<a href="http://localhost:8002/">http://localhost:8002/</a></p>
<p><img src="/../images/%E4%BD%BF%E7%94%A8idea%E5%88%9B%E5%BB%BAspringcloud%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%85%A5%E9%97%A8%EF%BC%89/202001122134022.png" alt="img"></p>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,spring cloud,idea</tag>
      </tags>
  </entry>
  <entry>
    <title>使用springboot结合vue实现sso单点登录</title>
    <url>/post/fcc76814.html</url>
    <content><![CDATA[<p>本文实例为大家分享了springboot vue实现sso单点登录的具体代码，供大家参考，具体内容如下</p>
<p>项目结构：</p>
<p><img src="/../images/%E4%BD%BF%E7%94%A8springboot%E7%BB%93%E5%90%88vue%E5%AE%9E%E7%8E%B0sso%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/8b14343b3c6e357594c0c99b4ca8516e.jpg" alt="img"></p>
<p>开发工具：idea, maven3<br>静态文件<a href="https://github.com/xichengxml/woodencottage/tree/master/vue/src/main/resources">下载地址</a></p>
<p>1.pom文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.1.2.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;groupId&gt;com.xicheng&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;ssodemo&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;name&gt;ssodemo&lt;/name&gt;</span><br><span class="line">&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<p>2.MVC页面跳转配置类，如果请求直接跳转页面，采用该配置可以减少controller中代码的编写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.xicheng.ssodemo.common;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* @author xichengxml</span><br><span class="line">* @date 2019/2/13 16:56</span><br><span class="line">*/</span><br><span class="line">@Configuration</span><br><span class="line">public class SpringMvcConfig implements WebMvcConfigurer &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void addViewControllers(ViewControllerRegistry registry) &#123;</span><br><span class="line">registry.addViewController(&quot;login&quot;).setViewName(&quot;login&quot;);</span><br><span class="line">registry.addViewController(&quot;success&quot;).setViewName(&quot;success&quot;);</span><br><span class="line">registry.addViewController(&quot;error&quot;).setViewName(&quot;error&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.核心校验类编写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.xicheng.ssodemo.common;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.Cookie;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* @author xichengxml</span><br><span class="line">* @date 2019/2/13 16:19</span><br><span class="line">* 登录校验工具类</span><br><span class="line">*/</span><br><span class="line">public class LoginCheck &#123;</span><br><span class="line"></span><br><span class="line">/** 用户名 */</span><br><span class="line">private static final String USERNAME = &quot;uname&quot;;</span><br><span class="line">/** 密码 */</span><br><span class="line">private static final String PASSWORD = &quot;pwd&quot;;</span><br><span class="line">/** cookie键 */</span><br><span class="line">public static final String COOKIE_KEY = &quot;sso&quot;;</span><br><span class="line">/** cookie值 */</span><br><span class="line">public static final String COOKIE_VAL = &quot;ssocookie&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 校验用户名和密码</span><br><span class="line">* @param userName 登录用户名</span><br><span class="line">* @param password 登录密码</span><br><span class="line">* @return 成功返回true; 失败返回false</span><br><span class="line">*/</span><br><span class="line">public static boolean checkLogin(String userName, String password) &#123;</span><br><span class="line">return USERNAME.equals(userName) &amp;&amp; PASSWORD.equals(password);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 校验cookie</span><br><span class="line">* @param request</span><br><span class="line">* @return</span><br><span class="line">*/</span><br><span class="line">public static boolean checkCookie(HttpServletRequest request) &#123;</span><br><span class="line">Cookie[] cookies = request.getCookies();</span><br><span class="line">if (cookies != null &amp;&amp; cookies.length != 0) &#123;</span><br><span class="line">for (Cookie cookie : cookies) &#123;</span><br><span class="line">if (COOKIE_KEY.equals(cookie.getName()) &amp;&amp; COOKIE_VAL.equals(cookie.getValue())) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.核心登录controller编写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.xicheng.ssodemo.controller;</span><br><span class="line"></span><br><span class="line">import com.xicheng.ssodemo.common.LoginCheck;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.Cookie;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* @author xichengxml</span><br><span class="line">* @date 2019/2/13 16:31</span><br><span class="line">*/</span><br><span class="line">@Controller</span><br><span class="line">public class LoginController &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 登录成功后保存cookie在域下，返回登录成功页</span><br><span class="line">* @param uname</span><br><span class="line">* @param pwd</span><br><span class="line">* @param response</span><br><span class="line">* @return</span><br><span class="line">*/</span><br><span class="line">@RequestMapping(&quot;/do-login&quot;)</span><br><span class="line">public String doLogin(String uname, String pwd, HttpServletResponse response) &#123;</span><br><span class="line">if (LoginCheck.checkLogin(uname, pwd)) &#123;</span><br><span class="line">Cookie cookie = new Cookie(LoginCheck.COOKIE_KEY, LoginCheck.COOKIE_VAL);</span><br><span class="line">cookie.setPath(&quot;/&quot;);</span><br><span class="line">response.addCookie(cookie);</span><br><span class="line">return &quot;success&quot;;</span><br><span class="line">&#125;</span><br><span class="line">return &quot;error&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5.登录controller编写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.xicheng.ssodemo.controller;</span><br><span class="line"></span><br><span class="line">import com.xicheng.ssodemo.common.LoginCheck;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* @author xichengxml</span><br><span class="line">* @date 2019/2/13 17:53</span><br><span class="line">*/</span><br><span class="line">@Controller</span><br><span class="line">public class SameOriginController &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* cookie存在，登录成功；否则返回登录页</span><br><span class="line">* @param request</span><br><span class="line">* @return</span><br><span class="line">*/</span><br><span class="line">@RequestMapping(&quot;/login01&quot;)</span><br><span class="line">public String demo01(HttpServletRequest request) &#123;</span><br><span class="line">return LoginCheck.checkCookie(request) ? &quot;success&quot; : &quot;login&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;/login02&quot;)</span><br><span class="line">public String demo02(HttpServletRequest request) &#123;</span><br><span class="line">return LoginCheck.checkCookie(request) ? &quot;success&quot; : &quot;login&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>6.登录页面及成功失败页面编写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- login.html --&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;登录&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;/js/vue.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;/js/element.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;/js/axios.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;link href=&quot;/css/element.css&quot; rel=&quot;external nofollow&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;el-input v-model=&quot;uname&quot; placeholder=&quot;请输入用户名&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">&lt;el-input v-model=&quot;pwd&quot; placeholder=&quot;请输入密码&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">&lt;el-button @click=&quot;submit&quot; type=&quot;primary&quot;&gt;登录&lt;/el-button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el: &quot;#app&quot;,</span><br><span class="line">data: &#123;</span><br><span class="line">uname: &#x27;&#x27;,</span><br><span class="line">pwd: &#x27;&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">submit: function () &#123;</span><br><span class="line">// 获取用户名和密码</span><br><span class="line">var uname = this.uname;</span><br><span class="line">var pwd = this.pwd;</span><br><span class="line">// 发送http请求</span><br><span class="line">axios.get(&quot;do-login&quot;, &#123;params: &#123;uname: uname, pwd: pwd&#125;&#125;)</span><br><span class="line">.then(function (response) &#123;</span><br><span class="line">if(response.status == 200) &#123;</span><br><span class="line">location.href = &quot;/success&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">location.href = &quot;/error&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">.catch(function (error) &#123;</span><br><span class="line">alert(&quot;error--&quot; + error);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- success.html --&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;成功页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">This is success page!</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- error.html --&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;错误页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">This is error page!</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>以上就是本文的全部内容，希望对大家的学习有所帮助</p>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,springboot,vue,SSO,单点登录</tag>
      </tags>
  </entry>
  <entry>
    <title>信息熵</title>
    <url>/post/4c350e9d.html</url>
    <content><![CDATA[<p>我们简单介绍了<a href="https://aichn.cn/post/6375c8f0.html">香农信息量</a>的概念，由香农信息量我们可以知道对于一个已知概率的事件，我们需要多少的数据量能完整地把它表达清楚，不与外界产生歧义。但对于整个系统而言，其实我们更加关心的是表达系统整体所需要的信息量。比如我们上面举例的aaBaaaVaaaaa这段字母，虽然B和V的香农信息量比较大，但他们出现的次数明显要比a少很多，因此我们需要有一个方法来评估整体系统的信息量。</p>
<p>相信你可以很容易想到利用期望这个东西，因此评估的方法可以是：“事件香农信息量×事件概率”的累加。这也正是信息熵的概念。</p>
<p>如aaBaaaVaaaaa这段字母，信息熵为：<br>$$<br>-\frac{5}{6}log_2\frac{5}{6}-2×\frac{1}{12}log_2\frac{1}{12}=0.817<br>$$<br>abBcdeVfhgim这段字母，信息熵为：<br>$$<br>-12×\frac{1}{12}log_2\frac{1}{12}=3.585<br>$$<br>从数值上可以很直观地看出，第二段字母信息量大，和观察相一致。</p>
<p>对于连续型随机变量，信息熵公式变为积分的形式，如下：</p>
<p>$$<br>H ( p ) = H ( X ) = \mathrm { E } _ { x \sim p ( x ) } [ - \log p ( x ) ] = - \int p ( x ) \log p ( x ) d x<br>$$</p>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>-人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>共轭函数</title>
    <url>/post/e66f8853.html</url>
    <content><![CDATA[<p>共轭函数在最近火的不行的Gan生成对抗神经网络进阶版本的数学推理中有着神奇的作用，因此在这边记录下。</p>
<p>共轭函数的定义为：<br>$$<br>f ^ { * } ( t ) = \max _ { x \in \operatorname { dom } ( f ) } { x t - f ( x ) }<br>$$<br>当然如果去百度它不是这么写的，但这么写和一般的写法等价。</p>
<p>这个公式的<br>$$<br>x \in \operatorname { dom } ( f )<br>$$<br>表示x要在f的定义域内取值，这个蛮好理解的，不在定义域内就算不了。</p>
<p>那它具体在干一件什么事情呢？</p>
<p>可以看到式子的自变量是t，而当t定住后，式子希望在定义域内找到一个x使得右边大括号内的式子取得最大值。</p>
<p>它的物理意义是什么呢？</p>
<p>可以看到当t定住的时候，式子其实变成了y=xt−f(x)，如果高兴也可以再把左右拆开，这样就会发现左边其实是以t为斜率的一根直线，而右边则是x的函数，那么max这货就是要找到原函数f(x)和以t为斜率的直线的最大距离点对应的<br>$$<br>x ^ { * }。<br>$$</p>
<p>说实在的，上面的解释我一看就懂，但完全不知所谓，心中十万只草泥马。最核心的问题在于，这个物理意义一点都不直观，而且这个公式怎么来的也不大清楚，感觉就是数学家随便写出来，然后脑袋一拍发现这东西有奇效！后面百度发现错怪了数学家，是物理学家搞出来的。。。我相信肯定有原因让他们把式子列成这样，但没查到，如果有知道的老哥请告诉我，万分感谢！</p>
<p>那么来看看它有什么性质好了。有两个比较重要的：</p>
<p>1.无论f(t)是不是凸函数，<br>$$<br>f ^ { * } ( t )<br>$$<br>是凸函数。</p>
<p>2.凸函数的共轭函数的共轭函数是它自己。</p>
<p>第一点其实蛮不明显的，尤其是看着<br>$$<br>f ^ { * } ( t )<br>$$<br>的表达式一晚上我也没想到怎么证明，但看到百度百科直接写”很明显能看出它是凸函数”然后半句解释都没有，而有些博客文章直接把这句话就抄了。。。给跪了。</p>
<p>那为什么呢？<br><img src="/../images/%E5%85%B1%E8%BD%AD%E5%87%BD%E6%95%B0/20190108162456372.png" alt="在这里插入图片描述"><br>上面是李宏毅大神的视频给出的图，因为在式子中tt是自变量，因此{xt−f(x)}其实是一堆的直线。而我们取定一个t要使得式子最大，其实就是做t轴的垂线，看看和垂线相交的最上面的点是哪个那就是最大值。<br><img src="/../images/%E5%85%B1%E8%BD%AD%E5%87%BD%E6%95%B0/20190108163002916.png" alt="在这里插入图片描述"></p>
<p>这样当我们跑完整个t之后，就可以得到<br>$$<br>f ^ { * } ( t )<br>$$<br>的表达式。</p>
<p><img src="/../images/%E5%85%B1%E8%BD%AD%E5%87%BD%E6%95%B0/20190108163103218.png" alt="在这里插入图片描述"><br>这个时候通过观察可以直接看出，<br>$$<br>f ^ { * } ( t )<br>$$<br>的斜率一定是不断增大的！那么它就是凸函数。当然从图上看可能会觉得虽然斜率是一直在增大，但在有些地方是不变的，这里无法直接从图上看出它是严格的凸函数，因此在这里存疑。但凸函数这点是一定的。</p>
<p>再来看第二点。假设现在t固定，而我们要求xt−f(x)的最大值其实就是要求式子对x求导后为0的位置。很容易可以算出最大值在f′(x)=t时取得。而因为f(x)是凸函数，因此只有唯一的一个x使得f′(x)=t，也就是说从原函数到其共轭函数x和t是一对一一对应关系。又从性质一我们知道反过来也是成立的。结合两个函数都是凸函数且变量互相一一对应，可以得出凸函数的共轭函数的共轭函数一定是它自己，如下图：<br><img src="/../images/%E5%85%B1%E8%BD%AD%E5%87%BD%E6%95%B0/20190108163723173.png" alt="在这里插入图片描述"><br>假设<br>$$<br>x_?\not=x_1<br>$$<br>则虚线部分将存在无映射的情况，与已知相背。当然这解释有点抽象，但实在是水平有限，不知道怎么从公式本身来证明这件事情。</p>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>-人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>《分布式单点登录框架XXL-SSO》</title>
    <url>/post/6be2b89c.html</url>
    <content><![CDATA[<p><a href="javascript:;"><br>目录</a></p>
<ul>
<li><a href="https://www.xuxueli.com/xxl-sso/#%E3%80%8A%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E6%A1%86%E6%9E%B6XXL-SSO%E3%80%8B">《分布式单点登录框架XXL-SSO》</a></li>
<li>一、简介<ul>
<li>[1.1 概述](<a href="https://www.xuxueli.com/xxl-sso/#1.1">https://www.xuxueli.com/xxl-sso/#1.1</a> 概述)</li>
<li>[1.2 社区交流](<a href="https://www.xuxueli.com/xxl-sso/#1.2">https://www.xuxueli.com/xxl-sso/#1.2</a> 社区交流)</li>
<li>[1.3 特性](<a href="https://www.xuxueli.com/xxl-sso/#1.3">https://www.xuxueli.com/xxl-sso/#1.3</a> 特性)</li>
<li>[1.4 发展](<a href="https://www.xuxueli.com/xxl-sso/#1.4">https://www.xuxueli.com/xxl-sso/#1.4</a> 发展)</li>
<li>1.5 下载<ul>
<li><a href="https://www.xuxueli.com/xxl-sso/#%E6%96%87%E6%A1%A3%E5%9C%B0%E5%9D%80">文档地址</a></li>
<li><a href="https://www.xuxueli.com/xxl-sso/#%E6%BA%90%E7%A0%81%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80">源码仓库地址</a></li>
</ul>
</li>
<li>[1.6 环境](<a href="https://www.xuxueli.com/xxl-sso/#1.6">https://www.xuxueli.com/xxl-sso/#1.6</a> 环境)</li>
</ul>
</li>
<li>二、快速入门（基于Cookie）<ul>
<li><a href="https://www.xuxueli.com/xxl-sso/#2.1%EF%BC%9A%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91">2.1：源码编译</a></li>
<li>2.2 部署 “认证中心（SSO Server）”<ul>
<li><a href="https://www.xuxueli.com/xxl-sso/#%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E">配置说明</a></li>
</ul>
</li>
<li>2.3 部署 “单点登陆Client端接入示例项目”<ul>
<li><a href="https://www.xuxueli.com/xxl-sso/#maven%E4%BE%9D%E8%B5%96">maven依赖</a></li>
<li>[配置 XxlSsoFilter](<a href="https://www.xuxueli.com/xxl-sso/#%E9%85%8D%E7%BD%AE">https://www.xuxueli.com/xxl-sso/#配置</a> XxlSsoFilter)</li>
<li><a href="https://www.xuxueli.com/xxl-sso/#%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E">配置说明</a></li>
</ul>
</li>
<li>[2.4 验证](<a href="https://www.xuxueli.com/xxl-sso/#2.4">https://www.xuxueli.com/xxl-sso/#2.4</a> 验证)</li>
</ul>
</li>
<li>三、快速入门（基于Token）<ul>
<li>[3.1 “认证中心（SSO Server）” 搭建](<a href="https://www.xuxueli.com/xxl-sso/#3.1">https://www.xuxueli.com/xxl-sso/#3.1</a> “认证中心（SSO Server）” 搭建)</li>
<li>[3.2 部署 “单点登陆Client端接入示例项目” (Token方式)](<a href="https://www.xuxueli.com/xxl-sso/#3.2">https://www.xuxueli.com/xxl-sso/#3.2</a> 部署 “单点登陆Client端接入示例项目” (Token方式))</li>
<li>[3.3 验证 (模拟请求 Token 方式接入SSO的接口)](<a href="https://www.xuxueli.com/xxl-sso/#3.3">https://www.xuxueli.com/xxl-sso/#3.3</a> 验证  (模拟请求 Token 方式接入SSO的接口))</li>
</ul>
</li>
<li>四、总体设计<ul>
<li>[4.1 架构图](<a href="https://www.xuxueli.com/xxl-sso/#4.1">https://www.xuxueli.com/xxl-sso/#4.1</a> 架构图)</li>
<li>[4.2 功能定位](<a href="https://www.xuxueli.com/xxl-sso/#4.2">https://www.xuxueli.com/xxl-sso/#4.2</a> 功能定位)</li>
<li>[4.3 核心概念](<a href="https://www.xuxueli.com/xxl-sso/#4.3">https://www.xuxueli.com/xxl-sso/#4.3</a> 核心概念)</li>
<li>[4.4 登录流程剖析](<a href="https://www.xuxueli.com/xxl-sso/#4.4">https://www.xuxueli.com/xxl-sso/#4.4</a> 登录流程剖析)</li>
<li>[4.5 注销流程剖析](<a href="https://www.xuxueli.com/xxl-sso/#4.5">https://www.xuxueli.com/xxl-sso/#4.5</a> 注销流程剖析)</li>
<li>[4.6 基于Cookie，相关概念](<a href="https://www.xuxueli.com/xxl-sso/#4.6">https://www.xuxueli.com/xxl-sso/#4.6</a> 基于Cookie，相关概念)</li>
<li>[4.7 基于Token，相关概念](<a href="https://www.xuxueli.com/xxl-sso/#4.7">https://www.xuxueli.com/xxl-sso/#4.7</a> 基于Token，相关概念)</li>
<li>[4.8 未登录状态请求处理](<a href="https://www.xuxueli.com/xxl-sso/#4.8">https://www.xuxueli.com/xxl-sso/#4.8</a> 未登录状态请求处理)</li>
<li>[4.9 登录态自动延期](<a href="https://www.xuxueli.com/xxl-sso/#4.9">https://www.xuxueli.com/xxl-sso/#4.9</a> 登录态自动延期)</li>
<li>[4.10 记住密码](<a href="https://www.xuxueli.com/xxl-sso/#4.10">https://www.xuxueli.com/xxl-sso/#4.10</a> 记住密码)</li>
<li>[4.11 路径排除](<a href="https://www.xuxueli.com/xxl-sso/#4.11">https://www.xuxueli.com/xxl-sso/#4.11</a> 路径排除)</li>
</ul>
</li>
<li>五、版本更新日志<ul>
<li>[5.1 版本 v0.1.0，新特性[2018-04-04]](<a href="https://www.xuxueli.com/xxl-sso/#5.1">https://www.xuxueli.com/xxl-sso/#5.1</a> 版本 v0.1.0，新特性[2018-04-04])</li>
<li>[5.2 版本 v1.1.0 Release Notes [2018-11-06]](<a href="https://www.xuxueli.com/xxl-sso/#5.2">https://www.xuxueli.com/xxl-sso/#5.2</a> 版本 v1.1.0 Release Notes [2018-11-06])</li>
<li>[5.3 版本 v1.1.1 Release Notes [迭代中]](<a href="https://www.xuxueli.com/xxl-sso/#5.3">https://www.xuxueli.com/xxl-sso/#5.3</a> 版本 v1.1.1 Release Notes [迭代中])</li>
<li>[TODO LIST](<a href="https://www.xuxueli.com/xxl-sso/#TODO">https://www.xuxueli.com/xxl-sso/#TODO</a> LIST)</li>
</ul>
</li>
<li>六、其他<ul>
<li>[6.1 项目贡献](<a href="https://www.xuxueli.com/xxl-sso/#6.1">https://www.xuxueli.com/xxl-sso/#6.1</a> 项目贡献)</li>
<li>[6.2 用户接入登记](<a href="https://www.xuxueli.com/xxl-sso/#6.2">https://www.xuxueli.com/xxl-sso/#6.2</a> 用户接入登记)</li>
<li>[6.3 开源协议和版权](<a href="https://www.xuxueli.com/xxl-sso/#6.3">https://www.xuxueli.com/xxl-sso/#6.3</a> 开源协议和版权)</li>
<li>捐赠</li>
</ul>
</li>
</ul>
<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><p>XXL-SSO 是一个分布式单点登录框架。只需要登录一次就可以访问所有相互信任的应用系统。<br>拥有”轻量级、分布式、跨域、Cookie+Token均支持、Web+APP均支持”等特性。现已开放源代码，开箱即用。</p>
<h3 id="1-2-社区交流"><a href="#1-2-社区交流" class="headerlink" title="1.2 社区交流"></a>1.2 社区交流</h3><ul>
<li><a href="https://www.xuxueli.com/page/community.html">社区交流</a></li>
</ul>
<h3 id="1-3-特性"><a href="#1-3-特性" class="headerlink" title="1.3 特性"></a>1.3 特性</h3><ul>
<li>1、简洁：API直观简洁，可快速上手</li>
<li>2、轻量级：环境依赖小，部署与接入成本较低</li>
<li>3、单点登录：只需要登录一次就可以访问所有相互信任的应用系统</li>
<li>4、分布式：接入SSO认证中心的应用，支持分布式部署</li>
<li>5、HA：Server端与Client端，均支持集群部署，提高系统可用性</li>
<li>6、跨域：支持跨域应用接入SSO认证中心</li>
<li>7、Cookie+Token均支持：支持基于Cookie和基于Token两种接入方式，并均提供Sample项目</li>
<li>8、Web+APP均支持：支持Web和APP接入</li>
<li>9、实时性：系统登陆、注销状态，全部Server与Client端实时共享</li>
<li>10、CS结构：基于CS结构，包括Server”认证中心”与Client”受保护应用”</li>
<li>11、记住密码：未记住密码时，关闭浏览器则登录态失效；记住密码时，支持登录态自动延期，在自定义延期时间的基础上，原则上可以无限延期</li>
<li>12、路径排除：支持自定义多个排除路径，支持Ant表达式,用于排除SSO客户端不需要过滤的路径</li>
</ul>
<h3 id="1-4-发展"><a href="#1-4-发展" class="headerlink" title="1.4 发展"></a>1.4 发展</h3><p>于2018年初，我在github上创建XXL-SSO项目仓库并提交第一个commit，随之进行系统结构设计，UI选型，交互设计……</p>
<p>于2018-12-05，XXL-SSO参与”<a href="https://www.oschina.net/project/top_cn_2018?sort=1">2018年度最受欢迎中国开源软件</a>“评比，在当时已录入的一万多个国产开源项目中角逐，最终排名第55名。</p>
<p>于2019-01-23，XXL-SSO被评选上榜”<a href="https://www.oschina.net/news/103857/2018-osc-new-opensource-software-cn-top50">2018年度新增开源软件排行榜之国产 TOP 50</a>“评比，排名第8名。</p>
<p>至今，XXL-SSO已接入多家公司的线上产品线，接入场景如电商业务，O2O业务和核心中间件配置动态化等，截止2018-03-15为止，XXL-SSO已接入的公司包括不限于：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 湖南创发科技2. 深圳龙华科技有限公司3. 摩根国际4. 印记云</span><br></pre></td></tr></table></figure>
<blockquote>
<p>更多接入的公司，欢迎在 <a href="https://github.com/xuxueli/xxl-sso/issues/1">登记地址</a> 登记，登记仅仅为了产品推广。</p>
</blockquote>
<p>欢迎大家的关注和使用，XXL-SSO也将拥抱变化，持续发展。</p>
<h3 id="1-5-下载"><a href="#1-5-下载" class="headerlink" title="1.5 下载"></a>1.5 下载</h3><h4 id="文档地址"><a href="#文档地址" class="headerlink" title="文档地址"></a>文档地址</h4><ul>
<li><a href="https://www.xuxueli.com/xxl-sso/">中文文档</a></li>
</ul>
<h4 id="源码仓库地址"><a href="#源码仓库地址" class="headerlink" title="源码仓库地址"></a>源码仓库地址</h4><table>
<thead>
<tr>
<th align="left">源码仓库地址</th>
<th align="left">Release Download</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://github.com/xuxueli/xxl-sso">https://github.com/xuxueli/xxl-sso</a></td>
<td align="left"><a href="https://github.com/xuxueli/xxl-sso/releases">Download</a></td>
</tr>
<tr>
<td align="left"><a href="https://gitee.com/xuxueli0323/xxl-sso">https://gitee.com/xuxueli0323/xxl-sso</a></td>
<td align="left"><a href="https://gitee.com/xuxueli0323/xxl-sso/releases">Download</a></td>
</tr>
</tbody></table>
<h3 id="1-6-环境"><a href="#1-6-环境" class="headerlink" title="1.6 环境"></a>1.6 环境</h3><ul>
<li>JDK：1.7+</li>
<li>Redis：4.0+</li>
</ul>
<h2 id="二、快速入门（基于Cookie）"><a href="#二、快速入门（基于Cookie）" class="headerlink" title="二、快速入门（基于Cookie）"></a>二、快速入门（基于Cookie）</h2><blockquote>
<p>基于Cookie，相关概念可参考 “章节 4.6”</p>
</blockquote>
<h3 id="2-1：源码编译"><a href="#2-1：源码编译" class="headerlink" title="2.1：源码编译"></a>2.1：源码编译</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- xxl-sso-server：中央认证服务，支持集群- xxl-sso-core：Client端依赖- xxl-sso-samples：单点登陆Client端接入示例项目    - xxl-sso-web-sample-springboot：基于Cookie接入方式，供用户浏览器访问，springboot版本    - xxl-sso-token-sample-springboot：基于Token接入方式，常用于无法使用Cookie的场景使用，如APP、Cookie被禁用等，springboot版本</span><br></pre></td></tr></table></figure>
<h3 id="2-2-部署-“认证中心（SSO-Server）”"><a href="#2-2-部署-“认证中心（SSO-Server）”" class="headerlink" title="2.2 部署 “认证中心（SSO Server）”"></a>2.2 部署 “认证中心（SSO Server）”</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">项目名：xxl-sso-server</span><br></pre></td></tr></table></figure>
<h4 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h4><p>配置文件位置：application.properties</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">……// redis 地址： 如 &quot;&#123;ip&#125;&quot;、&quot;&#123;ip&#125;:&#123;port&#125;&quot;、&quot;&#123;redis/rediss&#125;://xxl-sso:&#123;password&#125;@&#123;ip&#125;:&#123;port:6379&#125;/&#123;db&#125;&quot;；多地址逗号分隔xxl.sso.redis.address=redis://127.0.0.1:6379// 登录态有效期窗口，默认24H，当登录态有效期窗口过半时，自动顺延一个周期xxl.sso.redis.expire.minute=1440</span><br></pre></td></tr></table></figure>
<h3 id="2-3-部署-“单点登陆Client端接入示例项目”"><a href="#2-3-部署-“单点登陆Client端接入示例项目”" class="headerlink" title="2.3 部署 “单点登陆Client端接入示例项目”"></a>2.3 部署 “单点登陆Client端接入示例项目”</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">项目名：xxl-sso-web-sample-springboot</span><br></pre></td></tr></table></figure>
<h4 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;    &lt;groupId&gt;com.xuxueli&lt;/groupId&gt;    &lt;artifactId&gt;xxl-sso-core&lt;/artifactId&gt;    &lt;version&gt;$&#123;最新稳定版&#125;&lt;/version&gt;&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h4 id="配置-XxlSsoFilter"><a href="#配置-XxlSsoFilter" class="headerlink" title="配置 XxlSsoFilter"></a>配置 XxlSsoFilter</h4><p>参考代码：com.xxl.sso.sample.config.XxlSsoConfig</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Beanpublic FilterRegistrationBean xxlSsoFilterRegistration() &#123;    // xxl-sso, redis init    JedisUtil.init(xxlSsoRedisAddress);    // xxl-sso, filter init    FilterRegistrationBean registration = new FilterRegistrationBean();    registration.setName(&quot;XxlSsoWebFilter&quot;);    registration.setOrder(1);    registration.addUrlPatterns(&quot;/*&quot;);    registration.setFilter(new XxlSsoWebFilter());    registration.addInitParameter(Conf.SSO_SERVER, xxlSsoServer);    registration.addInitParameter(Conf.SSO_LOGOUT_PATH, xxlSsoLogoutPath);    return registration;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="配置说明-1"><a href="#配置说明-1" class="headerlink" title="配置说明"></a>配置说明</h4><p>配置文件位置：application.properties</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">……### xxl-sso     (CLient端SSO配置)##### SSO Server认证中心地址（推荐以域名方式配置认证中心，本机可参考章节&quot;2.5&quot;修改host文件配置域名指向）xxl.sso.server=http://xxlssoserver.com:8080/xxl-sso-server##### 注销登陆path，值为Client端应用的相对路径xxl.sso.logout.path=/logout##### 路径排除Path，允许设置多个，且支持Ant表达式。用于排除SSO客户端不需要过滤的路径xxl-sso.excluded.paths=### redis   // redis address, like &quot;&#123;ip&#125;&quot;、&quot;&#123;ip&#125;:&#123;port&#125;&quot;、&quot;&#123;redis/rediss&#125;://xxl-sso:&#123;password&#125;@&#123;ip&#125;:&#123;port:6379&#125;/&#123;db&#125;&quot;；Multiple &quot;,&quot; separatedxxl.sso.redis.address=redis://xxl-sso:password@127.0.0.1:6379/0</span><br></pre></td></tr></table></figure>
<h3 id="2-4-验证"><a href="#2-4-验证" class="headerlink" title="2.4 验证"></a>2.4 验证</h3><ul>
<li><p>修改Host文件：域名方式访问认证中心，模拟跨域与线上真实环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### 在host文件中添加以下内容0127.0.0.1 xxlssoserver.com127.0.0.1 xxlssoclient1.com127.0.0.1 xxlssoclient2.com</span><br></pre></td></tr></table></figure></li>
<li><p>分别运行 “xxl-sso-server” 与 “xxl-sso-web-sample-springboot”</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、SSO认证中心地址：http://xxlssoserver.com:8080/xxl-sso-server2、Client01应用地址：http://xxlssoclient1.com:8081/xxl-sso-web-sample-springboot/3、Client02应用地址：http://xxlssoclient2.com:8081/xxl-sso-web-sample-springboot/</span><br></pre></td></tr></table></figure>
<ul>
<li>SSO登录/注销流程验证</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正常情况下，登录流程如下：1、访问 &quot;Client01应用地址&quot; ，将会自动 redirect 到 &quot;SSO认证中心地址&quot; 登录界面2、成功登录后，将会自动 redirect 返回到 &quot;Client01应用地址&quot;，并切换为已登录状态3、此时，访问 &quot;Client02应用地址&quot;，不需登陆将会自动切换为已登录状态正常情况下，注销流程如下：1、访问 &quot;Client01应用地址&quot; 配置的 &quot;注销登陆path&quot;，将会自动 redirect 到 &quot;SSO认证中心地址&quot; 并自动注销登陆状态2、此时，访问 &quot;Client02应用地址&quot;，也将会自动注销登陆状态</span><br></pre></td></tr></table></figure>
<h2 id="三、快速入门（基于Token）"><a href="#三、快速入门（基于Token）" class="headerlink" title="三、快速入门（基于Token）"></a>三、快速入门（基于Token）</h2><blockquote>
<p>基于Token，相关概念可参考 “章节 4.7”；（在一些无法使用Cookie的场景下，可使用该方式，否则可以忽略本章节）</p>
</blockquote>
<h3 id="3-1-“认证中心（SSO-Server）”-搭建"><a href="#3-1-“认证中心（SSO-Server）”-搭建" class="headerlink" title="3.1 “认证中心（SSO Server）” 搭建"></a>3.1 “认证中心（SSO Server）” 搭建</h3><blockquote>
<p>可参考 “章节二” 搭建</p>
</blockquote>
<p>“认证中心” 搭建成功后，默认为Token方式登陆提供API接口如下：</p>
<ul>
<li>1、登陆接口：/app/login<ul>
<li>参数：POST参数<ul>
<li>username：账号</li>
<li>password：账号</li>
</ul>
</li>
<li>响应：JSON格式<ul>
<li>code：200 表示成功、其他失败</li>
<li>msg：错误提示</li>
<li>data: 登陆用户的 sso sessionid</li>
</ul>
</li>
</ul>
</li>
<li>2、注销接口：/app/logout<ul>
<li>参数：POST参数<ul>
<li>sessionId：登陆用户的 sso sessionid</li>
</ul>
</li>
<li>响应：JSON格式<ul>
<li>code：200 表示成功、其他失败</li>
<li>msg：错误提示</li>
</ul>
</li>
</ul>
</li>
<li>3、登陆状态校验接口：/app/logincheck<ul>
<li>参数：POST参数<ul>
<li>sessionId：登陆用户的 sso sessionid</li>
</ul>
</li>
<li>响应：JSON格式<ul>
<li>code：200 表示成功、其他失败</li>
<li>msg：错误提示</li>
<li>data：登陆用户信息<ul>
<li>userid：用户ID</li>
<li>username：用户名</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="3-2-部署-“单点登陆Client端接入示例项目”-Token方式"><a href="#3-2-部署-“单点登陆Client端接入示例项目”-Token方式" class="headerlink" title="3.2 部署 “单点登陆Client端接入示例项目” (Token方式)"></a>3.2 部署 “单点登陆Client端接入示例项目” (Token方式)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">项目名：xxl-sso-token-sample-springboot</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可参考 “章节 2.4” 部署 “单点登陆Client端接入示例项目”，唯一不同点是：将web应用的 “XxlSsoFilter” 更换为app应用 “XxlSsoTokenFilter”</p>
</blockquote>
<h3 id="3-3-验证-模拟请求-Token-方式接入SSO的接口"><a href="#3-3-验证-模拟请求-Token-方式接入SSO的接口" class="headerlink" title="3.3 验证 (模拟请求 Token 方式接入SSO的接口)"></a>3.3 验证 (模拟请求 Token 方式接入SSO的接口)</h3><ul>
<li><p>修改Host文件：域名方式访问认证中心，模拟跨域与线上真实环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### 在host文件中添加以下内容0127.0.0.1 xxlssoserver.com127.0.0.1 xxlssoclient1.com127.0.0.1 xxlssoclient2.com</span><br></pre></td></tr></table></figure></li>
<li><p>分别运行 “xxl-sso-server” 与 “xxl-sso-token-sample-springboot”</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、SSO认证中心地址：http://xxlssoserver.com:8080/xxl-sso-server2、Client01应用地址：http://xxlssoclient1.com:8082/xxl-sso-token-sample-springboot/3、Client02应用地址：http://xxlssoclient2.com:8082/xxl-sso-token-sample-springboot/</span><br></pre></td></tr></table></figure>
<ul>
<li><p>SSO登录/注销流程验证</p>
<blockquote>
<p>可参考测试用例 ：com.xxl.app.sample.test.TokenClientTest</p>
</blockquote>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正常情况下，登录流程如下：1、获取用户输入的账号密码后，请求SSO Server的登录接口，获取用户 sso sessionid ；（参考代码：TokenClientTest.loginTest）2、登陆成功后，获取到 sso sessionid ，需要主动存储，后续请求时需要设置在 Header参数 中3、此时，使用 sso sessionid 访问受保护的 &quot;Client01应用&quot; 和 &quot;Client02应用&quot; 提供的接口，接口均正常返回（参考代码：TokenClientTest.clientApiRequestTest）正常情况下，注销流程如下：1、请求SSO Server的注销接口，注销登陆凭证 sso sessionid ；（参考代码：TokenClientTest.logoutTest）2、注销成功后，sso sessionid 将会全局失效3、此时，使用 sso sessionid 访问受保护的 &quot;Client01应用&quot; 和 &quot;Client02应用&quot; 提供的接口，接口请求将会被拦截，提示未登录并返回状态码 501（参考代码：TokenClientTest.clientApiRequestTest）</span><br></pre></td></tr></table></figure>
<h2 id="四、总体设计"><a href="#四、总体设计" class="headerlink" title="四、总体设计"></a>四、总体设计</h2><h3 id="4-1-架构图"><a href="#4-1-架构图" class="headerlink" title="4.1 架构图"></a>4.1 架构图</h3><p><img src="/../images/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E6%A1%86%E6%9E%B6XXL-SSO/img_01.png" alt="输入图片说明"></p>
<h3 id="4-2-功能定位"><a href="#4-2-功能定位" class="headerlink" title="4.2 功能定位"></a>4.2 功能定位</h3><p>XXL-SSO 是一个分布式单点登录框架。只需要登录一次就可以访问所有相互信任的应用系统。</p>
<p>借助 XXL-SSO，可以快速实现分布式系统单点登录。</p>
<h3 id="4-3-核心概念"><a href="#4-3-核心概念" class="headerlink" title="4.3 核心概念"></a>4.3 核心概念</h3><table>
<thead>
<tr>
<th align="left">概念</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">SSO Server</td>
<td align="left">中央认证服务，支持集群</td>
</tr>
<tr>
<td align="left">SSO Client</td>
<td align="left">接入SSO认证中心的Client应用</td>
</tr>
<tr>
<td align="left">SSO SessionId</td>
<td align="left">登录用户会话ID，SSO 登录成功为用户自动分配</td>
</tr>
<tr>
<td align="left">SSO User</td>
<td align="left">登录用户信息，与 SSO SessionId 相对应</td>
</tr>
</tbody></table>
<h3 id="4-4-登录流程剖析"><a href="#4-4-登录流程剖析" class="headerlink" title="4.4 登录流程剖析"></a>4.4 登录流程剖析</h3><ul>
<li>用户于Client端应用访问受限资源时，将会自动 redirect 到 SSO Server 进入统一登录界面</li>
<li>用户登录成功之后将会为用户分配 SSO SessionId 并 redirect 返回来源Client端应用，同时附带分配的 SSO SessionId</li>
<li>在Client端的SSO Filter里验证 SSO SessionId 无误，将 SSO SessionId 写入到用户浏览器Client端域名下 cookie 中</li>
<li>SSO Filter验证 SSO SessionId 通过，受限资源请求放行</li>
</ul>
<h3 id="4-5-注销流程剖析"><a href="#4-5-注销流程剖析" class="headerlink" title="4.5 注销流程剖析"></a>4.5 注销流程剖析</h3><ul>
<li>用户与Client端应用请求注销Path时，将会 redirect 到 SSO Server 自动销毁全局 SSO SessionId，实现全局销毁</li>
<li>然后，访问接入SSO保护的任意Client端应用时，SSO Filter 均会拦截请求并 redirect 到 SSO Server 的统一登录界面</li>
</ul>
<h3 id="4-6-基于Cookie，相关概念"><a href="#4-6-基于Cookie，相关概念" class="headerlink" title="4.6 基于Cookie，相关概念"></a>4.6 基于Cookie，相关概念</h3><ul>
<li>登陆凭证存储：登陆成功后，用户登陆凭证被自动存储在浏览器Cookie中</li>
<li>Client端校验登陆状态：通过校验请求Cookie中的是否包含用户登录凭证判断</li>
<li>系统角色模型：<ul>
<li>SSO Server：认证中心，提供用户登陆、注销以及登陆状态校验等功能</li>
<li>Client应用：受SSO保护的Client端Web应用，为用户浏览器访问提供服务</li>
<li>用户：发起请求的用户，使用浏览器访问</li>
</ul>
</li>
</ul>
<h3 id="4-7-基于Token，相关概念"><a href="#4-7-基于Token，相关概念" class="headerlink" title="4.7 基于Token，相关概念"></a>4.7 基于Token，相关概念</h3><ul>
<li>登陆凭证存储：登陆成功后，获取到登录凭证（xxl_sso_sessionid=xxx），需要主动存储，如存储在 localStorage、Sqlite 中</li>
<li>Client端校验登陆状态：通过校验请求 Header参数 中的是否包含用户登录凭证（xxl_sso_sessionid=xxx）判断；因此，发送请求时需要在 Header参数 中设置登陆凭证</li>
<li>系统角色模型：<ul>
<li>SSO Server：认证中心，提供用户登陆、注销以及登陆状态校验等功能</li>
<li>Client应用：受SSO保护的Client端Web应用，为用户请求提供接口服务</li>
<li>用户：发起请求的用户，如使用Android、IOS、桌面客户端等请求访问</li>
</ul>
</li>
</ul>
<h3 id="4-8-未登录状态请求处理"><a href="#4-8-未登录状态请求处理" class="headerlink" title="4.8 未登录状态请求处理"></a>4.8 未登录状态请求处理</h3><p>基于Cookie，未登录状态请求：</p>
<ul>
<li>页面请求：redirect 到SSO Server登录界面</li>
<li>JSON请求：返回未登录的JSON格式响应数据<ul>
<li>数据格式：<ul>
<li>code：501 错误码</li>
<li>msg：sso not login.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>基于Token，未登录状态请求：</p>
<ul>
<li>返回未登录的JSON格式响应数据<ul>
<li>数据格式：<ul>
<li>code：501 错误码</li>
<li>msg：sso not login.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="4-9-登录态自动延期"><a href="#4-9-登录态自动延期" class="headerlink" title="4.9 登录态自动延期"></a>4.9 登录态自动延期</h3><p>支持自定义登录态有效期窗口，默认24H，当登录态有效期窗口过半时，自动顺延一个周期。</p>
<h3 id="4-10-记住密码"><a href="#4-10-记住密码" class="headerlink" title="4.10 记住密码"></a>4.10 记住密码</h3><p>未记住密码时，关闭浏览器则登录态失效；记住密码时，登录态自动延期，在自定义延期时间的基础上，原则上可以无限延期。</p>
<h3 id="4-11-路径排除"><a href="#4-11-路径排除" class="headerlink" title="4.11 路径排除"></a>4.11 路径排除</h3><p>自定义路径排除Path，允许设置多个，且支持Ant表达式。用于排除SSO客户端不需要过滤的路径。</p>
<h2 id="五、版本更新日志"><a href="#五、版本更新日志" class="headerlink" title="五、版本更新日志"></a>五、版本更新日志</h2><h3 id="5-1-版本-v0-1-0，新特性-2018-04-04"><a href="#5-1-版本-v0-1-0，新特性-2018-04-04" class="headerlink" title="5.1 版本 v0.1.0，新特性[2018-04-04]"></a>5.1 版本 v0.1.0，新特性[2018-04-04]</h3><ul>
<li>1、简洁：API直观简洁，可快速上手</li>
<li>2、轻量级：环境依赖小，部署与接入成本较低</li>
<li>3、单点登录：只需要登录一次就可以访问所有相互信任的应用系统</li>
<li>4、分布式：接入SSO认证中心的应用，支持分布式部署</li>
<li>5、HA：Server端与Client端，均支持集群部署，提高系统可用性</li>
<li>6、实时性：系统登陆、注销状态，全部Server与Client端实时共享</li>
<li>7、CS结构：基于CS结构，包括Server”认证中心”与Client”受保护应用”</li>
<li>8、跨域：支持跨域应用接入SSO认证中心</li>
</ul>
<h3 id="5-2-版本-v1-1-0-Release-Notes-2018-11-06"><a href="#5-2-版本-v1-1-0-Release-Notes-2018-11-06" class="headerlink" title="5.2 版本 v1.1.0 Release Notes [2018-11-06]"></a>5.2 版本 v1.1.0 Release Notes [2018-11-06]</h3><ul>
<li>1、 Redis配置方式增强，支持自定义DB、密码、IP、PORT等等</li>
<li>2、 Token接入方式；除了常规Cookie方式外，新增Token接入方式，并提供Sample项目</li>
<li>3、 登录态自动延期：支持自定义登录态有效期窗口，默认24H，当登录态有效期窗口过半时，自动顺延一个周期</li>
<li>4、 “记住密码” 功能优化：未记住密码时，关闭浏览器则登录态失效；记住密码时，登录态自动延期，在自定义延期时间的基础上，原则上可以无限延期</li>
<li>5、 sessionId数据结构优化，进一步提升暴露破解难度</li>
<li>6、 认证数据存储结构调整，避免登陆信息存储冗余</li>
<li>7、 认证中心用户登录校验改为Mock数据方式，取消对DB强依赖，降低部署难度</li>
<li>8、 Client端依赖Core包，slf4j依赖优化，移除log4j强依赖</li>
<li>9、 Ajax请求未登录处理逻辑优化，返回JSON格式提示数据</li>
<li>10、项目结构梳理，清理冗余依赖，升级多项依赖版本至较近版本</li>
<li>11、路径排除：新增自定义属性 “excludedPaths”，允许设置多个，且支持Ant表达式。用于排除SSO客户端不需要过滤的路径</li>
</ul>
<h3 id="5-3-版本-v1-1-1-Release-Notes-迭代中"><a href="#5-3-版本-v1-1-1-Release-Notes-迭代中" class="headerlink" title="5.3 版本 v1.1.1 Release Notes [迭代中]"></a>5.3 版本 v1.1.1 Release Notes [迭代中]</h3><ul>
<li>1、升级pom依赖版本；</li>
<li>2、[迭代中]spring mvc 版本示例；</li>
<li>3、[迭代中]Client跳转新增一次性Token验证；</li>
<li>4、拼写问题修复；</li>
</ul>
<h3 id="TODO-LIST"><a href="#TODO-LIST" class="headerlink" title="TODO LIST"></a>TODO LIST</h3><ul>
<li>1、认证中心与接入端交互数据加密，增强安全性；redirect_url必须和临时AccessToken配合才会生效，AccessToken有效期60s，阅后即焚模式；</li>
<li>2、SSO SessionId 与IP绑定，增强用户增强安全性</li>
<li>3、支持认证分组，分组内共享登陆状态，分组之间登录态隔离，【待考虑】</li>
<li>4、客户端新增属性 “xxl.sso.server”，用于构建跳转连接，防止跳转第三方导致登陆漏洞</li>
<li>5、token验证方式增加jwt方式支持</li>
<li>6、Client端移除Redis依赖，改为 LocalCache/30s + RPC + Server-Redis/Broadcast 校验方式；</li>
<li>7、安全性增强，登陆用户数据中，新增客户端信息如ip、ua等，方式session被窃取；</li>
</ul>
<h2 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h2><h3 id="6-1-项目贡献"><a href="#6-1-项目贡献" class="headerlink" title="6.1 项目贡献"></a>6.1 项目贡献</h3><p>欢迎参与项目贡献！比如提交PR修复一个bug，或者新建 <a href="https://github.com/xuxueli/xxl-sso/issues/">Issue</a> 讨论新特性或者变更。</p>
<h3 id="6-2-用户接入登记"><a href="#6-2-用户接入登记" class="headerlink" title="6.2 用户接入登记"></a>6.2 用户接入登记</h3><p>更多接入的公司，欢迎在 <a href="https://github.com/xuxueli/xxl-sso/issues/1">登记地址</a> 登记，登记仅仅为了产品推广。</p>
<h3 id="6-3-开源协议和版权"><a href="#6-3-开源协议和版权" class="headerlink" title="6.3 开源协议和版权"></a>6.3 开源协议和版权</h3><p>产品开源免费，并且将持续提供免费的社区技术支持。个人或企业内部可自由的接入和使用。</p>
<ul>
<li>Licensed under the GNU General Public License (GPL) v3.</li>
<li>Copyright (c) 2015-present, xuxueli.</li>
</ul>
]]></content>
      <categories>
        <category>分布式架构</category>
      </categories>
      <tags>
        <tag>分布式,单点登录,SSO</tag>
      </tags>
  </entry>
  <entry>
    <title>决策树中结点的特征选择方法</title>
    <url>/post/e5078155.html</url>
    <content><![CDATA[<h3 id="一、信息增益"><a href="#一、信息增益" class="headerlink" title="一、信息增益"></a>一、信息增益</h3><p> 信息增益用在ID3决策树中，信息增益是依据熵的变化值来决定的值。</p>
<p> 熵：随机变量不确定性大小的度量。熵越大，变量的不确定性就越大。</p>
<p> 熵的公式表示：</p>
<p>​     X的概率分布为P(x=xi) = pi, i=1,2,3…(x可能的取值)，随机变量X熵为<img src="/../images/%E5%86%B3%E7%AD%96%E6%A0%91%E4%B8%AD%E7%BB%93%E7%82%B9%E7%9A%84%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9%E6%96%B9%E6%B3%95/gif.latex" alt="img">，并且0log0=1。</p>
<p>​    条件熵：H(Y|X)表示在随机变量X的条件下随机变量Y的不确定性。<img src="/../images/%E5%86%B3%E7%AD%96%E6%A0%91%E4%B8%AD%E7%BB%93%E7%82%B9%E7%9A%84%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9%E6%96%B9%E6%B3%95/gif.latex" alt="img"></p>
<p>​    在决策树中，Y即是数据集，X即是某个特征，即条件熵就是数据集在特征A划分条件下的熵。</p>
<p>​    信息增益：数据集D的熵H(D)与特征A给定条件下D的条件熵H(D|A)之差。g(D|A)=H(D)-H(D|A)</p>
<p>​    因此根据信息增益决策划分节点时特征选择方法是：对训练数据集D，计算其每隔特征的信息增益，并比较它们的大小，选择信息增益最大的特征。</p>
<h3 id="二、信息增益比"><a href="#二、信息增益比" class="headerlink" title="二、信息增益比"></a>二、信息增益比</h3><p>​    以信息增益作为划分数据集的特征，存在偏向于选择去取值较多的特征的问题，这时候可以使用信息增益比对这一问题进行修正。C4.5决策树正是基于信息增益比进行特征的选择进行结点的分割。</p>
<p>​    信息增益比定义：特征A对于训练集D的信息增益比定义为信息增益g(D|A)与数据集D关于特征A的值得熵之比。</p>
<p>​    公式定义：<img src="/../images/%E5%86%B3%E7%AD%96%E6%A0%91%E4%B8%AD%E7%BB%93%E7%82%B9%E7%9A%84%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9%E6%96%B9%E6%B3%95/gif.latex" alt="img">,其中<img src="/../images/%E5%86%B3%E7%AD%96%E6%A0%91%E4%B8%AD%E7%BB%93%E7%82%B9%E7%9A%84%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9%E6%96%B9%E6%B3%95/gif.latex" alt="img">。</p>
<p>​    关于为什么信息增益比可以修正信息增益存在偏向去选择取值较多的特征的问题，可以认为当一个特征取值特别多时，会分出很多个子结点，当数据集不是很大时，每个子结点只能有很少的数据，大数定律满足条件性更差，不能体现整体数据集的分布，从而使得不确定性减小，比如这个特征有N个取值，且数据集恰好有N个例子，从而每个结点只有一个数据，从而每点的熵均为0，从而加起来也为0，从而信息增益最大。然而，当数据集十分大足够大时，就不会存在这种问题了。</p>
<h3 id="三、基尼指数-Gini"><a href="#三、基尼指数-Gini" class="headerlink" title="三、基尼指数(Gini)"></a>三、基尼指数(Gini)</h3><p>​    CART树分为回归树和分类树，CART分类树结点选择特征进行分裂时选择特征的方法就是基尼指数。</p>
<p>​    分类问题中，假设有K个类，样本点属于第k类的概率为<img src="/../images/%E5%86%B3%E7%AD%96%E6%A0%91%E4%B8%AD%E7%BB%93%E7%82%B9%E7%9A%84%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9%E6%96%B9%E6%B3%95/gif.latex" alt="img">,则概率分布的基尼指数定义为：</p>
<p>​    <img src="/../images/%E5%86%B3%E7%AD%96%E6%A0%91%E4%B8%AD%E7%BB%93%E7%82%B9%E7%9A%84%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9%E6%96%B9%E6%B3%95/gif.latex" alt="img">.</p>
<p>​    基尼指数Gini(D)表示集合D的不确定性，基尼指数Gini(D，A)表示经A=a分割后集合D的不确定性，基尼指数越大，样本集合的不确定性也就越大，与熵类似。</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>-大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>卷积与转置卷积</title>
    <url>/post/525002ea.html</url>
    <content><![CDATA[<p>卷积与转置卷积</p>
<p><img src="/../images/%E5%8D%B7%E7%A7%AF%E4%B8%8E%E8%BD%AC%E7%BD%AE%E5%8D%B7%E7%A7%AF/20190110171022961.jpg" alt="在这里插入图片描述"><br>得益于神经网络崛起，卷积成为近些年大热的数学词汇，不再只是待在信号处理这门要命的课程之中。</p>
<p>关于卷积在图像处理中的应用，操作部分看上图就明白了：假设输入图像的大小为 5 x 5，局部感受野（或称<strong>卷积核</strong>）的大小为 3 x 3，那么输出层一个神经元所对应的计算过程如上图所示。动态一点的话也可以看下面的动图。<br><img src="/../images/%E5%8D%B7%E7%A7%AF%E4%B8%8E%E8%BD%AC%E7%BD%AE%E5%8D%B7%E7%A7%AF/20190110171546140.gif" alt="在这里插入图片描述"><br>而为什么要这么算，如果学过一点图像处理就很好说明，图像处理的经典边缘提取算法如canny，sobel等，或者其他一些经典算法，其实归根结底就是一个卷积过程，只不过里面的卷积核是人为设定的而已。相比于神经网络的全连接层，用卷积层更加能够快速提取到图像的局部信息，也因此更有旋转不变性等的优势，此外需要训练的参数量相比全连接也要少的多。</p>
<p>在实做方面，为了效率，往往会把卷积计算用矩阵来做。</p>
<p>假设一个卷积操作，它的输入是 4x4，卷积核大小是 3x3，步长为 1x1，输出则为 2x2，如下所示：</p>
<p>我们将其从左往右，从上往下以的方式展开，</p>
<ul>
<li>输入矩阵可以展开成维数为 [16, 1] 的矩阵，记作 x</li>
<li>输出矩阵可以展开成维数为 [4, 1] 的矩阵，记作 y</li>
<li>卷积核可以表示为 [4, 16] 的矩阵，记作 C，其中非 0 的值表示卷积对应的第 i 行 j 列的权重。<img src="/../images/%E5%8D%B7%E7%A7%AF%E4%B8%8E%E8%BD%AC%E7%BD%AE%E5%8D%B7%E7%A7%AF/20190110171627110.png" alt="在这里插入图片描述"></li>
<li>所以卷积可以用 y = C * x = [4, 16] * [16, 1]=[4, 1]y=C∗x=[4,16]∗[16,1]=[4,1]来表示</li>
</ul>
<p>那卷积就说完了（padding那些并没提及，后面再补吧，比较简单）。</p>
<p>下面看看转置卷积。它火起来应该是从FCN（Fully Convolutional Networks for Semantic Segmentation）这篇论文开始的。该论文提出了一种全卷积神经网络，然后通过转置卷积对最后一层（或者倒数几层）进行上采样，将图像的大小恢复到与输入图像一样，该文章为语义分割指出了一条明路，也使得转置卷积看起来非常高大上。但其实，这个东西并没有什么神奇的。。。</p>
<p>首先再看一下<br><img src="/../images/%E5%8D%B7%E7%A7%AF%E4%B8%8E%E8%BD%AC%E7%BD%AE%E5%8D%B7%E7%A7%AF/20190110171717569.png" alt="在这里插入图片描述"><br>卷积的示意图，下面的1只参与生成上面的1，而下面的2参与生成上面的1、2。那么我们能不能反过来，把这一过程逆向呢？答案是可以的，就是下面这张图：<br><img src="/../images/%E5%8D%B7%E7%A7%AF%E4%B8%8E%E8%BD%AC%E7%BD%AE%E5%8D%B7%E7%A7%AF/20190110171753705.png" alt="在这里插入图片描述"><br>我们把小图像按照需要扩展一下（下面虚线部分），然后其他部分按照卷积那么算就可以了。它得到的大小会跟卷积前的一样。巧妙的是上面的1只受下面的1影响，而上面的2受到下面的1、2影响，刚刚好就是一对逆向关系。如果把现在的小图像写在右边，卷积核矩阵写在左边，那么该卷积核矩阵写出来刚刚好就是正常卷积的卷积核矩阵的转置。所以这种卷积叫做转置卷积。</p>
<p>这里面有个问题可以稍微看下，那就是对原图做卷积然后再做转置卷积的过程是一个从大到小再到大的过程，那么开始和结束是一样的吗？</p>
<p>答案是不一样的，这个过程会丢失图像信息。至于丢多少主要取决于中间的”小”能保存多少。但这对于语义分割是OK的，因为我们最终要得到的信息会比原图少的多。</p>
<p>另外在本人看来，因为神经网络的权重都是要训练之后得出来的，因此其实转置卷积和正常卷积看起来真的没有多大的不同，不过就是在正常卷积不填充的情况下会把图像变小，而转置卷积一定会填充而把图像变大罢了。</p>
<p>在pytorch中使用转置卷积的代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line">from PIL import Image</span><br><span class="line">import numpy as np</span><br><span class="line">import torchvision.transforms as transforms</span><br><span class="line">import torch</span><br><span class="line">from torch import nn</span><br><span class="line"></span><br><span class="line">x=Image.open(&quot;demo.jpg&quot;)</span><br><span class="line">x.show()</span><br><span class="line">x=transforms.ToTensor()(x)</span><br><span class="line">x=torch.unsqueeze(x,0)#添加一个维度</span><br><span class="line">conv_trans = nn.ConvTranspose2d(3, 3,(12,12), 2)# 定义转置卷积</span><br><span class="line">y=conv_trans(x)#转置卷积计算</span><br><span class="line">y=torch.squeeze(y)#扔掉一个维度</span><br><span class="line">#结果显示</span><br><span class="line">imgout=transforms.ToPILImage()(y)</span><br><span class="line">print(x.shape)</span><br><span class="line">print(y.shape)</span><br><span class="line">imgout.show()</span><br></pre></td></tr></table></figure>
<p>原图<br><img src="/../images/%E5%8D%B7%E7%A7%AF%E4%B8%8E%E8%BD%AC%E7%BD%AE%E5%8D%B7%E7%A7%AF/20190111094531172.png" alt="在这里插入图片描述"><br>结果：<br><img src="/../images/%E5%8D%B7%E7%A7%AF%E4%B8%8E%E8%BD%AC%E7%BD%AE%E5%8D%B7%E7%A7%AF/2019011109465584.png" alt="在这里插入图片描述"></p>
<p>从图上可以看到，pytorch在初始化的时候应该已经将转置卷积核参数设置成特征提取的形式了。</p>
<p>参考文章：</p>
<p><a href="https://www.jianshu.com/p/09ea4df7a788?utm_source=oschina-app">https://www.jianshu.com/p/09ea4df7a788?utm_source=oschina-app</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1363619">https://cloud.tencent.com/developer/article/1363619</a></p>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>-人工智能 -神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>前后端分离实现Cas单点登录</title>
    <url>/post/b669d9f2.html</url>
    <content><![CDATA[<h3 id="前后端分离实现单点登录"><a href="#前后端分离实现单点登录" class="headerlink" title="前后端分离实现单点登录"></a>前后端分离实现单点登录</h3><ul>
<li><a href="https://blog.csdn.net/ZD_Victory/article/details/100916596#_2">环境介绍</a></li>
<li><ul>
<li><a href="https://blog.csdn.net/ZD_Victory/article/details/100916596#_6">会遇到的问题</a></li>
<li><a href="https://blog.csdn.net/ZD_Victory/article/details/100916596#_11">问题解决</a></li>
<li><a href="https://blog.csdn.net/ZD_Victory/article/details/100916596#_448">需要注意的点</a></li>
</ul>
</li>
</ul>
<h1 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h1><p>前端vue单独部署 后端springboot单独部署</p>
<h2 id="会遇到的问题"><a href="#会遇到的问题" class="headerlink" title="会遇到的问题"></a>会遇到的问题</h2><p>跨域<br>cas认证失败无法重定向，前端302无法捕捉。</p>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>1、跨域<br>直接上代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.core.annotation.Order;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@EnableWebMvc</span><br><span class="line">public class CorsConfig implements WebMvcConfigurer &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    @Order(0)</span><br><span class="line">    public void addCorsMappings(CorsRegistry registry) &#123;</span><br><span class="line">        //设置允许跨域的路径</span><br><span class="line">        registry.addMapping(&quot;/**&quot;)</span><br><span class="line">                //设置允许跨域请求的域名</span><br><span class="line">                .allowedOrigins(&quot;*&quot;)</span><br><span class="line">                //这里：是否允许证书 不再默认开启</span><br><span class="line">                .allowCredentials(true)</span><br><span class="line">                //设置允许的方法</span><br><span class="line">                .allowedMethods(&quot;*&quot;)</span><br><span class="line">                //跨域允许时间</span><br><span class="line">                .maxAge(3600);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、cas认证失败无法重定向，前端302无法捕捉<br>这里就比较复杂了，我的方案就是CAS源码竟然是无法认证直接重定向，而ajax请求又不能直接重定向，导致前端302，而302vue response拦截器是拦截不到的。所以就想到不让cas给我重定向，给我返回状态码，告诉前端认证失败，让前端直接跳转cas服务器登录地址。上代码</p>
<p>修改cas源码过滤器，复制源码AuthenticationFilter这个过滤器，重写他，其实这里只改了重定向的代码其他都一样。<br><img src="/../images/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%AE%9E%E7%8E%B0Cas%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/20190917100531496.png" alt="img"></p>
<p>这个类复制出来把源码复制进去，修改图里面的位置，再把原来使用AuthenticationFilter的地方换成你新的类，这样认证失败就返回的是状态码前端可以拦截。</p>
<p>这里还是贴上我cas client的一些代码</p>
<p>这个是我复制源码AuthenticationFilter新建的类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package com.nascent.daren.filter;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.nascent.utils.R;</span><br><span class="line">import org.jasig.cas.client.Protocol;</span><br><span class="line">import org.jasig.cas.client.authentication.AuthenticationRedirectStrategy;</span><br><span class="line">import org.jasig.cas.client.authentication.ContainsPatternUrlPatternMatcherStrategy;</span><br><span class="line">import org.jasig.cas.client.authentication.DefaultAuthenticationRedirectStrategy;</span><br><span class="line">import org.jasig.cas.client.authentication.DefaultGatewayResolverImpl;</span><br><span class="line">import org.jasig.cas.client.authentication.ExactUrlPatternMatcherStrategy;</span><br><span class="line">import org.jasig.cas.client.authentication.GatewayResolver;</span><br><span class="line">import org.jasig.cas.client.authentication.RegexUrlPatternMatcherStrategy;</span><br><span class="line">import org.jasig.cas.client.authentication.UrlPatternMatcherStrategy;</span><br><span class="line">import org.jasig.cas.client.configuration.ConfigurationKeys;</span><br><span class="line">import org.jasig.cas.client.util.AbstractCasFilter;</span><br><span class="line">import org.jasig.cas.client.util.CommonUtils;</span><br><span class="line">import org.jasig.cas.client.util.ReflectUtils;</span><br><span class="line">import org.jasig.cas.client.validation.Assertion;</span><br><span class="line"></span><br><span class="line">import javax.servlet.FilterChain;</span><br><span class="line">import javax.servlet.FilterConfig;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.ServletRequest;</span><br><span class="line">import javax.servlet.ServletResponse;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.PrintWriter;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class DaRenAuthenticationFilter extends AbstractCasFilter &#123;</span><br><span class="line">    /**</span><br><span class="line">     * The URL to the CAS Server login.</span><br><span class="line">     */</span><br><span class="line">    private String casServerLoginUrl;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Whether to send the renew request or not.</span><br><span class="line">     */</span><br><span class="line">    private boolean renew = false;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Whether to send the gateway request or not.</span><br><span class="line">     */</span><br><span class="line">    private boolean gateway = false;</span><br><span class="line"></span><br><span class="line">    private GatewayResolver gatewayStorage = new DefaultGatewayResolverImpl();</span><br><span class="line"></span><br><span class="line">    private AuthenticationRedirectStrategy authenticationRedirectStrategy = new DefaultAuthenticationRedirectStrategy();</span><br><span class="line"></span><br><span class="line">    private UrlPatternMatcherStrategy ignoreUrlPatternMatcherStrategyClass = null;</span><br><span class="line"></span><br><span class="line">    private static final Map&lt;String, Class&lt;? extends UrlPatternMatcherStrategy&gt;&gt; PATTERN_MATCHER_TYPES =</span><br><span class="line">            new HashMap&lt;String, Class&lt;? extends UrlPatternMatcherStrategy&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        PATTERN_MATCHER_TYPES.put(&quot;CONTAINS&quot;, ContainsPatternUrlPatternMatcherStrategy.class);</span><br><span class="line">        PATTERN_MATCHER_TYPES.put(&quot;REGEX&quot;, RegexUrlPatternMatcherStrategy.class);</span><br><span class="line">        PATTERN_MATCHER_TYPES.put(&quot;EXACT&quot;, ExactUrlPatternMatcherStrategy.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public DaRenAuthenticationFilter() &#123;</span><br><span class="line">        this(Protocol.CAS2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected DaRenAuthenticationFilter(final Protocol protocol) &#123;</span><br><span class="line">        super(protocol);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void initInternal(final FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line">        if (!isIgnoreInitConfiguration()) &#123;</span><br><span class="line">            super.initInternal(filterConfig);</span><br><span class="line">            setCasServerLoginUrl(getString(ConfigurationKeys.CAS_SERVER_LOGIN_URL));</span><br><span class="line">            setRenew(getBoolean(ConfigurationKeys.RENEW));</span><br><span class="line">            setGateway(getBoolean(ConfigurationKeys.GATEWAY));</span><br><span class="line"></span><br><span class="line">            final String ignorePattern = getString(ConfigurationKeys.IGNORE_PATTERN);</span><br><span class="line">            final String ignoreUrlPatternType = getString(ConfigurationKeys.IGNORE_URL_PATTERN_TYPE);</span><br><span class="line"></span><br><span class="line">            if (ignorePattern != null) &#123;</span><br><span class="line">                final Class&lt;? extends UrlPatternMatcherStrategy&gt; ignoreUrlMatcherClass = PATTERN_MATCHER_TYPES.get(ignoreUrlPatternType);</span><br><span class="line">                if (ignoreUrlMatcherClass != null) &#123;</span><br><span class="line">                    this.ignoreUrlPatternMatcherStrategyClass = ReflectUtils.newInstance(ignoreUrlMatcherClass.getName());</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        logger.trace(&quot;Assuming &#123;&#125; is a qualified class name...&quot;, ignoreUrlPatternType);</span><br><span class="line">                        this.ignoreUrlPatternMatcherStrategyClass = ReflectUtils.newInstance(ignoreUrlPatternType);</span><br><span class="line">                    &#125; catch (final IllegalArgumentException e) &#123;</span><br><span class="line">                        logger.error(&quot;Could not instantiate class [&#123;&#125;]&quot;, ignoreUrlPatternType, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (this.ignoreUrlPatternMatcherStrategyClass != null) &#123;</span><br><span class="line">                    this.ignoreUrlPatternMatcherStrategyClass.setPattern(ignorePattern);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            final Class&lt;? extends GatewayResolver&gt; gatewayStorageClass = getClass(ConfigurationKeys.GATEWAY_STORAGE_CLASS);</span><br><span class="line"></span><br><span class="line">            if (gatewayStorageClass != null) &#123;</span><br><span class="line">                setGatewayStorage(ReflectUtils.newInstance(gatewayStorageClass));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            final Class&lt;? extends AuthenticationRedirectStrategy&gt; authenticationRedirectStrategyClass = getClass(ConfigurationKeys.AUTHENTICATION_REDIRECT_STRATEGY_CLASS);</span><br><span class="line"></span><br><span class="line">            if (authenticationRedirectStrategyClass != null) &#123;</span><br><span class="line">                this.authenticationRedirectStrategy = ReflectUtils.newInstance(authenticationRedirectStrategyClass);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void init() &#123;</span><br><span class="line">        super.init();</span><br><span class="line">        CommonUtils.assertNotNull(this.casServerLoginUrl, &quot;casServerLoginUrl cannot be null.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public final void doFilter(final ServletRequest servletRequest, final ServletResponse servletResponse,</span><br><span class="line">                               final FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        final HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class="line">        final HttpServletResponse response = (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">        if (isRequestUrlExcluded(request)) &#123;</span><br><span class="line">            logger.debug(&quot;Request is ignored.&quot;);</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        final HttpSession session = request.getSession(false);</span><br><span class="line">        final Assertion assertion = session != null ? (Assertion) session.getAttribute(CONST_CAS_ASSERTION) : null;</span><br><span class="line"></span><br><span class="line">        if (assertion != null) &#123;</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        final String serviceUrl = constructServiceUrl(request, response);</span><br><span class="line">        final String ticket = retrieveTicketFromRequest(request);</span><br><span class="line">        final boolean wasGatewayed = this.gateway &amp;&amp; this.gatewayStorage.hasGatewayedAlready(request, serviceUrl);</span><br><span class="line"></span><br><span class="line">        if (CommonUtils.isNotBlank(ticket) || wasGatewayed) &#123;</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        final String modifiedServiceUrl;</span><br><span class="line"></span><br><span class="line">        logger.debug(&quot;no ticket and no assertion found&quot;);</span><br><span class="line">        if (this.gateway) &#123;</span><br><span class="line">            logger.debug(&quot;setting gateway attribute in session&quot;);</span><br><span class="line">            modifiedServiceUrl = this.gatewayStorage.storeGatewayInformation(request, serviceUrl);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            modifiedServiceUrl = serviceUrl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        logger.debug(&quot;Constructed service url: &#123;&#125;&quot;, modifiedServiceUrl);</span><br><span class="line"></span><br><span class="line">        final String urlToRedirectTo = CommonUtils.constructRedirectUrl(this.casServerLoginUrl,</span><br><span class="line">                getProtocol().getServiceParameterName(), modifiedServiceUrl, this.renew, this.gateway);</span><br><span class="line"></span><br><span class="line">        logger.debug(&quot;redirecting to \&quot;&#123;&#125;\&quot;&quot;, urlToRedirectTo);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">        response.setContentType(&quot;application/json; charset=UTF-8&quot;);</span><br><span class="line">        out.println(JSON.toJSONString(R.error(401,&quot;登陆出错&quot;)));</span><br><span class="line">        //this.authenticationRedirectStrategy.redirect(request, response, urlToRedirectTo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public final void setRenew(final boolean renew) &#123;</span><br><span class="line">        this.renew = renew;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public final void setGateway(final boolean gateway) &#123;</span><br><span class="line">        this.gateway = gateway;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public final void setCasServerLoginUrl(final String casServerLoginUrl) &#123;</span><br><span class="line">        this.casServerLoginUrl = casServerLoginUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public final void setGatewayStorage(final GatewayResolver gatewayStorage) &#123;</span><br><span class="line">        this.gatewayStorage = gatewayStorage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private boolean isRequestUrlExcluded(final HttpServletRequest request) &#123;</span><br><span class="line">        if (this.ignoreUrlPatternMatcherStrategyClass == null) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        final StringBuffer urlBuffer = request.getRequestURL();</span><br><span class="line">        if (request.getQueryString() != null) &#123;</span><br><span class="line">            urlBuffer.append(&quot;?&quot;).append(request.getQueryString());</span><br><span class="line">        &#125;</span><br><span class="line">        final String requestUri = urlBuffer.toString();</span><br><span class="line">        return this.ignoreUrlPatternMatcherStrategyClass.matches(requestUri);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个是springboot配置的cas类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.jasig.cas.client.session.SingleSignOutFilter;</span><br><span class="line">import org.jasig.cas.client.session.SingleSignOutHttpSessionListener;</span><br><span class="line">import org.jasig.cas.client.util.AssertionThreadLocalFilter;</span><br><span class="line">import org.jasig.cas.client.util.HttpServletRequestWrapperFilter;</span><br><span class="line">import org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line">import org.springframework.boot.web.servlet.ServletListenerRegistrationBean;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.security.web.authentication.logout.LogoutFilter;</span><br><span class="line">import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@Component</span><br><span class="line">public class CasConfigure &#123;</span><br><span class="line">    /**</span><br><span class="line">     * cas服务端地址</span><br><span class="line">     */</span><br><span class="line">   // private String  casServerLoginUrl=&quot;&quot;;</span><br><span class="line">    private String  casServerLoginUrl=&quot;&quot;;</span><br><span class="line">    /**lo</span><br><span class="line">     * 当前应用地址</span><br><span class="line">     */</span><br><span class="line">    @Value(&quot;$&#123;env.serverName&#125;&quot;)</span><br><span class="line">    private String serverName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 该监听器用于实现单点登出功能，session失效监听器</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public ServletListenerRegistrationBean&lt;SingleSignOutHttpSessionListener&gt; singleSignOutHttpSessionListener() &#123;</span><br><span class="line">        ServletListenerRegistrationBean&lt;SingleSignOutHttpSessionListener&gt; listener = new ServletListenerRegistrationBean&lt;&gt;();</span><br><span class="line">        listener.setEnabled(true);</span><br><span class="line">        listener.setListener(new SingleSignOutHttpSessionListener());</span><br><span class="line">        listener.setOrder(1);</span><br><span class="line">        return listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 该过滤器用于实现单点登出功能，单点退出配置，一定要放在其他filter之前</span><br><span class="line">     *  当调用当前应用的/logout时，该拉截器将会重定向到cas服务端的/logout请求</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean logOutFilter() &#123;</span><br><span class="line">        FilterRegistrationBean filterRegistration = new FilterRegistrationBean();//new SecurityContextLogoutHandler()</span><br><span class="line">        LogoutFilter logoutFilter = new LogoutFilter(casServerLoginUrl + &quot;/logout?service=&quot; + serverName,new SecurityContextLogoutHandler());</span><br><span class="line">        filterRegistration.setFilter(logoutFilter);</span><br><span class="line">        filterRegistration.setEnabled(true);</span><br><span class="line">        filterRegistration.addUrlPatterns(&quot;/logout&quot;);</span><br><span class="line">        filterRegistration.addInitParameter(&quot;casServerUrlPrefix&quot;, casServerLoginUrl);</span><br><span class="line">        filterRegistration.addInitParameter(&quot;serverName&quot;, serverName);</span><br><span class="line">        filterRegistration.setOrder(2);</span><br><span class="line">        return filterRegistration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 该过滤器用于实现单点登出功能，当一个系统登出时，cas服务端会通知，各个应</span><br><span class="line">     * 用进行进行退出操作，该过滤器就是用来接收cas回调的请求，如果是前后端分离</span><br><span class="line">     * 应用，需要重写SingleSignOutFilter过滤器，按自已的业务规则去处理</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean singleSignOutFilter() &#123;</span><br><span class="line">        FilterRegistrationBean filterRegistration = new FilterRegistrationBean();</span><br><span class="line">        filterRegistration.setFilter(new SingleSignOutFilter());</span><br><span class="line">        filterRegistration.setEnabled(true);</span><br><span class="line">        filterRegistration.addUrlPatterns(&quot;/*&quot;);</span><br><span class="line">        filterRegistration.addInitParameter(&quot;casServerUrlPrefix&quot;, casServerLoginUrl);</span><br><span class="line">        filterRegistration.addInitParameter(&quot;serverName&quot;, serverName);</span><br><span class="line">        filterRegistration.setOrder(3);</span><br><span class="line">        return filterRegistration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 该过滤器负责单点登录功能，用户登录的认证工作</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean authenticationFilterRegistrationBean() &#123;</span><br><span class="line">        FilterRegistrationBean authenticationFilter = new FilterRegistrationBean();</span><br><span class="line">        authenticationFilter.setFilter(new DaRenAuthenticationFilter()); //这里就是被换的类</span><br><span class="line">        Map&lt;String, String&gt; initParameters = new HashMap&lt;String, String&gt;();</span><br><span class="line">        initParameters.put(&quot;casServerLoginUrl&quot;, casServerLoginUrl);</span><br><span class="line">       initParameters.put(&quot;ignorePattern&quot;, &quot;/api/&quot;);</span><br><span class="line">        initParameters.put(&quot;serverName&quot;,serverName);</span><br><span class="line">        authenticationFilter.setInitParameters(initParameters);</span><br><span class="line">        authenticationFilter.setOrder(4);</span><br><span class="line">        List&lt;String&gt; urlPatterns = new ArrayList&lt;String&gt;();</span><br><span class="line">        urlPatterns.add(&quot;/*&quot;);</span><br><span class="line">        authenticationFilter.setUrlPatterns(urlPatterns);</span><br><span class="line">        return authenticationFilter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 该过滤器用于单点登录功能，负责对Ticket的校验工作</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean ValidationFilterRegistrationBean()&#123;</span><br><span class="line">        FilterRegistrationBean authenticationFilter = new FilterRegistrationBean();</span><br><span class="line">        authenticationFilter.setOrder(5);</span><br><span class="line">        authenticationFilter.setFilter(new Cas20ProxyReceivingTicketValidationFilter());</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; initParameters = new HashMap&lt;&gt;();</span><br><span class="line">        initParameters.put(&quot;casServerUrlPrefix&quot;, casServerLoginUrl);</span><br><span class="line">        initParameters.put(&quot;serverName&quot;, serverName);</span><br><span class="line">        authenticationFilter.setInitParameters(initParameters);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; urlPatterns = new ArrayList&lt;String&gt;();</span><br><span class="line">        urlPatterns.add(&quot;/*&quot;);</span><br><span class="line">        authenticationFilter.setUrlPatterns(urlPatterns);</span><br><span class="line">        return authenticationFilter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 该过滤器用于单点登录功能 ，对HttpServletRequest请求包装， 可通过HttpServletRequest的getRemoteUser()方法获得登录用户的登录名</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean casHttpServletRequestWrapperFilter()&#123;</span><br><span class="line">        FilterRegistrationBean authenticationFilter = new FilterRegistrationBean();</span><br><span class="line">        authenticationFilter.setFilter(new HttpServletRequestWrapperFilter());</span><br><span class="line">        authenticationFilter.setOrder(6);</span><br><span class="line">        List&lt;String&gt; urlPatterns = new ArrayList&lt;String&gt;();</span><br><span class="line">        urlPatterns.add(&quot;/*&quot;);</span><br><span class="line">        authenticationFilter.setUrlPatterns(urlPatterns);</span><br><span class="line">        return authenticationFilter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 该过滤器使得可以通过org.jasig.cas.client.util.AssertionHolder来获取用户的登录名。</span><br><span class="line">     比如AssertionHolder.getAssertion().getPrincipal().getName()。</span><br><span class="line">     这个类把Assertion信息放在ThreadLocal变量中，这样应用程序不在web层也能够获取到当前登录信息</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean casAssertionThreadLocalFilter()&#123;</span><br><span class="line">        FilterRegistrationBean authenticationFilter = new FilterRegistrationBean();</span><br><span class="line">        authenticationFilter.setFilter(new AssertionThreadLocalFilter());</span><br><span class="line">        authenticationFilter.setOrder(7);</span><br><span class="line">        List&lt;String&gt; urlPatterns = new ArrayList&lt;&gt;();</span><br><span class="line">        urlPatterns.add(&quot;/*&quot;);</span><br><span class="line">        authenticationFilter.setUrlPatterns(urlPatterns);</span><br><span class="line">        return authenticationFilter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到这里前端就可以捕捉跳转cas服务器的登录地址。<br>这里一定要注意前端跳转指定Cas回调地址必须是后端地址，因为cas服务器返回的票据还需要后端验证。这样session cookie才会正确。那么后台还得提供一个ValidateController里面在跳转前端服务器地址。<br>上代码<br>前端拦截器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">axiosInstance.interceptors.response.use(response =&gt; &#123;</span><br><span class="line">    let status = response.data.code;</span><br><span class="line">    let url =  &quot;http://cas服务登录地址/?service=回调后端控制器/daren/checkToken&quot;;</span><br><span class="line">    if(status ===401)&#123;</span><br><span class="line">        window.location.href = url;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后台控制器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/daren&quot;)</span><br><span class="line">public class ValidateController &#123;</span><br><span class="line">    @RequestMapping(&quot;/checkToken&quot;)</span><br><span class="line">    public void index(HttpServletRequest request, HttpServletResponse response) throws IOException &#123;</span><br><span class="line">        response.sendRedirect(”前端服务器地址&quot;);//</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好了整个流程就可以走通了。</p>
<h2 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h2><p>1、所有前后端地址，如果是本地调试，需要统一，都是用ip那么地址都配置成ip，是localhost就都是localhost<br>2、重要点还是在改掉原来的cas重定向的逻辑。理解了就知道怎么弄了。</p>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,单点登录,前后端分离</tag>
      </tags>
  </entry>
  <entry>
    <title>前后端分离单点登录方案</title>
    <url>/post/659ce4d0.html</url>
    <content><![CDATA[<h1 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h1><p>修改src/permission.js文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//需要设置令牌</span><br><span class="line">import &#123; getToken, setToken &#125; from &#x27;@/utils/auth&#x27;</span><br><span class="line">//获取令牌参数</span><br><span class="line">const token = to.query.token</span><br><span class="line">if (token) &#123;</span><br><span class="line">//前端存储令牌</span><br><span class="line">store.commit(&#x27;user/SET_TOKEN&#x27;, token)</span><br><span class="line">setToken(token)</span><br><span class="line">//避免显示令牌</span><br><span class="line">next(to.path)</span><br><span class="line">&#125;</span><br><span class="line">//跳转后端登录</span><br><span class="line">window.location.href = process.env.VUE_APP_BASE_API + &#x27;/user/login?redirect=&#x27; + encodeURIComponent(window.location.href)</span><br></pre></td></tr></table></figure>
<p>修改src/utils/request.js文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//修改令牌参数</span><br><span class="line">config.headers[&#x27;X-Auth-Token&#x27;] = getToken()</span><br></pre></td></tr></table></figure>
<p>修改vue.config.js文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//代理后端服务</span><br><span class="line">target: `http://localhost:8080`,</span><br></pre></td></tr></table></figure>
<p>修改src/layout/components/Navbar.vue文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//跳转登出地址</span><br><span class="line">window.location.href = process.env.VUE_APP_BASE_API + &#x27;/user/logout?redirect=&#x27; + encodeURIComponent(window.location.href)</span><br></pre></td></tr></table></figure>


<h1 id="后端部分"><a href="#后端部分" class="headerlink" title="后端部分"></a>后端部分</h1><p>修改pom.xml文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//引入Spring-Session依赖</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.session&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-session-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">//引入Cas-Client依赖</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.jasig.cas.client&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;cas-client-core&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.5.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>修改application.properties文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//配置Spring-Session参数</span><br><span class="line">spring.session.store-type=redis</span><br><span class="line">spring.redis.host=192.168.99.230</span><br><span class="line">spring.redis.password=bessky123</span><br><span class="line">spring.redis.port=6379</span><br><span class="line">spring.redis.database=15</span><br></pre></td></tr></table></figure>
<p>修改Application.java文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//启用Spring-Session的REST模式</span><br><span class="line">@Bean</span><br><span class="line">public HttpSessionIdResolver httpSessionIdResolver()</span><br><span class="line">&#123;</span><br><span class="line">    return HeaderHttpSessionIdResolver.xAuthToken();</span><br><span class="line">&#125;</span><br><span class="line">//单点登录配置</span><br><span class="line">@Bean</span><br><span class="line">public FilterRegistrationBean&lt;Cas30ProxyReceivingTicketValidationFilter&gt; cas30ProxyReceivingTicketValidationFilter()</span><br><span class="line">&#123;</span><br><span class="line">    FilterRegistrationBean&lt;Cas30ProxyReceivingTicketValidationFilter&gt; registration = new FilterRegistrationBean&lt;&gt;();</span><br><span class="line">    registration.setFilter(new Cas30ProxyReceivingTicketValidationFilter());</span><br><span class="line">    registration.addInitParameter(&quot;casServerUrlPrefix&quot;, &quot;https://erp.ser.ltd/sso&quot;);</span><br><span class="line">    registration.addInitParameter(&quot;serverName&quot;, &quot;http://localhost:8080&quot;);</span><br><span class="line">    registration.addInitParameter(&quot;redirectAfterValidation&quot;, &quot;false&quot;);</span><br><span class="line">    registration.addUrlPatterns(&quot;/*&quot;);</span><br><span class="line">    return registration;</span><br><span class="line">&#125;</span><br><span class="line">@Bean</span><br><span class="line">public FilterRegistrationBean&lt;AuthenticationFilter&gt; authenticationFilter()</span><br><span class="line">&#123;</span><br><span class="line">    FilterRegistrationBean&lt;AuthenticationFilter&gt; registration = new FilterRegistrationBean&lt;&gt;();</span><br><span class="line">    registration.setFilter(new AuthenticationFilter());</span><br><span class="line">    registration.addInitParameter(&quot;casServerUrlPrefix&quot;, &quot;https://erp.ser.ltd/sso&quot;);</span><br><span class="line">    registration.addInitParameter(&quot;serverName&quot;, &quot;http://localhost:8080&quot;);</span><br><span class="line">    registration.addUrlPatterns(&quot;/*&quot;);</span><br><span class="line">    return registration;</span><br><span class="line">&#125;</span><br><span class="line">@Bean</span><br><span class="line">public FilterRegistrationBean&lt;HttpServletRequestWrapperFilter&gt; httpServletRequestWrapperFilter()</span><br><span class="line">&#123;</span><br><span class="line">    FilterRegistrationBean&lt;HttpServletRequestWrapperFilter&gt; registration = new FilterRegistrationBean&lt;&gt;();</span><br><span class="line">    registration.setFilter(new HttpServletRequestWrapperFilter());</span><br><span class="line">    registration.addUrlPatterns(&quot;/*&quot;);</span><br><span class="line">    return registration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>增加UserController.java文件</p>
<pre><code>//模拟前端数据
@RestController
@RequestMapping(&quot;user&quot;)
public class UserController
&#123;
    @RequestMapping(&quot;login&quot;)
    public void login(String redirect, HttpServletResponse response, HttpSession session) throws IOException
    &#123;
        response.sendRedirect(redirect + &quot;?token=&quot; + session.getId());
    &#125;
@RequestMapping(&quot;logout&quot;)
public String logout(String redirect, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws IOException
&#123;
    session.invalidate();

    if (redirect != null &amp;&amp; !&quot;&quot;.equals(redirect))
    &#123;
        // 获取单点登出地址
        AttributePrincipal principal = (AttributePrincipal) request.getUserPrincipal();
        if (principal != null)
        &#123;
            Map&lt;String, Object&gt; attributes = principal.getAttributes();
            if (attributes != null)
            &#123;
                String logoutUrl = (String) attributes.get(&quot;logout_url&quot;);
                if (logoutUrl != null &amp;&amp; !&quot;&quot;.equals(logoutUrl))
                &#123;
                    // 重定向到单点登录退出
                    logoutUrl = logoutUrl + &quot;?service=&quot; + redirect;
                    response.sendRedirect(logoutUrl);
                &#125;
            &#125;
        &#125;
    &#125;

    return &quot;&#123;\&quot;code\&quot;:20000,\&quot;data\&quot;:\&quot;success\&quot;&#125;&quot;;
&#125;

@RequestMapping(&quot;info&quot;)
public String info(HttpSession session)
&#123;
    System.out.println(session.getId());
    return &quot;&#123;\&quot;code\&quot;:20000,\&quot;data\&quot;:&#123;\&quot;roles\&quot;:[\&quot;admin\&quot;],\&quot;introduction\&quot;:\&quot;I am a super administrator\&quot;,\&quot;avatar\&quot;:\&quot;https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif\&quot;,\&quot;name\&quot;:\&quot;Super Admin\&quot;&#125;&#125;&quot;;
&#125;
&#125;</code></pre>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,单点登录,前后端分离</tag>
      </tags>
  </entry>
  <entry>
    <title>在pve上直接安装macos13 Ventura 初步优化并直通显卡 蓝牙 wifi 声卡给macos</title>
    <url>/post/f7788cdd.html</url>
    <content><![CDATA[<blockquote>
<p>这里假定你已经安装好了pve，并且有一定的linux和macos基本基础，本文基于最新版pve7.2-11<br>其次，pve折腾一个流畅好用的黑苹果是一个非常漫长的过程，很多参数和配置，别人的教程都是仅供你参考，尤其是硬件直通，还是很复杂，你要有时间研究折腾 我的pve 是 用ventoy启动的硬盘vhd文件放在exfat分区 所以后面一部分内容可能和ventoy有关，如果你是直接安装在硬盘上的 可以跳过这部分内容<br>我的硬盘只有两块 - 第一块硬盘 nvme ssd 512G - 硬盘安装了ventoy - 三个分区<br>- 第一分区 是放ventoy的启动文件也可以作为第二efi分区 分区大小800M左右fat32格式 - 第二分区是ventoyefi 32m fat16格式 ， - 第三分区我主要数据分区也是ventoy的保留分区实际大小465G，pve系统的虚拟磁盘文件也放在这里 - 第二硬盘 1T 古董盘 存放一些备份文件</p>
</blockquote>
<h2 id="准备文件"><a href="#准备文件" class="headerlink" title="准备文件"></a>准备文件</h2><ul>
<li>macos的恢复镜像Ventura-recovery.img<ul>
<li>OSX-KVM 已经支持在linux下直接获取Ventura的恢复镜像了</li>
</ul>
</li>
<li>opencore镜像，基于kvm优化过的OpenCore OpenCore-v19.iso <a href="https://github.com/thenickdude/KVM-Opencore/releases/">https://github.com/thenickdude/KVM-Opencore/releases/</a></li>
<li>可选：集成virtio的winpe，方便改错ocpencore后进pe修复， <a href="https://blog.csdn.net/flydream3618/article/details/47357895">https://blog.csdn.net/flydream3618/article/details/47357895</a></li>
<li>可选：win10安装盘iso 以及Windows的virtio-win.iso 驱动 <a href="https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/">https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/</a></li>
<li>可选：显卡直通需要的vbois文件 我的是uhd630 你如果是同款核显可以直接用 <a href="https://github.com/joyanhui/file.leiyanhui.com/tree/main/pve-unraid-kvm">https://github.com/joyanhui/file.leiyanhui.com/tree/main/pve-unraid-kvm</a> vbios_gvt_uefi.rom</li>
</ul>
<p>都放到 机械盘的 iso目录里面</p>
<h2 id="pve的准备工作"><a href="#pve的准备工作" class="headerlink" title="pve的准备工作"></a>pve的准备工作</h2><h3 id="pve-删除-local-lvm（非必须，但是你是新手的话，建议删掉）"><a href="#pve-删除-local-lvm（非必须，但是你是新手的话，建议删掉）" class="headerlink" title="pve 删除 local-lvm（非必须，但是你是新手的话，建议删掉）"></a>pve 删除 local-lvm（非必须，但是你是新手的话，建议删掉）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lvremove pve/data</span><br><span class="line">lvextend -l +100%FREE -r pve/root</span><br></pre></td></tr></table></figure>
<p>在数据中心-存储中删除local-lvm分区，并编辑local，在内容一项中勾选所有可选项</p>
<h3 id="更新国内源码"><a href="#更新国内源码" class="headerlink" title="更新国内源码"></a>更新国内源码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /root/bakfile</span><br><span class="line">cp /etc/apt/sources.list //root/bakfile/sources.list</span><br><span class="line">nano  /etc/apt/sources.list</span><br><span class="line">## deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-free</span><br><span class="line">## deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-free</span><br><span class="line">## deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-free</span><br><span class="line">## deb https://mirrors.tuna.tsinghua.edu.cn/debian-security bullseye-security main contrib non-free</span><br><span class="line">cp /etc/apt/sources.list.d/pve-enterprise.list /root/bakfile/pve-enterprise.list</span><br><span class="line">nano /etc/apt/sources.list.d/pve-enterprise.list</span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/proxmox/debian bullseye pve-no-subscription</span><br><span class="line">cp /usr/share/perl5/PVE/APLInfo.pm /root/bakfile/APLInfo.pm</span><br><span class="line">sed -i &#x27;s|http://download.proxmox.com|https://mirrors.tuna.tsinghua.edu.cn/proxmox|g&#x27; /usr/share/perl5/PVE/APLInfo.pm</span><br><span class="line">systemctl restart pvedaemon.service </span><br><span class="line">apt-get update &amp;&amp; apt upgrade</span><br></pre></td></tr></table></figure>
<h3 id="处理一下kve的一点小问题"><a href="#处理一下kve的一点小问题" class="headerlink" title="处理一下kve的一点小问题"></a>处理一下kve的一点小问题</h3><p>这步骤非必须的，如果你的macos虚拟机一直无限重启，就要在kve执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;options kvm ignore_msrs=Y&quot; &gt;&gt; /etc/modprobe.d/kvm.conf &amp;&amp; update-initramfs -k all -u</span><br></pre></td></tr></table></figure>
<p>提示<code>No /etc/kernel/proxmox-boot-uuids found, skipping ESP sync.</code> 没关系的，添加此行后 pve主机控制台会提示 一个 类似<code>kvm [1219]: ignored </code>的信息，你如果感觉烦躁 你可以 修改成<code>options kvm ignore_msrs=Y report_ignored_msrs=N</code> 忽略这个提示</p>
<h3 id="重启pve"><a href="#重启pve" class="headerlink" title="重启pve"></a>重启pve</h3><h2 id="准备主要文件-opencore和macos的恢复镜像"><a href="#准备主要文件-opencore和macos的恢复镜像" class="headerlink" title="准备主要文件 opencore和macos的恢复镜像"></a>准备主要文件 opencore和macos的恢复镜像</h2><h3 id="下载-kvm-opencore，目前最新版是v19"><a href="#下载-kvm-opencore，目前最新版是v19" class="headerlink" title="下载 kvm-opencore，目前最新版是v19"></a>下载 kvm-opencore，目前最新版是v19</h3><table>
<thead>
<tr>
<th><code>1 2 3 </code></th>
<th><code>cd /var/lib/vz/template/iso/ wget https://ghproxy.com/https://github.com/thenickdude/KVM-Opencore/releases/download/v19/OpenCore-v19.iso.gz gzip -d OpenCore-v19.iso.gz </code></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>Copy</p>
<p>或者自定下载后上传到pve的iso里面</p>
<blockquote>
<p>注意这个虽然后缀是iso，但是实际上是raw格式的img文件，后面优化macos的时候我们还要对他进行一些处理。</p>
</blockquote>
<h3 id="获取-macos-13-ventura-恢复镜像"><a href="#获取-macos-13-ventura-恢复镜像" class="headerlink" title="获取 macos 13 ventura 恢复镜像"></a>获取 macos 13 ventura 恢复镜像</h3><h4 id="使用容器搭建一个编译环境"><a href="#使用容器搭建一个编译环境" class="headerlink" title="使用容器搭建一个编译环境"></a>使用容器搭建一个编译环境</h4><p>虽然pve也是一个完整的debian系统，但是本着各负其责的简单管理原则，尽量避免对pve本身进行太多的修改。所以建议从容器里面搞。你只要按照下面步骤操作 必定可以。</p>
<h5 id="获取一个ct容器的ubuntu镜像"><a href="#获取一个ct容器的ubuntu镜像" class="headerlink" title="获取一个ct容器的ubuntu镜像"></a>获取一个ct容器的ubuntu镜像</h5><p>修改源从 pve后台： local&gt;CT模板，获取一个Ubuntu18的镜像<br>或者直接下载后上传到pve</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /var/lib/vz/template/cache/</span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/proxmox/images/system/ubuntu-18.04-standard_18.04.1-1_amd64.tar.gz</span><br></pre></td></tr></table></figure>
<h5 id="创建一个ubuntu18的CT容器"><a href="#创建一个ubuntu18的CT容器" class="headerlink" title="创建一个ubuntu18的CT容器"></a>创建一个ubuntu18的CT容器</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">容器名称 ubuntu18 密码 记住 这个密码是容器的root密码</span><br><span class="line">模板选ubuntu18这个</span><br><span class="line">磁盘大小16G</span><br><span class="line">cpu 给几个 无所谓给4个</span><br><span class="line">内存swap都给1024</span><br><span class="line">网络dhcp 其他不用设置</span><br><span class="line">控制台 用root 和上面的密码登录</span><br></pre></td></tr></table></figure>
<h4 id="更新一下这个CT容器"><a href="#更新一下这个CT容器" class="headerlink" title="更新一下这个CT容器"></a>更新一下这个CT容器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv  /etc/apt/sources.list   /etc/apt/sources.list-bak</span><br><span class="line">nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<p>换国内源,清华源 应该是已经停止了对ubuntu18 的支持，建议调用 中科大的源，阿里的也可以用，但是阿里云的源从今年3月开始抽风，经常限速非常慢</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#中科大源</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure>
<p>更新系统</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt upgrade</span><br></pre></td></tr></table></figure>
<h4 id="安装工具包"><a href="#安装工具包" class="headerlink" title="安装工具包"></a>安装工具包</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install qemu-utils make git</span><br></pre></td></tr></table></figure>
<h4 id="克隆-https-github-com-thenickdude-OSX-KVM-git"><a href="#克隆-https-github-com-thenickdude-OSX-KVM-git" class="headerlink" title="克隆 https://github.com/thenickdude/OSX-KVM.git"></a>克隆 <a href="https://github.com/thenickdude/OSX-KVM.git">https://github.com/thenickdude/OSX-KVM.git</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">#我这里用了ghproxy的代理加速，你也可以挂梯子 或者找别的代理加速</span><br><span class="line">git clone https://ghproxy.com/https://github.com/thenickdude/OSX-KVM.git</span><br></pre></td></tr></table></figure>
<h4 id="编译获取恢复镜像"><a href="#编译获取恢复镜像" class="headerlink" title="编译获取恢复镜像"></a>编译获取恢复镜像</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/OSX-KVM/scripts/ventura</span><br><span class="line">make Ventura-recovery.dmg</span><br><span class="line"># 实际下载地址：http://oscdn.apple.com/content/downloads/29/26/071-09012/dt7dmh4ttm1v5ze5989bid4gkovavkykjz/RecoveryImage/BaseSystem.dmg</span><br></pre></td></tr></table></figure>
<p>根据提示，他最后一部 有执行 qemu-img convert BaseSystem.dmg -O raw Ventura-recovery.dmg 那么这个最终的dmg其实已经是raw文件了</p>
<h4 id="拉到pve里面"><a href="#拉到pve里面" class="headerlink" title="拉到pve里面"></a>拉到pve里面</h4><p>pve 执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pct pull 101 /root/OSX-KVM/scripts/ventura/Ventura-recovery.dmg /var/lib/vz/template/iso/Ventura-recovery.img</span><br></pre></td></tr></table></figure>
<p>这样我们就拿到了Ventura-recovery.img</p>
<p>ubuntu18的 容器可以关掉，也可以删除了</p>
<h2 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h2><p>主要参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">操作系统 ： other iso文件：就是那个 OpenCore-vXX.iso 下一步   </span><br><span class="line">显卡：Vmware兼容 Qemu代理：勾选 机器：q35 BIOS：UEFI UEFI下面：预注册密钥 去掉,efi储存到local  </span><br><span class="line">总线：VirtIO 缓存：Write Back（不安全）格式qcow2 容量 28G+,建议32G+   </span><br><span class="line">CPU核心: 是2的次幂 2 4 8 16 我12核心的,只能给8 ，不可以12 10 18 这样的核心数，类型：penryn Numa启用  </span><br><span class="line">内存  4G以上，我这里 8192</span><br><span class="line">网络模型：virtIO   </span><br></pre></td></tr></table></figure>
<p>创建了虚拟主机 102（macos），102 ，你的可能是别的</p>
<p>在硬件里面，添加以恶搞cdrom到Ventura-recovery.img</p>
<h2 id="开机之前手动编辑虚拟机配置"><a href="#开机之前手动编辑虚拟机配置" class="headerlink" title="开机之前手动编辑虚拟机配置"></a>开机之前手动编辑虚拟机配置</h2><p>有两个地方需要修改 /etc/pve/qemu-server/虚拟机编号.conf</p>
<ul>
<li><p>前面挂载的opencoreXX.iso 以及 Ventura-recovery.img 改为硬盘模式</p>
</li>
<li><p>添加kvm的args 硬件欺骗</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nano /etc/pve/qemu-server/102.conf</span><br></pre></td></tr></table></figure>
<h3 id="修改两个cdrom"><a href="#修改两个cdrom" class="headerlink" title="修改两个cdrom"></a>修改两个cdrom</h3></li>
</ul>
<p>找到前面opencoreXX.iso 以及 Ventura-recovery.img 两行，两个 <code>media=cdrom</code>删掉改为 <code>cache=unsafe</code></p>
<h3 id="修改args参数"><a href="#修改args参数" class="headerlink" title="修改args参数"></a>修改args参数</h3><p>在第二行添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">args: -device isa-applesmc,osk=&quot;ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc&quot; -smbios type=2 -device usb-kbd,bus=ehci.0,port=2 -global nec-usb-xhci.msi=off -cpu host,kvm=on,vendor=GenuineIntel,+kvm_pv_unhalt,+kvm_pv_eoi,+hypervisor,+invtsc</span><br></pre></td></tr></table></figure>
<p>如果你是amd的cpu 写法不同</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">args: -device isa-applesmc,osk=&quot;这里得自己找~&quot; -smbios type=2 -device usb-kbd,bus=ehci.0,port=2 -global nec-usb-xhci.msi=off -cpu Penryn,kvm=on,vendor=GenuineIntel,+kvm_pv_unhalt,+kvm_pv_eoi,+hypervisor,+invtsc,+pcid,+ssse3,+sse4.2,+popcnt,+avx,+avx2,+aes,+fma,+fma4,+bmi1,+bmi2,+xsave,+xsaveopt,check</span><br></pre></td></tr></table></figure>
<p>osk 是白苹果的一个类似设备编号的代码，同型号的macos都有相同这个代码，你可以网上搜索一下其他的代码</p>
<h3 id="参考我的"><a href="#参考我的" class="headerlink" title="参考我的"></a>参考我的</h3><p><a href="https://github.com/joyanhui/file.leiyanhui.com/blob/main/pve-unraid-kvm/102.%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84macos13.conf">点这里查看</a></p>
<h2 id="安装基本的macos"><a href="#安装基本的macos" class="headerlink" title="安装基本的macos"></a>安装基本的macos</h2><blockquote>
<p>只所以说是基本的macos，是因为macos非常依赖显卡，这里暂时只搞到一个可以启动的macos13 动画部分会比较卡，也不支持硬件加速。<br>安装过程中，第一次 启动选 macos base，然后格式硬盘 卷标输入自定义一个，比如我就输入的<code>kvm</code>，后面会重启多次，有 macos installer的时候 选macos install，有前面输入的卷标<code>kvm</code>的时候选择kvm 其他安装过程和白苹果一样，并不复杂，进mac桌面后，自己修改成中文 开机自动倒计时进macos的优化 看后面章节 核显直通和蓝牙直通接力 等 请看 后面的进阶教程</p>
</blockquote>
<h2 id="macos的简单优化"><a href="#macos的简单优化" class="headerlink" title="macos的简单优化"></a>macos的简单优化</h2><p>安装完成后，在pve里面删除 挂载的 Ventura-recovery.img</p>
<h3 id="中文化和时区"><a href="#中文化和时区" class="headerlink" title="中文化和时区"></a>中文化和时区</h3><p>OSX-KVM拉回来的镜像是英文版的，<br>点左上角苹果，system setting，搜索 lang，添加中文 删除英文。提示重启，重启一下<br>重启后，右上角键盘位置 设置输入法，通用设置 时间日期 时区 输入上海，回车。 提示重启的时候，建议不重启直接关机</p>
<h3 id="可选操作：打开macos的远程桌面-方便不使用网页控制他"><a href="#可选操作：打开macos的远程桌面-方便不使用网页控制他" class="headerlink" title="可选操作：打开macos的远程桌面 方便不使用网页控制他"></a>可选操作：打开macos的远程桌面 方便不使用网页控制他</h3><p>系统偏好设置，搜索 共享，打开共享设置， 打开远程管理（vnc+ard） 和远程登陆（ssh）<br>可选：点击 远程管理 后面那个叹号 ，再点 电脑设置 设置一个vnc 密码<br>点网络 以太网 查看一下ip，然后用vnc客户端远程，后面的操作用vnc客户端来操作，会比pve 的vnc网页控制台好用一些。</p>
<h2 id="opencore的简单优化"><a href="#opencore的简单优化" class="headerlink" title="opencore的简单优化"></a>opencore的简单优化</h2><h3 id="准备工作1：把opencore-到硬盘-方便后续修改"><a href="#准备工作1：把opencore-到硬盘-方便后续修改" class="headerlink" title="准备工作1：把opencore 到硬盘 方便后续修改"></a>准备工作1：把opencore 到硬盘 方便后续修改</h3><blockquote>
<p>为了方便，强烈建议你 吧opencore复制到一个独立的虚拟硬盘。而不是和其他人的教程一样dd到macos所在的硬盘</p>
</blockquote>
<p>关机，删除前面挂载的Ventura-recovery.img 恢复镜像，我们已经用不到他了 pve添加一个硬盘 大小0.5 就好我这里用0.5 用来做efi分区。 建议 ide挂载，格式raw（文件不大，兼容性比qcow2好也方便其他软件修改编辑）。<br>macos 开始会提示 不能识别按照提示初始化，选择这个500M左右的硬盘 点抹掉 卷标 OPENCORE，格式fat，分区格式主引导记录。<br>格式完成后，再方达里面推出 这个OPENCORE卷，不然没法进行下一步 打开macos的终端 <code>diskutil list</code>查看所有硬盘，可以看到 500多M这个硬盘是对应的硬盘编号是disk1 分区是 disk1s1 另外有一个 150M左右的 是我们前面的opencore的iso。 对应 disk0s1。我们用dd命令把oencore 弄到这个500M的虚拟磁盘上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo dd if=/dev/disk0s1 of=/dev/disk1s1</span><br></pre></td></tr></table></figure>
<p>DD会同时把卷标OPENCORE 改成disk0s1的卷标EFI这个不影响。关机，在pve中删除前面的opencoer.iso ，选项里面 启动启动顺序 只选中这个 500M的 raw ，再次开机 就ok了</p>
<p>如果要编辑efi，在磁盘工具里面直接装载 这个硬盘即可。</p>
<h3 id="准备工作2：安装使用opencore-configurator"><a href="#准备工作2：安装使用opencore-configurator" class="headerlink" title="准备工作2：安装使用opencore configurator"></a>准备工作2：安装使用opencore configurator</h3><p>用macos自带的safari 打开本站，然后在本站搜索本页面标题打开下面的地址下载 opencore configurator，或者你也可以用你喜欢的其他工具 比如 ProperTree也不错</p>
<p><a href="https://mackie100projects.altervista.org/download-opencore-configurator/">https://mackie100projects.altervista.org/download-opencore-configurator/</a></p>
<p>safari下载后会自动解压。双击运行，然后打开 ，提示安全性问题，新版macos 在设置的隐私与安全性 地方，滚动到下面 找到 对应名称的 仍要打开，输入密码打开。</p>
<p>如果你前面和我一样的操作，opencore的那个虚拟磁盘，会自动挂载到 /Volumos/OPENCORE ,否则请点击工具 挂载efi</p>
<p>文件打开 找到 efi目录 oc 下的 config.plist, 就可以进行一些配置编辑工作了</p>
<h3 id="opencore开机打印信息"><a href="#opencore开机打印信息" class="headerlink" title="opencore开机打印信息"></a>opencore开机打印信息</h3><p>开机不再显示白苹果进度条，而且跑代码显示操作，方便后续处理 opencore configurator依次找到</p>
<p>NVRAM ，里面一般有三个，找到一个带 bootarge的，在他原来的选项后面 输入 空格-v ,新版 直接右键 选择 -v 就可以了</p>
<h3 id="opencore开机倒计时启动"><a href="#opencore开机倒计时启动" class="headerlink" title="opencore开机倒计时启动"></a>opencore开机倒计时启动</h3><p>opencore configurator依次找到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MISC-&gt;Security-&gt;AllowSetDefault  勾选</span><br><span class="line">Misc-&gt;Boot-&gt;Timeout  倒计时 时间 输入 5</span><br></pre></td></tr></table></figure>
<p>文件 保存</p>
<p>重启以后，选择 卷标 按 ctrl+回车 以后启动就会自动选择这个了。<br>注意 倒计时 不会显示时间的，到时间 就会自动启动了<br>修改前的文件备份 <a href="https://github.com/joyanhui/file.leiyanhui.com/blob/main/pve-unraid-kvm/config-1.plist">https://github.com/joyanhui/file.leiyanhui.com/blob/main/pve-unraid-kvm/config-1.plist</a><br>修改后的 <a href="https://github.com/joyanhui/file.leiyanhui.com/blob/main/pve-unraid-kvm/config.2.plist">https://github.com/joyanhui/file.leiyanhui.com/blob/main/pve-unraid-kvm/config.2.plist</a></p>
<h2 id="备份-准备做硬件直通"><a href="#备份-准备做硬件直通" class="headerlink" title="备份 准备做硬件直通"></a>备份 准备做硬件直通</h2><p>查看 ：<a href="https://dev.leiyanhui.com/pve/mac-bak/">https://dev.leiyanhui.com/pve/mac-bak/</a></p>
<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="板载声卡-板载wifi直通-usb设备直通"><a href="#板载声卡-板载wifi直通-usb设备直通" class="headerlink" title="板载声卡 板载wifi直通 usb设备直通"></a>板载声卡 板载wifi直通 usb设备直通</h3><p>最新版pve7.2-11 直接添加pci设备 就可以了，不需要额外处理</p>
<p>usb3.0设备 如果使用端口模式直通的话，需要在同一个端口上分别插入usb3 和usb1-2的设备，分别添加两次，如果基于供应商设备的直通，好像不可热拔插。</p>
<h3 id="显卡直通，并再HDMI口输出显示"><a href="#显卡直通，并再HDMI口输出显示" class="headerlink" title="显卡直通，并再HDMI口输出显示"></a>显卡直通，并再HDMI口输出显示</h3><h4 id="显卡直通先完成win10下的直通"><a href="#显卡直通先完成win10下的直通" class="headerlink" title="显卡直通先完成win10下的直通"></a>显卡直通先完成win10下的直通</h4><p>在macos这个主机上，添加一个16G左右的硬盘，挂载一个win10安装盘，设置好引导顺序安装一个win10进去，</p>
<p>然后查看文章 <a href="https://dev.leiyanhui.com/pve/win-gpu/">https://dev.leiyanhui.com/pve/win-gpu/</a> 先搞定win10下可以点亮屏幕</p>
<p>其他处理中</p>
<h3 id="只有一个usb控制器的情况下的pcie蓝牙直通"><a href="#只有一个usb控制器的情况下的pcie蓝牙直通" class="headerlink" title="只有一个usb控制器的情况下的pcie蓝牙直通"></a>只有一个usb控制器的情况下的pcie蓝牙直通</h3><p>简单的方案 就是把唯一的一个usb控制器给到虚拟机，在硬件里面 添加pice 直接选中这个usb，就把所有usb口直通进去了。。。那就导致 你鼠标键盘 U盘 都无法在pve下宿主机使用。 。另外一个方案 就是增加硬件 另外价格pcieusb控制器 ，其他方案 可能会复杂很多 我选择直接 直通进去 查看usb控制器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lspci -nn  | grep USB</span><br><span class="line">00:14.0 USB controller [0c03]: Intel Corporation 100 Series/C230 Series Chipset Family USB 3.0 xHCI Controller [8086:a12f] (rev 31)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>pve</category>
      </categories>
      <tags>
        <tag>pve</tag>
      </tags>
  </entry>
  <entry>
    <title>各相关萧氏文章及解读</title>
    <url>/post/b9ae018b.html</url>
    <content><![CDATA[<p>一、 义富谱系</p>
<p>1、萧氏族谱序――萧君谟（993年）</p>
<p>2、源流记――周必大（1201年三月）</p>
<p>3、倚富萧氏族谱序――杨万里（1201年九月，后人托名伪作）</p>
<p>4、吉水倚傅萧氏族谱序――解缙（1406年）</p>
<p>二、螺陂谱系</p>
<p>　　　1、王安石文章二篇</p>
<p>2、萧氏族谱序――萧汝贤（1087年或1097年）</p>
<p>　　　3、祖系源流序――王端礼（1103年九月）</p>
<p>　　　3、杨万里相关的文章（1200年前后）</p>
<p>　　　5、解缙相关螺陂谱系的文章（1400年前后）</p>
<p>三、觉公谱系</p>
<p>　　　1、萧氏族谱序――宋.萧开祖撰（1241年）</p>
<p>　　　2、萧氏源流序――宋·文天祥撰（1266年）</p>
<p>将各相关文章按时间先后顺序排列：</p>
<p>1、萧氏族谱序――萧君谟（993年）</p>
<p><em>2**、王安石</em>（1021年－1086年）相关文章。</p>
<p>3、萧氏族谱序――萧汝贤（1087年或1097年）</p>
<p>4、祖系源流序――王端礼（1103年九月）</p>
<p>5、源流记――周必大（1201年三月）</p>
<p>6、杨万里相关的文章（1200年前后）</p>
<p>7、萧氏族谱序――宋.萧开祖撰（1241年）</p>
<p>8、萧氏源流序――宋·文天祥撰（1266年）</p>
<p>9、解缙相关义富、螺陂谱系的文章（1400年前后）</p>
<p>10、倚富萧氏族谱序――杨万里（后人托名伪作）</p>
<p>解读：</p>
<p>我们从上面可以看出，解缙的时间最晚，那么在他前面的文章，应该都能看到。</p>
<p>从解缙的序里，有说到周必大的源流记：“其源流记，在嘉泰中丞相益国周文忠公作”，但是没有说到杨万里的序。从周必大的序里，又说到了萧君谟。“出示其先世兰陵家牒，乃淳化癸巳（993年）御史萧君谟所修也”。</p>
<p>解缙所看到的倚富谱，就是宋代时修的，而且应当就是君谟所修的（993）。到解缙看到时（1406），已经四百年了。“盖数百年未易稿，纸墨精好，使人爱翫不能释手”。那么，君谟的这篇序文，解缙也不可能不看到。萧君谟序文中，是从高祖晟算起，自称是五世孙，再之上的世系没有写到。</p>
<p>从解缙的序里，还说到了泰和萧安抚廉访谱：至泰和萧安抚廉访谱序称，唐末五季，马殷乱湖南，萧氏有十四尚书文元先生，兄弟五人。</p>
<p>泰和萧安抚廉访谱，以及这个序文，这是很关键很重要的一篇文章。至少解缙当时看到过这个谱和这个序。而且，这是真正的文元的谱系，而不是后面的，把霁和霖的后代掺杂进去的谱系。只是不知道现在还能不能找到？或者，真正的文元的后代，还有没有？</p>
<p>而且，解缙还看到过螺陂谱，还有谱系中萧服的序：“御史服自叙云，出于俨，而其谱以霁为始祖”。</p>
<p>萧服的这个序，原文现在也找不到。但是，其影响却是非常深远的。我所看到的湖南与公和典公的谱系，里面就是有俨。而且，是个大合一的世系：</p>
<p>俭――文元――叔济――寯――俨――谓――球――霁――</p>
<p>把其中的文元、叔济、俨去掉，就是：</p>
<p>俭――寯――谓――球――霁――</p>
<p>这也符合从俭到霁是五代的规律。八代是不可能的。</p>
<p>关于文元的记载，都是在各相关谱里提到。说到单独的记载，应当还是在解缙所看过并提到过的“泰和萧安抚廉访谱”中，但是现在找不到。在其他各相关的记载中，王端礼（1103年九月）的记载是最早的，然后是周必大（1201年三月），再然后是萧开祖（1241年），文天祥（1266年），至于杨万里的倚富萧氏族谱序，可以考证是后人托名伪作的。之前的萧君谟（993年）和萧汝贤（1097年），都没有说到文元。而在汝贤作序后六年，王端礼（1103年九月）就作源流记，而且是归到了岑公后裔上。相关的记载如下：</p>
<p>王端礼（1103年九月）的说法是：出于吴王岑之子球之裔，文元兄弟五人，二子，四孙：俨、保、仪、仁。后面说到了螺陂谱系，但是没有直接联系上，只说是文元的后代，“历观诸族之谱，各详其本派而止其本祖，而上皆阙而不书，世远源长，久而忘之矣”。也没有说到义富谱系。</p>
<p>周必大（1201年三月）的说法是：俭之子徵，字文元，兄弟五人。文元子谓，字叔济。叔济子讳球名晟，为侍郎杨辂公婿。长子霁，字月卿，次子霖，字处仁。其中没有叔澄和佺保仪仁的名字。</p>
<p>萧开祖（1241年）的说法是：为吴王岑子球之后，三十六世孙名缯者，生三子：觉、誉、学。觉字睿明，号文元，到五代中期，才兄弟三人逃难到江西。子三人：长茂贞字清卿，次茂欣为武宁令，徙卢陵膏泽乡。季茂升复归湖南。</p>
<p>文天祥（1266年）的说法是：吴王岑之后。缯生三子：觉、学、黉。觉字睿明号文元，研究六经，世称儒宗，唐季五代时为军巡大判官。觉生三子：长茂贞；次霁，字月卿号茂欣；三子茂升。茂贞生二子：次子祖居，为赣州文潭坝始祖；长子祖佑生特嵩。</p>
<p>署名杨万里的说法是：吴王岑之后。有十四尚书文元先生，兄弟五人。尚书二子，叔济、叔澄。叔济子讳球名晟，实吾祖侍郎公之婿。生子二，长曰霁，字月卿，仕吴为武宁令。次曰霖，字处仁，官至朝议大夫，守吉州，因家永新焉。叔澄四子，曰佺，曰保，曰仪，曰仁，散之吉之属邑。</p>
<p>比较一下：关于文元，归于俭后代的只有周必大，其余都说是吴王岑之后。杨万里的序虽说是本于周必大，但也说是岑之后，而且与王端礼的序，几乎一模一样，只是加入了义富谱系。但这三人，都是说在五代初期到江西的，而且都是五兄弟，也没有牵涉到觉公。而萧开祖和文天祥的序，是说觉号文元，却只是有三兄弟，到五代中期才到江西的。而且这三兄弟的名字有点出入：一个是觉、誉、学，一个是觉、学、黉。由此可知，至少到明代初期，文元和觉，那还是各不相干的。至于觉号文元，和名字叫文元的，有什么关系呢？一个是名，一个是号。同名同姓的都多了去了，都能够分清，为什么要把这两个文元合而为一？</p>
<p>而解缙，是直接引用周必大的说法：“其源流记，在嘉泰中丞相益国周文忠公作，称唐八叶宰相复之观察湖南也，子俭留居长沙。俭生征，征生旭，旭生晟，晟生处仁，为吉州守，寻还兰陵，寓宇金陵。子俨，字茂辉，复官庐陵，迎处仁就飬，因家庐陵县永昌乡之富原，今吉水之文昌乡倚傅也。”并说周序是可信的：“此益公所序可信也”。</p>
<p>在解缙的序里，也说到了文元，但却不是在周必大的序里看到的，而是另有出处：“至泰和萧安抚廉访谱序称，唐末五季，马殷乱湖南，萧氏有十四尚书文元先生，兄弟五人，同筮所避乱处，得坎之繇曰：遇坎即止，遂迁于吉之庐源。尚书后徙居大池上，作亭，扁（匾）之曰：星潭，以示子孙不忘其初之意。尚书二子：叔济、叔澄；四孙：曰佺、曰保、曰仪、曰仁。”</p>
<p>按解缙这里的记载，和周必大的记载，那是大不相同了。在解缙转述的周必大的序里，是没有霁公世系的，也没有文元的记载。解缙也看到过螺陂谱系：“及观螺陂萧氏谱，亦云其先出于俭，来自长沙，而不着其岁月。御史服自叙云，出于俨，而其谱以霁为始祖。云霁舅杨辂公以工部侍郎守吉州，因从之，以策干杨吴，乾贞二年为洪武之武宁令。死焉，时年尚少，遗言谓子孙必居九江。族遂葬吉水墨潭，将军由其墓在焉；庐陵高村长官庙，乘石存焉，竟不着其父母。意者，霁之没也早，子幼，既又徙居，文献中衰。后三世至定基，始克修明其谱。而宦游之日居多，故不及考见斯谱。要之的然与之同祖，同出长沙无疑也。至于此谱称，俨五子，其一名元霁者，岂即定基之祖欤？”</p>
<p>而在义富谱里周必大的序里，却是有霁公和文元的记载，但是没有叔澄和佺保仪仁的名字，也没有文元作亭题匾的记载。有文元作亭题匾记载的，是解缙看到的泰和萧安抚廉访谱序，和王端礼及署名杨万里的序。解缙和王端礼的说法一样，是二子四孙。但王端礼说的四孙是俨保仪仁，不是通常说的佺保仪仁。署名杨万里的序，是文元有二子，孙子佺保仪仁是归到了叔澄名下，叔济子讳球名晟，即文元有五个孙子。</p>
<p>这样，我们就可以肯定，解缙所看到的“在嘉泰中，丞相益国周文忠公作的源流记”，和署名“平园老叟周必大书”的《源流记》，绝对不一样。这个应该是后人综合了螺陂谱、泰和谱而篡改的，所以加入了霁公和文元的世系。</p>
<p>再从前面萧君谟的序文说起，萧君谟在序文中自称五世孙，是从高祖晟算起，再之上的世系没有写到。淳化癸巳是993年，修谱。周必大序中，国基是俨九世孙，萧俨出生于902年左右，到1201年，300年了，九世后也有十世了，差不多30年一世。再到解缙作序时1406年，是萧俨的16世士柔，200年，7世，或者说500年，17世，也差不多30年一世。谱本身传承有序，是没有问题的。有问题的是序文和始祖前面的世系。</p>
<p>“惟我高祖晟讳球，仕吴，侍郎杨辂公婿，生我曾伯祖讳霁，任武宁长官。我曾祖讳霖，朝议大夫，吉州剌史。我祖讳俨，银青光禄大夫，上柱国”。从这句话里，可以很清楚的看出，晟讳球是杨辂的女婿，生霁、霖。这样，杨辂不就是霁、霖的外祖父了吗？都说杨辂是霁的舅舅，那究竟孰是孰非？</p>
<p>再加上周序：俭之子徵，字文元，文元子谓，字叔济。叔济子讳球名晟，为侍郎杨辂公婿。长子霁，字月卿，仕吴为武宁令，居庐陵高塘。生文焕，字晦叔，徙居螺陂。次子霖，字处仁，官至朝议大夫，守吉州，因家永新。生俨，字茂辉。也可以看出来，杨辂是霁、霖的外祖父。</p>
<p>我们前面已经说过，解缙是看到过这两篇序文的，那么，这两篇序文里都说得这么清楚了，解缙还会以为俨的儿子元霁，就是定基的祖父霁吗？还会以为杨辂是霁的舅舅吗？所以，我以为这是后人所窜改的，加上了与霁公相关的信息。去掉其中红字之后，还原其本来面目，应该是：</p>
<p>惟我高祖讳晟，生我曾祖讳处仁，朝议大夫，吉州剌史。我祖讳俨，银青光禄大夫，上柱国。――君谟</p>
<p>俭之子徵，徵子谓，谓子晟，晟子（霖，字）处仁，官至朝议大夫，守吉州，因家永新。生俨，字茂辉。－－周必大</p>
<p>周必大序和解缙序中的世系如下所示，将其中的红色的字去掉：</p>
<p>俭――徵（文元）――谓（叔济）――晟（球）－－霖，字处仁――俨，字茂辉</p>
<p>　　　　　　　　　　　　　　　　　　　　　　－霁――文焕 （周必大序）</p>
<p>俭――征――――――旭――――――晟――――――――处仁――俨，字茂辉</p>
<p>对比一下，就只有一个是谓，一个是旭，其他就都一样了。都没有霁公和文元的消息了，而且，都没有叔澄和佺保仪仁等人的名字。</p>
<p>而且，王端礼的序文里面，也是只有螺陂谱，而没有义富谱的信息，互不相通。</p>
<p>再者，在真正的杨万里有记载的文献中，明确的说过霁公是俭的后代。并且也没有把螺陂谱和义富谱牵连到一起。而且，在杨万里和解缙的生活中，都与义富和螺陂的萧氏人物交往密切，还都看过义富和螺陂各自的族谱。那么，这两族人，相互之间，应该也是有来往的，何况住地相隔也并不远。</p>
<p>而且，解缙当时，还为螺陂新修的宗祠，写了序文，还参观宗祠并写了大量的赞词。详见<strong>螺陂萧氏祠堂记</strong>【丙戌】即永乐四年1406年。又<strong>重**</strong>修崇仙观记**【丁亥】（永乐五年1407年），也有相关的记载：近年萧氏祠堂复完，予既为之文；而今观中复来请记，是岂非相为盛衰者欤。</p>
<p>只有是在义富谱中，本来就没有霁的信息，解缙也看不到，看到的只是没有篡改过的原始谱序，这样，才会把俨的儿子元霁，当成是定基的祖父霁。再根据别的说法，把杨辂当成是霁的舅舅，这才是合情合理的。而且，义富谱中也就没有杨辂的信息了，或者说，杨辂本来就和处仁没有关系。</p>
<p>那时候，两支族谱也没有说要合而为一，反而到后来，要合而为一了？</p>
<p>再者，惟我高祖晟讳球，以及叔济子讳球名晟，有这么样的格式和写法吗？活生生的要把球加到晟的名下，只能这样不伦不类了。不知道还能不能找到明代那时的族谱，原始版本，没有被窜改过的，那就一目了然了。</p>
<p>而且，在文天祥的序文里，也是把霁加进去了：觉生三子：长茂贞；次霁，字月卿号茂欣；三子茂升。这样的写法，不觉得非常别扭吗？单单是霁，有名有字还有号，而茂贞和茂升，那算是名还是号呢？如果把上文中红色字体去掉，那就前后贯通了。我以为，这几个字也是后人所加的。因为在其之前不久的萧开祖的序里，也只是写的“长茂贞字清卿，次茂欣为武宁令，徙卢陵膏泽乡。” 茂贞有字，而茂欣都没写字、号，可知茂欣就是名，不是号。</p>
<p>　　周必大的文中，既然是源流记，为何只写了叔济，而不提叔澄和佺保仪仁等人的名字？而且，俨的儿子叫元济，而解缙的序和杨万里序中，俨的儿子是元霁。或许，是为了避讳吧，因为把霁加进来了，所以把元霁改成为元济了。</p>
<p>周序说文元是俭之子，而杨序却说是岑之后。反而与螺陂谱系中王端礼的源流记几乎雷同，如出一辙，只是加入了义富谱系。</p>
<p>杨序在周序之后半年，还特意说明是“盖征于丞相益国周公所书源流记，备且详矣”。怎么还不直接说明是俭的后代？看文章的意思，还是岑公的后代。而在杨万里有记载的文献中，就说是俭的后代。如萧岳英墓志铭：</p>
<p>　　公讳许，字岳英，萧氏。其先自唐丞相复观察湖南，其子俭留家长沙，六世而徙庐陵。其后武宁令霁子焕，国初徙白沙，今遂为吉水人。自定基与其孙服，相继入为御史，至公之曾祖汝贤为将作监主簿，萧氏遂为庐陵大家。公服之从孙也，祖公瑾不仕，父昂以公赠承务郎。</p>
<p>杨万里和螺陂萧氏是很亲近的，而且还是婚姻亲家，对螺陂谱系，知道得很清楚。由此可知，这个杨序是托名的，是后人伪作，参照王端礼和周必大的源流记而作成的。而且他的年代比较晚，看到的资料比较全面，所以编造的也比较合理。其他人都说文元是二子四孙，而这里就将四个孙子：佺保仪仁全部归到了叔澄名下，叔济子讳球名晟，即文元至少有五个孙子。</p>
<p>再回到萧君谟的序文中来，其中写道：“子孙蔓延，散徙不一，或居广陵而兰陵，兰陵而金陵，金陵而庐陵，派虽远，吾谱亦概而悉焉。矧又近自庐陵而永新，永新而螺陂，螺陂而富源，富源而倚富者，实吾所自出，其详與尊礼固宜也。”祖先的居住和迁徙，从广陵到兰陵，再到金陵，再到庐陵，哪里提到过湖南？</p>
<p>解缙文章中说：晟生处仁，为吉州守，寻还兰陵，寓宇金陵。子俨，字茂辉，复官庐陵，迎处仁就飬，因家庐陵县永昌乡之富原，今吉水之文昌乡倚傅也。这写的处仁的经历中，其中也没有永新的信息。</p>
<p> “次子霖，字处仁，官至朝议大夫，守吉州，因家永新。生俨，字茂辉。昇元初，茂辉之官庐陵，官下，亦侨寓螺陂之庄。爱上游有水口之胜，又卜居于泷江之富源，迎处仁公就养。卒，葬所居之近。晚有佚老之谋，复定居于义富，实为义富之始祖也”――周必大。</p>
<p>“次曰霖，字处仁，官至朝议大夫，守吉州，因家永新焉。始于处仁子俨，字茂辉，为南唐御史大夫。诏归，治兵庐陵。官下，侨避螺陂。徙泷江之富源。未几，复徙倚富，是为倚富之初祖也。”――杨万里。</p>
<p>这样，后面“自庐陵而永新，永新而螺陂，螺陂而富源，富源而倚富者，实吾所自出”，这说的是俨的经历。俨到庐陵后，将处仁接来奉养。前后文一联系，说得非常清楚，这就是说的处仁和俨父子俩的经历。</p>
<p>解缙曾经找遍了周边各家各族的族谱：“予尝遍历于乡，求诸故家谱牒而参考之”。所看到的族谱是很多的，而且，也作了一些考证和辨别。如对于杨氏的族谱，对杨辂的世系也提出了质疑。看的资料多了，自然就有自己的判断。到1409年解缙作序时，是参照周序来写的，其中没有霁公和文元的信息。但是相关谱中，都有说到是来自于湖南了。所以解缙就推测，倚传谱 、螺陂谱、泰和谱，这三支萧氏，是不是都是祖源相同，只是支脉相异呢？</p>
<p>在993年君谟修族谱，并写序文时，是从高祖晟算起，自称是五世孙，再之上的世系没有写到。而在1201年三月周必大作源流记时，是直接连上了俭公。而在螺陂谱系中，萧汝贤1097年写萧氏族谱序时，也是写到了七代之祖，七代之上，无法考证，也是对来自湖南的说法存疑。而王端礼1103年九月的源流记中，说是出于吴王之子球之裔，文元兄弟五人，二子，四孙：俨、保、仪、仁。后面说到了螺陂谱系，但是没有直接联系上，只说是文元的后代，“历观诸族之谱，各详其本派而止其本祖，而上皆阙而不书，世远源长，久而忘之矣”。也没有说到义富谱系。</p>
<p>在祖典公族谱中，王端礼这篇序文，在前面篇名祖系源流序下面，是写的宋学士王端礼。而在文章后面的署名却是：大观三年（1109年）九月吉旦，学士滕玉霄讳斌。百度一下，元代是有一个学士，叫滕玉霄滕斌的。从年号上看，大观三年，是宋代的年号没错。</p>
<p>​            初稿，待校正。</p>
<p>​            萧颂夏</p>
<p>​            2015.1.14</p>
]]></content>
      <categories>
        <category>萧氏</category>
      </categories>
      <tags>
        <tag>萧氏,文章,解读</tag>
      </tags>
  </entry>
  <entry>
    <title>在服务器上搭建自己的git私人仓库</title>
    <url>/post/c4bcdb47.html</url>
    <content><![CDATA[<blockquote>
<p>在日常工作中我们往往使用<code>gitee</code>、<code>github</code>、<code>gitlab</code>等,第三方的<code>git</code>仓库。有时候我们想在自己的服务器上搭建一个<code>git</code>服务器,方便自己的代码提交。</p>
</blockquote>
<h3 id="一、使用环境"><a href="#一、使用环境" class="headerlink" title="一、使用环境"></a>一、使用环境</h3><ul>
<li>1、服务器端使用<code>centos7</code>(虚拟机)</li>
<li>2、客户端直接是本机电脑</li>
</ul>
<h3 id="二、服务器端的操作"><a href="#二、服务器端的操作" class="headerlink" title="二、服务器端的操作"></a>二、服务器端的操作</h3><ul>
<li><p>1、安装<code>git</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y git</span><br></pre></td></tr></table></figure></li>
<li><p>2、创建一个<code>git</code>用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd git</span><br><span class="line">passwd git <span class="comment"># 输入密码,待会客户端提交的密码就是这个</span></span><br></pre></td></tr></table></figure></li>
<li><p>3、创建仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su - git <span class="comment"># 切换到git用户</span></span><br><span class="line"><span class="built_in">cd</span> ~ <span class="comment"># 进入根目录下</span></span><br><span class="line"><span class="built_in">mkdir</span> dev-test.git <span class="comment"># 创建一个仓库</span></span><br><span class="line"><span class="built_in">cd</span> dev-test.git</span><br><span class="line">git --bare init <span class="comment"># 初始化仓库</span></span><br></pre></td></tr></table></figure>
<h3 id="三、客户端的操作"><a href="#三、客户端的操作" class="headerlink" title="三、客户端的操作"></a>三、客户端的操作</h3></li>
<li><p>1、安装<code>git</code></p>
</li>
<li><p>2、克隆代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@服务器地址:服务器工程目录(/home/git/dev-test.git)</span><br></pre></td></tr></table></figure></li>
<li><p>3、进入克隆后的文件夹</p>
</li>
<li><p>4、新增一个文件并提交到服务器</p>
</li>
<li><p>5、在别的文件夹下继续克隆下刚刚的地方,看看提交的文件是否存在</p>
</li>
</ul>
<h3 id="四、配置免密码登录"><a href="#四、配置免密码登录" class="headerlink" title="四、配置免密码登录"></a>四、配置免密码登录</h3><ul>
<li><p>1、在客户端生成密钥并拷贝公钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa <span class="comment"># 一路回车就可以</span></span><br><span class="line">pbcopy &lt; ~/.ssh/id_rsa.pub <span class="comment"># mac电脑上直接拷贝公钥</span></span><br></pre></td></tr></table></figure></li>
<li><p>2、服务器端也生产密钥(注意是免密登录<code>git</code>用户需要在<code>git</code>用户下配置)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line"><span class="built_in">chmod</span> 700 .ssh/ <span class="comment"># 修改文件夹权限</span></span><br><span class="line">vim .ssh/authorized_keys <span class="comment"># 把客户端的公钥放到这个文件里面</span></span><br><span class="line"><span class="built_in">chmod</span> 644 .ssh/authorized_keys <span class="comment"># 修改权限</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>Hexo,git服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>在windows环境下让XAMPP使用Nginx作为Web服务器</title>
    <url>/post/a40b0852.html</url>
    <content><![CDATA[<h1 id="windows中下载（xampp）apache后使用nginx作为服务器"><a href="#windows中下载（xampp）apache后使用nginx作为服务器" class="headerlink" title="windows中下载（xampp）apache后使用nginx作为服务器"></a>windows中下载（xampp）apache后使用nginx作为服务器</h1><p>首先去php文件夹那里, 把那个php.ini Copy一份, 命名为php-cli.ini 让nginx使用. 而不会影响Apache 的使用。</p>
<p>打开php-cli.ini，配置下面几个 参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enable_dl = On;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cgi.force_redirect = 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cgi.fix_pathinfo=1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fastcgi.impersonate = 1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cgi.rfc2616_headers = 1;</span><br></pre></td></tr></table></figure>
<p>然后下载nginx <a href="http://nginx.org/en/download.html%E8%A7%A3%E5%8E%8B">http://nginx.org/en/download.html解压</a></p>
<p><img src="/../images/%E5%9C%A8windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%AE%A9XAMPP%E4%BD%BF%E7%94%A8Nginx%E4%BD%9C%E4%B8%BAWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20190424100333193.png" alt="img"></p>
<p>在nginx上部署项目</p>
<p>打开conf文件夹下的nginx.conf文件进行配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        listen       889;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        server_name  www.zch.com;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		root   C:/xampp/htdocs/phpproject/tp5/public/;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            index  index.html index.htm index.php;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            autoindex  on;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          if (!-e $request_filename) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            rewrite  ^(.*)$  /index.php?s=/$1  last;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        #</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            root   html;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	    location ~ \.php$ &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">				fastcgi_pass   127.0.0.1:9001;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                fastcgi_index  index.php;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                fastcgi_split_path_info  ^((?U).+\.php)(/?.+)$;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                fastcgi_param  PATH_INFO  $fastcgi_path_info;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                include        fastcgi_params;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在C:\Windows\System32\drivers\etc\hosts文件下 ， 配置虚拟目录，即是配置文件中的server name</p>
<p><img src="/../images/%E5%9C%A8windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%AE%A9XAMPP%E4%BD%BF%E7%94%A8Nginx%E4%BD%9C%E4%B8%BAWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/2019042410140472.png" alt="img"></p>
<p><img src="/../images/%E5%9C%A8windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%AE%A9XAMPP%E4%BD%BF%E7%94%A8Nginx%E4%BD%9C%E4%B8%BAWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20190424101422546.png" alt="img"></p>
<p>启动nginx（如果端口号被占用的话就换一个端口号）</p>
<p>切换到php目录，执行 php-cgi.exe -b 127.0.0.1:9001 -c C:\xampp\php\php-cli.ini，</p>
<p><img src="/../images/%E5%9C%A8windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%AE%A9XAMPP%E4%BD%BF%E7%94%A8Nginx%E4%BD%9C%E4%B8%BAWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20190424100502412.png" alt="img"></p>
<p>切换到nginx目录，启动nginx</p>
<p><img src="/../images/%E5%9C%A8windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%AE%A9XAMPP%E4%BD%BF%E7%94%A8Nginx%E4%BD%9C%E4%B8%BAWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20190424100516752.png" alt="img"></p>
<p><img src="/../images/%E5%9C%A8windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%AE%A9XAMPP%E4%BD%BF%E7%94%A8Nginx%E4%BD%9C%E4%B8%BAWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20190424101527533.png" alt="img"></p>
<p>以上结束</p>
<h1 id="参考方法一："><a href="#参考方法一：" class="headerlink" title="参考方法一："></a>参考方法一：</h1><p>说实话, 在windows下使用Nginx 着实有点不太方便, 但因项目需求, 又不想换系统(虽然可以搞个虚拟机玩), 只能用Nginx了</p>
<p>好了, 不多说了. 开始…</p>
<p>首先我用的是xampp包(Apache+Mysql+php+perl) 用的是3.2.2版, 这里各自喜欢…不多说</p>
<p>一般我是把xampp安装在D:\xampp下的…</p>
<p>首先去下载一个Nginx的包.. 戳这-&gt;<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a> 有三个版的(Mainline version / Stable version / Legacy versions )  我是下了个稳定版的 即Stable version ,不要问为什么, 因为稳定!</p>
<p>下完后就可以解压至D:\xampp\nginx 了… 如图:</p>
<p><img src="/../images/%E5%9C%A8windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%AE%A9XAMPP%E4%BD%BF%E7%94%A8Nginx%E4%BD%9C%E4%B8%BAWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/997515-20161227134916679-1887516644.png" alt="img"></p>
<p>这里得去php文件夹那里, 把那个php.ini Copy一份, 命名为php-cli.ini 这个就是为了给Nginx玩的. 而不会影响Apache 的使用….</p>
<p>好了. 到这里, 就打开php-cli.ini(建议文本器打开)</p>
<p>配置一下下面几个 直接查找就行了::</p>
<p>enable_dl = On;</p>
<p>cgi.force_redirect = 0;</p>
<p>cgi.fix_pathinfo=1;</p>
<p>fastcgi.impersonate = 1;</p>
<p>cgi.rfc2616_headers = 1;</p>
<p>OK 现在就可以打开nginx.exe了 </p>
<p><img src="/../images/%E5%9C%A8windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%AE%A9XAMPP%E4%BD%BF%E7%94%A8Nginx%E4%BD%9C%E4%B8%BAWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/997515-20161227141543882-949700058.png" alt="img"></p>
<p>(这里的-b 应该是 -a 和 -p 的集合…吧)</p>
<p>然后再开一个cmd 下输 D:\xampp\nginx\nginx</p>
<p><img src="/../images/%E5%9C%A8windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%AE%A9XAMPP%E4%BD%BF%E7%94%A8Nginx%E4%BD%9C%E4%B8%BAWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/997515-20161227141607054-964655387.png" alt="img"></p>
<p>这里有点麻烦就是, 如果挂了. 就得重新打开一个cmd… D:\xampp\nginx\nginx -s reload</p>
<p>也可以这样处理, 关闭Nginx </p>
<p>taskkill /F /IM nginx.exe &gt; nul</p>
<p>taskkill /F /IM php-cgi.exe &gt; nul</p>
<p>建议如果是改了配置的话, 得先使用 nginx -t 测试看有没有报错. 再reload 或者其它操作</p>
<p>还有我看了下网上说的, 可以借助<a href="https://skydrive.live.com/redir?resid=1E48DF64F8BD957!202">RunHiddenConsole</a> 来管理Nginx (这里我没试过, 有空得搞搞)</p>
<p><strong>注意: nginx不能和apache 同时使用, 因为他们默认都使用同一个端口 所以你开nginx得把apache干掉</strong></p>
<p><strong><em>Nginx 配置\</em></strong>:</p>
<p>打开nginx\conf\nginx.conf</p>
<p>这里我是直接引入了文件夹去找其它的配置</p>
<p>像这样(-^-)</p>
<p>include web/*.conf; </p>
<p><img src="/../images/%E5%9C%A8windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%AE%A9XAMPP%E4%BD%BF%E7%94%A8Nginx%E4%BD%9C%E4%B8%BAWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/997515-20161227140823695-1616046948.png" alt="img"></p>
<p>location / {<br>root D:/xampp/htdocs/;<br>index index.html index.htm index.php;<br>autoindex on;<br>autoindex_exact_size on;<br>autoindex_localtime on;<br>}</p>
<p>location ~* .php$ {<br>root D:/xampp/htdocs/;<br>fastcgi_pass 127.0.0.1:9000;<br>fastcgi_index index.php;<br>include fastcgi.conf;<br>}</p>
<p>配置根站点…</p>
<p>还有配置一下那个phpmyadmin</p>
<p>location = /phpmyadmin/ {</p>
<p>root D:/xampp/;<br>index index.php index.html index.htm;<br>}</p>
<p><strong>location ~* /phpmyadmin/.*.php {</strong></p>
<p><strong>root D:/xampp/;<br>include fastcgi.conf;<br>fastcgi_pass 127.0.0.1:9000;<br>fastcgi_index index.php;<br>#fastcgi_param SCRIPT_FILENAME D:/xampp/$fastcgi_script_name;<br>}</strong></p>
<p> 重新加载配置&gt;&gt;&gt;D:\xampp\nginx\nginx -t &gt;&gt;&gt; D:\xampp\nginx\nginx -s reload</p>
<p>配域名的话这里就不写了. 不会的话,  <a href="http://www.baidu.com/">www.baidu.com</a> 是个好东西.</p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>-win7</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 Spring Cloud 的完整微服务项目</title>
    <url>/post/336f45ae.html</url>
    <content><![CDATA[<p>Gitee上有许多基于 Spring Cloud 的完整微服务项目，下面推荐这 5 个优质微服务相关的开源项目，希望可以帮到你：）</p>
<h2 id="推荐项目1、RBAC-权限管理系统-Pig"><a href="#推荐项目1、RBAC-权限管理系统-Pig" class="headerlink" title="推荐项目1、RBAC 权限管理系统 Pig"></a>推荐项目1、RBAC 权限管理系统 Pig</h2><p>基于Spring Boot 2.2.1、 Spring Cloud Hoxton、 OAuth2 的RBAC 权限管理系统。</p>
<p>技术特点：</p>
<p>l 基于 Spring Cloud Hoxton 、Spring Boot 2.2、 OAuth2 的RBAC权限管理系统</p>
<p>l 基于数据驱动视图的理念封装 element-ui，即使没有 vue 的使用经验也能快速上手</p>
<p>l 提供对常见容器化支持 Docker、Kubernetes、Rancher2 支持</p>
<p>l 提供 lambda 、stream api 、webflux 的生产实践。</p>
<p><strong>项目地址</strong>：<a href="https://link.zhihu.com/?target=https://gitee.com/log4j/pig">https://gitee.com/log4j/pig</a></p>
<h2 id="推荐项目2、基于Spring-Cloud实现的微服务基础设施-MCloud"><a href="#推荐项目2、基于Spring-Cloud实现的微服务基础设施-MCloud" class="headerlink" title="推荐项目2、基于Spring Cloud实现的微服务基础设施 MCloud"></a>推荐项目2、基于Spring Cloud实现的微服务基础设施 MCloud</h2><p>MCloud 基于 Spring Cloud 进行开发，提供了项目中常用的基础设施：</p>
<p>l mcloud-registry 服务注册与发现中心。</p>
<p>l keycloak 用户认证和管理。</p>
<p>l mcloud-apigw 基于Spring cloud gateway 实现的 API 网关 ，同时使用了 netflix-ribbon 作为负载均衡器。</p>
<p>l mcloud-config 基于 GitHub 的统一配置中心（此项目使用 这个 repo 作为配置存储库）。</p>
<p>l mcloud-logs 基于logstash Kibana 以及 ElasticSearch 实现的日志服务。</p>
<p><strong>项目地址</strong>：<a href="https://link.zhihu.com/?target=https://gitee.com/black-c/mcloud">https://gitee.com/black-c/mcloud</a></p>
<h2 id="推荐项目3、企业级微服务框架-open-capacity-platform"><a href="#推荐项目3、企业级微服务框架-open-capacity-platform" class="headerlink" title="推荐项目3、企业级微服务框架 open-capacity-platform"></a>推荐项目3、企业级微服务框架 open-capacity-platform</h2><p>基于layui+springcloud的企业级微服务框架(用户权限管理，配置中心管理，应用管理，….),其核心的设计目标是分离前后端，快速开发部署，学习简单，功能强大，提供快速接入核心接口能力，其目标是帮助企业搭建一套类似百度能力开放平台的框架。</p>
<p><strong>项目地址</strong>：<a href="https://link.zhihu.com/?target=https://gitee.com/owenwangwen/open-capacity-platform">https://gitee.com/owenwangwen/open-capacity-platform</a></p>
<h2 id="推荐项目4、微服务解决方案-jbone"><a href="#推荐项目4、微服务解决方案-jbone" class="headerlink" title="推荐项目4、微服务解决方案 jbone"></a>推荐项目4、微服务解决方案 jbone</h2><p>jbone基于Spring Cloud框架开发，旨在为中小企业提供稳定的微服务解决方案，为开发人员提供基础开发骨架，jbone包含微服务中所有常用组件，例如注册中心、服务管理、服务监控、JVM监控、内存分析、调用链跟踪、API网关等等。业务功能包括系统权限的统一管理、单点登录、CMS、电商平台、工作流平台、支付平台等等。</p>
<p><strong>项目地址</strong>：<a href="https://link.zhihu.com/?target=https://gitee.com/majunwei2017/jbone">https://gitee.com/majunwei2017/jbone</a></p>
<h2 id="推荐项目5、分布式、单体式微服务架构并存的综合型项目-SpringBlade"><a href="#推荐项目5、分布式、单体式微服务架构并存的综合型项目-SpringBlade" class="headerlink" title="推荐项目5、分布式、单体式微服务架构并存的综合型项目 SpringBlade"></a>推荐项目5、分布式、单体式微服务架构并存的综合型项目 SpringBlade</h2><p>SpringBlade 是一个由商业级项目升级优化而来的SpringCloud分布式微服务架构、SpringBoot单体式微服务架构并存的综合型项目，采用Java8 API重构了业务代码，完全遵循阿里巴巴编码规范。采用Spring Boot 2 、Spring Cloud Greenwich 、Mybatis 等核心技术，同时提供基于React和Vue的两个前端框架用于快速搭建企业级的SaaS多租户微服务平台。</p>
<p><strong>项目地址</strong>：<a href="https://link.zhihu.com/?target=https://gitee.com/smallc/SpringBlade">https://gitee.com/smallc/SpringBlade</a></p>
<p>体验 <a href="https://link.zhihu.com/?target=https://gitee.com/">码云企业版 - 码云 Gitee.com</a> 有序规划和管理软件研发全流程</p>
<p>关注码云微信公众号：giteecom</p>
<p>发现更多优质开源项目：<a href="https://link.zhihu.com/?target=https://gitee.com/gvp">GVP-码云最有价值开源项目</a></p>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,spring cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>基于TensorFlow框架搭建一个最简单的CNN框架</title>
    <url>/post/85ca40.html</url>
    <content><![CDATA[<h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p>本文将使用python，并借助TensorFlow框架搭建一个最简单的CNN框架，来实现对手写数字的识别。</p>
<h2 id="本文搭建的CNN框架结构"><a href="#本文搭建的CNN框架结构" class="headerlink" title="本文搭建的CNN框架结构"></a>本文搭建的CNN框架结构</h2><p>【1】输入层（本文的输入是一个28<em>28且为单通道的图片，所以输入层有784个节点）<br>【2】第一个卷积层（该卷积层包含了32个不同的5</em>5的卷积核，即该卷积层提取了32种不同图形特征，【5,5,1,32】表示卷积核尺寸为5<em>5,1个颜色通道，32个不同的卷积核）<br>【3】第一个卷积层后的最大池化层<br>【4】第二个卷积层（该卷积层包含了64个不同的5</em>5的卷积核，即该卷积层提取了32种不同图形特征，【5,5,32,64】表示卷积核尺寸为5*5，64个不同的卷积核）<br>【5】第二个卷积层后的最大池化层<br>【6】全连接层<br>【7】一个Dropout层（为了减轻过拟合，在训练时，我们随机丢弃一部分节点的数据来减轻过拟合，预测是则保留全部数据来追求最好的预测性能）<br>【8】Softmax层，得到最后的概率输出。<br>【9】定义损失函数为交叉熵（cross entropy），优化器使用Adam<br>【10】得到模型的预测精度</p>
<h2 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h2><h1 id="导入相应的库"><a href="#导入相应的库" class="headerlink" title="导入相应的库"></a>导入相应的库</h1><p>from tensorflow.examples.tutorials.mnist import input_data<br>import tensorflow as tf</p>
<h1 id="导入手写数字数据集"><a href="#导入手写数字数据集" class="headerlink" title="导入手写数字数据集"></a>导入手写数字数据集</h1><p>mnist = input_data.read_data_sets(“MNIST_data/“,one_hot = True)<br>sess = tf.InteractiveSession()</p>
<h1 id="定义生成权重的函数"><a href="#定义生成权重的函数" class="headerlink" title="定义生成权重的函数"></a>定义生成权重的函数</h1><p>def weight_variabel(shape):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">initial = tf.truncated_normal(shape,stddev = 0.1)return tf.Variable(initial)</span><br></pre></td></tr></table></figure>
<h1 id="定义生成偏重的函数"><a href="#定义生成偏重的函数" class="headerlink" title="定义生成偏重的函数"></a>定义生成偏重的函数</h1><p>def bias_variable(shape):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">initial = tf.constant(0.1,shape = shape)return tf.Variable(initial)</span><br></pre></td></tr></table></figure>
<h1 id="定义生成卷积层的函数"><a href="#定义生成卷积层的函数" class="headerlink" title="定义生成卷积层的函数"></a>定义生成卷积层的函数</h1><h1 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h1><p>def conv2d(x,W):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return tf.nn.conv2d(x,W,strides=[1,1,1,1],padding=&#x27;SAME&#x27;)</span><br></pre></td></tr></table></figure>
<h1 id="池化层"><a href="#池化层" class="headerlink" title="池化层"></a>池化层</h1><h1 id="定义生成最大池化层函数"><a href="#定义生成最大池化层函数" class="headerlink" title="定义生成最大池化层函数"></a>定义生成最大池化层函数</h1><p>def max_pool_2x2(x):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return tf.nn.max_pool(x,ksize=[1,2,2,1],strides=[1,2,2,1],</span><br><span class="line">                     padding=&#x27;SAME&#x27;)</span><br></pre></td></tr></table></figure>
<h1 id="传入输入的变量"><a href="#传入输入的变量" class="headerlink" title="传入输入的变量"></a>传入输入的变量</h1><p>x = tf.placeholder(tf.float32,[None,784])</p>
<h1 id="传入标签的变量"><a href="#传入标签的变量" class="headerlink" title="传入标签的变量"></a>传入标签的变量</h1><p>y_ = tf.placeholder(tf.float32,[None,10])</p>
<h1 id="将1D的图片转为28-28的2D照片"><a href="#将1D的图片转为28-28的2D照片" class="headerlink" title="将1D的图片转为28*28的2D照片"></a>将1D的图片转为28*28的2D照片</h1><p>x_image = tf.reshape(x,[-1,28,28,1])</p>
<h1 id="我们定义第一个卷积层"><a href="#我们定义第一个卷积层" class="headerlink" title="我们定义第一个卷积层"></a>我们定义第一个卷积层</h1><h1 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h1><p>W_conv1 = weight_variabel([5,5,1,32])</p>
<h1 id="偏置"><a href="#偏置" class="headerlink" title="偏置"></a>偏置</h1><p>b_conv1 = bias_variable([32])</p>
<h1 id="卷积核"><a href="#卷积核" class="headerlink" title="卷积核"></a>卷积核</h1><p>h_conv1 = tf.nn.relu(conv2d(x_image,W_conv1)+b_conv1)</p>
<h1 id="最大池化层"><a href="#最大池化层" class="headerlink" title="最大池化层"></a>最大池化层</h1><p>h_pool1 = max_pool_2x2(h_conv1)</p>
<h1 id="定义第二个卷积层"><a href="#定义第二个卷积层" class="headerlink" title="定义第二个卷积层"></a>定义第二个卷积层</h1><h1 id="权重-1"><a href="#权重-1" class="headerlink" title="权重"></a>权重</h1><p>W_conv2 = weight_variabel([5,5,32,64])</p>
<h1 id="偏置-1"><a href="#偏置-1" class="headerlink" title="偏置"></a>偏置</h1><p>b_conv2 = bias_variable([64])</p>
<h1 id="卷积核-1"><a href="#卷积核-1" class="headerlink" title="卷积核"></a>卷积核</h1><p>h_conv2 = tf.nn.relu(conv2d(h_pool1,W_conv2)+b_conv2)</p>
<h1 id="最大池化层-1"><a href="#最大池化层-1" class="headerlink" title="最大池化层"></a>最大池化层</h1><p>h_pool2 = max_pool_2x2(h_conv2)</p>
<h1 id="定义一个全连接层，隐含节点数为1024，并使用ReLU激活函数"><a href="#定义一个全连接层，隐含节点数为1024，并使用ReLU激活函数" class="headerlink" title="定义一个全连接层，隐含节点数为1024，并使用ReLU激活函数"></a>定义一个全连接层，隐含节点数为1024，并使用ReLU激活函数</h1><p>W_fc1 = weight_variabel([7<em>7</em>64,1024])<br>b_fc1 = bias_variable([1024])<br>h_pool2_flat = tf.reshape(h_pool2,[-1,7<em>7</em>64])<br>h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat,W_fc1)+b_fc1)</p>
<h1 id="为了减轻过拟合，下面使用一个Dropout层，是通过一个placeholder的传输keepr-prob比率来控制的。在训练时，"><a href="#为了减轻过拟合，下面使用一个Dropout层，是通过一个placeholder的传输keepr-prob比率来控制的。在训练时，" class="headerlink" title="为了减轻过拟合，下面使用一个Dropout层，是通过一个placeholder的传输keepr_prob比率来控制的。在训练时，"></a>为了减轻过拟合，下面使用一个Dropout层，是通过一个placeholder的传输keepr_prob比率来控制的。在训练时，</h1><h1 id="我们随机丢弃一部分节点数据来减轻过拟合，预测时我们保留全部数据来追求最好的预测性能"><a href="#我们随机丢弃一部分节点数据来减轻过拟合，预测时我们保留全部数据来追求最好的预测性能" class="headerlink" title="我们随机丢弃一部分节点数据来减轻过拟合，预测时我们保留全部数据来追求最好的预测性能"></a>我们随机丢弃一部分节点数据来减轻过拟合，预测时我们保留全部数据来追求最好的预测性能</h1><p>keep_prob = tf.placeholder(tf.float32)<br>h_fc1_drop = tf.nn.dropout(h_fc1,keep_prob)</p>
<h1 id="最后我们将Dropout层的输出连接一个Softmax层，得到最后的概率输出"><a href="#最后我们将Dropout层的输出连接一个Softmax层，得到最后的概率输出" class="headerlink" title="最后我们将Dropout层的输出连接一个Softmax层，得到最后的概率输出"></a>最后我们将Dropout层的输出连接一个Softmax层，得到最后的概率输出</h1><p>W_fc2 = weight_variabel([1024,10])<br>b_fc2 = bias_variable([10])<br>y_conv = tf.nn.softmax(tf.matmul(h_fc1_drop,W_fc2)+b_fc2)</p>
<h2 id="我们定义损失函数cross-entropy-和之前一样，但是优化器使用Adam，并给予一个小的学习速率1e-4"><a href="#我们定义损失函数cross-entropy-和之前一样，但是优化器使用Adam，并给予一个小的学习速率1e-4" class="headerlink" title="我们定义损失函数cross entropy ,和之前一样，但是优化器使用Adam，并给予一个小的学习速率1e-4"></a>我们定义损失函数cross entropy ,和之前一样，但是优化器使用Adam，并给予一个小的学习速率1e-4</h2><p>cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_*tf.log(y_conv),</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reduction_indices = [1]))</span><br></pre></td></tr></table></figure>
<p>train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)</p>
<p>correct_prediction = tf.equal(tf.argmax(y_conv,1),tf.argmax(y_,1))<br>accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))</p>
<h1 id="下面开始训练过程，首先是初始化所有参数"><a href="#下面开始训练过程，首先是初始化所有参数" class="headerlink" title="下面开始训练过程，首先是初始化所有参数"></a>下面开始训练过程，首先是初始化所有参数</h1><p>tf.global_variables_initializer().run()<br>for i in range(20000):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">batch = mnist.train.next_batch(50)if i % 100 == 0:</span><br><span class="line">    train_accuracy = accuracy.eval(feed_dict= &#123;x:batch[0],y_:batch[1],</span><br><span class="line">                                              keep_prob:1.0&#125;)</span><br><span class="line">    print(&quot;step %d,trainning accuracy %g&quot;%(i,train_accuracy))train_step.run(feed_dict=&#123;x:batch[0],y_:batch[1],keep_prob:0.5&#125;)</span><br></pre></td></tr></table></figure>
<p>print(“test accuracy %g”%accuracy.eval(feed_dict={x:mnist.test.images,y_:mnist.test.labels,keep_prob:1.0}))</p>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>-人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>同时使用gitee和github</title>
    <url>/post/22309.html</url>
    <content><![CDATA[<p>Git共有三个级别的config文件，分别是：</p>
<ul>
<li><strong>system</strong> ：%GitPath%\mingw64\etc\gitconfig文件</li>
<li><strong>global</strong>：$home.gitconfig文件</li>
<li><strong>local</strong>：%RepoPath%.git\config文件</li>
</ul>
<p>其中<code>%GitPath%</code>为Git的安装路径，<code>%RepoPath%</code>为某仓库的本地路径。</p>
<ol>
<li>删掉全局配置</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --list</span><br><span class="line">$ git config --global --unset user.name &quot;你的名字&quot;</span><br><span class="line">$ git config --global --unset user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>为不同账户配置ssh秘钥</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/.ssh 														# cd到当前用户的.ssh文件夹</span><br><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa.gitee -C &quot;注册gitee邮箱&quot;		#为不同秘钥指定名称</span><br><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa.github -C &quot;注册github邮箱&quot;</span><br></pre></td></tr></table></figure>
<p>完成后会在~/.ssh / 目录下生成以下文件：</p>
<ul>
<li>id_rsa.github</li>
<li>id_rsa.github.pub</li>
<li>id_rsa.gitee</li>
<li>id_rsa.gitee.pub</li>
</ul>
<p>复制公钥分别在github和gitee中设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat id_rsa.github.pub</span><br><span class="line">cat id_rsa.gitee.pub</span><br></pre></td></tr></table></figure>
<p>添加新的私钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-agent bash</span><br><span class="line">$ ssh-add ~/.ssh/id_rsa.github</span><br><span class="line">$ ssh-add ~/.ssh/id_rsa.gitee	</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>进行全局配置</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch ~/.ssh/config    </span><br><span class="line"></span><br><span class="line"># gitee</span><br><span class="line">Host gitee.com</span><br><span class="line">HostName gitee.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa.gitee</span><br><span class="line"></span><br><span class="line"># github</span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa.github</span><br></pre></td></tr></table></figure>
<p>Host 它涵盖了下面一个段的配置，我们可以通过他来替代将要连接的服务器地址。 这里可以使用任意字段或通配符。 当ssh的时候如果服务器地址能匹配上这里Host指定的值，则Host下面指定的HostName将被作为最终的服务器地址使用，并且将使用该Host字段下面配置的所有自定义配置来覆盖默认的/etc/ssh/ssh_config配置信息。</p>
<p>Port 自定义的端口。默认为22，可不配置</p>
<p>User 自定义的用户名，默认为git，可不配置</p>
<p>HostName 真正连接的服务器地址</p>
<p>PreferredAuthentications 指定优先使用哪种方式验证，支持密码和秘钥验证方式</p>
<p>IdentityFile 指定本次连接使用的密钥文件</p>
<ol start="4">
<li>测试连接</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">Hi yourname! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line">ssh -T git@gitee.com</span><br><span class="line">Hi yourname! You&#x27;ve successfully authenticated, but GITEE.COM does not provide shell access.</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>hexo博客仓库</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi .depoly_git/.git/config 增加</span><br><span class="line"></span><br><span class="line">[user]</span><br><span class="line">	name = username</span><br><span class="line">	email = email</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>针对不同的项目仓库</li>
</ol>
<p>增加本地配置，在每个仓库的<code>.git/config</code>中进行配置不同的用户，以及其他的配置信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --local user.name &#x27;github/gitee账号名&#x27;</span><br><span class="line">$ git config --local user.email &#x27;github/gitee账号邮箱&#x27;</span><br></pre></td></tr></table></figure>
<p>–global是在全局配置文件中设置</p>
<p>–local 是针对当前仓库的项目进行设置</p>
<p>参考文章：</p>
<p><a href="https://juejin.im/post/6844904180633600007">https://juejin.im/post/6844904180633600007</a></p>
<p><a href="https://www.jianshu.com/p/68578d52470c">https://www.jianshu.com/p/68578d52470c</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>-其他</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Springboot的SSO单点登陆系统的登陆操作实战</title>
    <url>/post/f2e8f2b8.html</url>
    <content><![CDATA[<p>一 前言<br>（1）使用环境：</p>
<p>SpringBoot2.X</p>
<p>MyBatis</p>
<p>基于redis存储的springSession</p>
<p>（2）基础学习：</p>
<p>关于SSO的基础学习可以参考该文章：单点登录（SSO），从原理到实现</p>
<p>代码风格使用的是晓风轻的代码规范，对于其中的AOP实现此处不会给出代码，具体可以在文章尾部的gitHub上查看：我的编码习惯 - Controller规范</p>
<p>进阶可以参考：单点登录(一)—–理论—–单点登录SSO的介绍和CAS+选型</p>
<p>（3）目标</p>
<p>使用Header认证替换Cookie，避免用户禁用cookie导致登陆失效的情况<br>实现可以运行操作的SSO单点登录系统<br>（4）注意：</p>
<p>此处使用了一个项目来模拟一个Client与一个Server，因为Server依靠存储token来判断用户是否登陆，而Client依靠Session判断用户是否登陆，因此两者能在同个项目共存。<br>由于项目的依赖很多，所以不会事无巨细地讲，只会挑重点的看，具体的可以在文章尾部的GitHub上查看<br>看完以上文章之后总结一下，在这次简单实现中我们需要做到的有以下几点：</p>
<p>Client服务端收到请求，Filter拦截该请求，在Filter中判断该用户是否已经登陆，如果已经登陆，就直接进入系统，否则，返回用户没有登陆的信息，由前端页面进行跳转到SSO服务器的登录页面，此时要带上原页面的url，下面成为clientUrl。<br>在LoginURL中会获取到用户的token，检验用户是否已经在其他相关使用SSO的系统登陆成功。如果已经在其他的系统登陆了，则将请求转回Client，并且带回一个token, Client再次发送请求到ValidateURL。否则，系统提示用户输入ID和PASSWORD。<br>提交后请求到ValidateURL，Server验证token的有效性。然后返回结果给Client。如果token有效，则Client与用户之间建立局部会话。否则，重定向到登陆页面，提示用户输入ID和PASSWORD。<br>校验ID和Password是否匹配。如不匹配，再次要求用户输入ID和PASSWORD。否则，Server记录用户登陆成功。并向浏览器回送token，记录用户已经登陆成功。<br>那么马上开始SSO单点登陆之旅<br>二 基础工具类<br>首先来看下基础工具类，比较多，不想看的朋友可以跳到下一大节，下面看到有不清楚的方法可以搜索回来这里看。以下在gitHub上都有：</p>
<p>配置redis：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableCaching</span><br><span class="line">public class RedisConfig extends CachingConfigurerSupport &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    &lt;T&gt; RedisTemplate&lt;String, T&gt; redisTemplate(RedisConnectionFactory factory) &#123;</span><br><span class="line">        RedisTemplate&lt;String, T&gt; redisTemplate = new RedisTemplate&lt;&gt;();</span><br><span class="line">        System.out.println(&quot;加载redis配置&quot;);</span><br><span class="line"></span><br><span class="line">        Jackson2JsonRedisSerializer j = new Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        // value值得序列化采用fastJsonRedisSerializer</span><br><span class="line">        redisTemplate.setValueSerializer(j);</span><br><span class="line">        redisTemplate.setHashValueSerializer(j);</span><br><span class="line">        // key的序列化采用StringRedisSerializer</span><br><span class="line">        redisTemplate.setKeySerializer(new StringRedisSerializer());</span><br><span class="line">        redisTemplate.setHashKeySerializer(new StringRedisSerializer());</span><br><span class="line">        redisTemplate.setConnectionFactory(factory);</span><br><span class="line">        redisTemplate.setEnableTransactionSupport(true);</span><br><span class="line">        return redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用SpringSession替代Tomcat内置的Session，并且设置为Header认证：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableRedisHttpSession(maxInactiveIntervalInSeconds = 1801)</span><br><span class="line">public class HttpSessionConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public HeaderHttpSessionIdResolver httpSessionStrategy() &#123;</span><br><span class="line">        return new HeaderHttpSessionIdResolver(&quot;x-auth-token&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此处是一个HttpClient类，使用其架起两个服务器之间的通信：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service(&quot;httpClientUtil&quot;)</span><br><span class="line">@Slf4j</span><br><span class="line">public class HttpClientUtil &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 使用Json格式发送Post请求</span><br><span class="line">     *</span><br><span class="line">     * @param url         发送的URL</span><br><span class="line">     * @param requestData 传给数据</span><br><span class="line">     * @return</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span><br><span class="line">    public ResultBean&lt;Data&gt; postAction(String url, RequestBean requestData) throws IOException &#123;</span><br><span class="line">        // 将Json对象转换为字符串</span><br><span class="line">        Gson gson = new Gson();</span><br><span class="line">        String strJson = gson.toJson(requestData, requestData.getClass());</span><br><span class="line">        log.info(&quot;httpClient发送数据：&#123;&#125;&quot;, strJson);</span><br><span class="line">        //使用帮助类HttpClients创建CloseableHttpClient对象.</span><br><span class="line">        CloseableHttpClient client = HttpClients.createDefault();</span><br><span class="line">        //HTTP请求类型创建HttpPost实例</span><br><span class="line">        HttpPost httpPost = new HttpPost(url);</span><br><span class="line"></span><br><span class="line">        httpPost.setHeader(&quot;Content-Type&quot;, &quot;application/json;charset=UTF-8&quot;);</span><br><span class="line"></span><br><span class="line">        //组织数据</span><br><span class="line">        StringEntity se = new StringEntity(strJson);</span><br><span class="line">        se.setContentType(&quot;application/json&quot;);</span><br><span class="line"></span><br><span class="line">        //对于httpPost请求,把请求体填充进HttpPost实体.</span><br><span class="line">        httpPost.setEntity(se);</span><br><span class="line"></span><br><span class="line">        CloseableHttpResponse response = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 执行请求</span><br><span class="line">            response = client.execute(httpPost);</span><br><span class="line">            HttpEntity entity = response.getEntity();</span><br><span class="line">            // 判断返回状态是否为200</span><br><span class="line">            if (response.getStatusLine().getStatusCode() == 200) &#123;</span><br><span class="line">                strJson = EntityUtils.toString(entity, &quot;UTF-8&quot;).trim();</span><br><span class="line">                Type type = new TypeToken&lt;ResultBean&lt;Data&gt;&gt;() &#123;</span><br><span class="line">                &#125;.getType();</span><br><span class="line">                ResultBean&lt;Data&gt; resultBean = VerifyUtil.cast(gson.fromJson(strJson, type));</span><br><span class="line"></span><br><span class="line">                // 处理子系统局部会话的Header认证</span><br><span class="line">                if (null != response.getFirstHeader(&quot;x-auth-token&quot;)) &#123;</span><br><span class="line">                    if (null == resultBean.getData()) &#123;</span><br><span class="line">                        resultBean.setData(new Data());</span><br><span class="line">                    &#125;</span><br><span class="line">                    resultBean.getData().setAuthToken((response.getFirstHeader(&quot;x-auth-token&quot;).toString()).split(&quot; &quot;)[1]);</span><br><span class="line">                &#125;</span><br><span class="line">                return resultBean;</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (response != null) &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">            client.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一个会经常用到的工具类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class VerifyUtil implements Serializable &#123;</span><br><span class="line">	/**</span><br><span class="line">     * 字符串判空</span><br><span class="line">     * @param str 字符串</span><br><span class="line">     * @return 不为空返回true</span><br><span class="line">     */</span><br><span class="line">    public static boolean isNotEmpty(String str) &#123;</span><br><span class="line">        return (null != str &amp;&amp; !str.equals(&quot;&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 字符串判空</span><br><span class="line">     * @param args 多个字符串</span><br><span class="line">     * @return 全部不为空返回true</span><br><span class="line">     */</span><br><span class="line">    public static boolean isNotEmpty(String... args) &#123;</span><br><span class="line">        for (String str : args) &#123;</span><br><span class="line">            if (null == str || str.equals(&quot;&quot;)) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 检查字符串是否为null</span><br><span class="line">     * @param arg 多个字符串</span><br><span class="line">     * @return 全部不为null返回true</span><br><span class="line">     */</span><br><span class="line">    public static boolean checkNull(String...arg) &#123;</span><br><span class="line">        for (String str : arg) &#123;</span><br><span class="line">            if (!checkNull(str)) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 对象判空</span><br><span class="line">     * @param object 对象</span><br><span class="line">     * @return 不为空返回true</span><br><span class="line">     */</span><br><span class="line">    public static boolean checkNull(Object object) &#123;</span><br><span class="line">        return null != object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    public static &lt;T&gt; T cast(Object object) &#123;</span><br><span class="line">        return (T)object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一个用户状态的枚举类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@AllArgsConstructor</span><br><span class="line">public enum UserStatusEnum &#123;</span><br><span class="line"></span><br><span class="line">    PARAMETER_ERROR(&quot;parameter_error&quot;),</span><br><span class="line"></span><br><span class="line">    USER_ACCOUNT_ERROR(&quot;user_account_error&quot;),</span><br><span class="line"></span><br><span class="line">    USER_HAS_REGISTER(&quot;user_has_register&quot;),</span><br><span class="line"></span><br><span class="line">    URL_OR_TOKEN_ERROR(&quot;url or token error&quot;),</span><br><span class="line"></span><br><span class="line">    USER_HAS_NOT_LOGIN(&quot;you has not login&quot;)</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    private String msg;</span><br><span class="line"></span><br><span class="line">    public String getMsg() &#123;</span><br><span class="line">        return msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>系统之间进行交互的实体类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@Accessors(chain = true)</span><br><span class="line">public class RequestBean &#123;</span><br><span class="line">    User user;</span><br><span class="line"></span><br><span class="line">    String token;</span><br><span class="line"></span><br><span class="line">    String clientUrl;</span><br><span class="line"></span><br><span class="line">    String authToken;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">@JsonInclude(JsonInclude.Include.NON_NULL)</span><br><span class="line">public class ResultBean&lt;T&gt; implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">    public static final int NO_LOGIN = -1;</span><br><span class="line"></span><br><span class="line">    public static final int SUCCESS = 0;</span><br><span class="line"></span><br><span class="line">    public static final int FAIL = 1;</span><br><span class="line"></span><br><span class="line">    public static final int NO_PERMISSION = 2;</span><br><span class="line"></span><br><span class="line">    private String msg = &quot;success&quot;;</span><br><span class="line"></span><br><span class="line">    private int code = SUCCESS;</span><br><span class="line"></span><br><span class="line">    private T data;</span><br><span class="line"></span><br><span class="line">    public ResultBean() &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ResultBean(T data) &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ResultBean(Throwable e) &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.msg = e.toString();</span><br><span class="line">        this.code = FAIL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@lombok.Data</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@Accessors(chain = true)</span><br><span class="line">public class Data &#123;</span><br><span class="line">    User user;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 单点登录令牌</span><br><span class="line">     */</span><br><span class="line">    String token;</span><br><span class="line"></span><br><span class="line">    String clientUrl;</span><br><span class="line"></span><br><span class="line">    String authToken;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三-正文"><a href="#三-正文" class="headerlink" title="三 正文"></a>三 正文</h2><p>那么现在就进入正文了，整个项目还是采用了MVC的架构，下面我们将主要看下controller层与service层：</p>
<p>首先是controller层：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@CrossOrigin</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/user&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    // sso服务端</span><br><span class="line">    /**</span><br><span class="line">     * 用户登陆</span><br><span class="line">     * @param requestBean user、clientUrl、token</span><br><span class="line">     * @return token、clientUrl、authToken</span><br><span class="line">     */</span><br><span class="line">    @PostMapping(&quot;/login&quot;)</span><br><span class="line">    public ResultBean&lt;Data&gt; login(@RequestBody RequestBean requestBean) &#123;</span><br><span class="line">        return new ResultBean&lt;&gt;(userService.login(requestBean));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 验证客户端的token与clientUrl是否合法,若合法则将客户端的clientUrl注册到token中</span><br><span class="line">     * @param requestBean token、clientUrl</span><br><span class="line">     * @return 操作结果，成功data为null</span><br><span class="line">     */</span><br><span class="line">    @PostMapping(&quot;/valid&quot;)</span><br><span class="line">    public ResultBean&lt;Data&gt; validToken(@RequestBody RequestBean requestBean) &#123;</span><br><span class="line">        return new ResultBean&lt;&gt;(userService.valid(requestBean));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // sso客户端</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 接收来自服务器的token与clientUrl,</span><br><span class="line">     * @param httpSession 操作session</span><br><span class="line">     * @param requestBean token、clientUrl</span><br><span class="line">     * @return 操作结果，成功data为带token与clientUrl</span><br><span class="line">     */</span><br><span class="line">    @PostMapping(&quot;/token&quot;)</span><br><span class="line">    public ResultBean&lt;Data&gt; token(HttpSession httpSession, @RequestBody RequestBean requestBean) &#123;</span><br><span class="line">        ResultBean&lt;Data&gt; resultBean = new ResultBean&lt;&gt;(userService.token(requestBean));</span><br><span class="line">        // 验证成功</span><br><span class="line">        if (resultBean.getCode() == 0) &#123;</span><br><span class="line">//             此处仅仅设置用户会话，用户信息的获取在其他请求处理</span><br><span class="line">            System.out.println(&quot;设置session&quot;);</span><br><span class="line">            httpSession.setAttribute(&quot;user&quot;, new User());</span><br><span class="line">        &#125;</span><br><span class="line">        return resultBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一共只有三个方法，下面说下三者各自的任务：</p>
<p>在login()中对用户的登录状态进行判断，验证用户的token，若用户仍未登录则提示用户登录。若用户处于登录状态（无论是以注册token还是刚使用ID与PASSWORD登录），则利用请求中的clientUrl + “/user/token”将token传输给Client（子服务器）。注意，在login()中并没有将clientUrl注册进token内，clientUrl需要经过Client验证后方才可以注册进token。</p>
<p>在token()中则是Client接收SSO Server传输过来的token数据，并且将其发送给serverUrl + “/user/valid”进行验证，若验证通过，则为用户设置user的Session属性，并且将该session对应的x-auth-token传递回去给SSO Server。</p>
<p>valid()中验证并将clientUrl注册进token中。</p>
<p>下面让我们来继续深入service层：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface UserService &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 用户登陆</span><br><span class="line">     * @param requestBean user、clientUrl、token</span><br><span class="line">     * @return token、clientUrl、authToken</span><br><span class="line">     */</span><br><span class="line">    Data login(RequestBean requestBean);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 验证客户端的token与clientUrl是否合法,若合法则将客户端的clientUrl注册到token中</span><br><span class="line">     * @param requestBean token、clientUrl</span><br><span class="line">     * @return 操作结果，成功data为null</span><br><span class="line">     */</span><br><span class="line">    Data valid(RequestBean requestBean);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 接收来自服务器的token与clientUrl,</span><br><span class="line">     * @param requestBean token、clientUrl</span><br><span class="line">     * @return 操作结果，成功data为带token与clientUrl</span><br><span class="line">     */</span><br><span class="line">    Data token(RequestBean requestBean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体比较重要的实现类，这里我将按照前面所说的SSO流程来进行说明，即是按照一个请求从头走到尾的方式。同样，需要完整代码的看文末的github：</p>
<p>首先是基础内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">@Slf4j</span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用户的Mysql数据库操作</span><br><span class="line">     */</span><br><span class="line">    @Resource</span><br><span class="line">    UserDao userDao;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 服务器之间的通讯方式</span><br><span class="line">     */</span><br><span class="line">    @Resource</span><br><span class="line">    HttpClientUtil httpClientUtil;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * redis数据库操作</span><br><span class="line">     */</span><br><span class="line">    @Resource</span><br><span class="line">    private RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 建立token与clientUrl的映射，系统注销的时候会用到</span><br><span class="line">     */</span><br><span class="line">    private static Map&lt;String, List&lt;String&gt;&gt; tokenAndUrlMap = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 建立token与user信息的映射，子系统请求用户信息的时候回用到</span><br><span class="line">     */</span><br><span class="line">    private static Map&lt;String, User&gt; tokenAndUserMap = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 建立token与sessionID，即x-auth-token之间的映射，用户请求x-auth-token的时候会用到</span><br><span class="line">     */</span><br><span class="line">    private static Map&lt;String, String&gt; tokenAndSessionId = new HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先从登陆开始：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 验证用户是否已登录、验证请求参数是否合法</span><br><span class="line"> * @param requestBean user、clientUrl、token</span><br><span class="line"> * @return token、clientUrl、authToken</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public Data login(RequestBean requestBean) &#123;</span><br><span class="line">    String token = requestBean.getToken();</span><br><span class="line">    String clientUrl = requestBean.getClientUrl();</span><br><span class="line">    log.info(&quot;login() : token = &#123;&#125;, clientUrl = &#123;&#125;&quot;, token, clientUrl);</span><br><span class="line"></span><br><span class="line">    // 用户使用token、clientUrl代表需要查询是否已登录</span><br><span class="line">    // tokenAndUrlMap中包含key代表已登录</span><br><span class="line">    if (isNotEmpty(token, clientUrl) &amp;&amp; tokenAndUrlMap.containsKey(token)) &#123;</span><br><span class="line">        log.info(&quot;token = &#123;&#125; 用户已登陆&quot;, token);</span><br><span class="line">        // 将信息反馈给Client</span><br><span class="line">        Data data = transmitToken(token, clientUrl);</span><br><span class="line">        tokenAndSessionId.put(token, data.getAuthToken());</span><br><span class="line">        return data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 使用账号密码进行登陆</span><br><span class="line"></span><br><span class="line">    User user = requestBean.getUser();</span><br><span class="line"></span><br><span class="line">    // 登陆信息为空，说明用户意图不为登陆，抛出未登录状态的异常</span><br><span class="line">    if (!checkNull(user)) &#123;</span><br><span class="line">        throw new UnloginException(UserStatusEnum.USER_HAS_NOT_LOGIN.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 检验合法参数，并进入登陆逻辑</span><br><span class="line">    if (isNotEmpty(user.getAccount(), user.getPassword(), clientUrl)) &#123;</span><br><span class="line">        return loginImpl(user, clientUrl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 说明参数检验不通过，抛出参数错误异常</span><br><span class="line">    throw new CheckException(UserStatusEnum.PARAMETER_ERROR.getMsg());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说下我这里的实现都是使用X()先对参数进行一些基本的验证，验证不通过则直接抛出异常，否则进入XImpl()进行逻辑处理。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 用户登录逻辑实现</span><br><span class="line">    * @param user 用户信息:account、password</span><br><span class="line">    * @param clientUrl Client的url</span><br><span class="line">    * @return token、clientUrl、authToken</span><br><span class="line">    */</span><br><span class="line">   private Data loginImpl(User user, String clientUrl) &#123;</span><br><span class="line">       String account = user.getAccount();</span><br><span class="line">       String password = user.getPassword();</span><br><span class="line"></span><br><span class="line">       // 查询数据库，若无此用户数据则抛出账号错误异常</span><br><span class="line">       user = userDao.listUserByUAccountAndPassword(account, password);</span><br><span class="line">       if (!checkNull(user)) &#123;</span><br><span class="line">           throw new CheckException(UserStatusEnum.USER_ACCOUNT_ERROR.getMsg());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       // 使用uuid生成token并存入tokenMap中，注意此时并没有注册clientUrl</span><br><span class="line">       String token = UUID.randomUUID().toString();</span><br><span class="line">       tokenAndUrlMap.put(token, new ArrayList&lt;&gt;());</span><br><span class="line">       tokenAndUserMap.put(token, user);</span><br><span class="line"></span><br><span class="line">       // 将信息反馈给Client、</span><br><span class="line">       Data data = transmitToken(token, clientUrl);</span><br><span class="line">       tokenAndSessionId.put(token, data.getAuthToken());</span><br><span class="line"></span><br><span class="line">       log.info(&quot;loginImpl() 登录成功：token = &#123;&#125;, clientUrl = &#123;&#125;, sesssionId = &#123;&#125;, User = &#123;&#125;&quot;, token, clientUrl, tokenAndSessionId.get(token), user);</span><br><span class="line">       return data;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>此处给出login()的数据格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;user&quot;:&#123;</span><br><span class="line">		&quot;account&quot;:&quot;1&quot;,</span><br><span class="line">		&quot;password&quot;:&quot;1&quot;</span><br><span class="line">	&#125;,</span><br><span class="line">	&quot;clientUrl&quot;:&quot;http://localhost:8889&quot;,</span><br><span class="line">	&quot;token&quot;:&quot;b8b51c17-dcb8-414f-af62-e2d1f3f49037&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>操作流程：</p>
<p>当用户携带token与clientUrl时，需要查询相应的token是否已登录，若已登录则将信息反馈给子系统。<br>当用户没有携带token或者token未登录时，开始检验用户登录的账号密码参数，检验成功则查询数据库是否存在符合条件的用户，若符合条件则将信息反馈给子系统<br>不过大家应该发现了transmitToken(token, clientUrl)这个方法，可以猜测到他实现的功能应该是利用clientUrl将token传递给子系统，并且带回authToken，即x-auth-token。相当于用户在子系统中局部会话的JESSIONID。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 用以将生成的token或者以验证登陆的token传递回去给Client</span><br><span class="line">    *</span><br><span class="line">    * @param token     令牌</span><br><span class="line">    * @param clientUrl Client的url</span><br><span class="line">    */</span><br><span class="line">   private Data transmitToken(String token, String clientUrl) &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           return (httpClientUtil.postAction(clientUrl + &quot;/user/token&quot;, new RequestBean().setToken(token).setClientUrl(clientUrl)).getData());</span><br><span class="line">       &#125; catch (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">           throw new ErrorException(&quot;clientUrl error&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>这里的方法参考上一大节的HttpClient工具类，操作是把RequestBean当做参数，发送请求到clientUrl + “/user/token”中，并且返回类型为Data的参数。从clientUrl + “/user/token”开始大家应该想到这个是服务器与服务器之间的请求了。那么从controller层进入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	/**</span><br><span class="line">     * 接收来自服务器的token与clientUrl,</span><br><span class="line">     * @param httpSession 操作session</span><br><span class="line">     * @param requestBean token、clientUrl</span><br><span class="line">     * @return 操作结果，成功data为带token与clientUrl</span><br><span class="line">     */</span><br><span class="line">    // sso客户端</span><br><span class="line">    @PostMapping(&quot;/token&quot;)</span><br><span class="line">    public ResultBean&lt;Data&gt; token(HttpSession httpSession, @RequestBody RequestBean requestBean) &#123;</span><br><span class="line">        ResultBean&lt;Data&gt; resultBean = new ResultBean&lt;&gt;(userService.token(requestBean));</span><br><span class="line">        // 验证成功</span><br><span class="line">        if (resultBean.getCode() == 0) &#123;</span><br><span class="line">//             此处仅仅设置用户会话，用户信息的获取在其他请求处理</span><br><span class="line">            System.out.println(&quot;设置session&quot;);</span><br><span class="line">            httpSession.setAttribute(&quot;user&quot;, new User());</span><br><span class="line">        &#125;</span><br><span class="line">        return resultBean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>从SSO的逻辑中，我们知道当SSO认证中心把token发回给子系统时，子系统需要使用token在SSO认证中心进行注册，在验证注册成功后，设置局部会话，并且需要把设置局部会话（即Session）产生的x-auth-token传递回给SSO认证中心。</p>
<p>那么我们继续看子系统的token方法应该怎样处理此处的逻辑的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 验证来自服务器的token与clientUrl参数合法性,</span><br><span class="line"> * @param requestBean token、clientUrl</span><br><span class="line"> * @return 操作结果，成功data为带token与clientUrl</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public Data token(RequestBean requestBean) &#123;</span><br><span class="line">    String token = requestBean.getToken();</span><br><span class="line">    String clientUrl = requestBean.getClientUrl();</span><br><span class="line">    if (isNotEmpty(token, clientUrl)) &#123;</span><br><span class="line">        return tokenImpl(token, clientUrl);</span><br><span class="line">    &#125;</span><br><span class="line">    throw new CheckException(UserStatusEnum.PARAMETER_ERROR.getMsg());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>验证参数合法性，合法则进入逻辑处理：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private Data tokenImpl(String token, String clientUrl) &#123;</span><br><span class="line">       if (remoteValid(token, clientUrl)) &#123;</span><br><span class="line">           return new Data().setToken(token).setClientUrl(clientUrl);</span><br><span class="line">       &#125;</span><br><span class="line">       throw new ErrorException(&quot;valid error&quot;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 向SSO发送令牌与本地url，验证注册</span><br><span class="line">    *</span><br><span class="line">    * @param token     令牌</span><br><span class="line">    * @param clientUrl 子系统url</span><br><span class="line">    * @return true 验证成功</span><br><span class="line">    */</span><br><span class="line">   private boolean remoteValid(String token, String clientUrl) &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           // 0为验证成功</span><br><span class="line">           if ((httpClientUtil.postAction(&quot;http://localhost:8889/user/valid&quot;, new RequestBean().setToken(token).setClientUrl(clientUrl))).getCode() == 0) &#123;</span><br><span class="line">               return true;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; catch (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       return false;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>这里是将SSO认证中心发来的token发回SSO认证中心进行认证注册，我们在上面用户登录的时候并没有对用户的clientUrl进行注册，注册行为在此处才会发生。</p>
<p>这里我们再次跳转到SSO认证中心的valid方法，controller层没有特殊处理，直接看service层：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 检验基本的token、clientUrl参数的合法性</span><br><span class="line">    * @param requestBean token、clientUrl</span><br><span class="line">    * @return 操作结果，成功data为null</span><br><span class="line">    */</span><br><span class="line">   @Override</span><br><span class="line">   public Data valid(RequestBean requestBean) &#123;</span><br><span class="line">       String token = requestBean.getToken();</span><br><span class="line">       String clientUrl = requestBean.getClientUrl();</span><br><span class="line">       if (isNotEmpty(token, clientUrl)) &#123;</span><br><span class="line">           return validImpl(token, clientUrl);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       throw new CheckException(UserStatusEnum.PARAMETER_ERROR.getMsg());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 验证客户端的token与clientUrl是否合法,若合法则将客户端的clientUrl注册到token中</span><br><span class="line">    * @param token  令牌，用户SSO认证中心登录的凭证</span><br><span class="line">    * @param clientUrl 子系统的url</span><br><span class="line">    * @return 操作结果，成功data为null</span><br><span class="line">    */</span><br><span class="line">   private Data validImpl(String token, String clientUrl) &#123;</span><br><span class="line">       boolean hasSave = false;</span><br><span class="line"></span><br><span class="line">       // 验证数据是否合法且token是否存在</span><br><span class="line">       if (tokenAndUrlMap.containsKey(token)) &#123;</span><br><span class="line">           List&lt;String&gt; urls = tokenAndUrlMap.get(token);</span><br><span class="line">           // 验证url是否已保存</span><br><span class="line">           if (null != urls) &#123;</span><br><span class="line">               for (String url : urls) &#123;</span><br><span class="line">                   if (url.contains(clientUrl)) &#123;</span><br><span class="line">                       hasSave = true;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           if (!hasSave) &#123;</span><br><span class="line">               urls.add(clientUrl);</span><br><span class="line">           &#125;</span><br><span class="line">           // 返回null即可以，默认成功</span><br><span class="line">           return null;</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           throw new ErrorException(&quot;has not exist token&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以看到的是我们在这里才开始进行了token与clientUrl的注册，之所以要加进去是为了以后注销功能的实现。</p>
<p>此处的功能比较简单，对token进行验证，验证通过之后就将其加入到tokenAndurlMap的映射中。</p>
<p>到这里就是登录的逻辑，最后SSO认证中心需要把用户的token以及用户在子系统的局部会话的x-auth-token返回给用户。</p>
<p>其Json格式为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;msg&quot;: &quot;success&quot;,</span><br><span class="line">    &quot;code&quot;: 0,</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;user&quot;: null,</span><br><span class="line">        &quot;token&quot;: &quot;d82ea315-1034-48d2-8e0d-5303c65d4e6a&quot;,</span><br><span class="line">        &quot;clientUrl&quot;: &quot;http://localhost:8889&quot;,</span><br><span class="line">        &quot;authToken&quot;: &quot;56e20f4e-f473-4882-8b11-24aa006d1ab3&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>四 总结<br>总的来说登录逻辑分为以下几步：</p>
<p>用户在SSO认证中心进行登录，SSO认证中心将随机生成的token传递给子服务器<br>子服务器接收到数据后，对SSO认证中心发起验证请求。<br>SSO认证中心接收到验证请求后判断token是否合法，若合法则将其加入映射。并将操作结果返回<br>子服务器新建Session局部会话，并将x-auth-token返回给SSO认证中心<br>SSO认证中心将token、x-auth-token、clientUrl返回给用户。用户可根据token进行多系统登录，利用x-auth-token得到与某一子系统的局部会话。<br>本次的SSO单点登录先写到这里，后面可能会写一篇关于SSO单点登录的注销实现。</p>
<p>项目GitHub地址：<a href="https://github.com/attendent/distrubuted">https://github.com/attendent/distrubuted</a></p>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,Spring boot,SSO</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Zuul上实现CAS的单点登录</title>
    <url>/post/f2e8f2b8.html</url>
    <content><![CDATA[<p>前言<br>最近项目跟一个基于CAS的系统对接做单点登录，之前在传统框架做过CAS的对接，本来以为很简单，简单配置一下双方对好账户就完了，但现在系统架构调整为SpringCloud的微服务体系，这让这次对接就不那么简单直接的。本文主要讨论CAS与Zuul上的结合思路。</p>
<p>CAS原理<br>CAS的基本原理还是挺简单的，如下图所示。</p>
<p><img src="/../images/%E5%A6%82%E4%BD%95%E5%9C%A8Zuul%E4%B8%8A%E5%AE%9E%E7%8E%B0CAS%E7%9A%84%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/20170516192351510" alt="img"></p>
<p>主要就是<br>1.拦截重定向<br>2.登录<br>3.验证<br>4.获取用户信息<br>看着挺复杂，但其实框架已经把大部分工作都做好了，封装起来了，正常情况下我们只需要配置一下就ok了，但在微服务的环境下还是挺让人迷惑的。<br>对了我们用的是CAS3.5版本搭建的测试系统。</p>
<p>实现思路<br>Zuul作为整个系统的网关，有几样工作特别适合：<br>1.路由，Zuul的天职<br>2.负载均衡，Zuul 2.0的性能还是可以期待的<br>3.日志，由于外部的请求都经过Zuul因此它的日志处理是非常重要和必要的<br>4.鉴权，同样由于外部服务都经过Zuul，鉴权也是非常合适的，因此对于SpringCloud体系来说做CAS的单点登录的集成Zuul是最合适不过的。</p>
<p>我们Zuul也是基于SpringBoot，因此可以使用Spring Security的套路实现CAS的拦截与验证等工作。<br>简单的总结一下：<br>1.将CAS集成放到Zuul上<br>2.使用Spring Security套餐</p>
<p>但同时我们也知道Zuul还要处理日志，因此要将CAS与Zuul本身的职责协调好，同时我们也都知道Zuul核心是ZuulFilter，而SpringSecurity实质上也是一系列的Filter来处理，把这两套Fillter理清楚是搞定这个问题的先决条件。</p>
<p>下面我们就结合具体代码看看怎么解决这个问题。</p>
<h1 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h1><p>首先是工程目录，maven的惯例</p>
<p><img src="/../images/%E5%A6%82%E4%BD%95%E5%9C%A8Zuul%E4%B8%8A%E5%AE%9E%E7%8E%B0CAS%E7%9A%84%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/20180611224238197" alt="img"></p>
<p>ps不要在意那个UserLoginInfoCache.java其实就是一个缓存。</p>
<p>然后是POM.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.zw.se2&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;demo-zuul&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;name&gt;hy-zuul&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Zuul and CAS&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">        &lt;spring-cloud.version&gt;Finchley.RC1&lt;/spring-cloud.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;net.sf.json-lib&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;json-lib&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.4&lt;/version&gt;</span><br><span class="line">            &lt;classifier&gt;jdk15&lt;/classifier&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.session&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-session&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.3.1.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-security-cas&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-security-taglibs&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;spring-milestones&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Spring Milestones&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">                &lt;enabled&gt;false&lt;/enabled&gt;</span><br><span class="line">            &lt;/snapshots&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">    &lt;/repositories&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<p>接下来是Zuul的配置<br>application.properties</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#默认情况下，敏感的头信息无法经过API网关进行传递,需要开启。解决使用zuul网关后spring session无效问题</span><br><span class="line">zuul.routes.tim-service.sensitiveHeaders=&quot;*&quot;</span><br><span class="line">zuul.routes.main-service.path=/main-service/**</span><br><span class="line">zuul.routes.main-service.url=http://localhost:8383 </span><br><span class="line">zuul.routes.main-service.sensitiveHeaders=&quot;*&quot;</span><br><span class="line">devMode=false</span><br><span class="line">spring.application.name=demo-zuul-server</span><br><span class="line">#下面那个参数是去掉zuul-prefix参数产生的前缀的，跟path一毛钱关系都没有</span><br><span class="line">zuul.strip-prefix=false</span><br><span class="line">server.port=8085</span><br><span class="line"></span><br><span class="line">#将 hystrix 的超时时间禁用掉</span><br><span class="line">hystrix.command.default.execution.timeout.enabled=false</span><br><span class="line">#session存储</span><br><span class="line">spring.session.store-type=none</span><br><span class="line">#日志配置文件路径</span><br><span class="line">logging.config=ext/conf/logback.xml</span><br><span class="line"></span><br><span class="line">#CAS服务地址</span><br><span class="line">cas.server.host.url=http://10.0.4.53:8080/cas-server-webapp-3.5.0</span><br><span class="line">#CAS服务登录地址</span><br><span class="line">cas.server.host.login_url=$&#123;cas.server.host.url&#125;/login</span><br><span class="line">#应用访问地址</span><br><span class="line">app.server.host.url=http://localhost:8085</span><br><span class="line">#应用登录地址,这个URL不一定非要存在</span><br><span class="line">app.login.url=/cas/login/zuul</span><br></pre></td></tr></table></figure>
<p>接下来是启动配置bootstrap.yaml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">        defaultZone: http://localhost:8797/eureka</span><br><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      uri: http://localhost:8888</span><br><span class="line">      profile: dev</span><br><span class="line">      name: hyConfig</span><br></pre></td></tr></table></figure>
<p>接下来就是cas了<br>CasProperties.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.zw.se2.hy.zuul.cas.config;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by ZEW on 2018/6/7.</span><br><span class="line"> */</span><br><span class="line">@Data</span><br><span class="line">@Component</span><br><span class="line">public class CasProperties &#123;</span><br><span class="line">    @Value(&quot;$&#123;cas.server.host.url&#125;&quot;)</span><br><span class="line">    private String casServerUrl;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;cas.server.host.login_url&#125;&quot;)</span><br><span class="line">    private String casServerLoginUrl;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;app.server.host.url&#125;&quot;)</span><br><span class="line">    private String appServerUrl;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;app.login.url&#125;&quot;)</span><br><span class="line">    private String appLoginUrl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SecurityConfig.java，这个是配置的核心，其中最核心的就是配置拦截策略和处理过滤器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.zw.se2.hy.zuul.cas.config;</span><br><span class="line"></span><br><span class="line">import com.zw.se2.hy.zuul.cas.custom.CustomUserDetailsService;</span><br><span class="line">import org.jasig.cas.client.session.SingleSignOutFilter;</span><br><span class="line">import org.jasig.cas.client.validation.Cas20ServiceTicketValidator;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.security.cas.ServiceProperties;</span><br><span class="line">import org.springframework.security.cas.authentication.CasAssertionAuthenticationToken;</span><br><span class="line">import org.springframework.security.cas.authentication.CasAuthenticationProvider;</span><br><span class="line">import org.springframework.security.cas.web.CasAuthenticationEntryPoint;</span><br><span class="line">import org.springframework.security.cas.web.CasAuthenticationFilter;</span><br><span class="line">import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line">import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;</span><br><span class="line">import org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line">import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line">import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line">import org.springframework.security.core.userdetails.AuthenticationUserDetailsService;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by ZEW on 2018/6/7.</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">@EnableWebSecurity //启用web权限</span><br><span class="line">@EnableGlobalMethodSecurity(prePostEnabled = true) //启用方法验证</span><br><span class="line">public class SecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private CasProperties casProperties;</span><br><span class="line"></span><br><span class="line">    /**定义认证用户信息获取来源，密码校验规则等*/</span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;</span><br><span class="line">        super.configure(auth);</span><br><span class="line">        auth.authenticationProvider(casAuthenticationProvider());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**定义安全策略*/</span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        http.authorizeRequests()//配置安全策略</span><br><span class="line">                .antMatchers(&quot;/**/api/**&quot;).permitAll()</span><br><span class="line">                .antMatchers(&quot;/**/**.html&quot;).permitAll()</span><br><span class="line">                .anyRequest().authenticated();//定义/请求不需要验证</span><br><span class="line"></span><br><span class="line">        http.exceptionHandling().authenticationEntryPoint(casAuthenticationEntryPoint())</span><br><span class="line">                .and()</span><br><span class="line">                .addFilter(casAuthenticationFilter())</span><br><span class="line">                .addFilterBefore(singleSignOutFilter(), CasAuthenticationFilter.class);</span><br><span class="line">//这个地方需要注意，这里禁用是为了照顾需要使用post请求且这个请求是外部系统提供的，没有办法，</span><br><span class="line">//为了安全还是推荐不禁用转而使用csrf-token的模式</span><br><span class="line">        http.csrf().disable(); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**认证的入口*/</span><br><span class="line">    @Bean</span><br><span class="line">    public CasAuthenticationEntryPoint casAuthenticationEntryPoint() &#123;</span><br><span class="line">        CasAuthenticationEntryPoint casAuthenticationEntryPoint = new CasAuthenticationEntryPoint();</span><br><span class="line">        casAuthenticationEntryPoint.setLoginUrl(casProperties.getCasServerLoginUrl());</span><br><span class="line">        casAuthenticationEntryPoint.setServiceProperties(serviceProperties());</span><br><span class="line">        return casAuthenticationEntryPoint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**指定service相关信息*/</span><br><span class="line">    @Bean</span><br><span class="line">    public ServiceProperties serviceProperties() &#123;</span><br><span class="line">        ServiceProperties serviceProperties = new ServiceProperties();</span><br><span class="line">        serviceProperties.setService(casProperties.getAppServerUrl() + casProperties.getAppLoginUrl());</span><br><span class="line">        serviceProperties.setAuthenticateAllArtifacts(true);</span><br><span class="line">        return serviceProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**CAS认证过滤器*/</span><br><span class="line">    @Bean</span><br><span class="line">    public CasAuthenticationFilter casAuthenticationFilter() throws Exception &#123;</span><br><span class="line">        CasAuthenticationFilter casAuthenticationFilter = new CasAuthenticationFilter();</span><br><span class="line">        casAuthenticationFilter.setAuthenticationManager(authenticationManager());</span><br><span class="line">        casAuthenticationFilter.setFilterProcessesUrl(casProperties.getAppLoginUrl());</span><br><span class="line">        return casAuthenticationFilter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**cas 认证 Provider*/</span><br><span class="line">    @Bean</span><br><span class="line">    public CasAuthenticationProvider casAuthenticationProvider() &#123;</span><br><span class="line">        CasAuthenticationProvider casAuthenticationProvider = new CasAuthenticationProvider();</span><br><span class="line">       //这里实现了一个自定义的认证服务，其实没有特殊需求可以采用默认的服务 casAuthenticationProvider.setAuthenticationUserDetailsService(customUserDetailsService());</span><br><span class="line"></span><br><span class="line">        casAuthenticationProvider.setServiceProperties(serviceProperties());</span><br><span class="line">        casAuthenticationProvider.setTicketValidator(cas20ServiceTicketValidator());</span><br><span class="line">        casAuthenticationProvider.setKey(&quot;an_id_for_this_auth_provider_only&quot;);</span><br><span class="line">        return casAuthenticationProvider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*@Bean</span><br><span class="line">    public UserDetailsService customUserDetailsService()&#123;</span><br><span class="line">        return new CustomUserDetailsService();</span><br><span class="line">    &#125;*/</span><br><span class="line"></span><br><span class="line">    /**用户自定义的AuthenticationUserDetailsService*/</span><br><span class="line">    @Bean</span><br><span class="line">    public AuthenticationUserDetailsService&lt;CasAssertionAuthenticationToken&gt; customUserDetailsService()&#123;</span><br><span class="line">        return new CustomUserDetailsService();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Cas20ServiceTicketValidator cas20ServiceTicketValidator() &#123;</span><br><span class="line">        return new Cas20ServiceTicketValidator(casProperties.getCasServerUrl());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于涉及业务，自定义的认证服务这里就不贴了，有兴趣的可以参考<br><a href="https://blog.csdn.net/cl_andywin/article/details/53998986">参考链接</a><br>但是请注意这篇文档在loadUserDetails函数中要对userInfo的权限相关信息赋值，否则就不能通过验证。<br>代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UserInfo userInfo = new UserInfo();</span><br><span class="line">       userInfo.setUsername(token.getName());</span><br><span class="line">       userInfo.setName(token.getName());</span><br><span class="line">       Set&lt;AuthorityInfo&gt; authorities = new HashSet&lt;&gt;();</span><br><span class="line">       AuthorityInfo authorityInfo = new AuthorityInfo(&quot;CAS&quot;);</span><br><span class="line">       authorities.add(authorityInfo);</span><br><span class="line">       userInfo.setAuthorities(authorities);</span><br><span class="line">       userInfo.setAccountNonLocked(true);</span><br><span class="line">       userInfo.setAccountNonExpired(true);</span><br><span class="line">       userInfo.setCredentialsNonExpired(true);</span><br></pre></td></tr></table></figure>
<p>集成完CAS，该处理Zuul本身的过滤器<br>经过试验CAS的过滤器优先级要高于Zuul的Pre过滤器，这样倒也方便了，只需要处理登录等日志即可。<br>也就是增加一个post过滤器。<br>如下所示 LoginResponseFilter.java.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.zw.se2.hy.zuul.filter.post;</span><br><span class="line"></span><br><span class="line">import com.netflix.zuul.ZuulFilter;</span><br><span class="line">import com.netflix.zuul.context.RequestContext;</span><br><span class="line">import com.zw.se2.hy.zuul.UserLoginInfoCache;</span><br><span class="line">import com.zw.se2.hy.zuul.filter.ConstantPath;</span><br><span class="line">import net.sf.json.JSONArray;</span><br><span class="line">import net.sf.json.JSONObject;</span><br><span class="line">import org.apache.commons.lang.StringUtils;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.util.StreamUtils;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.Cookie;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line">import static org.springframework.util.ReflectionUtils.rethrowRuntimeException;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class LoginResponseFilter extends ZuulFilter &#123;</span><br><span class="line">      private static Logger log = LoggerFactory.getLogger(&quot;monitor&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean shouldFilter() &#123;</span><br><span class="line">        RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">        String url = context.getRequest().getRequestURL().toString();</span><br><span class="line">        //只处理登录请求</span><br><span class="line">        return StringUtils.endsWith(url, ConstantPath.LOGIN_PATH);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object run() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">            InputStream stream = context.getResponseDataStream();</span><br><span class="line">            String body = StreamUtils.copyToString(stream, Charset.forName(&quot;UTF-8&quot;));</span><br><span class="line">            String url = context.getRequest().getRequestURL().toString();</span><br><span class="line"></span><br><span class="line">                if (StringUtils.isNotBlank(body)) &#123;</span><br><span class="line">                    //验证响应结果是否为登录成功</span><br><span class="line">                    JSONObject bodyJson = JSONObject.fromObject(body);</span><br><span class="line">                    if (bodyJson.has(ConstantPath.LOGIN_RESPONSE_STATUS)) &#123;</span><br><span class="line">                        String status = bodyJson.getString(ConstantPath.LOGIN_RESPONSE_STATUS);</span><br><span class="line">                        if (StringUtils.equals(status, &quot;200&quot;)) &#123;</span><br><span class="line">                            if (bodyJson.has(ConstantPath.LOGIN_RESPONSE_RESULT)) &#123;</span><br><span class="line">                                JSONArray resultArray = bodyJson.getJSONArray(ConstantPath.LOGIN_RESPONSE_RESULT);</span><br><span class="line">                                if (resultArray != null &amp;&amp; resultArray.size() &gt; 0) &#123;</span><br><span class="line">                                    JSONObject userObject = resultArray.getJSONObject(0);</span><br><span class="line">                                    processLogin(context, userObject);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            context.setResponseBody(body);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            rethrowRuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    private void processLogin(RequestContext context, JSONObject userObject) &#123;</span><br><span class="line">        if (userObject.has(ConstantPath.LOGIN_USERNAME)) &#123;</span><br><span class="line">            String userName = userObject.getString(ConstantPath.LOGIN_USERNAME);</span><br><span class="line">            //将用户名存储在session中，判断用户是否登录</span><br><span class="line">            HttpServletRequest request = context.getRequest();</span><br><span class="line">            HttpSession session = request.getSession();</span><br><span class="line">            session.setAttribute(&quot;userName&quot;, userName);</span><br><span class="line">            session.setMaxInactiveInterval(1800);           </span><br><span class="line">            log.info(&quot;&gt;&gt;&gt;用户&gt;&gt;&gt;&quot; + userName + &quot;执行了&gt;&gt;&gt;登录&gt;&gt;&gt;操作);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String filterType() &#123;</span><br><span class="line">        return &quot;post&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int filterOrder() &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>可以看到只要理清思路Zuul和Cas的结合还是挺简单的，关键就是理清思路。</p>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,单点登录,zuul</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据Flink详细教程(中篇)</title>
    <url>/post/7f834cb4.html</url>
    <content><![CDATA[<p>大数据计算框架 <a href="https://flink.apache.org/">Flink</a> 实战教程共分为3篇。涵盖 <a href="https://baike.baidu.com/item/flink/9078426?fr=aladdin">Flink</a> 安装配置、基本原理、核心概念、 流处理 API 和批处理 API、存储及状态一致性、容错机制、实战案例以及面试题讲解等。</p>
<p>本篇为第2篇，主要讲解 <a href="https://flink.apache.org/">Flink</a> 的 API、Window 和 Watermark 机制、状态管理和存储、容错机制、状态一致性等等。第1篇看<a href="d713bc0c.html">这里</a>。第3篇看<a href="c1de84f3.html">这里</a>。</p>
<h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul>
<li><ul>
<li><ul>
<li>FlinkAPI<ul>
<li><a href="https://gitchat.csdn.net/activity/5fb13d2aba1ba05ec14d1257?utm_medium=distribute.pc_aggpage_search_result.none-task-gitchat_activities-2~aggregatepage~first_rank_v2~rank_aggregation-6-5fb13d2aba1ba05ec14d1257.pc_agg_rank_aggregation&utm_term=%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5&spm=1000.2123.3001.4430#undefined">Environment</a></li>
<li><a href="https://gitchat.csdn.net/activity/5fb13d2aba1ba05ec14d1257?utm_medium=distribute.pc_aggpage_search_result.none-task-gitchat_activities-2~aggregatepage~first_rank_v2~rank_aggregation-6-5fb13d2aba1ba05ec14d1257.pc_agg_rank_aggregation&utm_term=%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5&spm=1000.2123.3001.4430#undefined">Source</a></li>
<li><a href="https://gitchat.csdn.net/activity/5fb13d2aba1ba05ec14d1257?utm_medium=distribute.pc_aggpage_search_result.none-task-gitchat_activities-2~aggregatepage~first_rank_v2~rank_aggregation-6-5fb13d2aba1ba05ec14d1257.pc_agg_rank_aggregation&utm_term=%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5&spm=1000.2123.3001.4430#undefined">Transformation</a></li>
<li><a href="https://gitchat.csdn.net/activity/5fb13d2aba1ba05ec14d1257?utm_medium=distribute.pc_aggpage_search_result.none-task-gitchat_activities-2~aggregatepage~first_rank_v2~rank_aggregation-6-5fb13d2aba1ba05ec14d1257.pc_agg_rank_aggregation&utm_term=%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5&spm=1000.2123.3001.4430#undefined">Flink数据类型</a></li>
<li><a href="https://gitchat.csdn.net/activity/5fb13d2aba1ba05ec14d1257?utm_medium=distribute.pc_aggpage_search_result.none-task-gitchat_activities-2~aggregatepage~first_rank_v2~rank_aggregation-6-5fb13d2aba1ba05ec14d1257.pc_agg_rank_aggregation&utm_term=%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5&spm=1000.2123.3001.4430#undefined">Sink</a></li>
<li>window<ul>
<li><a href="https://gitchat.csdn.net/activity/5fb13d2aba1ba05ec14d1257?utm_medium=distribute.pc_aggpage_search_result.none-task-gitchat_activities-2~aggregatepage~first_rank_v2~rank_aggregation-6-5fb13d2aba1ba05ec14d1257.pc_agg_rank_aggregation&utm_term=%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5&spm=1000.2123.3001.4430#undefined">window原理与分类</a></li>
<li><a href="https://gitchat.csdn.net/activity/5fb13d2aba1ba05ec14d1257?utm_medium=distribute.pc_aggpage_search_result.none-task-gitchat_activities-2~aggregatepage~first_rank_v2~rank_aggregation-6-5fb13d2aba1ba05ec14d1257.pc_agg_rank_aggregation&utm_term=%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5&spm=1000.2123.3001.4430#undefined">window api</a></li>
</ul>
</li>
<li><a href="https://gitchat.csdn.net/activity/5fb13d2aba1ba05ec14d1257?utm_medium=distribute.pc_aggpage_search_result.none-task-gitchat_activities-2~aggregatepage~first_rank_v2~rank_aggregation-6-5fb13d2aba1ba05ec14d1257.pc_agg_rank_aggregation&utm_term=%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5&spm=1000.2123.3001.4430#undefined">时间语义</a></li>
<li>watermark<ul>
<li><a href="https://gitchat.csdn.net/activity/5fb13d2aba1ba05ec14d1257?utm_medium=distribute.pc_aggpage_search_result.none-task-gitchat_activities-2~aggregatepage~first_rank_v2~rank_aggregation-6-5fb13d2aba1ba05ec14d1257.pc_agg_rank_aggregation&utm_term=%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5&spm=1000.2123.3001.4430#undefined">乱序问题</a></li>
<li><a href="https://gitchat.csdn.net/activity/5fb13d2aba1ba05ec14d1257?utm_medium=distribute.pc_aggpage_search_result.none-task-gitchat_activities-2~aggregatepage~first_rank_v2~rank_aggregation-6-5fb13d2aba1ba05ec14d1257.pc_agg_rank_aggregation&utm_term=%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5&spm=1000.2123.3001.4430#undefined">watermark原理</a></li>
<li><a href="https://gitchat.csdn.net/activity/5fb13d2aba1ba05ec14d1257?utm_medium=distribute.pc_aggpage_search_result.none-task-gitchat_activities-2~aggregatepage~first_rank_v2~rank_aggregation-6-5fb13d2aba1ba05ec14d1257.pc_agg_rank_aggregation&utm_term=%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5&spm=1000.2123.3001.4430#undefined">watermark的传递</a></li>
<li>watermark api<ul>
<li><a href="https://gitchat.csdn.net/activity/5fb13d2aba1ba05ec14d1257?utm_medium=distribute.pc_aggpage_search_result.none-task-gitchat_activities-2~aggregatepage~first_rank_v2~rank_aggregation-6-5fb13d2aba1ba05ec14d1257.pc_agg_rank_aggregation&utm_term=%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5&spm=1000.2123.3001.4430#undefined">旧API</a></li>
<li><a href="https://gitchat.csdn.net/activity/5fb13d2aba1ba05ec14d1257?utm_medium=distribute.pc_aggpage_search_result.none-task-gitchat_activities-2~aggregatepage~first_rank_v2~rank_aggregation-6-5fb13d2aba1ba05ec14d1257.pc_agg_rank_aggregation&utm_term=%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5&spm=1000.2123.3001.4430#undefined">新API</a></li>
<li><a href="https://gitchat.csdn.net/activity/5fb13d2aba1ba05ec14d1257?utm_medium=distribute.pc_aggpage_search_result.none-task-gitchat_activities-2~aggregatepage~first_rank_v2~rank_aggregation-6-5fb13d2aba1ba05ec14d1257.pc_agg_rank_aggregation&utm_term=%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5&spm=1000.2123.3001.4430#undefined">window触发条件</a></li>
<li><a href="https://gitchat.csdn.net/activity/5fb13d2aba1ba05ec14d1257?utm_medium=distribute.pc_aggpage_search_result.none-task-gitchat_activities-2~aggregatepage~first_rank_v2~rank_aggregation-6-5fb13d2aba1ba05ec14d1257.pc_agg_rank_aggregation&utm_term=%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5&spm=1000.2123.3001.4430#undefined">乱序处理</a></li>
<li><a href="https://gitchat.csdn.net/activity/5fb13d2aba1ba05ec14d1257?utm_medium=distribute.pc_aggpage_search_result.none-task-gitchat_activities-2~aggregatepage~first_rank_v2~rank_aggregation-6-5fb13d2aba1ba05ec14d1257.pc_agg_rank_aggregation&utm_term=%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5&spm=1000.2123.3001.4430#undefined"># watermark</a></li>
<li><a href="https://gitchat.csdn.net/activity/5fb13d2aba1ba05ec14d1257?utm_medium=distribute.pc_aggpage_search_result.none-task-gitchat_activities-2~aggregatepage~first_rank_v2~rank_aggregation-6-5fb13d2aba1ba05ec14d1257.pc_agg_rank_aggregation&utm_term=%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5&spm=1000.2123.3001.4430#undefined"># allowedLateness</a></li>
<li><a href="https://gitchat.csdn.net/activity/5fb13d2aba1ba05ec14d1257?utm_medium=distribute.pc_aggpage_search_result.none-task-gitchat_activities-2~aggregatepage~first_rank_v2~rank_aggregation-6-5fb13d2aba1ba05ec14d1257.pc_agg_rank_aggregation&utm_term=%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5&spm=1000.2123.3001.4430#undefined"># sideOutputLateData</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Flink状态管理<ul>
<li><a href="https://gitchat.csdn.net/activity/5fb13d2aba1ba05ec14d1257?utm_medium=distribute.pc_aggpage_search_result.none-task-gitchat_activities-2~aggregatepage~first_rank_v2~rank_aggregation-6-5fb13d2aba1ba05ec14d1257.pc_agg_rank_aggregation&utm_term=%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5&spm=1000.2123.3001.4430#undefined">State分类</a></li>
<li><a href="https://gitchat.csdn.net/activity/5fb13d2aba1ba05ec14d1257?utm_medium=distribute.pc_aggpage_search_result.none-task-gitchat_activities-2~aggregatepage~first_rank_v2~rank_aggregation-6-5fb13d2aba1ba05ec14d1257.pc_agg_rank_aggregation&utm_term=%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5&spm=1000.2123.3001.4430#undefined">State存在形式</a></li>
<li><a href="https://gitchat.csdn.net/activity/5fb13d2aba1ba05ec14d1257?utm_medium=distribute.pc_aggpage_search_result.none-task-gitchat_activities-2~aggregatepage~first_rank_v2~rank_aggregation-6-5fb13d2aba1ba05ec14d1257.pc_agg_rank_aggregation&utm_term=%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5&spm=1000.2123.3001.4430#undefined">Keyed State详解</a></li>
</ul>
</li>
<li><a href="https://gitchat.csdn.net/activity/5fb13d2aba1ba05ec14d1257?utm_medium=distribute.pc_aggpage_search_result.none-task-gitchat_activities-2~aggregatepage~first_rank_v2~rank_aggregation-6-5fb13d2aba1ba05ec14d1257.pc_agg_rank_aggregation&utm_term=%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5&spm=1000.2123.3001.4430#undefined">Flink状态后端</a></li>
<li>Flink容错机制<ul>
<li>检查点<ul>
<li><a href="https://gitchat.csdn.net/activity/5fb13d2aba1ba05ec14d1257?utm_medium=distribute.pc_aggpage_search_result.none-task-gitchat_activities-2~aggregatepage~first_rank_v2~rank_aggregation-6-5fb13d2aba1ba05ec14d1257.pc_agg_rank_aggregation&utm_term=%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5&spm=1000.2123.3001.4430#undefined">基本概念</a></li>
<li><a href="https://gitchat.csdn.net/activity/5fb13d2aba1ba05ec14d1257?utm_medium=distribute.pc_aggpage_search_result.none-task-gitchat_activities-2~aggregatepage~first_rank_v2~rank_aggregation-6-5fb13d2aba1ba05ec14d1257.pc_agg_rank_aggregation&utm_term=%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5&spm=1000.2123.3001.4430#undefined">实现原理</a></li>
<li><a href="https://gitchat.csdn.net/activity/5fb13d2aba1ba05ec14d1257?utm_medium=distribute.pc_aggpage_search_result.none-task-gitchat_activities-2~aggregatepage~first_rank_v2~rank_aggregation-6-5fb13d2aba1ba05ec14d1257.pc_agg_rank_aggregation&utm_term=%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5&spm=1000.2123.3001.4430#undefined">代码配置</a></li>
</ul>
</li>
<li><a href="https://gitchat.csdn.net/activity/5fb13d2aba1ba05ec14d1257?utm_medium=distribute.pc_aggpage_search_result.none-task-gitchat_activities-2~aggregatepage~first_rank_v2~rank_aggregation-6-5fb13d2aba1ba05ec14d1257.pc_agg_rank_aggregation&utm_term=%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5&spm=1000.2123.3001.4430#undefined">保存点</a></li>
</ul>
</li>
<li><a href="https://gitchat.csdn.net/activity/5fb13d2aba1ba05ec14d1257?utm_medium=distribute.pc_aggpage_search_result.none-task-gitchat_activities-2~aggregatepage~first_rank_v2~rank_aggregation-6-5fb13d2aba1ba05ec14d1257.pc_agg_rank_aggregation&utm_term=%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%A3%80%E6%9F%A5&spm=1000.2123.3001.4430#undefined">Flink状态一致性</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<p>大数据计算框架 <a href="https://flink.apache.org/">Flink</a> 实战教程共分为3篇。涵盖 <a href="https://baike.baidu.com/item/flink/9078426?fr=aladdin">Flink</a> 安装配置、基本原理、核心概念、 流处理 API 和批处理 API、存储及状态一致性、容错机制、实战案例以及面试题讲解等。</p>
<p>本篇为第2篇，主要讲解 <a href="https://flink.apache.org/">Flink</a> 的 API、Window 和 Watermark 机制、状态管理和存储、容错机制、状态一致性等等。第1篇看<a href="d713bc0c.html">这里</a>。</p>
<h3 id="FlinkAPI"><a href="#FlinkAPI" class="headerlink" title="FlinkAPI"></a>FlinkAPI</h3><h4 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h4><p>执行<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/index.html">Flink</a>程序首先要判断flink环境。<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/index.html">Flink</a>中有3种获取执行环境的方式。</p>
<p>1）getExecutionEnvironment</p>
<p>获取当前执行程序的上下文。如果是直接在IDEA中运行的JAVA代码，则此方法返回本地执行环境。如果是从命令行或web页面提交flink任务到集群中，则此方法返回的是集群执行环境。这种方式是最常用的，Flink底层帮我们判断具体调用本地还是远程环境。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ExecutionEnvironment.getExecutionEnvironment();//获取批处理执行环境</span><br><span class="line">StreamExecutionEnvironment.getExecutionEnvironment(); //获取流处理执行环境   </span><br></pre></td></tr></table></figure>
<p>2）createLocalEnvironment</p>
<p>直接返回本地执行环境，这种方式可以指定并行度。如不指定则使用当前机器可用cpu核数作为并行度。其实第1种方式判断当前环境是本地环境的话，底层也会调此方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ExecutionEnvironment.createLocalEnvironment();</span><br></pre></td></tr></table></figure>
<p>3）createRemoteEnvironment</p>
<p>获取远程集群执行环境。如果将Jar包提交到远程Flink集群执行则需指定JobManager的IP和port，并指定jar包路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ExecutionEnvironment.createRemoteEnvironment(hostname,port,&quot;hdfs://wordCount.jar&quot;);</span><br></pre></td></tr></table></figure>
<h4 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h4><p>source是<a href="https://flink.apache.org/">Flink</a>应用程序的数据来源。作为一款通用的数据处理框架，flink既可以处理静态的历史数据集，也可以处理实时的流式数据。流式计算场景下只要数据源源不断传入，flink就能一直处理。下面讲解Flink中的几种数据输入方式。</p>
<p>1）从本地集合中读取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">executionEnvironment.fromCollection(Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;,&quot;d&quot;));//从JAVA Collection中读取数据</span><br><span class="line"></span><br><span class="line">executionEnvironment.fromElements(1, 2, 3, 4);//从给定的对象序列中读取数据</span><br></pre></td></tr></table></figure>
<p>2）从文件中读取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String inputPath = &quot;F:\\data\\file&quot;;</span><br><span class="line">executionEnvironment.readTextFile(inputPath);//使用默认的文件格式</span><br></pre></td></tr></table></figure>
<p>3）从socket中读取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">env.socketTextStream(&quot;localhost&quot;, 9999);//从指定的IP地址和端口处读取数据，使用默认行分隔符</span><br><span class="line"></span><br><span class="line">env.socketTextStream(hostname, port, delimiter);//指定行分隔符</span><br></pre></td></tr></table></figure>
<p>4）从Kafka中读取</p>
<p>实际开发中，Kafka作为Flink数据源非常常见，可以说Kafka和Flink在流式数据处理领域是天生的一对。</p>
<p>引入<a href="https://blog.csdn.net/zpcandzhj/article/details/108770504">Kafka</a> 连接器pom依赖，连接器的版本和<a href="https://flink.apache.org/">Flink</a>版本保持一致</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;flink-connector-kafka-0.11_2.11&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;1.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>Flink中添加kafka数据源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">    final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">    //kafka配置参数</span><br><span class="line">    Properties props = new Properties();</span><br><span class="line">    props.put(&quot;bootstrap.servers&quot;, &quot;192.168.174.129:9092&quot;);</span><br><span class="line">    props.put(&quot;zookeeper.connect&quot;, &quot;192.168.174.129:2181&quot;);</span><br><span class="line">    //props.put(&quot;group.id&quot;, &quot;metric-group&quot;);</span><br><span class="line">    props.put(&quot;key.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;); </span><br><span class="line">    props.put(&quot;value.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;); </span><br><span class="line">    props.put(&quot;auto.offset.reset&quot;, &quot;latest&quot;);</span><br><span class="line">    //FlinkKafkaConsumer011 表示对应的kafka版本是0.11.x</span><br><span class="line">    DataStreamSource&lt;String&gt; dataStreamSource = env.addSource(new FlinkKafkaConsumer011&lt;&gt;(</span><br><span class="line">            &quot;test01&quot;,  //kafka topic</span><br><span class="line">            new SimpleStringSchema(),  // String 序列化</span><br><span class="line">            props)).setParallelism(1);</span><br><span class="line"></span><br><span class="line">    dataStreamSource.print(); //把从 kafka 读取到的数据打印在控制台</span><br><span class="line">    env.execute(&quot;Flink add kafka data source&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>addSource是一般化的添加数据源的算子，前面几种source都是Flink根据特定应用场景封装好的算子，底层还是调用了addSource。</p>
<p>可以测试一下上述程序。在linux服务器上启动kafka集群，并通过命令行运行一个Producer发送消息。查看Flink是否消费到数据。</p>
<p>Kafka相关教程可以参考这篇文章：<a href="https://gitbook.cn/gitchat/activity/5f620af9e8f6415f69856d2c">《Kafka 实战教程》</a></p>
<p>5）自定义source</p>
<p>有时为了方便测试Flink应用程序，我们需要手动造数据，这就要用到自定义数据源。</p>
<p>自定义的DataSource只要实现org.apache.flink.streaming.api.functions.source.SourceFunction接口即可被作为数据源添加。</p>
<p>下面的例子展示了如何自定义数据源。需求是实现一个实时数字生成器，1秒钟产生1个自增数字发送到Flink。Flink收到数据后放大两倍输出。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 自定义Flink数据源,重写SourceFunction的run和cancel方法</span><br><span class="line"> */</span><br><span class="line">import org.apache.flink.streaming.api.functions.source.SourceFunction;</span><br><span class="line"></span><br><span class="line">public class MyDataSource implements SourceFunction&lt;Integer&gt; &#123;</span><br><span class="line">    private boolean isRunning = true;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * run方法里编写数据产生逻辑</span><br><span class="line">     * @param ctx</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void run(SourceContext&lt;Integer&gt; ctx) throws Exception &#123;</span><br><span class="line">        int i = 1;</span><br><span class="line">        while (isRunning) &#123;</span><br><span class="line">            ctx.collect(i);</span><br><span class="line">            i++;</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void cancel() &#123;</span><br><span class="line">        isRunning = false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class MyDataSourceTest &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        DataStreamSource&lt;Integer&gt; mySource = env.addSource(new MyDataSource());</span><br><span class="line">        SingleOutputStreamOperator&lt;Integer&gt; res = mySource.map(e -&gt; 2 * e);</span><br><span class="line">        res.print();</span><br><span class="line">        env.execute(&quot;Flink add dataSource&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>掌握了自定义数据源的使用有助于实际开发，比如可以写个实时读取MySql数据源的工具！</p>
<h4 id="Transformation"><a href="#Transformation" class="headerlink" title="Transformation"></a>Transformation</h4><p>Transform也可称为Operator，翻译为中文为“算子”，其实就是数据转换操作。下面讲解Flink中的几种数据转换操作，先从流式处理，即DataStream 操作讲起。批处理与之类似。</p>
<p>1）Map</p>
<p>Map就是映射，顾名思义，就是将输入数据进行转换操作。</p>
<p>map算子的输入参数是一个MapFunction，我们只要实现它重写其中的map函数即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface MapFunction&lt;T, O&gt; extends Function, Serializable &#123;</span><br><span class="line">    O map(T value) throws Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>比如将商品数据流中的每个商品价格翻倍：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SingleOutputStreamOperator&lt;Product&gt; map = dataStreamSource.map(new MapFunction&lt;Product, Product&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Product map(Product product) throws Exception &#123;</span><br><span class="line">        product.price = product.price * 2;</span><br><span class="line">        return product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">map.print();</span><br></pre></td></tr></table></figure>
<p>对于简单的转换操作我们也可以直接使用lambda 表达式，比如.map(e -&gt; 2 * e);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">DataStreamSource&lt;Integer&gt; mySource = env.addSource(new MyDataSource());</span><br><span class="line">SingleOutputStreamOperator&lt;Integer&gt; res = mySource.map(e -&gt; 2 * e);//把数据源中的每个元素放大2倍</span><br><span class="line">res.print();</span><br></pre></td></tr></table></figure>
<p>2）FlatMap</p>
<p>FlatMap意指扁平化的map，即将每个元素map后的数据打散，重新组成一个“宽”的集合。和JDK8中的flatMap本质一样。</p>
<p>FlatMap的输入参数是一个FlatMapFunction，只要重写其flatMap方法即可，value是输入数据，out是输出数据收集器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface FlatMapFunction&lt;T, O&gt; extends Function, Serializable &#123;</span><br><span class="line">    void flatMap(T value, Collector&lt;O&gt; out) throws Exception;</span><br><span class="line">&#125;</span><br><span class="line">dataStreamSource.flatMap(new FlatMapFunction&lt;String, Tuple2&lt;String, Integer&gt;&gt;() &#123;</span><br><span class="line">            //接收一个字符串（Wordcount中表示一行数据），输出一个2元组</span><br><span class="line">            @Override</span><br><span class="line">            public void flatMap(String value, Collector&lt;Tuple2&lt;String, Integer&gt;&gt; out) throws Exception &#123;</span><br><span class="line">                String[] splits = value.split(&quot;\\s&quot;);</span><br><span class="line">                for (String word : splits) &#123;</span><br><span class="line">                    out.collect(new Tuple2&lt;String, Integer&gt;(word, 1));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>
<p>FlatMap和Map的区别在<a href="https://blog.csdn.net/hellozpc/article/details/109413465">第一篇</a>快速入门案例中已讲解，此处不再赘述。</p>
<p>3）Filter</p>
<p>对元素进行过滤，重写FilterFunction的filter实现过滤逻辑，简单的过滤逻辑可以直接使用lambda表达式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface FilterFunction&lt;T&gt; extends Function, Serializable &#123;</span><br><span class="line">    boolean filter(T value) throws Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例如过滤价格超过100的商品</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SingleOutputStreamOperator&lt;Product&gt; res = mySource.filter(new FilterFunction&lt;Product&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean filter(Product product) throws Exception &#123;</span><br><span class="line">                if (product.price &gt;= 100) &#123;</span><br><span class="line">                    return true;</span><br><span class="line">                   &#125;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">res.print();</span><br></pre></td></tr></table></figure>
<p>4）KeyBy</p>
<p>根据指定的key对流数据元素进行分区，底层基于hash算法，hashCode相同的key被分到同一个分区，即分到下游算子并行节点中的一个。比如快速入门案例中，flatMap之后的数据按照单词分组，即按照二元组数据的第一个字段：Tuple2.f0 分组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DataStream&lt;Tuple2&lt;String, Integer&gt;&gt; dataStream = dataStreamSource</span><br><span class="line">.flatMap(new Splitter())</span><br><span class="line">.keyBy(value -&gt; value.f0)</span><br></pre></td></tr></table></figure>
<p>keyBy的参数是KeySelector&lt;IN, KEY&gt;，前一个泛型表示来源数据类型，后一个泛型表示从原数据中提取出来的key的类型</p>
<p>再比如根据商品的品牌来分组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">KeyedStream&lt;Product, String&gt; keyByedProd = productStream.keyBy(new KeySelector&lt;Product, String&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String getKey(Product product) throws Exception &#123;</span><br><span class="line">        return product.brand;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">keyByedProd.print();</span><br></pre></td></tr></table></figure>
<p>简写：<code>.keyBy(product-&gt; product.brand)</code></p>
<p>5）Reduce</p>
<p>reduce俗称“约减”，就是将元素进行聚合处理。常见的sum、min、max、count、average等聚合操作都可以使用原生的reduce实现。reduce算子的入参是ReduceFunction，value1表示前一个元素，value2表示后一个元素，reduce方法是具体的数据处理逻辑。reduce操作实质上就是不断地将数据源中两个值合并为同一类型的一个值，reduce函数连续应用于输入数据流中的所有值，直到只剩下一个值（聚合之后的结果）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface ReduceFunction&lt;T&gt; extends Function, Serializable &#123;</span><br><span class="line">    T reduce(T value1, T value2) throws Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>比如统计各个品牌商品的总价</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SingleOutputStreamOperator&lt;Product&gt; reduceRes = productStream.keyBy(new KeySelector&lt;Product, String&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String getKey(Product product) throws Exception &#123;</span><br><span class="line">        return product.brand;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).reduce(new ReduceFunction&lt;Product&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Product reduce(Product product1, Product product2) throws Exception &#123;</span><br><span class="line">        product2.price = (product1.price + product2.price);</span><br><span class="line">        return product2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">reduceRes.print();</span><br></pre></td></tr></table></figure>
<p>6）Aggregation</p>
<p>Flink中支持对数据流的各种聚合操作，并封装了很多聚集函数。像min、max、sum等聚集函数都可以应用于 KeyedStream获得聚合结果。聚合算子参数如果是int类型，则表示聚合字段的下标(从0开始)。比如快速入门案例中对二元组数据求和：.sum(1)表示求二元组中第二个字段（单词计数）的和。如果是string类型，则表示聚合字段名，通常是一个pojo对象的public属性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">KeyedStream.sum(0) </span><br><span class="line">KeyedStream.sum(&quot;field0&quot;) </span><br><span class="line">KeyedStream.min(1) </span><br><span class="line">KeyedStream.min(&quot;field1&quot;) </span><br><span class="line">KeyedStream.max(2) </span><br><span class="line">KeyedStream.max(&quot;field2&quot;) </span><br><span class="line">KeyedStream.minBy(3) </span><br><span class="line">KeyedStream.minBy(&quot;field3&quot;) </span><br><span class="line">KeyedStream.maxBy(4) </span><br><span class="line">KeyedStream.maxBy(&quot;field4&quot;)</span><br></pre></td></tr></table></figure>
<p>7）Split和Select</p>
<p>Split是根据指定条件将数据流拆分为两个或多个流，可以单独处理每个数据流。Select是从拆分的流中选择特定的流。select和split一般结合使用，正如keyBy和聚集函数一起使用一样。实现这样的需求：按照商品价格比如100元为界将商品分为优品(&gt;100)和良品。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        StreamExecutionEnvironment executionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        List&lt;Product&gt; products = new ArrayList&lt;&gt;();</span><br><span class="line">        products.add(new Product(&quot;A&quot;,  &quot;阿迪&quot;, 990));</span><br><span class="line">        products.add(new Product(&quot;B&quot;,  &quot;安踏&quot;, 90));</span><br><span class="line">        products.add(new Product(&quot;C&quot;,  &quot;耐克&quot;, 880));</span><br><span class="line">        products.add(new Product(&quot;D&quot;,  &quot;特步&quot;, 80));</span><br><span class="line">        DataStreamSource&lt;Product&gt; streamSource = executionEnvironment.fromCollection(products);</span><br><span class="line">        SplitStream&lt;Product&gt; splitStream = streamSource.split(new OutputSelector&lt;Product&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Iterable&lt;String&gt; select(Product product) &#123;</span><br><span class="line">                List&lt;String&gt; list = new ArrayList&lt;&gt;();//使用list作为临时数据结构存储标签</span><br><span class="line">                if (product.getPrice() &gt; 100) &#123;</span><br><span class="line">                    list.add(&quot;优品&quot;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    list.add(&quot;良品&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                return list;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        DataStream&lt;Product&gt; superiorProducts = splitStream.select(&quot;优品&quot;);</span><br><span class="line">        DataStream&lt;Product&gt; acceptedProducts = splitStream.select(&quot;良品&quot;);</span><br><span class="line">        DataStream&lt;Product&gt; allProducts = splitStream.select(&quot;良品&quot;,&quot;优品&quot;);</span><br><span class="line"></span><br><span class="line">        superiorProducts.print(&quot;优品&quot;);</span><br><span class="line">        //启动计算任务</span><br><span class="line">        executionEnvironment.execute(&quot;Stream operator&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>控制台输出“优品”的数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">优品:1&gt; Product&#123;name=&#x27;C&#x27;,  brand=&#x27;耐克&#x27;, price=880.0&#125;</span><br><span class="line">优品:4&gt; Product&#123;name=&#x27;A&#x27;,  brand=&#x27;阿迪&#x27;, price=990.0&#125;</span><br></pre></td></tr></table></figure>
<p>有分流操作，那么与之对应的必然有合流操作。Flink中合流操作有2种：Union和Connect。</p>
<p>8）Union</p>
<p>Union函数表示将两个或多个数据类型相同的流组合在一起，即求并集。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">StreamExecutionEnvironment executionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">DataStreamSource&lt;String&gt; dataStream1 = executionEnvironment.fromCollection(Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;));</span><br><span class="line">DataStreamSource&lt;String&gt; dataStream2 = executionEnvironment.fromCollection(Arrays.asList(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;));</span><br><span class="line">DataStream&lt;String&gt; union = dataStream2.union(dataStream1);</span><br><span class="line">union.print();</span><br></pre></td></tr></table></figure>
<p>控制台输出合并之后的数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3&gt; b</span><br><span class="line">4&gt; c</span><br><span class="line">1&gt; d</span><br><span class="line">1&gt; 3</span><br><span class="line">4&gt; 2</span><br><span class="line">2&gt; a</span><br><span class="line">3&gt; 1</span><br><span class="line">2&gt; 4</span><br></pre></td></tr></table></figure>
<p>9）connect和CoMap</p>
<p>两个datastream连接后转变成connectedstreams，即：datastream,datastream-&gt;connectedstreams。与union不同的是connect不要求被连接的两个流数据类型相同。两个流虽然被connect到了同一个流中，但是合并之后的流内部依然保持各自的数据格式不变，相互独立。connect通常和coMap一起使用，coMap对connect之后的流做数据处理。</p>
<p>实际应用中一个数据流过来可能先根据元素的某种特征分开处理，到了一定阶段又需要合并处理，此时就需要用到分流和合流操作。</p>
<p>实现这样的需求：连接一个二元组类型的数据流和一个Product的数据流。并分别对连接后的数据流做map操作。</p>
<p>还是沿用之前的例子:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        StreamExecutionEnvironment executionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        List&lt;Product&gt; products = new ArrayList&lt;&gt;();</span><br><span class="line">        products.add(new Product(&quot;A&quot;, &quot;阿迪&quot;, 999));</span><br><span class="line">        products.add(new Product(&quot;B&quot;, &quot;安踏&quot;, 99));</span><br><span class="line">        products.add(new Product(&quot;C&quot;, &quot;耐克&quot;, 888));</span><br><span class="line">        products.add(new Product(&quot;D&quot;, &quot;特步&quot;, 89));</span><br><span class="line">        DataStreamSource&lt;Product&gt; streamSource = executionEnvironment.fromCollection(products);</span><br><span class="line">        SplitStream&lt;Product&gt; splitStream = streamSource.split(new OutputSelector&lt;Product&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Iterable&lt;String&gt; select(Product product) &#123;</span><br><span class="line">                List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">                if (product.getPrice() &gt; 100) &#123;</span><br><span class="line">                    list.add(&quot;优品&quot;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    list.add(&quot;良品&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                return list;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        DataStream&lt;Product&gt; superiorProducts = splitStream.select(&quot;优品&quot;);</span><br><span class="line">        DataStream&lt;Product&gt; acceptedProducts = splitStream.select(&quot;良品&quot;);</span><br><span class="line">        //先将优品数据转换为2元组类型</span><br><span class="line">        DataStream&lt;Tuple2&lt;String, Double&gt;&gt; superiorProductsStream = superiorProducts.map(new MapFunction&lt;Product, Tuple2&lt;String, Double&gt;&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Tuple2&lt;String, Double&gt; map(Product product) throws Exception &#123;</span><br><span class="line">                return new Tuple2&lt;&gt;(product.getName(), product.getPrice());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        //连接二元组数据流和Product数据类型，并做算子操作，都转换为3元组</span><br><span class="line">        SingleOutputStreamOperator&lt;Object&gt; operator = superiorProductsStream.connect(acceptedProducts).map(new CoMapFunction&lt;Tuple2&lt;String, Double&gt;, Product, Object&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Object map1(Tuple2 value) throws Exception &#123;</span><br><span class="line">                return new Tuple3&lt;&gt;(value.f0, value.f1, &quot;优品&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public Object map2(Product value) throws Exception &#123;</span><br><span class="line">                return new Tuple3&lt;&gt;(value.getName(), value.getPrice(), &quot;良品&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        operator.print(&quot;coMap&quot;);</span><br><span class="line">        //启动计算任务</span><br><span class="line">        executionEnvironment.execute(&quot;Stream operator&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>控制台输出如下内容，说明案例中不同数据类型的流连接(connect)、处理(coMap)成功。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">coMap:1&gt; (A,999.0,优品)</span><br><span class="line">coMap:2&gt; (C,888.0,优品)</span><br><span class="line">coMap:4&gt; (D,89.0,良品)</span><br><span class="line">coMap:3&gt; (B,99.0,良品)</span><br></pre></td></tr></table></figure>
<p>观察上面的介绍的几种操作可以总结一些规律。</p>
<p>比如keyBy操作总是和聚集函数一起使用、split通常和select一起使用、connect和coMap一起使用。datastream split后得到splitstream，再select之后又转换为datastream ；同样的，datastream connect之后得到connectedstreams，再经coMap操作后又转换为datastream 。union合并的两个流数据类型必须相同，合并过程不涉及流类型的转换。而connect不要求数据流的元素类型相同。union操作可以操作多个流，connect操作只能操作两个流。</p>
<p>上述介绍的 DataStream（流处理） 数据转换操作中，有些也适合DataSet（批处理）。比如 Map、FlatMap、Reduce、Filter 等。</p>
<p>当然DataSet也有一些特有算子。</p>
<p>比如在DataStream中分区是 KeyBy，而DataSet中是GroupBy。这在快速入门案例中已经演示，不再赘述。</p>
<p>DataSet有个first(n)方法可以返回DataSet中前 n个元素，比如：env.readTextFile(inputPath).first(2);返回数据集中前2个元素。</p>
<h4 id="Flink数据类型"><a href="#Flink数据类型" class="headerlink" title="Flink数据类型"></a>Flink数据类型</h4><p>前文中介绍Flink中算子的使用时提到了数据类型，下面简单介绍一下Flink中所支持的数据类型。</p>
<p>Flink应用程序处理的是由数据对象组成的连续不断的数据流。这些数据对象需要被序列化和反序列化，以便能够通过网络传输以及从检查点、保存点、状态后端存储读取。为了明确应用程序所处理的数据类型，Flink底层提供了一套完备的数据类型信息，并且为每一种类型提供了序列化器、反序列化器以及比较器。</p>
<p>此外，Flink还提供了类型提取系统，自动分析函数的输入类型和输出类型，以获得对应的序列化器和反序列化器。在使用lambda函数或者泛型类型时，需显式指定类型信息。</p>
<p>Flink DataStream里的元素类型支持JAVA和Scala中的所有基本类型，像Int、Long、Double、String等。此外还支持Tuple元组类型、Java简单对象(pojo)、scala样例类以及一些集合类型，比如Java的ArrayList、HashMap、Enum等。</p>
<p>Flink的每个函数都提供了对应的Rich版本。富函数相比普通的函数可以获取flink运行时上下文、生命周期方法。生命周期方法中通常可以做一些初始化及收尾操作，比如连接数据库、关闭数据库连接。</p>
<h4 id="Sink"><a href="#Sink" class="headerlink" title="Sink"></a>Sink</h4><p>sink，顾名思义，下沉，在Flink中意指数据输出、数据落地的意思。最简单的数据输出方式就是打印到控制台，调用datastream的print()方法即可，print就是一种sink操作。对于不同的sink方式，Flink提供了各种内置的输出格式。</p>
<p>除了基本的输入输出数据源外，flink目前还支持下列第三方组件作为数据源。</p>
<ul>
<li><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/connectors/kafka.html">Apache Kafka</a> (source/sink)</li>
<li><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/connectors/cassandra.html">Apache Cassandra</a> (sink)</li>
<li><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/connectors/kinesis.html">Amazon Kinesis Streams</a> (source/sink)</li>
<li><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/connectors/elasticsearch.html">Elasticsearch</a> (sink)</li>
<li><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/connectors/filesystem_sink.html">Hadoop FileSystem</a> (sink)</li>
<li><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/connectors/rabbitmq.html">RabbitMQ</a> (source/sink)</li>
<li><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/connectors/nifi.html">Apache NiFi</a> (source/sink)</li>
<li><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/connectors/twitter.html">Twitter Streaming API</a> (source)</li>
<li><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/connectors/pubsub.html">Google PubSub</a> (source/sink)</li>
<li><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/connectors/jdbc.html">JDBC</a> (sink)</li>
</ul>
<p>本节介绍几种常用的数据输出方式。</p>
<p>1）普通文件、socket</p>
<p>writeAsText()/TextOutputFormat：将元素按行写入字符串。字符串通过调用每个元素的toString()方法获得。</p>
<p>writeAsCsv(…)/CsvOutputFormat：将数据以逗号分隔的形式写入文件。换行符和字段分隔符可配置。每个字段的值来自对象的toString()方法。</p>
<p>writeUsingOutputFormat() / FileOutputFormat：自定义文件输出格式，支持自定义对象到字节的转换。</p>
<p>writeToSocket：根据指定格式(Serialization Schema)将元素写入网络套接字。</p>
<p>举例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class SinkDemo &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        //设置并行度为1，输出结果全部写出到一个文件，否则开发环境会使用默认并行度分区，分区数为当前机器逻辑cpu核数</span><br><span class="line">        env.setParallelism(1);</span><br><span class="line">        //准备数据源</span><br><span class="line">        List&lt;Tuple2&lt;String, Integer&gt;&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        list.add(new Tuple2&lt;&gt;(&quot;A&quot;, 100));</span><br><span class="line">        list.add(new Tuple2&lt;&gt;(&quot;B&quot;, 200));</span><br><span class="line">        list.add(new Tuple2&lt;&gt;(&quot;C&quot;, 300));</span><br><span class="line">        list.add(new Tuple2&lt;&gt;(&quot;D&quot;, 400));</span><br><span class="line">        DataStreamSource&lt;Tuple2&lt;String, Integer&gt;&gt; dataStreamSource = env.fromCollection(list);</span><br><span class="line">        dataStreamSource.print();</span><br><span class="line">        //除了路径参数是必填外，还可以通过指定第二个参数来定义输出模式</span><br><span class="line">        dataStreamSource.writeAsText(&quot;d://sink-text.txt&quot;, FileSystem.WriteMode.OVERWRITE);</span><br><span class="line">        //如果想要将输出结果全部写出到一个文件，可以单独设置算子的并行度为 1</span><br><span class="line">        dataStreamSource.writeAsCsv(&quot;d://sink-csv.txt&quot;, FileSystem.WriteMode.OVERWRITE, &quot;\n&quot;, &quot;,&quot;).setParallelism(1);</span><br><span class="line">        //自定义的输出格式，writeAsText/writeAsCsv底层调用的都是该方法</span><br><span class="line">        dataStreamSource.writeUsingOutputFormat(new TextOutputFormat(new Path(&quot;d://sink-file.txt&quot;), &quot;UTF-8&quot;));</span><br><span class="line">        //以字符串的形式输出到socket服务器</span><br><span class="line">        dataStreamSource.map(t -&gt; t.f0 + &quot;:&quot; + t.f1 + &quot;\r\n&quot;).writeToSocket(&quot;192.168.244.131&quot;, 9999, new SimpleStringSchema());</span><br><span class="line">        env.execute(&quot;sink demo&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试socket输出时，先在linux服务器上使用nc -lk 9999 模拟socket服务器开启监听。</p>
<p>2）kafka kafka和flink天生对流式数据友好，因此实际生产中经常搭配使用。比如flink从数据源接收到数据处理完成后再发送一个消息到kafka中，任其消费。也有从kafka进、kafka出的使用场景，即输入、输出源都是kafka。比如对原始输出数据进行分流处理，并且处理完成后发送到不同的消费者topic中去。下面介绍如何在flink中集成kafka。</p>
<p>引入依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;flink-connector-kafka-0.11_2.11&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.11.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>需求：实现Flink消费kafka消息队列的消息，转换处理后再次输出到kafka中。</p>
<p>实体类Product</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Product &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private String brand;</span><br><span class="line">    private double price;</span><br><span class="line">    //省略get/set</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过linux命令行创建2个topic，一个由flink消费，另一个由flink写入。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/kafka-topics.sh --create \</span><br><span class="line">                    --bootstrap-server 192.168.244.131:9092 \</span><br><span class="line">                    --replication-factor 1 \</span><br><span class="line">                    --partitions 1  \</span><br><span class="line">                    --topic flink-stream-in-topic</span><br><span class="line">bin/kafka-topics.sh --create \</span><br><span class="line">                    --bootstrap-server 192.168.244.131:9092 \</span><br><span class="line">                    --replication-factor 1 \</span><br><span class="line">                    --partitions 1  \</span><br><span class="line">                    --topic flink-stream-out-topic</span><br></pre></td></tr></table></figure>
<p>查看topic： <code>bin/kafka-topics.sh --list --bootstrap-server 192.168.244.131:9092</code></p>
<p>启动一个消费者，接收flink的输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/kafka-console-consumer.sh --bootstrap-server 192.168.244.131:9092 --topic flink-stream-out-topic</span><br></pre></td></tr></table></figure>
<p>启动一个生产者，向flink应用程序监听的topic发送消息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/kafka-console-producer.sh --topic flink-stream-in-topic --bootstrap-server 192.168.244.131:9092</span><br></pre></td></tr></table></figure>
<p>在生产者端输入json串:<code>&#123;&quot;name&quot;:&quot;跑鞋&quot;,&quot;brand&quot;:&quot;Nike&quot;,&quot;price&quot;:1000&#125;</code></p>
<p>Flink应用程序集成Kafka：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class KafkaSink &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        //kafka配置</span><br><span class="line">        Properties props = new Properties();</span><br><span class="line">        props.put(&quot;bootstrap.servers&quot;, &quot;192.168.244.131:9092&quot;);</span><br><span class="line">        props.put(&quot;zookeeper.connect&quot;, &quot;192.168.244.131:2181&quot;);</span><br><span class="line">        props.put(&quot;key.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);              //key 反序列化</span><br><span class="line">        props.put(&quot;value.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);//value 反序列化</span><br><span class="line">        props.put(&quot;auto.offset.reset&quot;, &quot;latest&quot;);</span><br><span class="line">        //从kafka中消费数据</span><br><span class="line">        DataStreamSource&lt;String&gt; dataStreamSource = env.addSource(new FlinkKafkaConsumer011&lt;&gt;(</span><br><span class="line">                &quot;flink-stream-in-topic&quot;,  //kafka topic</span><br><span class="line">                new SimpleStringSchema(),  // String序列化</span><br><span class="line">                props)).setParallelism(1);//并行度一般不超过kafka topic分区数</span><br><span class="line"></span><br><span class="line">        dataStreamSource.print(); //把从 kafka 读取到的数据打印在控制台</span><br><span class="line"></span><br><span class="line">        //对数据进行业务处理</span><br><span class="line">        SingleOutputStreamOperator&lt;String&gt; streamOperated = dataStreamSource.map(new MapFunction&lt;String, String&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public String map(String value) throws Exception &#123;</span><br><span class="line">                Product product = JSON.parseObject(value, Product.class);</span><br><span class="line">                //将商品价格翻倍</span><br><span class="line">                product.setPrice(product.getPrice()*2);</span><br><span class="line">                return JSON.toJSONString(product);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        //将处理完的数据再次发送到kafka中</span><br><span class="line">        streamOperated.addSink(new FlinkKafkaProducer011&lt;&gt;(</span><br><span class="line">                &quot;flink-stream-out-topic&quot;,</span><br><span class="line">                new SimpleStringSchema(),</span><br><span class="line">                props)).setParallelism(1);</span><br><span class="line"></span><br><span class="line">        env.execute(&quot;kafka data source&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行flink应用后，kafka消费者端将收到处理后的数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;brand&quot;:&quot;Nike&quot;,&quot;name&quot;:&quot;跑鞋&quot;,&quot;price&quot;:2000.0&#125;</span><br></pre></td></tr></table></figure>
<p>3）redis</p>
<p>Redis Connector 用于向 Redis 发送数据。可以使用三种不同的方法与不同类型的 Redis 环境进行通信</p>
<ul>
<li>单 Redis 服务器</li>
<li>Redis 集群</li>
<li>Redis Sentinel(哨兵)</li>
</ul>
<p>不同模式主要是Config类的不同，本例展示了单机模式下Flink写入redis</p>
<p>引入redis连接器依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.bahir&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;flink-connector-redis_2.11&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>编写flink应用代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class RedisSinkDemo &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">        //准备数据源,简单起见,这里使用本地集合数据</span><br><span class="line">        List&lt;Tuple2&lt;String, String&gt;&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        list.add(new Tuple2&lt;&gt;(&quot;A&quot;, &quot;apple&quot;));</span><br><span class="line">        list.add(new Tuple2&lt;&gt;(&quot;B&quot;, &quot;bird&quot;));</span><br><span class="line">        list.add(new Tuple2&lt;&gt;(&quot;C&quot;, &quot;cat&quot;));</span><br><span class="line">        list.add(new Tuple2&lt;&gt;(&quot;D&quot;, &quot;dog&quot;));</span><br><span class="line">        DataStreamSource&lt;Tuple2&lt;String, String&gt;&gt; dataStreamSource = env.fromCollection(list);</span><br><span class="line"></span><br><span class="line">        //单机Redis配置,这里只简单配置ip/端口,还支持其它配置比如maxTotal、maxIdle、timeout</span><br><span class="line">        FlinkJedisPoolConfig redisConf = new FlinkJedisPoolConfig.Builder().setHost(&quot;127.0.0.1&quot;).setPort(6379).build();</span><br><span class="line"></span><br><span class="line">        //数据写入redis</span><br><span class="line">        dataStreamSource.addSink(new RedisSink&lt;&gt;(redisConf, new RedisMapper&lt;Tuple2&lt;String, String&gt;&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public RedisCommandDescription getCommandDescription() &#123;</span><br><span class="line">                //指定redis命令,这里只演示最简单的设置字符串key</span><br><span class="line">                return new RedisCommandDescription(RedisCommand.SET);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public String getKeyFromData(Tuple2&lt;String, String&gt; data) &#123;</span><br><span class="line">                //提取要存到redis的key</span><br><span class="line">                return data.f0;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public String getValueFromData(Tuple2&lt;String, String&gt; data) &#123;</span><br><span class="line">                //提取要存到redis的value</span><br><span class="line">                return data.f1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">        env.execute(&quot;redis data sink&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据,Flink</tag>
      </tags>
  </entry>
  <entry>
    <title>安装 - LNMP一键安装包</title>
    <url>/post/398958a0.html</url>
    <content><![CDATA[<p> <a href="https://lnmp.org/install.html">https://lnmp.org/install.html</a></p>
<p><strong>系统需求:</strong></p>
<ul>
<li>CentOS/RHEL/Fedora/Debian/Ubuntu/Raspbian Linux系统</li>
<li>需要5GB以上硬盘剩余空间</li>
<li>需要128MB以上内存(如果为128MB的小内存VPS,Xen的需要有SWAP,OpenVZ的至少要有128MB以上的vSWAP或突发内存)，注意小内存请勿使用64位系统！</li>
<li>**安装MySQL 5.6或5.7及MariaDB 10必须1G以上内存!**。</li>
<li>VPS或服务器必须已经联网，且必须设置的是网络源不能是光盘源，同时VPS/服务器 DNS要正常！</li>
<li>Linux下区分大小写，输入命令时请注意！</li>
</ul>
<p>LNMP一键安装包 V1.3 已经在<a href="https://www.vpser.net/go/photonvps">PhotonVPS</a>、<a href="https://www.vpser.net/go/vultr">Vultr</a>、<a href="https://www.vpser.net/go/aoyohost">遨游主机</a>、<a href="https://www.vpser.net/go/oneasiahost">OneAsiahost新加坡VPS</a>、<a href="https://www.vpser.net/go/bandwagonhost">搬瓦工</a>、<a href="https://www.vpser.net/go/budgetvm">BudgetVM</a>、、<a href="https://www.vpser.net/go/digitalocean">DigitalOcean</a>、<a href="https://www.vpser.net/go/locvps">LocVPS</a>、<a href="https://www.vpser.net/go/linode">Linode</a>、<a href="https://www.vpser.net/go/diahosting">DiaHosting</a>、<a href="https://www.vpser.net/go/rashost">瑞豪开源</a>、<a href="https://www.vpser.net/go/kvmla">KVMLA</a>、<a href="https://www.vpser.net/go/jwdns">景文互联</a>、<a href="https://www.vpser.net/go/ramnode">RamNode</a>、<a href="https://www.vpser.net/go/hostigation">Hostigation</a>、<a href="https://www.vpser.net/go/buyvm">BuyVM</a>、<a href="https://www.vpser.net/go/80vps">80VPS</a>、<a href="https://www.vpser.net/go/xsvps">XSVPS</a>、<a href="https://www.vpser.net/go/hostus">HostUS</a>、<a href="https://www.vpser.net/go/kiiyi">快易互联</a>、<a href="https://www.vpser.net/go/aliyun">阿里云</a>等众多VPS的CentOS 5-7、RHEL 6-7、Fedora 21-23、Debian 7-8、Ubuntu 10.04-16.04的32位和64位系统上测试通过。</p>
<p><strong>安装步骤:</strong><br><strong>1、使用<a href="https://www.vpser.net/other/putty-ssh-linux-vps.html">putty</a>或类似的SSH工具登陆VPS或服务器；</strong></p>
<p>登陆后运行：<strong>screen -S lnmp</strong></p>
<p>如果提示screen: command not found 命令不存在可以执行：yum install screen 或 apt-get install screen安装，详细内容参考<a href="https://www.vpser.net/manage/run-screen-lnmp.html">screen教程</a>。</p>
<p><strong>2、下载并安装LNMP一键安装包：</strong></p>
<p>您可以选择使用下载版(推荐美国及海外VPS或空间较小用户使用)或者完整版(推荐国内VPS使用，国内用户可用在<a href="https://lnmp.org/download.html">下载</a>中找国内下载地址替换)，两者没什么区别，只是完整版把一些需要的源码文件预先放到安装包里。</p>
<p>安装LNMP<br><strong>wget -c <a href="http://soft.vpser.net/lnmp/lnmp1.3.tar.gz">http://soft.vpser.net/lnmp/lnmp1.3.tar.gz</a> &amp;&amp; tar zxf lnmp1.3.tar.gz &amp;&amp; cd lnmp1.3 &amp;&amp; ./install.shlnmp</strong></p>
<p>默认安装lnmp可不写，如需要安装LNMPA或LAMP，将./install.sh 后面的参数替换为lnmpa或lamp即可。如需更改网站和数据库目录先修改 lnmp.conf 文件。</p>
<p>如下载速度慢请更换其他下载节点，详情请看<a href="https://lnmp.org/download.html">下载页面</a>。<a href="https://lnmp.org/faq/lnmp-download-source.html">LNMP下载节点具体替换方法</a>。</p>
<p>按上述命令执行后，会出现如下提示：<br>![img](../images/安装 - LNMP一键安装包/lnmp-1.3-install-1.png)<br>需要设置MySQL的root密码（不输入直接回车将会设置为root）如果输入有错误需要删除时，可以按住Ctrl再按Backspace键进行删除。输入后回车进入下一步，如下图所示：<br>![img](../images/安装 - LNMP一键安装包/lnmp-1.3-install-2.png)<br>询问是否需要启用MySQL InnoDB，InnoDB引擎默认为开启，一般建议开启，直接回车或输入 y ，如果确定确实不需要该引擎可以输入 n，输入完成，回车进入下一步<br>选择MySQL版本，目前提供了较多版本的MySQL和MariaDB，需要注意的是MySQL 5.6,5.7及MariaDB 10必须在1G以上内存的更高配置上才能选择：<br>![img](../images/安装 - LNMP一键安装包/lnmp-1.3-install-3.png)<br>输入对应MySQL或MariaDB版本前面的序号，回车进入下一步，选择PHP版本：<br>注意：选择PHP7等高版本时需要自行确认是否与自己的程序兼容。<br>![img](../images/安装 - LNMP一键安装包/lnmp-1.3-install-4.png)<br>输入要选择的PHP版本的序号，回车进入下一步，选择是否安装内存优化：<br>![img](../images/安装 - LNMP一键安装包/lnmp-1.3-install-5.png)<br>可以选择不安装、Jemalloc或TCmalloc，输入对应序号回车，直接回车为默认为不安装。</p>
<p>如果是LNMPA或LAMP的话还会提示“Please enter Administrator Email Address:”，需要设置管理员邮箱，该邮箱会在报错时显示在错误页面上。<br>![img](../images/安装 - LNMP一键安装包/lnmp-1.3-install-6.png)<br>再选择Apache版本<br>![img](../images/安装 - LNMP一键安装包/lnmp-1.3-install-7.png)<br>按提示输入对应版本前面的数字序号，回车。</p>
<p>提示”Press any key to install…or Press Ctrl+c to cancel”后，按回车键确认开始安装。<br>LNMP脚本就会自动安装编译Nginx、MySQL、PHP、phpMyAdmin、Zend Optimizer这几个软件。</p>
<p>安装时间可能会几十分钟到几个小时不等，主要是机器的配置网速等原因会造成影响。</p>
<p><strong>3、安装完成</strong><br>如果显示Nginx: OK，MySQL: OK，PHP: OK<br>![img](../images/安装 - LNMP一键安装包/lnmp-1.3-install-sucess.png)<br>并且Nginx、MySQL、PHP都是running，80和3306端口都存在，并提示Install lnmp V1.3 completed! enjoy it.的话，说明已经安装成功。<br>接下来按<a href="https://lnmp.org/faq/lnmp-vhost-add-howto.html"><strong>添加虚拟主机教程</strong></a>，添加虚拟主机后上传网站代码，可以使用<a href="https://lnmp.org/faq/sftp.html">sftp</a>或<a href="https://lnmp.org/faq/ftpserver.html">ftp服务器</a>上传网站，将域名解析到VPS或服务器的IP上，解析生效即可使用。</p>
<p><strong>4、安装失败</strong><br>![img](../images/安装 - LNMP一键安装包/lnmp-1.3-install-failed.png)<br>如果出现类似上图的提示，则表明安装失败，说明没有安装成功！！需要用<a href="http://www.vpser.net/manage/winscp.html">winscp</a>或其他类似工具，将/root目录下面的lnmp-install.log下载下来，到<a href="http://bbs.vpser.net/forum-25-1.html">LNMP支持论坛</a>发帖注明你的系统发行版名称及版本号、32位还是64位等信息，并将lnmp-install.log压缩以附件形式上传到论坛，我们会通过日志查找错误，并给予相应的解决方法。</p>
<p><strong>默认LNMP是不安装FTP服务器的，如需要FTP服务器：<a href="https://lnmp.org/faq/ftpserver.html">https://lnmp.org/faq/ftpserver.html</a></strong></p>
<p><strong>5、添加、删除虚拟主机及伪静态管理</strong><br><a href="https://lnmp.org/faq/lnmp-vhost-add-howto.html">https://lnmp.org/faq/lnmp-vhost-add-howto.html</a></p>
<p><strong>6、eAccelerator、xcache、memcached、imageMagick、ionCube、redis、opcache的安装</strong><br><a href="https://lnmp.org/faq/addons.html">https://lnmp.org/faq/addons.html</a></p>
<p><strong>7、LNMP相关软件目录及文件位置</strong><br><a href="https://lnmp.org/faq/lnmp-software-list.html">https://lnmp.org/faq/lnmp-software-list.html</a></p>
<p><strong>8、LNMP状态管理命令</strong><br><a href="https://lnmp.org/faq/lnmp-status-manager.html">https://lnmp.org/faq/lnmp-status-manager.html</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>-技术</tag>
      </tags>
  </entry>
  <entry>
    <title>VirtualminWebmin安装与使用强大的VPS服务器和虚拟主机管理系统</title>
    <url>/post/8ff6ed20.html</url>
    <content><![CDATA[<h2 id="在FreeNAS-BSD搭建基于Nginx-FastCGI-MySQL-PHP的WebServer"><a href="#在FreeNAS-BSD搭建基于Nginx-FastCGI-MySQL-PHP的WebServer" class="headerlink" title="在FreeNAS/BSD搭建基于Nginx+FastCGI+MySQL+PHP的WebServer"></a>在FreeNAS/BSD搭建基于Nginx+FastCGI+MySQL+PHP的WebServer</h2><p>使用FreeNAS也快半月月了，在上一篇文章介绍了利用FreeNAS能做的一些事情，其中一项是WebServer。搭建了FreeNAS之后，这项功能也是必不可少的，简单分享一下配置步骤，希望能帮助到同我一样的刚刚接触FreeNAS（同样适用于FreeBSD）的朋友。</p>
<p>在FreeNAS之前，一直都是在Atom上跑Windows，因为作为文件服务器，除了存储文件/共享（Windows的局域网共享做这个确实很方便，但相比FreeNAS内置的SMB，还是稍显复杂，因为还需要通过一些不算简单的设置，才能解决NTFS权限问题，而FreeNAS中，都为你做好了），还有一个更重要的功能就是下载，虽然迅雷的资源共享方式稍显流氓，但其下载速度和资源探索能力也是无需置疑的（之后也会介绍一下如何利用FreeNAS/BSD打造属于自己的全能下载机）。</p>
<p>说实话，相比Windows用了十数年，对于类unix系统，我是相当的不熟悉，也是毕业以后，由于工作需要，才渐渐的接触一些。时至至今，也只会通过apt-get pkg_add等方式来安装软件。在Windows下，一直都是用几年前自己写的一套脚本来安装基于Apache+MySQL+PHP的服务器，初次接触FreeBSD，参考了网上很多资料也终于实现了基于Nginx+FastCGI+MySQL+PHP的WebServer。</p>
<p>以下所有的操作步骤都是在Shell下完成，可以在FreeNAS启动后，通过Console菜单6 Shell或在WebGUI中开启SSH服务登录。</p>
<h3 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h3><p>如果你是在FreeNAS上安装PHP，请特别注意下面的几步，若是在FreeBSD上安装，可以忽略cp，mv的步骤，直接通过pkg_add安装PHP。</p>
<p>因为安装FreeNAS的WebGUI是基于Lighttpd+PHP，重新安装PHP会引起系统崩溃，不仅WebGUI无法启动，连系统都无法引导，因此将PHP的安装放在第一步，如果这一步没有问题，后面的就都简单了。当时我也是经过N次失败才找到这个问题，分享出来，希望大家不要走弯路。</p>
<p>首先，需要备份一个重要的文件，因为在PHP的安装后，会覆盖掉这个文件，而正是这个文件引起系统无法启动和WebGUI不能访问。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usrlocalliblibxml2.so.5 tmplibxml2.so.5</span><br></pre></td></tr></table></figure>
<p>然后开始安装PHP</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pkg_add  php5</span><br><span class="line">pkg_add  php5-extensions</span><br><span class="line">pkg_add  php5-xmlrpc</span><br><span class="line">pkg_add  php5-gettext</span><br><span class="line">pkg_add  php5-mcrypt</span><br><span class="line">pkg_add  php5-mbstring</span><br></pre></td></tr></table></figure>
<p>注意安装完后切忌不要重启，再继续输入下面的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usrlocalbinphp usrlocalbinphp-cli usrlocalbinphp-cgi usrlocalbinphp usrlocalliblibxml2.so.5 tmplibxml2.so.5 usrlocalliblibxml2.so.5</span><br></pre></td></tr></table></figure>
<p>至此PHP安装完成，请重启你的FreeNAS，如果能够正常访问WebGUI，恭喜你，接下去的步骤就简单多了。</p>
<h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pkg_add  mysql50-serverusrlocalbinmysql_install_db  mysql vardbmysqlusrlocalbinmysqld_safe usrlocalbinmysqladmin  root password</span><br></pre></td></tr></table></figure>
<p>修改/etc/rc.conf加入mysql_enable=”YES”，至此MySQL安装完成。</p>
<h3 id="安装Nginx-FastCGI"><a href="#安装Nginx-FastCGI" class="headerlink" title="安装Nginx+FastCGI"></a>安装Nginx+FastCGI</h3><p>由于FreeNAS的WebGUI已占用了80端口，因此建议先通过WebGUI&gt;System&gt;General&gt;WebGUI&gt;Port将WebGUI的端口改为其他，例如88。</p>
<p>参阅了大量网上的Nginx+PHP的配置方案，无一例外都是通过lighttpd的spawn-fcgi来实现，这个脚本找了很久也没找到，虽然FreeNAS自带Lighttpd，我也没在系统内找到……，于是我只好重新安装了一遍Lighttpd。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pkg_add  nginx</span><br><span class="line">pkg_add   lighttpd 0777 usrlocaletcnginxnginx.conf</span><br></pre></td></tr></table></figure>
<p>编辑/usr/local/etc/nginx/nginx.conf，找到以下配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> / &#123;</span><br><span class="line">        root   /usr/local/www/nginx;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在index最后增加index.php</p>
<p>找到以下配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#location ~ \.php$ &#123;#    root           html;#    fastcgi_pass   127.0.0.1:9000;#    fastcgi_index  index.php;#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;#    include        fastcgi_params;#&#125;</span><br></pre></td></tr></table></figure>
<p>去掉行首的注释符#，并改为以下内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> ~ \.php$ &#123;</span><br><span class="line">        root           html;</span><br><span class="line">        fastcgi_pass   127.0.0.1:;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME  /usr/local/www/nginx$fastcgi_script_name;                fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至此Nginx安装完成，然后通过下面的脚本分别启动FastCGI和Nginx。此脚本建议加入/etc/rc.local随机启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usrlocalbinspawn-fcgi  127.0.0.1    www  www    usrlocalbinphp-cgiusrlocalsbinnginx</span><br></pre></td></tr></table></figure>
<p>然后在/usr/local/www/nginx目录下新建index.php。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php echo phpinfo();</span><br></pre></td></tr></table></figure>
<p>输入<a href="http://nas-ip/index.php%EF%BC%8C%E6%98%AF%E4%B8%8D%E6%98%AF%E7%9C%8B%E5%88%B0%E4%BA%86%E4%B9%85%E8%BF%9D%E7%9A%84phpinfo%EF%BC%9F">http://nas-ip/index.php，是不是看到了久违的phpinfo？</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>-linux</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据Flink详细教程(前篇)</title>
    <url>/post/d713bc0c.html</url>
    <content><![CDATA[<p>Flink实战教程共分三篇。本篇为第一篇，主要讲解Flink的入门、安装配置、基本术语&amp;概念、核心原理。第<a href="https://bigbird.blog.csdn.net/article/details/110456161">二</a>篇看<a href="7f834cb4.html">这里</a>，第<a href="https://bigbird.blog.csdn.net/article/details/112207260">三</a>篇看<a href="c1de84f3.html">这里</a>。</p>
<p>【<strong>仅需一次订阅，作者所有专栏都能看</strong>】</p>
<p>推荐【<strong>Kafka</strong>】<a href="https://bigbird.blog.csdn.net/article/details/108770504">https://bigbird.blog.csdn.net/article/details/108770504</a><br>推荐【<strong>Flink</strong>】<a href="https://blog.csdn.net/hellozpc/article/details/109413465">https://blog.csdn.net/hellozpc/article/details/109413465</a><br>推荐【<strong>SpringBoot</strong>】<a href="https://blog.csdn.net/hellozpc/article/details/107095951">https://blog.csdn.net/hellozpc/article/details/107095951</a><br>推荐【<strong>SpringCloud</strong>】<a href="https://blog.csdn.net/hellozpc/article/details/83692496">https://blog.csdn.net/hellozpc/article/details/83692496</a><br>推荐【<strong>Mybatis</strong>】<a href="https://blog.csdn.net/hellozpc/article/details/80878563">https://blog.csdn.net/hellozpc/article/details/80878563</a><br>推荐【<strong>SnowFlake</strong>】<a href="https://blog.csdn.net/hellozpc/article/details/108248227">https://blog.csdn.net/hellozpc/article/details/108248227</a><br>推荐【<strong>并发限流</strong>】<a href="https://blog.csdn.net/hellozpc/article/details/107582771">https://blog.csdn.net/hellozpc/article/details/107582771</a></p>
<hr>
<h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul>
<li><ul>
<li><a href="#Flink_15">Flink概述</a></li>
<li><a href="#Flink_19">Flink安装部署</a></li>
<li><ul>
<li><a href="#_23">本地模式</a></li>
<li><ul>
<li><a href="#_27">下载安装包</a></li>
<li><a href="#linux_31">上传并解压至linux</a></li>
<li><a href="#Flink_48">启动Flink</a></li>
<li><a href="#_76">关闭防火墙</a></li>
</ul>
</li>
<li><a href="#_96">集群模式</a></li>
<li><ul>
<li><a href="#Standalone_100">Standalone模式</a></li>
<li><ul>
<li><a href="#Linux_104">Linux机器规划</a></li>
<li><a href="#_116">设置免密登录</a></li>
<li><a href="#_209">设置主机时间同步</a></li>
<li><a href="#Flink_217">Flink安装步骤</a></li>
</ul>
</li>
<li><a href="#Flink_on_YARN__311">Flink on YARN 模式</a></li>
<li><ul>
<li><a href="#Hadoop_315">Hadoop集群搭建</a></li>
<li><a href="#Flink_on_Yarn_537">Flink on Yarn的两种方式</a></li>
<li><ul>
<li><a href="#1_545">第1种方式</a></li>
<li><a href="#2_607">第2种方式</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="#FlinkHA_698">Flink高可用(HA)</a></li>
<li><ul>
<li><a href="#StandaloneHA_702">Standalone集群HA</a></li>
<li><a href="#Flink_on_YarnHA_926">Flink on Yarn集群HA</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#_1060">快速入门案例</a></li>
<li><ul>
<li><a href="#pom_1064">引入pom依赖</a></li>
<li><a href="#_1079">批处理</a></li>
<li><a href="#_1201">流式处理</a></li>
<li><a href="#flink_1386">提交flink集群运行</a></li>
</ul>
</li>
<li><a href="#Flink_1535">Flink核心概念与原理讲解</a></li>
<li><ul>
<li><a href="#Flink_1539">Flink运行时架构</a></li>
<li><ul>
<li><a href="#JobManager_1550">JobManager</a></li>
<li><a href="#TaskManagers_1572">TaskManagers</a></li>
</ul>
</li>
<li><a href="#Flink_1580">Flink核心概念与处理流程</a></li>
<li><ul>
<li><a href="#Parallelism_1582">并行度(Parallelism)</a></li>
<li><a href="#Task_Slots_1640">任务槽(Task Slots)</a></li>
<li><a href="#_1650">两者关系</a></li>
<li><a href="#_1658">最佳实践</a></li>
<li><a href="#Flink_1694">Flink应用程序执行流程</a></li>
<li><a href="#Flink_1716">Flink任务链</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#_1756">本篇总结</a></li>
</ul>
</li>
</ul>
<h2 id="Flink概述"><a href="#Flink概述" class="headerlink" title="Flink概述"></a>Flink概述</h2><p>按照<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/">Apache官方</a>的介绍，Flink是一个对有界和无界数据流进行状态计算的分布式处理引擎和框架。通俗地讲，Flink就是一个流计算框架，主要用来处理流式数据。其起源于2010年德国研究基金会资助的科研项目“Stratosphere”，2014年3月成为Apache孵化项目，12月即成为Apache顶级项目。Flinken在德语里是敏捷的意思，意指快速精巧。其代码主要是由 Java 实现，部分代码由 Scala实现。在Flink的世界里，一切数据都是流式的：离线数据(批数据)是有界(bounded)的流；实时数据(流数据)是无界(unbounded)的流。Flink既可以处理有界的批量数据集，也可以处理无界的实时流数据，为批处理和流处理提供了统一编程模型。如果把<a href="http://storm.apache.org/">Storm</a>看做第一代流处理框架、<a href="https://spark.apache.org/streaming/">Spark Streaming</a>(微批处理)看做第二代，那么Flink称得上是第三代流处理框架，并且是集大成者。</p>
<h2 id="Flink安装部署"><a href="#Flink安装部署" class="headerlink" title="Flink安装部署"></a>Flink安装部署</h2><p>和几乎所有的大数据处理框架一样，使用Flink之前，我们需要在服务器上安装部署Flink框架。Flink可以以多种模式运行，既可以单机运行，也可以集群运行。集群环境下既可以独立运行，也可以依赖YARN来运行。下面详细介绍各种安装部署模式。</p>
<h3 id="本地模式"><a href="#本地模式" class="headerlink" title="本地模式"></a>本地模式</h3><p>本地模式即在linux服务器直接解压flink二进制包就可以使用，不用修改任何参数，用于一些简单测试场景。</p>
<h4 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h4><p>直接在<a href="https://flink.apache.org/downloads.html">Flink官网</a>下载安装包，如写作此文章时最新版为<a href="https://www.apache.org/dyn/closer.lua/flink/flink-1.11.2/flink-1.11.2-bin-scala_2.11.tgz">flink-1.11.1-bin-scala_2.11.tgz</a></p>
<h4 id="上传并解压至linux"><a href="#上传并解压至linux" class="headerlink" title="上传并解压至linux"></a>上传并解压至linux</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 myapp]# pwd</span><br><span class="line">/usr/local/myapp</span><br><span class="line"></span><br><span class="line">[root@vm1 myapp]# ll</span><br><span class="line">总用量 435772</span><br><span class="line">-rw-r--r--.  1 root root  255546057 2月  8 02:29 flink-1.11.1-bin-scala_2.11.tgz</span><br></pre></td></tr></table></figure>
<p>解压到指定目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 myapp]# tar -zxvf flink-1.11.1-bin-scala_2.11.tgz  -C /usr/local/myapp/flink/</span><br></pre></td></tr></table></figure>
<h4 id="启动Flink"><a href="#启动Flink" class="headerlink" title="启动Flink"></a>启动Flink</h4><p>注意运行之前确保机器上已经安装了JDK1.8或以上版本，并配置了JAVA_HOME环境变量。JDK安装可以参考这篇<a href="https://blog.csdn.net/hellozpc/article/details/105680217">博文</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 ~]# java -version</span><br><span class="line">java version &quot;1.8.0_261&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_261-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.261-b12, mixed mode)</span><br></pre></td></tr></table></figure>
<p>进入flink目录执行启动命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 ~]# cd /usr/local/myapp/flink/flink-1.11.1/</span><br><span class="line">[root@vm1 flink-1.11.1]# bin/start-cluster.sh </span><br><span class="line">[root@vm1 flink-1.11.1]# jps</span><br><span class="line">3577 Jps</span><br><span class="line">3242 StandaloneSessionClusterEntrypoint</span><br><span class="line">3549 TaskManagerRunner</span><br></pre></td></tr></table></figure>
<p>执行Jps查看java进程，可以看到Flink相关进程已经启动。可以通过浏览器访问Flink的Web界面<a href="http://vm1:8081/">http://vm1:8081</a></p>
<p><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/20201101115711553.png" alt="在这里插入图片描述"></p>
<p>能在本机浏览器访问上述页面的前提是Windows系统的hosts文件配了vm1这台服务器的主机名和IP的映射关系，并且linux服务器的防火墙已关闭。</p>
<h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><p>查看linux防火墙状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@vm1 ~]# systemctl status firewalld</span><br></pre></td></tr></table></figure>
<p>临时关闭防火墙</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@vm1 ~]# systemctl stop firewalld</span><br></pre></td></tr></table></figure>
<p>永久关闭防火墙</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@vm1 ~]# systemctl disable firewalld</span><br></pre></td></tr></table></figure>
<p>关闭Flink</p>
<p>执行<code>bin/stop-cluster.sh</code></p>
<h3 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h3><p>集群环境适合在生产环境下面使用，且需要修改对应的配置参数。Flink提供了多种集群模式，我们这里主要介绍standalone和Flink on Yarn两种模式。</p>
<h4 id="Standalone模式"><a href="#Standalone模式" class="headerlink" title="Standalone模式"></a>Standalone模式</h4><p>Standalone是Flink的独立集群部署模式，不依赖任何其它第三方软件或库。如果想搭建一套独立的Flink集群，不依赖其它组件可以使用这种模式。搭建一个标准的Flink集群，需要准备3台Linux机器。</p>
<h5 id="Linux机器规划"><a href="#Linux机器规划" class="headerlink" title="Linux机器规划"></a>Linux机器规划</h5><table>
<thead>
<tr>
<th>节点类型</th>
<th>主机名</th>
<th>IP</th>
</tr>
</thead>
<tbody><tr>
<td>Master</td>
<td>vm1</td>
<td>192.168.174.136</td>
</tr>
<tr>
<td>Slave</td>
<td>vm2</td>
<td>192.168.174.137</td>
</tr>
<tr>
<td>Slave</td>
<td>vm3</td>
<td>192.168.174.138</td>
</tr>
</tbody></table>
<p>在Flink集群中，Master节点上会运行JobManager(StandaloneSessionClusterEntrypoint)进程，Slave节点上会运行TaskManager(TaskManagerRunner)进程。</p>
<p>集群中Linux节点都要配置JAVA_HOME，并且节点之间需要设置ssh免密码登录，至少保证Master节点可以免密码登录到其他两个Slave节点，linux防火墙也需关闭。</p>
<h5 id="设置免密登录"><a href="#设置免密登录" class="headerlink" title="设置免密登录"></a>设置免密登录</h5><p>1）先在每一台机器设置本机免密登录自身</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 ~]# ssh-keygen -t rsa</span><br><span class="line">[root@vm1 ~]#  cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<p>在本机执行ssh登录自身，不提示输入密码则表明配置成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 ~]# ssh vm1</span><br><span class="line">Last login: Tue Sep 29 22:23:39 2020 from vm1</span><br></pre></td></tr></table></figure>
<p>在其它机器vm2、vm3执行同样的操作:</p>
<p>ssh-keygen -t rsa<br>cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</p>
<p>ssh vm2</p>
<p>ssh vm3</p>
<p>2）设置vm1免密登录其它机器</p>
<p>把vm1的公钥文件拷贝到其它机器vm2、vm3上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 ~]# scp ~/.ssh/id_rsa.pub root@vm2:~/</span><br><span class="line">[root@vm1 ~]# scp ~/.ssh/id_rsa.pub root@vm3:~/</span><br></pre></td></tr></table></figure>
<p>登录到vm2、vm3，把vm1的公钥文件追加到自己的授权文件中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm2 ~]# cat ~/id_rsa.pub  &gt;&gt; ~/.ssh/authorized_keys </span><br><span class="line">[root@vm3 ~]# cat ~/id_rsa.pub  &gt;&gt; ~/.ssh/authorized_keys </span><br></pre></td></tr></table></figure>
<p>如果提示没有 ~/.ssh/authorized_keys目录则可以在这台机器上执行ssh-keygen -t rsa。不建议手动创建.ssh目录！</p>
<p>验证在vm1上ssh登录vm2、vm3是否无需密码，不需要密码则配置成功！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 ~]# ssh vm2</span><br><span class="line">Last login: Mon Sep 28 22:31:22 2020 from 192.168.174.133</span><br><span class="line"></span><br><span class="line">[root@vm1 ~]# ssh vm3</span><br><span class="line">Last login: Tue Sep 29 22:35:25 2020 from vm1</span><br></pre></td></tr></table></figure>
<p>执行<code>exit</code>退回到本机</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm3 ~]# exit</span><br><span class="line">logout</span><br><span class="line">Connection to vm3 closed.</span><br><span class="line">[root@vm1 ~]# </span><br></pre></td></tr></table></figure>
<p>3）同样方式设置其它机器之间的免密登录</p>
<p>在vm2、vm3上执行同样的步骤</p>
<p>把vm2的公钥文件拷贝到vm1、vm3</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm2 ~]# scp ~/.ssh/id_rsa.pub root@vm1:~/</span><br><span class="line">[root@vm2 ~]# scp ~/.ssh/id_rsa.pub root@vm3:~/</span><br><span class="line">[root@vm1 ~]#  cat ~/id_rsa.pub  &gt;&gt; ~/.ssh/authorized_keys </span><br><span class="line">[root@vm3 ~]#  cat ~/id_rsa.pub  &gt;&gt; ~/.ssh/authorized_keys </span><br></pre></td></tr></table></figure>
<p>把vm3的公钥文件拷贝到vm1、vm2</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm3 ~]# scp ~/.ssh/id_rsa.pub root@vm1:~/</span><br><span class="line">[root@vm3 ~]# scp ~/.ssh/id_rsa.pub root@vm2:~/</span><br><span class="line">[root@vm1 ~]#  cat ~/id_rsa.pub  &gt;&gt; ~/.ssh/authorized_keys </span><br><span class="line">[root@vm2 ~]#  cat ~/id_rsa.pub  &gt;&gt; ~/.ssh/authorized_keys </span><br></pre></td></tr></table></figure>
<p>4）验证ssh免密码登录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm2 ~]# ssh vm1</span><br><span class="line">[root@vm2 ~]# ssh vm3</span><br><span class="line">[root@vm3 ~]# ssh vm1</span><br><span class="line">[root@vm3 ~]# ssh vm2</span><br></pre></td></tr></table></figure>
<h5 id="设置主机时间同步"><a href="#设置主机时间同步" class="headerlink" title="设置主机时间同步"></a>设置主机时间同步</h5><p>如果集群内节点时间相差太大的话，会导致集群服务异常，所以需要保证集群内各节点时间一致。</p>
<p>执行命令<code>yum install -y ntpdate</code>安装ntpdate</p>
<p>执行命令<code>ntpdate -u ntp.sjtu.edu.cn</code> 同步时间</p>
<h5 id="Flink安装步骤"><a href="#Flink安装步骤" class="headerlink" title="Flink安装步骤"></a>Flink安装步骤</h5><p>下列步骤都是先在Master机器上操作，再拷贝到其它机器(确保每台机器都安装了jdk)</p>
<ol>
<li>解压Flink安装包</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@vm1 myapp]# tar -zxvf flink-1.11.1-bin-scala_2.11.tgz -C /usr/local/myapp/flink/</span><br></pre></td></tr></table></figure>
<ol>
<li>修改Flink的配置文件flink-1.11.1/conf/flink-conf.yaml</li>
</ol>
<p>把jobmanager.rpc.address配置的参数值改为vm1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jobmanager.rpc.address: vm1</span><br></pre></td></tr></table></figure>
<ol>
<li>修改Flink的配置文件flink-1.11.1/conf/workers</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 conf]# vim workers </span><br><span class="line">vm2</span><br><span class="line">vm3</span><br></pre></td></tr></table></figure>
<ol>
<li>将vm1这台机器上修改后的flink-1.11.1目录复制到其他两个Slave节点</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -rq /usr/local/myapp/flink vm2:/usr/local/myapp/</span><br><span class="line">scp -rq /usr/local/myapp/flink vm3:/usr/local/myapp/</span><br></pre></td></tr></table></figure>
<ol>
<li>在vm1这台机器上启动Flink集群服务</li>
</ol>
<p>执行这一步时确保各个服务器防火墙已关闭</p>
<p>进入flink目录/flink-1.11.1/bin执行start-cluster.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 ~]# cd /usr/local/myapp/flink/flink-1.11.1/</span><br><span class="line">[root@vm1 flink-1.11.1]# bin/start-cluster.sh </span><br><span class="line">Starting cluster.</span><br><span class="line">Starting standalonesession daemon on host vm1.</span><br><span class="line">Starting taskexecutor daemon on host vm2.</span><br><span class="line">Starting taskexecutor daemon on host vm3.</span><br></pre></td></tr></table></figure>
<ol>
<li>查看vm1、vm2和vm3这3个节点上的进程信息</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 flink-1.11.1]# jps</span><br><span class="line">4983 StandaloneSessionClusterEntrypoint</span><br><span class="line">5048 Jps</span><br><span class="line"></span><br><span class="line">[root@vm2 ~]# jps</span><br><span class="line">4122 TaskManagerRunner</span><br><span class="line">4175 Jps</span><br><span class="line"></span><br><span class="line">[root@vm3 ~]# jps</span><br><span class="line">4101 Jps</span><br><span class="line">4059 TaskManagerRunner</span><br></pre></td></tr></table></figure>
<ol>
<li>查看Flink Web UI界面，访问<a href="http://vm1:8081/">http://vm1:8081</a><br><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/20201101115757315.png" alt="在这里插入图片描述"></li>
</ol>
<p>8）提交任务执行</p>
<p>[root@vm1 flink-1.11.1]# bin/flink run ./examples/batch/WordCount.jar</p>
<p>提交任务可以在任意一台flink客户端服务器提交，本例中在vm1、vm2、vm3都可以<br><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/20201101115858258.png" alt="在这里插入图片描述"></p>
<ol>
<li>停止flink集群</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/stop-cluster.sh</span><br></pre></td></tr></table></figure>
<p>10）单独启动、停止进程</p>
<p>手工启动、停止主进程StandaloneSessionClusterEntrypoint</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 flink-1.11.1]# bin/jobmanager.sh start</span><br><span class="line">[root@vm1 flink-1.11.1]# bin/jobmanager.sh stop</span><br></pre></td></tr></table></figure>
<p>手工启动、停止TaskManagerRunner(常用于向集群中添加新的slave节点)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 flink-1.11.1]# bin/taskmanager.sh start</span><br><span class="line">[root@vm1 flink-1.11.1]# bin/taskmanager.sh stop</span><br></pre></td></tr></table></figure>
<h4 id="Flink-on-YARN-模式"><a href="#Flink-on-YARN-模式" class="headerlink" title="Flink on YARN 模式"></a>Flink on YARN 模式</h4><p>在容器化部署盛行的时代，Flink on Yarn应运而生。Flink on Yarn模式使用YARN 作为任务调度系统，即在YARN上启动运行flink。好处是能够充分利用集群资源，提高服务器的利用率。这种模式的前提是要有一个Hadoop集群，并且只需公用一套hadoop集群就可以执行MapReduce和Spark以及Flink任务，非常方便。因此需要先搭建一个hadoop集群。</p>
<h5 id="Hadoop集群搭建"><a href="#Hadoop集群搭建" class="headerlink" title="Hadoop集群搭建"></a>Hadoop集群搭建</h5><p>1）下载并解压到指定目录</p>
<p>从<a href="https://hadoop.apache.org/releases.html">官网</a>下载Hadoop二进制包，上传到linux服务器，并解压到指定目录。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 ~]# tar -zxvf hadoop-2.9.2.tar.gz -C /usr/local/myapp/hadoop/</span><br></pre></td></tr></table></figure>
<p>2）配置环境变量</p>
<p>vim /etc/profile</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export HADOOP_HOME=/usr/local/myapp/hadoop/hadoop-2.9.2/</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin</span><br></pre></td></tr></table></figure>
<p>执行hadoop version查看版本号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 hadoop]# source /etc/profile</span><br><span class="line">[root@vm1 hadoop]# hadoop version</span><br><span class="line">Hadoop 2.9.2</span><br></pre></td></tr></table></figure>
<p>3）修改hadoop-env.sh文件</p>
<p>修改配置export JAVA_HOME=${JAVA_HOME}指定JAVA_HOME路径:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/myapp/jdk/jdk1.8.0_261/</span><br></pre></td></tr></table></figure>
<p>同时指定Hadoop日志路径，先创建好目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">[root@vm1]# </span><span class="language-bash"><span class="built_in">mkdir</span> -p /data/hadoop_repo/logs/hadoop</span></span><br></pre></td></tr></table></figure>
<p>再配置HADOOP_LOG_DIR</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export HADOOP_LOG_DIR=/data/hadoop_repo/logs/hadoop</span><br></pre></td></tr></table></figure>
<p>4）修改yarn-env.sh文件</p>
<p>指定JAVA_HOME路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/myapp/jdk/jdk1.8.0_261/</span><br></pre></td></tr></table></figure>
<p>指定YARN日志目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 ~]# mkdir -p /data/hadoop_repo/logs/yarn</span><br><span class="line">export YARN_LOG_DIR=/data/hadoop_repo/logs/yarn</span><br></pre></td></tr></table></figure>
<p>4）修改core-site.xml</p>
<p>配置NameNode的地址fs.defaultFS、Hadoop临时目录hadoop.tmp.dir</p>
<p>NameNode和DataNode的数据文件都会存在临时目录下的对应子目录下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://vm1:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/hadoop_repo<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>6）修改hdfs-site.xml</p>
<p>dfs.namenode.secondary.http-address指定secondaryNameNode的http地址，本例设置vm2机器为SecondaryNameNode</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>vm2:50090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>7）修改yarn-site.xml</p>
<p>yarn.resourcemanager.hostname指定resourcemanager的服务器地址，本例设置vm1机器为hadoop主节点</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>vm1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>8）修改mapred-site.xml</p>
<p>[root@vm1 hadoop]# mv mapred-site.xml.template mapred-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>mapreduce.framework.name设置使用yarn运行mapreduce程序</p>
<p>9） 配置slaves</p>
<p>设置vm2、vm3为Hadoop副节点</p>
<p>[root@vm1 hadoop]# vim slaves</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vm2</span><br><span class="line">vm3</span><br></pre></td></tr></table></figure>
<p>10）设置免密码登录</p>
<p>免密配置参考前文 设置服务器间相互免密登录</p>
<p>11）拷贝hadoop到其它机器</p>
<p>将在vm1上配置好的Hadoop目录拷贝到其它服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 hadoop]# scp -r /usr/local/myapp/hadoop/ vm2:/usr/local/myapp/</span><br><span class="line">[root@vm1 hadoop]# scp -r /usr/local/myapp/hadoop/ vm3:/usr/local/myapp/</span><br></pre></td></tr></table></figure>
<p>12）格式化HDFS</p>
<p>在Hadoop集群主节点vm1上执行格式化命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 bin]# pwd</span><br><span class="line">/usr/local/myapp/hadoop/hadoop-2.9.2/bin</span><br><span class="line">[root@vm1 bin]# hdfs namenode -format</span><br></pre></td></tr></table></figure>
<p>如果要重新格式化NameNode，则需要先将原来NameNode和DataNode下的文件全部删除，否则报错。NameNode和DataNode所在目录在<code>core-site.xml</code>中<code>hadoop.tmp.dir</code>、<code>dfs.namenode.name.dir</code>、<code>dfs.datanode.data.dir</code>属性配置</p>
<p>13）启动集群</p>
<p>直接启动全部进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@vm1 hadoop-2.9.2]# sbin/start-all.sh</span><br></pre></td></tr></table></figure>
<p>也可以单独启动HDFS</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sbin/start-dfs.sh</span><br></pre></td></tr></table></figure>
<p>也可以单独启动YARN</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sbin/start-yarn.sh</span><br></pre></td></tr></table></figure>
<p>14）查看web页面</p>
<p>要在本地机器http访问虚拟机先关闭linux防火墙，关闭linux防火墙请参照前文</p>
<p>查看HDFS Web页面：</p>
<p><a href="http://vm1:50070/">http://vm1:50070/</a></p>
<p>查看YARN Web 页面：</p>
<p><a href="http://vm1:8088/cluster">http://vm1:8088/cluster</a></p>
<p>15）查看各个节点进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 ~]# jps</span><br><span class="line">5026 ResourceManager</span><br><span class="line">5918 Jps</span><br><span class="line">5503 NameNode</span><br><span class="line"></span><br><span class="line">[root@vm2 ~]# jps</span><br><span class="line">52512 NodeManager</span><br><span class="line">52824 Jps</span><br><span class="line">52377 DataNode</span><br><span class="line">52441 SecondaryNameNode</span><br><span class="line"></span><br><span class="line">[root@vm3 ~]# jps</span><br><span class="line">52307 DataNode</span><br><span class="line">52380 NodeManager</span><br><span class="line">52655 Jps</span><br></pre></td></tr></table></figure>
<p>16）停止Hadoop集群</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@vm1 hadoop-2.9.2]# sbin/stop-all.sh</span><br></pre></td></tr></table></figure>
<p>Hadoop集群搭建完成后就可以在Yarn上运行Flink了！</p>
<h5 id="Flink-on-Yarn的两种方式"><a href="#Flink-on-Yarn的两种方式" class="headerlink" title="Flink on Yarn的两种方式"></a>Flink on Yarn的两种方式</h5><p>第1种：在YARN中预先初始化一个Flink集群，占用YARN中固定的资源。该Flink集群常驻YARN 中，所有的Flink任务都提交到这里。这种方式的缺点在于不管有没有Flink任务执行，Flink集群都会独占系统资源，除非手动停止。如果YARN中给Flink集群分配的资源耗尽，只能等待YARN中的一个作业执行完成释放资源才能正常提交下一个Flink作业。这种方式适合小规模、短时间计算任务。</p>
<p>第2种：每次提交Flink任务时单独向YARN申请资源，即每次都在YARN上创建一个新的Flink集群，任务执行完成后Flink集群终止，不再占用机器资源。这样不同的Flink任务之间相互独立互不影响。这种方式能够使得资源利用最大化，适合长时间、大规模计算任务。</p>
<p>下面分别介绍2种方式的具体步骤。</p>
<h6 id="第1种方式"><a href="#第1种方式" class="headerlink" title="第1种方式"></a>第1种方式</h6><p>不管是哪种方式，都要先运行Hadoop集群</p>
<p>1）启动Hadoop集群</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@vm1 hadoop-2.9.2]# sbin/start-all.sh</span><br></pre></td></tr></table></figure>
<p>2）将flink依赖的hadoop相关jar包拷贝到flink目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">[root@vm1]# </span><span class="language-bash"><span class="built_in">cp</span> /usr/local/myapp/hadoop/hadoop-2.9.2/share/hadoop/yarn/hadoop-yarn-api-2.9.2.jar /usr/local/myapp/flink/flink-1.11.1/lib</span></span><br><span class="line"><span class="meta prompt_">[root@vm1]# </span><span class="language-bash"><span class="built_in">cp</span> /usr/local/myapp/hadoop/hadoop-2.9.2/share/hadoop/yarn/sources/hadoop-yarn-api-2.9.2-sources.jar /usr/local/myapp/flink/flink-1.11.1/lib</span></span><br></pre></td></tr></table></figure>
<p>还需要 flink-shaded-hadoop-2-uber-2.8.3-10.0.jar ，可以从maven仓库下载并放到flink的lib目录下。</p>
<p>3）创建并启动flink集群</p>
<p>在flink的安装目录下执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/yarn-session.sh -n 2 -jm 512 -tm 512 -d</span><br></pre></td></tr></table></figure>
<p>这种方式创建的是一个一直运行的flink集群，也称为flink yarn-session</p>
<p>由于Yarn模式的Flink集群是由yarn来启动的，因此可以在yarn控制台，即hadoop集群管理页面查看是否有flink任务成功运行：<a href="http://vm1:8088/cluster">http://vm1:8088/cluster</a><br><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/20201101115957958.png" alt="在这里插入图片描述"></p>
<p>创建成功后，flink控制台会输出web页面的访问地址，可以在web页面查看flink任务执行情况：<br><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/20201101120013426.png" alt="在这里插入图片描述"></p>
<p>控制台输出<a href="http://vm2:43243/">http://vm2:43243</a> 可以认为flink的Jobmanager进程就运行在vm2上，且端口是43243。指定host、port提交flink任务时可以使用这个地址+端口</p>
<p>4）附着到flink集群</p>
<p>创建flink集群后会有对应的applicationId，因此执行flink任务时也可以附着到已存在的、正在运行的flink集群</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">附着到指定flink集群</span></span><br><span class="line">[root@vm1 flink-1.11.1]# bin/yarn-session.sh -id application_1602852161124_0001</span><br></pre></td></tr></table></figure>
<p>applicationId参数是上一步创建flink集群时对应的applicationId</p>
<p>5） 提交flink任务</p>
<p>可以运行flink自带的wordcount样例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@vm1 flink-1.11.1]# bin/flink run ./examples/batch/WordCount.jar</span><br></pre></td></tr></table></figure>
<p>在flink web页面 <a href="http://vm2:43243/">http://vm2:43243/</a> 可以看到运行记录：<br><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/20201101120039853.png" alt="在这里插入图片描述"></p>
<p>可以通过-input和-output来手动指定输入数据目录和输出数据目录:</p>
<p>-input hdfs://vm1:9000/words<br>-output hdfs://vm1:9000/wordcount-result.txt</p>
<h6 id="第2种方式"><a href="#第2种方式" class="headerlink" title="第2种方式"></a>第2种方式</h6><p>这种方式很简单，就是在提交flink任务时同时创建flink集群</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@vm1 flink-1.11.1]# bin/flink run -m yarn-cluster -yjm 1024 ./examples/batch/WordCount.jar</span><br></pre></td></tr></table></figure>
<p>需要在执行上述命令的机器(即flink客户端)上配置环境变量YARN_CONF_DIR、HADOOP_CONF_DIR或者HADOOP_HOME环境变量，Flink会通过这个环境变量来读取YARN和HDFS的配置信息。</p>
<p>如果报下列错，则需要禁用hadoop虚拟内存检查：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Diagnostics from YARN: Application application_1602852161124_0004 failed 1 times (global limit =2; local limit is =1) due to AM Container for appattempt_1602852161124_0004_000001 exited with  exitCode: -103</span><br><span class="line">Failing this attempt.Diagnostics: [2020-10-16 23:35:56.735]Container [pid=6890,containerID=container_1602852161124_0004_01_000001] is running beyond virtual memory limits. Current usage: 105.8 MB of 1 GB physical memory used; 2.2 GB of 2.1 GB virtual memory used. Killing container.</span><br></pre></td></tr></table></figure>
<p>修改所有hadoop机器(所有 nodemanager)的文件$HADOOP_HOME/etc/hadoop/yarn-site.xml</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;  </span><br><span class="line">    &lt;name&gt;yarn.nodemanager.vmem-check-enabled&lt;/name&gt;  </span><br><span class="line">    &lt;value&gt;false&lt;/value&gt;  </span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>
<p>重启hadoop集群再次运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 hadoop-2.9.2]# sbin/stop-all.sh</span><br><span class="line">[root@vm1 hadoop-2.9.2]# sbin/start-all.sh</span><br><span class="line">[root@vm1 flink-1.11.1]# bin/flink run  -m yarn-cluster  -yjm 1024 ./examples/batch/WordCount.jar</span><br></pre></td></tr></table></figure>
<p>任务成功执行，控制台输出如下。可以使用控制台输出的web页面地址vm3:44429查看任务。不过这种模式下任务执行完成后Flink集群即终止，所以输入地址vm3:44429时可能看不到结果，因为此时任务可能执行完了，flink集群终止，页面也访问不了了。<br><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/20201101120138638.png" alt="在这里插入图片描述"></p>
<p>上述Flink On Yarn的2种方式案例中分别使用了两个命令：yarn-session.sh 和 flink run</p>
<p>yarn-session.sh 可以用来在Yarn上创建并启动一个flink集群，可以通过如下命令查看常用参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@vm1 flink-1.11.1]# bin/yarn-session.sh -h</span><br></pre></td></tr></table></figure>
<p>-n :表示分配的容器数量，即TaskManager的数量</p>
<p>-s : 每个TaskManager的slot数量，一般根据cpu核数设定</p>
<p>-jm:设置jobManagerMemory，即JobManager的内存，单位MB</p>
<p>-tm:设置taskManagerMemory ，即TaskManager的内存，单位MB</p>
<p>-d: 设置运行模式为detached，即后台独立运行</p>
<p>-nm：设置在YARN上运行的应用的name（名字）</p>
<p>-id: 指定任务在YARN集群上的applicationId ,附着到后台独立运行的yarn session中</p>
<p>flink run命令既可以提交任务到Flink集群中执行，也可以在提交任务时创建一个新的flink集群，可以通过如下命令查看常用参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@vm1 flink-1.11.1]# bin/flink run -h</span><br></pre></td></tr></table></figure>
<p>-m: 指定主节点(JobManger)的地址，在此命令中指定的JobManger地址优先于配置文件中的</p>
<p>-c: 指定jar包的入口类，此参数在jar 包名称之前</p>
<p>-p:指定任务并行度，同样覆盖配置文件中的值</p>
<p>flink run使用举例：</p>
<p>1）提交并执行flink任务，默认查找当前YARN集群中已有的yarn-session的JobManager</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 flink-1.11.1]# bin/flink run ./examples/batch/WordCount.jar -input hdfs://vm1:9000/hello.txt -output hdfs://vm1:9000/result_hello</span><br></pre></td></tr></table></figure>
<p>2）提交flink任务时显式指定JobManager的的host的port，该域名和端口是创建flink集群时控制台输出的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 flink-1.11.1]# bin/flink run -m vm3:39921 ./examples/batch/WordCount.jar  -input hdfs://vm1:9000/hello.txt -output hdfs://vm1:9000/result_hello</span><br></pre></td></tr></table></figure>
<p>3）在YARN中启动一个新的Flink集群，并提交任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 flink-1.11.1]# bin/flink run  -m yarn-cluster  -yjm 1024 ./examples/batch/WordCount.jar -input hdfs://vm1:9000/hello.txt -output hdfs://vm1:9000/result_hello</span><br></pre></td></tr></table></figure>
<p>-m yarn-cluster是固定写法，这种方式告诉flink不用去找standalone集群和yarn session集群，而是根据当前提交的job单独启动一个cluster。</p>
<h3 id="Flink高可用-HA"><a href="#Flink高可用-HA" class="headerlink" title="Flink高可用(HA)"></a>Flink高可用(HA)</h3><p>默认情况下，flink集群中只有一个主节点(master)，即只有一个JobManager(StandaloneSessionClusterEntrypoint)进程，如果主节点的JobManager进程挂了则不能提交任务，且运行中的任务也会失败。使用高可用配置(HA，high availability)，flink集群便可以从JobManager故障中恢复，避免单点故障（single point of failure，SPOF）。对应于flink的两种集群模式，有两种不同的HA配置方式。</p>
<h4 id="Standalone集群HA"><a href="#Standalone集群HA" class="headerlink" title="Standalone集群HA"></a>Standalone集群HA</h4><p>受虚拟机个数限制，本例中我们使用2个flink master节点（跑StandaloneSessionClusterEntrypoint进程），1个flink salve节点（跑TaskManagerRunner进程）。Flink HA还依赖zookeeper作为分布式协调工具、hdfs作为存储工具，因此需要先安装zk集群和hadoop集群。本例中zk集群、hadoop集群、flink集群都部署在相同的机器上，但是它们是相互独立的。hadoop集群采用前文中安装好的。zk集群安装参考<a href="https://gitbook.cn/gitchat/activity/5f620af9e8f6415f69856d2c">这篇文章</a>。</p>
<p>集群节点进程规划：</p>
<p>StandaloneSessionClusterEntrypoint节点：vm1、vm2</p>
<p>TaskManagerRunner节点：vm3</p>
<p>zk节点：vm1、vm2、vm3</p>
<p>hadoop节点：vm1、vm2、vm3</p>
<p>各个进程信息</p>
<p>StandaloneSessionClusterEntrypoint：flink主节点进程，即JobManager进程</p>
<p>TaskManagerRunner：flink worker节点进程，即TaskManager进程</p>
<p>NameNode: HDFS管理者节点</p>
<p>DataNode:HDFS工作者节点</p>
<p>SecondaryNameNode:HDFS NameNode的备份节点</p>
<p>ResourceManager：hadoop yarn master节点</p>
<p>NodeManager：hadoop yarn work节点</p>
<p>QuorumPeerMain：zk进程</p>
<p>在开始flink HA安装配置前，确保各个机器上都设置了主机名，/etc/hosts文件配置了主机映射关系。各个主机间互相免密登录、防火墙已关闭、时间已同步。JDK已安装，且环境变量已经配置生效。Hadoop集群、zookeeper集群已搭建。</p>
<p>配置Flink，先在第一台机器配置，然后在复制到集群中的其它机器中。具体步骤如下：</p>
<ol>
<li>解压Flink安装包</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 myapp]# tar -zxvf flink-1.11.1-bin-scala_2.11.tgz  -C /usr/local/myapp/flink/</span><br></pre></td></tr></table></figure>
<ol>
<li>修改conf/flink-conf.yaml文件</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jobmanager.rpc.address:</span> <span class="string">vm1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">high-availability:</span> <span class="string">zookeeper</span></span><br><span class="line"><span class="attr">high-availability.storageDir:</span> <span class="string">hdfs://vm1:9000/flink/ha/</span></span><br><span class="line"><span class="attr">high-availability.zookeeper.quorum:</span> <span class="string">vm1:2181,vm2:2181,vm3:2181</span></span><br></pre></td></tr></table></figure>
<ol>
<li>修改conf/workers文件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vm3</span><br></pre></td></tr></table></figure>
<ol>
<li>修改conf/masters文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vm1:8081</span><br><span class="line">vm2:8081</span><br></pre></td></tr></table></figure>
<ol>
<li>配置好的flink目录复制到其它节点</li>
</ol>
<p>本例配置HA时相对之前的配置只是改了workers、masters、flink-conf.yaml文件，所以只要拷贝这3个文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 flink-1.11.1]# scp conf/flink-conf.yaml vm2:/usr/local/myapp/flink/flink-1.11.1/conf/</span><br><span class="line">[root@vm1 flink-1.11.1]# scp conf/flink-conf.yaml vm3:/usr/local/myapp/flink/flink-1.11.1/conf/</span><br><span class="line">[root@vm1 flink-1.11.1]# scp conf/workers vm2:/usr/local/myapp/flink/flink-1.11.1/conf/</span><br><span class="line">[root@vm1 flink-1.11.1]# scp conf/workers vm3:/usr/local/myapp/flink/flink-1.11.1/conf/</span><br><span class="line">[root@vm1 flink-1.11.1]# scp conf/masters vm2:/usr/local/myapp/flink/flink-1.11.1/conf/</span><br><span class="line">[root@vm1 flink-1.11.1]# scp conf/masters vm3:/usr/local/myapp/flink/flink-1.11.1/conf/</span><br></pre></td></tr></table></figure>
<ol>
<li>启动Hadoop集群</li>
</ol>
<p>如果Hadoop还没启动，则启动hadoop集群</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 flink-1.11.1]# cd /usr/local/myapp/hadoop/hadoop-2.9.2/</span><br><span class="line">[root@vm1 hadoop-2.9.2]# sbin/start-all.sh</span><br></pre></td></tr></table></figure>
<ol>
<li>启动zk集群</li>
</ol>
<p>如果zookeeper还没启动，则启动zookeeper集群</p>
<p>在每台机器的zk安装目录下执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 zookeeper-3.6.1]# zkServer.sh start</span><br><span class="line">[root@vm2 zookeeper-3.6.1]# zkServer.sh start</span><br><span class="line">[root@vm3 zookeeper-3.6.1]# zkServer.sh start</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">过几秒钟查看状态</span></span><br><span class="line">[root@vm1 zookeeper-3.6.1]# zkServer.sh status</span><br><span class="line">[root@vm2 zookeeper-3.6.1]# zkServer.sh status</span><br><span class="line">[root@vm3 zookeeper-3.6.1]# zkServer.sh status</span><br></pre></td></tr></table></figure>
<ol>
<li>启动Flink Standalone HA集群</li>
</ol>
<p>在主节点执行启动脚本，并查看各个节点的进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 ~]# cd /usr/local/myapp/flink/flink-1.11.1/</span><br><span class="line">[root@vm1 flink-1.11.1]# bin/start-cluster.sh</span><br><span class="line">Starting HA cluster with 2 masters.</span><br><span class="line">Starting standalonesession daemon on host vm1.</span><br><span class="line">Starting standalonesession daemon on host vm2.</span><br><span class="line">Starting taskexecutor daemon on host vm3.</span><br><span class="line"></span><br><span class="line">[root@vm1 flink-1.11.1]# jps</span><br><span class="line">9440 StandaloneSessionClusterEntrypoint</span><br><span class="line">4707 NameNode</span><br><span class="line">9508 Jps</span><br><span class="line">4997 ResourceManager</span><br><span class="line">8873 QuorumPeerMain</span><br><span class="line"></span><br><span class="line">[root@vm2 ~]# jps</span><br><span class="line">7056 QuorumPeerMain</span><br><span class="line">3762 SecondaryNameNode</span><br><span class="line">7476 StandaloneSessionClusterEntrypoint</span><br><span class="line">3678 DataNode</span><br><span class="line">3839 NodeManager</span><br><span class="line">7583 Jps</span><br><span class="line"></span><br><span class="line">[root@vm3 zookeeper-3.6.1]# cd ~</span><br><span class="line">[root@vm3 ~]# jps</span><br><span class="line">4580 DataNode</span><br><span class="line">8421 QuorumPeerMain</span><br><span class="line">4670 NodeManager</span><br><span class="line">8830 TaskManagerRunner</span><br><span class="line">8927 Jps</span><br></pre></td></tr></table></figure>
<ol>
<li>查看web页面</li>
</ol>
<p>StandaloneSessionClusterEntrypoint（JobManager）节点都会启动Web服务，因此可以登录主节点的web页面验证</p>
<p><a href="http://vm1:8081/">http://vm1:8081/</a></p>
<p><a href="http://vm2:8081/">http://vm2:8081/</a></p>
<p>10）提交任务执行</p>
<p>无论在哪一台机器上提交任务，都可以被正确执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 flink-1.11.1]#  bin/flink run ./examples/batch/WordCount.jar </span><br><span class="line">[root@vm2 flink-1.11.1]#  bin/flink run ./examples/batch/WordCount.jar </span><br><span class="line">[root@vm3 flink-1.11.1]#  bin/flink run ./examples/batch/WordCount.jar </span><br></pre></td></tr></table></figure>
<ol>
<li>验证主进程HA切换</li>
</ol>
<p>把vm1机器的StandaloneSessionClusterEntrypoint进程kill掉时，查看能否在vm1上提交任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 flink-1.11.1]# kill 9440</span><br><span class="line">[root@vm1 flink-1.11.1]#  bin/flink run ./examples/batch/WordCount.jar </span><br></pre></td></tr></table></figure>
<p>通过vm2的web页面查看到任务运行成功，说明vm1上的主进程挂掉之后flink集群依然能够工作</p>
<p><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/20201101120737628.png" alt="在这里插入图片描述"></p>
<p>再次kill掉vm2上的StandaloneSessionClusterEntrypoint进程</p>
<p>此时提交任务便执行失败</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm2 flink-1.11.1]# kill 7476</span><br><span class="line"></span><br><span class="line">[root@vm1 flink-1.11.1]#  bin/flink run ./examples/batch/WordCount.jar </span><br><span class="line">Executing WordCount example with default input data set.</span><br><span class="line">Use --input to specify file input.</span><br><span class="line">Printing result to stdout. Use --output to specify output path.</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"> The program finished with the following exception:</span><br><span class="line">org.apache.flink.client.program.ProgramInvocationException: The main method caused an error: java.util.concurrent.ExecutionException: org.apache.flink.runtime.client.JobSubmissionException: Failed to submit JobGraph.</span><br></pre></td></tr></table></figure>
<ol>
<li>重启vm1上的主进程</li>
</ol>
<p>重启vm1上的StandaloneSessionClusterEntrypoint进程，看能否恢复</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 flink-1.11.1]# bin/jobmanager.sh start</span><br><span class="line">[root@vm1 flink-1.11.1]#  bin/flink run ./examples/batch/WordCount.jar </span><br><span class="line">[root@vm2 flink-1.11.1]#  bin/flink run ./examples/batch/WordCount.jar </span><br><span class="line">[root@vm3 flink-1.11.1]#  bin/flink run ./examples/batch/WordCount.jar </span><br></pre></td></tr></table></figure>
<p>由此可见，重启vm1上的flink主进程后，3台flink客户端都可以正常提交任务，恢复正常！</p>
<ol>
<li>重启vm2上的主进程</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm2 flink-1.11.1]#  bin/jobmanager.sh start</span><br><span class="line">Starting standalonesession daemon on host vm2.</span><br></pre></td></tr></table></figure>
<p>访问vm2的web页面，发现刚才运行的flink任务已经同步显示，flink集群全部恢复正常了！vm1、vm2的web页面内容一致。<br><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/20201101120804501.png" alt="在这里插入图片描述"></p>
<ol>
<li>停止flink集群</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 flink-1.11.1]#  bin/stop-cluster.sh</span><br><span class="line">Stopping taskexecutor daemon (pid: 8830) on host vm3.</span><br><span class="line">Stopping standalonesession daemon (pid: 9440) on host vm1.</span><br><span class="line">Stopping standalonesession daemon (pid: 7476) on host vm2.</span><br></pre></td></tr></table></figure>
<h4 id="Flink-on-Yarn集群HA"><a href="#Flink-on-Yarn集群HA" class="headerlink" title="Flink on Yarn集群HA"></a>Flink on Yarn集群HA</h4><p>Flink on Yarn模式的HA利用的是YARN的任务恢复机制。Flink on Yarn模式依赖hadoop集群，这里可以使用前文中的hadoop集群。这种模式下的HA虽然依赖YARN的任务恢复机制，但是Flink任务在恢复时，需要依赖检查点产生的快照。快照虽然存储在HDFS上，但是其元数据保存在zk中，所以也需要一个zk集群，使用前文配置好的zk集群即可。</p>
<p>配置步骤如下：</p>
<ol>
<li><p>修改Hadoop配置文件</p>
<p>设置应用程序提交的最大尝试次数</p>
</li>
</ol>
<p>[root@vm1 hadoop]# vim yarn-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.am.max-attempts<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>  </span><br><span class="line">    The maximum number of application master execution attempts.  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">description</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>拷贝到其它机器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 hadoop]# scp yarn-site.xml vm2:/usr/local/myapp/hadoop/hadoop-2.9.2/etc/hadoop/</span><br><span class="line">[root@vm1 hadoop]# scp yarn-site.xml vm3:/usr/local/myapp/hadoop/hadoop-2.9.2/etc/hadoop/</span><br></pre></td></tr></table></figure>
<ol>
<li>修改Flink配置文件</li>
</ol>
<p>[root@vm1 conf]# vim flink-conf.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">high-availability:</span> <span class="string">zookeeper</span></span><br><span class="line"><span class="attr">high-availability.storageDir:</span> <span class="string">hdfs://vm1:9000/flink/ha-yarn</span></span><br><span class="line"><span class="attr">high-availability.zookeeper.quorum:</span> <span class="string">vm1:2181,vm2:2181,vm3:2181</span></span><br><span class="line"><span class="string">high-availability.zookeeper.path.root:/flink-yarn</span></span><br><span class="line"><span class="string">yarn.application-attempts:10</span></span><br></pre></td></tr></table></figure>
<p>拷贝到其它机器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 conf]# scp flink-conf.yaml vm2:/usr/local/myapp/flink/flink-1.11.1/conf/</span><br><span class="line">[root@vm1 conf]# scp flink-conf.yaml vm3:/usr/local/myapp/flink/flink-1.11.1/conf/</span><br></pre></td></tr></table></figure>
<ol>
<li>启动Hadoop集群</li>
</ol>
<p>[root@vm1 hadoop-2.9.2]# sbin/start-all.sh</p>
<ol>
<li>启动zk集群</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 ~]# zkServer.sh start</span><br><span class="line">[root@vm2 ~]# zkServer.sh start</span><br><span class="line">[root@vm3 ~]# zkServer.sh start</span><br><span class="line">zkServer.sh status 查看节点状态</span><br></pre></td></tr></table></figure>
<p>5）启动Flink on Yarn集群</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 flink-1.11.1]# bin/yarn-session.sh -n 2 -d</span><br><span class="line">2020-10-19 17:49:13,530 INFO  org.apache.flink.shaded.curator4.org.apache.curator.framework.imps.CuratorFrameworkImpl [] - Default schema</span><br><span class="line">2020-10-19 17:49:13,557 ERROR org.apache.flink.shaded.curator4.org.apache.curator.ConnectionState [] - Authentication failed</span><br><span class="line">2020-10-19 17:49:13,588 INFO  org.apache.flink.shaded.zookeeper3.org.apache.zookeeper.ClientCnxn [] - Session establishment complete on server vm2/192.168.174.137:2181, sessionid = 0x20001b4148c0001, negotiated timeout = 40000</span><br><span class="line">2020-10-19 17:49:13,602 INFO  org.apache.flink.shaded.curator4.org.apache.curator.framework.state.ConnectionStateManager [] - State change: CONNECTED</span><br><span class="line">JobManager Web Interface: http://vm3:38392</span><br></pre></td></tr></table></figure>
<p>查看flink在hadoop中的任务信息：</p>
<p><a href="http://vm1:8088/cluster">http://vm1:8088/cluster</a><br><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/20201101120829133.png" alt="在这里插入图片描述"></p>
<p>说明Flink的主节点进程JobManager（YarnSessionClusterEntrypoint）在vm3上，想要验证HA，只要将vm3上的Flink主节点进程JobManager（YarnSessionClusterEntrypoint）kill掉。</p>
<p>验证HA之前，先看下Flink任务能否正常提交运行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 flink-1.11.1]#  bin/flink run ./examples/batch/WordCount.jar </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">运行上述命令，可以发现flink任务运行成功</span></span><br><span class="line"></span><br><span class="line">[root@vm3 flink-1.11.1]# jps</span><br><span class="line">11538 Jps</span><br><span class="line">10228 NodeManager</span><br><span class="line">10149 DataNode</span><br><span class="line">10453 QuorumPeerMain</span><br><span class="line">10902 YarnSessionClusterEntrypoint</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">kill</span>掉vm3上的flink主进程</span></span><br><span class="line">[root@vm3 flink-1.11.1]# kill 10902</span><br></pre></td></tr></table></figure>
<p>kill掉vm3的YarnSessionClusterEntrypoint之后，等一段时间，发现vm2上自动启动了YarnSessionClusterEntrypoint进程：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm2 flink-1.11.1]# jps</span><br><span class="line">11520 QuorumPeerMain</span><br><span class="line">13104 Jps</span><br><span class="line">12530 YarnSessionClusterEntrypoint</span><br><span class="line">11206 SecondaryNameNode</span><br><span class="line">11288 NodeManager</span><br><span class="line">11133 DataNode</span><br></pre></td></tr></table></figure>
<p>同时Hadoop管理页面也能看到有新的flink任务出现：<br><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/20201101120916464.png" alt="在这里插入图片描述"></p>
<p>此时再在vm1上提交任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 flink-1.11.1]#  bin/flink run ./examples/batch/WordCount.jar </span><br></pre></td></tr></table></figure>
<p>运行成功！表明HA切换成功。</p>
<p>6）停止flink</p>
<p>启动flink时控制台有提示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Available commands:</span><br><span class="line">help - show these commands</span><br><span class="line">stop - stop the YARN session</span><br></pre></td></tr></table></figure>
<p>输入stop即可！至此Flink的两种集群方式下的HA配置讲解完毕！动手试试吧。</p>
<h2 id="快速入门案例"><a href="#快速入门案例" class="headerlink" title="快速入门案例"></a>快速入门案例</h2><p>本节以大数据处理领域的“hello world”案例即词频统计，带领初学者对基于Flink的Java应用开发窥一般而知全貌。</p>
<h3 id="引入pom依赖"><a href="#引入pom依赖" class="headerlink" title="引入pom依赖"></a>引入pom依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-streaming-java_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.FlatMapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.DataSet;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.ExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.operators.DataSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.core.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用flink实现批处理：统计一个文件中的各个单词出现的频次，并且把结果存储到文件中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BatchWordCount</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">inputPath</span> <span class="operator">=</span> <span class="string">&quot;F:\\data\\file&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">outPath</span> <span class="operator">=</span> <span class="string">&quot;F:\\data\\result&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取flink批处理的运行环境</span></span><br><span class="line">        <span class="type">ExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> ExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        <span class="comment">//获取文件中的内容</span></span><br><span class="line">        DataSource&lt;String&gt; text = env.readTextFile(inputPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对文件进行处理(分词、分组、计数)</span></span><br><span class="line">        DataSet&lt;Tuple2&lt;String, Integer&gt;&gt; counts = text.flatMap(<span class="keyword">new</span> <span class="title class_">Tokenizer</span>()).groupBy(<span class="number">0</span>).sum(<span class="number">1</span>);</span><br><span class="line">        counts.writeAsCsv(outPath, <span class="string">&quot;\n&quot;</span>, <span class="string">&quot; &quot;</span>, FileSystem.WriteMode.OVERWRITE).setParallelism(<span class="number">1</span>);</span><br><span class="line">        env.execute(<span class="string">&quot;batch wordCount0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Tokenizer</span> <span class="keyword">implements</span> <span class="title class_">FlatMapFunction</span>&lt;String, Tuple2&lt;String, Integer&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flatMap</span><span class="params">(String value, Collector&lt;Tuple2&lt;String, Integer&gt;&gt; out)</span></span><br><span class="line">                <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="comment">//匹配非单词字符分割单词，并返回2元组集合</span></span><br><span class="line">            String[] tokens = value.toLowerCase().split(<span class="string">&quot;\\W+&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (String token : tokens) &#123;</span><br><span class="line">                <span class="keyword">if</span> (token.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    out.collect(<span class="keyword">new</span> <span class="title class_">Tuple2</span>&lt;&gt;(token, <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>file文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello, my name is daniao,hello hello!</span><br><span class="line">bigbird is a famous person,famous!</span><br><span class="line">mi-xi-mi-xi</span><br></pre></td></tr></table></figure>
<p>result文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">daniao 1</span><br><span class="line">name 1</span><br><span class="line">pig 2</span><br><span class="line">big 2</span><br><span class="line">famous 2</span><br><span class="line">hello 5</span><br><span class="line">bigbird 1</span><br><span class="line">is 2</span><br><span class="line">my 1</span><br><span class="line">person 1</span><br><span class="line">a 1</span><br><span class="line">bird 1</span><br><span class="line">mi 2</span><br><span class="line">pird 1</span><br><span class="line">xi 2</span><br></pre></td></tr></table></figure>
<p>注意到代码中使用了扁平化的Map，即FlatMap。因为文本文件存在多行，如果使用Map，则是一行映射一个处理结果。使用FlatMap则是输出所有行整体的统计处理结果。读者可以对比使用Map的效果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BatchWordCountWithMap</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">inputPath</span> <span class="operator">=</span> <span class="string">&quot;F:\\data\\file&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">outPath</span> <span class="operator">=</span> <span class="string">&quot;F:\\data\\result&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取flink批处理的运行环境</span></span><br><span class="line">        <span class="type">ExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> ExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        <span class="comment">//获取文件中的内容</span></span><br><span class="line">        DataSource&lt;String&gt; text = env.readTextFile(inputPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对文件进行处理</span></span><br><span class="line">        MapOperator&lt;String, Map&lt;String, Integer&gt;&gt; counts = text.map(<span class="keyword">new</span> <span class="title class_">Tokenizer</span>());</span><br><span class="line">        counts.writeAsText(outPath, FileSystem.WriteMode.OVERWRITE).setParallelism(<span class="number">1</span>);</span><br><span class="line">        env.execute(<span class="string">&quot;batch wordCount1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Tokenizer</span> <span class="keyword">implements</span> <span class="title class_">MapFunction</span>&lt;String, Map&lt;String, Integer&gt;&gt; &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Map&lt;String, Integer&gt; <span class="title function_">map</span><span class="params">(String value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            Map&lt;String, Integer&gt; wordCountMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="comment">//以空白字符作为分割,包括空格、换行、tab</span></span><br><span class="line">            String[] tokens = value.toLowerCase().split(<span class="string">&quot;\\W+&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (String word : tokens) &#123;</span><br><span class="line">                <span class="keyword">if</span> (wordCountMap.get(word) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    wordCountMap.put(word, <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    wordCountMap.put(word, wordCountMap.get(word) + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> wordCountMap;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;hello=1, pig=2, pird=1&#125;</span><br><span class="line">&#123;big=2, xi=2, bird=1, hello=1, mi=2&#125;</span><br><span class="line">&#123;name=1, daniao=1, is=1, hello=3, my=1&#125;</span><br><span class="line">&#123;bigbird=1, a=1, famous=2, person=1, is=1&#125;</span><br></pre></td></tr></table></figure>
<h3 id="流式处理"><a href="#流式处理" class="headerlink" title="流式处理"></a>流式处理</h3><p>流式数据往往是连续不断的数据，我们可以在linux服务器上用netcat 模拟socket服务器，让flink接受来自网络的流数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.FlatMapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStreamSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用flink实现流处理：基于socket数据源的词频统计</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamWordCount1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//模拟socket输入源的服务器hostname(笔者使用的是虚拟机),能通过hostname访问的前提是程序运行时所在机器hosts文件做了域名/ip映射</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9999</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">hostname</span> <span class="operator">=</span> <span class="string">&quot;vm1&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">delimiter</span> <span class="operator">=</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="comment">//获取flink流式数据处理运行环境</span></span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">executionEnvironment</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        <span class="comment">//连接socket获取输入数据</span></span><br><span class="line">        DataStreamSource&lt;String&gt; data = executionEnvironment.socketTextStream(hostname, port, delimiter);</span><br><span class="line">        <span class="comment">//进行数据处理:文本行解析、分组、求和</span></span><br><span class="line">        DataStream&lt;Tuple2&lt;String, Integer&gt;&gt; dataStream = data</span><br><span class="line">                .flatMap(<span class="keyword">new</span> <span class="title class_">Splitter</span>())</span><br><span class="line">                .keyBy(value -&gt; value.f0)</span><br><span class="line">                .sum(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//设置sink操作并行度为1</span></span><br><span class="line">        dataStream.print().setParallelism(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//启动计算任务</span></span><br><span class="line">        executionEnvironment.execute(<span class="string">&quot;word count Stream&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//FlatMapFunction&lt;String, WordWithCount&gt;第一个参数是输入类型,第二个参数是输出类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Splitter</span> <span class="keyword">implements</span> <span class="title class_">FlatMapFunction</span>&lt;String, Tuple2&lt;String, Integer&gt;&gt; &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flatMap</span><span class="params">(String data, Collector&lt;Tuple2&lt;String, Integer&gt;&gt; out)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss:SSS&quot;</span>).format(<span class="keyword">new</span> <span class="title class_">Date</span>()) + <span class="string">&quot; received &quot;</span> + data);</span><br><span class="line">            String[] splits = data.split(<span class="string">&quot;\\s&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (String word : splits) &#123;</span><br><span class="line">                <span class="comment">//输出一个2元组</span></span><br><span class="line">                out.collect(<span class="keyword">new</span> <span class="title class_">Tuple2</span>&lt;String, Integer&gt;(word, <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行上述Java程序之前，我们先在虚拟机linux服务器vm1上运行 nc -lk 9999开启监听，等待输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@vm1 ~]# nc -lk 9999</span><br></pre></td></tr></table></figure>
<p>运行Java程序，启动成功后在linux服务器输入数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 ~]# nc -lk 9999</span><br><span class="line">12 33 22 22 12 aa bb aa</span><br></pre></td></tr></table></figure>
<p>此时Java程序控制台输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-10-31 15:12:36:497 received 12 33 22 22 12 aa bb aa</span><br><span class="line">(12,1)</span><br><span class="line">(33,1)</span><br><span class="line">(22,1)</span><br><span class="line">(22,2)</span><br><span class="line">(12,2)</span><br><span class="line">(aa,1)</span><br><span class="line">(bb,1)</span><br><span class="line">(aa,2)</span><br></pre></td></tr></table></figure>
<p>若再次输入数据，则程序还会累加统计</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 ~]# nc -lk 9999</span><br><span class="line">12 33 22 22 12 aa bb aa</span><br><span class="line">22</span><br><span class="line">aa aa </span><br><span class="line">1234</span><br><span class="line">2020-10-31 15:12:49:017 received 22</span><br><span class="line">(22,3)</span><br><span class="line">2020-10-31 15:13:00:603 received aa aa </span><br><span class="line">(aa,3)</span><br><span class="line">(aa,4)</span><br></pre></td></tr></table></figure>
<p>官方提供了一个解析命令行参数的工具类ParameterTool，我们可以参考官方的demo，运行代码时添加启动参数即可<br><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/20201101121032660.png" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用flink实现流处理：基于socket数据源的词频统计</span></span><br><span class="line"><span class="comment"> * 使用Flink自带的参数解析工具、自定义实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamWordCount2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// the host and the port to connect to</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">delimiter</span> <span class="operator">=</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> String hostname;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> port;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">ParameterTool</span> <span class="variable">params</span> <span class="operator">=</span> ParameterTool.fromArgs(args);</span><br><span class="line">            hostname = params.has(<span class="string">&quot;hostname&quot;</span>) ? params.get(<span class="string">&quot;hostname&quot;</span>) : <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">            port = params.getInt(<span class="string">&quot;port&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;No port specified. Please run &#x27;SocketWindowWordCount &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;--hostname &lt;hostname&gt; --port &lt;port&gt;&#x27;, where hostname (localhost by default) &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;and port is the address of the text server&quot;</span>);</span><br><span class="line">            System.err.println(<span class="string">&quot;To start a simple text server, run &#x27;netcat -l &lt;port&gt;&#x27; and &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;type the input text into the command line&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取flink流式处理运行环境</span></span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">executionEnvironment</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        <span class="comment">//连接socket获取输入数据</span></span><br><span class="line">        DataStreamSource&lt;String&gt; text = executionEnvironment.socketTextStream(hostname, port, delimiter);</span><br><span class="line">        <span class="comment">//进行数据处理,FlatMapFunction&lt;String, WordWithCount&gt;第一个参数是输入类型,第二个参数是输出类型</span></span><br><span class="line">        SingleOutputStreamOperator&lt;WordWithCount&gt; windowCounts = text</span><br><span class="line">                .flatMap(<span class="keyword">new</span> <span class="title class_">FlatMapFunction</span>&lt;String, WordWithCount&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flatMap</span><span class="params">(String data, Collector&lt;WordWithCount&gt; collector)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        System.out.println(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss:SSS&quot;</span>).format(<span class="keyword">new</span> <span class="title class_">Date</span>()) + <span class="string">&quot; received &quot;</span> + data);</span><br><span class="line">                        String[] splits = data.split(<span class="string">&quot;\\s&quot;</span>);</span><br><span class="line">                        <span class="keyword">for</span> (String word : splits) &#123;</span><br><span class="line">                            collector.collect(<span class="keyword">new</span> <span class="title class_">WordWithCount</span>(word.trim(), <span class="number">1L</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .keyBy(<span class="string">&quot;word&quot;</span>)</span><br><span class="line">                <span class="comment">//sum函数本质上是个reduce操作</span></span><br><span class="line">                .reduce(<span class="keyword">new</span> <span class="title class_">ReduceFunction</span>&lt;WordWithCount&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> WordWithCount <span class="title function_">reduce</span><span class="params">(WordWithCount a, WordWithCount b)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WordWithCount</span>(a.word, a.count + b.count);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把数据打印到控制台并设置并行度</span></span><br><span class="line">        windowCounts.print().setParallelism(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//执行计算</span></span><br><span class="line">        executionEnvironment.execute(<span class="string">&quot;Socket Window WordCount2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义输出数据类型的实体类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WordWithCount</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> String word;<span class="comment">//单词</span></span><br><span class="line">        <span class="keyword">public</span> Long count;<span class="comment">//计数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">WordWithCount</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">WordWithCount</span><span class="params">(String word, Long count)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.word = word;</span><br><span class="line">            <span class="built_in">this</span>.count = count;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;WordWithCount&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;word=&#x27;&quot;</span> + word + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, count=&quot;</span> + count +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="提交flink集群运行"><a href="#提交flink集群运行" class="headerlink" title="提交flink集群运行"></a>提交flink集群运行</h3><p>上述案例中我们都是直接在本地运行的Java代码，实际生产环境可以打jar包丢到集群中去运行，具体步骤如下</p>
<p>1）打jar包</p>
<p>pom文件引入打包所需的插件，使用mvn package命令打包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 编译插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- scala编译插件,用于将scala代码编译成class文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.alchim31.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scalaCompatVersion</span>&gt;</span>2.11<span class="tag">&lt;/<span class="name">scalaCompatVersion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scalaVersion</span>&gt;</span>2.11.12<span class="tag">&lt;/<span class="name">scalaVersion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>compile-scala<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>add-source<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>test-compile-scala<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>add-source<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打jar包插件(会包含所有依赖) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>打包成功后，在工程的target目录下面生成一个jar包：flinkdemo-1.0-SNAPSHOT-jar-with-dependencies.jar</p>
<p>2）界面方式提交</p>
<p>提交job之前先运行flink集群；测试服务器开启Linux网络端口监听：nc -lk 9999</p>
<p>在flink的管理控制台提交job时，选择本地打好的jar包上传即可。可以在web页面指定运行时参数、入口类、并行度等信息；还可以查看Flink作业的<strong>执行计划</strong>，点击submit便可以提交运行。<br><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/20201101121056432.png" alt="在这里插入图片描述"></p>
<p>运行后还可以在页面上取消任务、查看任务及输出，非常方便管理flink作业<br><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/20201101121115572.png" alt="在这里插入图片描述"></p>
<p>在linux 使用nc命令监听，并输入数据；flink收到数据计算并输出，在具体干活的机器taskManager上可以看到输出<br><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/20201101121131538.png" alt="在这里插入图片描述"></p>
<p>3）命令行方式</p>
<p> 提交</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 flink-1.11.1]# bin/flink run -c bigbird.tech.flink.streaming.StreamWordCount2 -p 1 ~/flinkdemo-1.0-SNAPSHOT-jar-with-dependencies.jar --hostname vm2 --port 9999</span><br><span class="line"></span><br><span class="line">Job has been submitted with JobID 41a7db588d15973cc1dee9ba5a61fca6</span><br></pre></td></tr></table></figure>
<p> 查看任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 flink-1.11.1]# bin/flink list</span><br><span class="line">Waiting for response...</span><br><span class="line">------------------ Running/Restarting Jobs -------------------</span><br><span class="line">26.10.2020 19:09:04 : 41a7db588d15973cc1dee9ba5a61fca6 : Socket Window WordCount (RUNNING)</span><br><span class="line">--------------------------------------------------------------</span><br></pre></td></tr></table></figure>
<p> 取消</p>
<p> ctrl+c命令只是退出flink客户端，并不能退出正在执行的flink作业；可以在web页面取消flink任务，也可以在命令行操作，取消时需要指定jobId</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 flink-1.11.1]# bin/flink cancel 41a7db588d15973cc1dee9ba5a61fca6</span><br><span class="line">Cancelling job 41a7db588d15973cc1dee9ba5a61fca6.</span><br><span class="line">Cancelled job 41a7db588d15973cc1dee9ba5a61fca6.</span><br></pre></td></tr></table></figure>
<p>查看所有任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 flink-1.11.1]# bin/flink list -a</span><br><span class="line">Waiting for response...</span><br><span class="line">No running jobs.</span><br><span class="line">No scheduled jobs.</span><br><span class="line">---------------------- Terminated Jobs -----------------------</span><br><span class="line">26.10.2020 18:25:51 : 41f13f01de1df903a0bcb783bf65ccd1 : Socket Window WordCount (FAILED)</span><br><span class="line">26.10.2020 18:37:05 : cf4b8772747a40d1aeb47e5d14c41347 : word count2 (CANCELED)</span><br><span class="line">26.10.2020 18:37:42 : 64e1eff5932ddcbc10e7b592acf082f3 : Socket Window WordCount (FINISHED)</span><br><span class="line">26.10.2020 18:39:13 : 52e7fc692082b3041dbdfff982d901ae : Socket Window WordCount (CANCELED)</span><br><span class="line">26.10.2020 19:09:04 : 41a7db588d15973cc1dee9ba5a61fca6 : Socket Window WordCount (CANCELED)</span><br><span class="line">--------------------------------------------------------------</span><br></pre></td></tr></table></figure>
<p>停止集群</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@vm1 flink-1.11.1]# bin/stop-cluster.sh</span><br></pre></td></tr></table></figure>
<p>此时flink终止运行，web也访问不了。</p>
<h2 id="Flink核心概念与原理讲解"><a href="#Flink核心概念与原理讲解" class="headerlink" title="Flink核心概念与原理讲解"></a>Flink核心概念与原理讲解</h2><p>本节着重介绍<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/">Flink</a>的一些基础概念和运行原理。</p>
<h3 id="Flink运行时架构"><a href="#Flink运行时架构" class="headerlink" title="Flink运行时架构"></a>Flink运行时架构</h3><p><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/flink-architecture.html">Flink</a>遵循 Master-Slave 架构设计原则。Flink运行时架构由两种类型的进程组成：一个JobManager，以及多个TaskManager。运行JobManager进程的节点认为是Master节点，运行TaskManager进程的节点认为是Worker(Slave)节点。组件之间的通信都是借助于Akka框架，包括任务的状态以及 Checkpoint 触发等信息。下图展示了Flink运行时架构。<br><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/20201101121200318.png" alt="在这里插入图片描述"></p>
<p>由图可见，应用程序通常是由Flink Clinet端提交到flink集群中执行。尽管Flink客户端并不是flink程序执行时的组成部分，但是客户端的作用是很重要的，它负责准备和发送数据流图到JobManager，此后，客户端便可以断开(<em>detached mode</em>)。比如我们在Linux上运行flink命令带参数-d时，便是以detached mode运行，此时ctrl+c强退只是退出客户端，并不会停止flink进程，而是后台运行。当然Clinet端也可以一直和flink服务端保持连接(<em>attached mode</em>)，以接收程序运行报告。Flink Clinet端既可以从命令行启动，也可以是Java或者Scala客户端代码启动。</p>
<p>JobManager和Taskmanager可以以各种方式启动：作为 standalone集群直接在机器上启动，或者在容器中启动，或者由 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/ops/deployment/yarn_setup.html">YARN</a> or <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.11/ops/deployment/mesos.html">Mesos</a>等资源框架管理。TaskManagers连接到JobManagers，声明它们是可用的，可以被分配工作。</p>
<h4 id="JobManager"><a href="#JobManager" class="headerlink" title="JobManager"></a>JobManager</h4><p>Flink中控制应用程序执行的主进程，负责协调Flink应用程序的分布式执行。JobManager决定着何时开始调度下一个flink任务或者任务集合、对执行成功或者失败的任务作出响应、协调checkpoints、协调Flink应用程序从失败中恢复。</p>
<p>JobManager进程由3个不同的组件构成：</p>
<p><strong>ResourceManager</strong></p>
<p>ResourceManager负责Flink集群中资源的分配和重分配及资源供应。ResourceManager管理着TaskManager中的任务槽(task slots)。任务槽(slot)是flink中资源调度的基本单位。Flink为不同的环境和资源提供者(如YARN、Mesos、Kubernetes和Standalone部署)实现了多个Resourcemanager。在Standalone模式下，ResourceManager只能分发可用的TaskManager的插槽，不能自己启动新的TaskManager进程。容器环境下，当JobManager申请资源时，ResourceManager将有空闲slot的TaskManager分配给JobManager。如果ResourceManager中没有足够的slot，则可以向资源提供平台发起会话，以提供启动了TaskManager进程的容器。</p>
<p><strong>Dispatcher</strong></p>
<p>Dispatcher提供了REST接口来提交要执行的Flink应用程序，并为每个提交的作业启动一个新的JobMaster。它还运行Flink WebUI来提供关于Flink作业执行的信息。</p>
<p><strong>JobMaster</strong></p>
<p>JobMaster负责管理单个作业图的执行。多个作业可以在一个Flink集群中同时运行，每个作业都有自己的JobMaster。</p>
<p>JobMaster首先接收到要执行的应用程序，该应用程序包含：作业图(JobGraph)、逻辑数据流图(logical dataflow graph)和打包了所有class、lib和其它资源的jar包。JobMaster把JobGraph转换成物理层面的数据流图(physical dataflow graph)，也称为“执行图”( ExecutionGraph)，执行图包含了所有可以并发执行的任务(task)。</p>
<p>JobManager向资源管理器(ResourceManager)申请必需的计算资源用于执行任务，也就是TaskManager上的槽（slot）。一旦获取到足够的资源，便将ExecutionGraph中的task分发到真正执行它的TaskManager上。在运行过程中，JobManager会负责所有需要中央协调的操作，比如checkpoints的协调。</p>
<h4 id="TaskManagers"><a href="#TaskManagers" class="headerlink" title="TaskManagers"></a>TaskManagers</h4><p>TaskManagers 也叫做workers，是Flink中的工作进程，负责执行数据流图中的task、缓冲和交换数据流。Flink集群至少有一个TaskManager运行，通常flink集群中会有多个TaskManager运行。TaskManager中资源调度的最小单元是任务槽(slot)，每个TaskManager都含有一定数量的slots(槽)。槽的数量通常与每个TaskManager的可用CPU内核数呈正相关。slot的数量限制了TaskManager能够并发处理任务的数量，即Flink任务能配置的最大并行度由 TaskManager上可用的 slots数决定。</p>
<p>TaskManager启动时会向ResourceManager注册它的槽(slots)。收到ResourceManager的指令后，TaskManager会将一个或者多个slot分配给JobManager调用。JobManager就可以向slot分配任务来执行。执行过程中，一个TaskManager可以跟它运行同一应用程序的TaskManager交换数据。</p>
<h3 id="Flink核心概念与处理流程"><a href="#Flink核心概念与处理流程" class="headerlink" title="Flink核心概念与处理流程"></a>Flink核心概念与处理流程</h3><h4 id="并行度-Parallelism"><a href="#并行度-Parallelism" class="headerlink" title="并行度(Parallelism)"></a>并行度(Parallelism)</h4><p>一个算子(operator)的子任务(subtask)数，称之为该算子的并行度(parallelism)。Flink中一个Stream的并行度，可以认为是其包含的所有算子中的最大的那个并行度。适当提高并行度可以提高Job的执行效率。Parallelism有如下几种设置方式。</p>
<ol>
<li>如果不设置的话将使用配置文件flink-conf.yaml中默认配置</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 conf]# cat flink-conf.yaml | grep parallelism</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The parallelism used <span class="keyword">for</span> programs that did not specify and other parallelism.</span></span><br><span class="line">parallelism.default: 1</span><br></pre></td></tr></table></figure>
<ol>
<li>命令行提交任务时 -p 指定</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 flink-1.11.1]# bin/flink run -p 4 ~/flinkdemo-1.0-SNAPSHOT-jar-with-dependencies.jar</span><br></pre></td></tr></table></figure>
<ol>
<li>代码中指定</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">executionEnvironment.setParallelism(n)<span class="comment">//通过env指定全局的并行度</span></span><br><span class="line">    </span><br><span class="line">dataStream.print().setParallelism(<span class="number">1</span>);<span class="comment">//也可以在每个算子后面单独指定并行度</span></span><br></pre></td></tr></table></figure>
<p>本地dev环境不使用配置文件默认配置，即我们在本地开发工具中运行flink应用程序时，如果没有设置算子的并行度，则flink默认设置并行度为当前机器的cpu核数。例如快速入门案例中，我们不设置并行度，即将代码<code>dataStream.print().setParallelism(1);</code>改成：<code>dataStream.print();</code>，则控制台输出时结果前便带了一个数字。每行结果前的数字可以认为是并行任务的任务号，笔者机器4核cpu，因此这个数字范围是1-4</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 ~]# nc -lk 9999</span><br><span class="line">hello word how are you fine thank you and you !</span><br></pre></td></tr></table></figure>
<p>控制台输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-10-31 15:34:08:087 received hello word how are you fine thank you and you !</span><br><span class="line">1&gt; (!,1)</span><br><span class="line">3&gt; (word,2)</span><br><span class="line">2&gt; (hello,2)</span><br><span class="line">3&gt; (how,2)</span><br><span class="line">4&gt; (and,2)</span><br><span class="line">2&gt; (are,2)</span><br><span class="line">2&gt; (thank,1)</span><br><span class="line">3&gt; (you,3)</span><br><span class="line">3&gt; (fine,1)</span><br><span class="line">3&gt; (you,4)</span><br><span class="line">3&gt; (you,5)</span><br><span class="line">123456789101112</span><br></pre></td></tr></table></figure>
<p>并行度设置的优先级：</p>
<p>Operator Level&gt; Execution Environment Level&gt;Client Level&gt;System Level</p>
<p>即 算子级别 &gt; env级别 &gt; Client级别 &gt; 系统默认级别</p>
<h4 id="任务槽-Task-Slots"><a href="#任务槽-Task-Slots" class="headerlink" title="任务槽(Task Slots)"></a>任务槽(Task Slots)</h4><p>每个worker (TaskManager)都是一个JVM进程，可以启动单独的线程执行一个或多个子任务。为了控制TaskManager能接受多少任务，提出了任务槽的概念，每个TaskManager至少包含一个任务槽。</p>
<p>每个任务槽代表TaskManager的一个固定资源子集。例如，一个有三个slot的TaskManager，会将其管理内存的1/3分配给每个slot。对资源进行分槽意味着子任务不会与其他作业的子任务争夺内存资源，而是拥有特定数量的内存资源。注意，TaskManager中的slot只是对内存隔离，并没有CPU隔离。</p>
<p>通过调整slot的数量，用户可以定义子任务如何相互隔离。比如每个TaskManager有且仅有一个slot，则意味着每个任务组在单独的JVM中运行(例如，JVM可以在单独的容器中启动)。一个TaskManager拥有多个slot则意味着更多子任务共享同一个JVM，即可以执行多个子任务。相同JVM中的任务共享TCP连接(通过多路复用机制)和心跳消息。它们还可以共享数据集和数据结构，从而减少每个任务的开销。TaskManager进程、Task Slot、任务线程关系图如下：<br><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/20201101121236775.png" alt="在这里插入图片描述"></p>
<h4 id="两者关系"><a href="#两者关系" class="headerlink" title="两者关系"></a>两者关系</h4><p>Slot指的是TaskManager能够提供的并发执行能力，是静态的并行能力的概念。而Parallelism则是TaskManager 实际会使用的并发能力，是动态的并行能力的概念。动态占用的资源总数必须小于静态能够提供的资源数。</p>
<p>Flink允许子任务共享插槽，即使它们是不同任务的子任务，只要它们来自相同的Job。同一个任务的不同子任务一般占据不同的slot，前后发生的子任务可以共享slot。插槽共享的好处是：Flink集群需要的任务槽数与要执行的Job中使用的最高并行度相同即可，而不需要计算一个程序总共包含多少任务(每个任务具有不同的并行度)。这可以提高slot资源利用率，一个slot便可以hold住这个Job的整条处理链。Slot的数量推荐设置为机器的cpu核心数。Flink任务能配置的最大并行度由TaskManager上可用的Slot数决定。如下图中的Job中，source、map、keyBy、window、apply子任务配置的并行度为6，sink操作的并行度为1，因此运行此任务，flink集群至少有6个slot。如果一个taskmanager只能提供3个，那就需要2个taskmanager。图中也展示了子任务共享slot。</p>
<p><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/20201101121250781.png" alt="在这里插入图片描述"></p>
<h4 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h4><p>下面看几个官方的例子更加清晰地理解slot和parallelism之间的关系，以及实际应用中如何设置。</p>
<ol>
<li>下图展示了一个有3个TaskManager、每个TaskManager设置3个slot的结构图。该配置下的集群启动后共有9个可用的Slot。<br><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/20201101121305676.png" alt="在这里插入图片描述"></li>
</ol>
<p>2）Parallelism 指定了TaskManager实际使用的并发能力，如果没有手动指定并行度则使用flink-config.yaml中的默认值。如图所示，Flink配置文件默认设置的并行度为 1，如果使用默认值，此处只会使用有9 个Slot中的1个，其余8个处于空闲状态。适当地根据集群配置、任务大小设置应用程序的并行度，才能提高Flink Job的计算效率。<br><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/20201101121320601.png" alt="在这里插入图片描述"></p>
<p>3）下图展示了3种设置全局并行度的方式：可以修改配置文件、可以在命令行指定，也可以在应用程序env中指定。若全局指定了并行度为2，则每个算子都将占用2个slot。如图所示，9个空闲slot中的2个被使用。<br><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/2020110112133721.png" alt="在这里插入图片描述"></p>
<p>若此处设置并行度为9，则所有的资源被使用，每个slot都被分配任务：<br><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/20201101121351290.png" alt="在这里插入图片描述"></p>
<p>4）除了可以在应用程序的env中全局指定并行度外，也可以通过.setParallelism(x)为每个算子单独指定并行度。下图展示了在应用程序中单独指定sink操作的并行度为1，其它操作的并行度都是9，多线程处理完后最终由一个线程输出结果。</p>
<p><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/20201101121427999.png" alt="在这里插入图片描述"></p>
<p><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/20201101121447147.png" alt="在这里插入图片描述"></p>
<p>5）小结。如果Flink应用程序设置的并行度超过了集群中TaskManager可用的Slot总数，则程序一直会等待资源调度，如果超过了一定的时间(该时间可配置)则会抛出异常。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Caused by: org.apache.flink.runtime.jobmanager.scheduler.NoResourceAvailableException: Could not allocate the required slot within slot request timeout. Please make sure that the cluster has enough resources.</span><br></pre></td></tr></table></figure>
<p>实际应用中如果某个算子的处理逻辑比较复杂，处理数据比较慢，则可以考虑给该算子单独增加并行度，单不要超过集群中总的slot数。在flink配置文件flink-conf.yaml 配置了taskmanager.numberOfTaskSlots参数指定slot数之后，在web管理页面也能看到集群总的slots数。<br>例如在连接<a href="https://blog.csdn.net/hellozpc/article/details/108770504">Kafka</a>集群时，通常建议Flink Source 侧设置的并行度不要超过<a href="https://blog.csdn.net/hellozpc/article/details/108770504">Kafka</a> Topic的分区数，Flink的一个并行度可以处理Kafka一个或多个分区的数据，并行度大于topic的分区数则造成并行度空闲，资源浪费，正如<a href="http://kafka.apache.org/">Kafka</a>消费者线程数据一般不超过topic分区数一样。</p>
<h4 id="Flink应用程序执行流程"><a href="#Flink应用程序执行流程" class="headerlink" title="Flink应用程序执行流程"></a>Flink应用程序执行流程</h4><p>Flink中所有对数据处理的操作称为Transformation Operator。对于整个Dataflow而言，其开始和结束分别对应着Source Operator和Sink Operator，中间计算处理过程对应着Transformation Operator。</p>
<p>Flink应用程序的构成：source-&gt;transformation-&gt;sink</p>
<p>source: 数据输入、负责读取数据源</p>
<p>transformation: 利用各种算子进行转换处理</p>
<p>sink: 数据输出、负责结果输出</p>
<p>一个典型的 Flink 流式应用程序代码结构和流程如下图所示：<br><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/20201101121506477.png" alt="在这里插入图片描述"></p>
<p><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/20201101121521630.png" alt="在这里插入图片描述"></p>
<p>Flink上的程序运行时，会被映射成逻辑数据流(dataflows)，包含上述3个组成部分。每一个dataflow以一个或者多个sources开始、以一个或者多个sink结束。</p>
<h4 id="Flink任务链"><a href="#Flink任务链" class="headerlink" title="Flink任务链"></a>Flink任务链</h4><p>Flink采用了任务链优化技术，对于分布式执行的操作(operator)，Flink将operator子任务链接到一起，由一个线程执行。说白了就是把符合某种条件的子任务合并在一起，构成一个大任务。每个执行链会在 TaskManager 上的一个独立线程中执行，因此将多个operator子任务链接到一起减少了线程数以及多线程间的切换和缓冲开销，避免了数据在算子之间传输序列化与反序列化开销，提高了总体吞吐量，同时减少了延迟，可以在特定条件下减少本地通信开销。试想如果一个任务的不同子任务分不到不同的slot执行，甚至跨TaskManager执行，其网络通信开销必然比在同一个线程中本地调用大。</p>
<p>那么什么样的子任务是可以合并、构成所谓的operator chain的呢，下面娓娓道来。</p>
<p>首先要明白flink中的数据传输形式。</p>
<p>在Flink中，算子之间的数据传输形式可以是one-to-one(forwarding)模式，也可以是redistributing模式，具体是哪一种形式，取决于算子的种类。</p>
<p>one-to-one模式：Flink Stream 维护分区及元素的顺序。比如source和map之间，map算子的子任务接收到的元素个数以及顺序和source算子的子任务产生的元素个数及顺序相同。map、filter、flatMap等算子都是one-to-one的映射关系。</p>
<p>redistributing模式：Stream 的分区会发生改变。每个算子的子任务依据所选择的transformation发送到不同的目标任务。比如keyBy操作根据hashCode重分区，broadcast、rebalance随机重分区。这类算子引发redistribute过程，flink中的redistribute过程类似hadoop和spark中的shuffle过程。</p>
<p>如果算子本身是one-to-one操作，但是后续操作并行度调整了，和前面的操作并行度不一致，也将引发redistribute过程。毕竟Flink是允许一个程序中不同的算子设置不同的并行度。</p>
<p>由此可见，为了满足任务链的要求，Flink Stream中的多个算子需要设置相同的并行度，并且是通过local forward方式进行连接。只有相同并行度的one-to-one操作才能链接在一起形成一个Task，原来的算子成为其subTask。并行度相同、并且是one-to-one操作，两个条件缺一不可。</p>
<p>下面结合一个案例，来介绍Flink是如何进行任务合并的。</p>
<p>如下图所示，从逻辑视图中可以看出有一个Flink Stream Job，包含source、flatMap、keyBy、sink算子。并行化视图中可以看到除了source算子并行度设为1之外的其它算子并行度都设置为2。source和flatMap并行度不一致，所以不能合并。flatMap到keyBy之间从一个one-to-one操作到一个重分区操作存在redistribute过程，所以也不能合并为执行链。只有keyBy-&gt;sink之间数据传输方式是forward直传(没有数据shuffle)，且并行度相同都是2，因此满足合并任务链的条件，可以合并，占用一个slot即可。原始的4个步骤，设置并行度之后应该是7个任务，理论上会占用7个slot，优化合并之后只剩5个，可见TaskManager的slot利用率得以提升。</p>
<p><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/2020110112160488.png" alt="在这里插入图片描述"></p>
<p>比如Wordcount的案例，我们在web页面submit new job时可以show plan查看执行计划：默认没有设置并行度时，所有算子并行度都是1，因此source和flatMap可以chain在一起，同样keyBy聚合和sink也可以合并。</p>
<p><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/20201101121619784.png" alt="在这里插入图片描述"></p>
<p>如果我们手动设置并行度为2。那么由于source和FlatMap之间发生并行度调整，将需要Rebalance，无法合并。同理，keyBy和sink之间也是如此。整个任务拆分为4个部分。</p>
<p><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E5%89%8D%E7%AF%87)/20201101121635281.png" alt="在这里插入图片描述"></p>
<p>改变任务链</p>
<p>有时单个任务业务复杂、计算量巨大，合并在一起更加耗时。而flink默认是开启了任务合并功能的，只要满足合并要求的都会自动合并。那么能不能定制此项功能呢？答案是肯定的。Operator chain的行为可以通过API在代码中指定。可以在DataStream的operator后面（如someStream.map(…))调用startNewChain()来指定从该operator开始一个新的chain（与前一个操作断链，不会被chain到前一个操作）。调用disableChaining()禁止该operator参与chaining（不会与前后的operator chain一起，前后都断开）。也可以通过evn设置全局的开关，比如调用StreamExecutionEnvironment.disableOperatorChaining()全局禁用chaining。</p>
<p>如果想打破slot共享机制，让某些任务独享slot则可以设置Slot group。在代码中具体的算子后调用slotSharingGroup即可，比如someStream.filter(…).slotSharingGroup(“a”)。该设置为filter操作及后续操作单独开启了一个名称为a的slot组，和前面的操作比如source就分开了。在同一个slotSharingGroup中的任务都可以共享slot。不同的slotSharingGroup中的任务一定分配到不同的slot中执行。因此如果使用了slotSharingGroup，则Flink Stream的并行度是每个slot共享组的最大并行度叠加之后的值。</p>
<h2 id="本篇总结"><a href="#本篇总结" class="headerlink" title="本篇总结"></a>本篇总结</h2><p>介绍完Flink的安装配置、基本原理、入门案例之后，下面就要进入贴近实战开发的内容讲解了。掌握上述基本概念和运行原理有助于进行Flink调优。在实际项目中难免会碰到性能问题，熟悉原理，不管是代码层面调优还是配置运维调优都能游刃有余。</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据,Flink</tag>
      </tags>
  </entry>
  <entry>
    <title>如何让Win7开机不输入密码直接登录的方法</title>
    <url>/post/65be3812.html</url>
    <content><![CDATA[<p>电脑是win7的系统，然而也很少别人来玩，但是为了安全还是设置了一个密码，但是每次开机后都需要在本地登录的时候填写密码，那么该如何让Win7开机不输入密码直接登录呢？</p>
<h2 id="方法-步骤"><a href="#方法-步骤" class="headerlink" title="方法/步骤"></a>方法/步骤</h2><ol>
<li><p>点击屏幕左下角开始菜单</p>
<p> 点击运行，若没有运行，那么按win+R键也可以</p>
<p> 在运行的“打开”一行中输入“netplwiz” 点击”确定“</p>
<p> 在弹出的窗口中点中你需要输入密码的那个账号，默认是Administrator 点中之后该帐户背景会变为蓝色</p>
<p> 去掉”要使用本机，用户必须输入用户名和密码“前面框框中的勾。</p>
<p> 最后点击”应用“–在弹出的窗口中输入你电脑的登录密码   最后点击”确定“—“确定” 重启后生效。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>win7</category>
      </categories>
      <tags>
        <tag>-win7</tag>
      </tags>
  </entry>
  <entry>
    <title>宋朝传下来的一幅“假借修真图”</title>
    <url>/post/88b9fab7.html</url>
    <content><![CDATA[<p>中华文明是世界上最为优秀的文明之一，并且曾经也一度影响过全世界，近代以来逐渐被“西学”所替代，而古代的一些经典文化密码，往往在当代无人能够参透。</p>
<p>在当代就有这样的一幅《借假修真图》，此作从宋朝传下来，距今800多年过去了，还是没有人能够参透。</p>
<p><img src="/../images/%E5%AE%8B%E6%9C%9D%E4%BC%A0%E4%B8%8B%E6%9D%A5%E7%9A%84%E4%B8%80%E5%B9%85%E2%80%9C%E5%81%87%E5%80%9F%E4%BF%AE%E7%9C%9F%E5%9B%BE%E2%80%9D.assets/902397dda144ad34aff57d3eedb067fd30ad85d9.jpeg" alt="img">癖隐子《借假修真图》</p>
<p>所谓的“借假修真”，乃是“以虚济实”之理，用一种外在的形制来修行内在的本我，在道教看来，人的身体是独与天地往来的，天象的运行规律也与人身体的密码息息相关，而这件《借假修真图》便是通过“炁”的导引，来实现“修真”的一种方法。</p>
<p>我们知道中国传统文化当中道家的修行密码基本有以下几个步骤，从“炼精化气”到“炼气化神”再到“练神返虚”最后“炼虚合道”。</p>
<p><img src="/../images/%E5%AE%8B%E6%9C%9D%E4%BC%A0%E4%B8%8B%E6%9D%A5%E7%9A%84%E4%B8%80%E5%B9%85%E2%80%9C%E5%81%87%E5%80%9F%E4%BF%AE%E7%9C%9F%E5%9B%BE%E2%80%9D.assets/3bf33a87e950352a262dc13c105190fbb2118b56.jpeg" alt="img">癖隐子《借假修真图》</p>
<p>这几个步骤乃是一定要循序而来，不能逾轨。</p>
<p>这几个步骤在这幅《借假修真图》当中有着详细的“导引标注”，按照此步骤进行修炼，得到呈现固然是虚妄，但身轻体健达到一种延年益寿的效果是很容易的。</p>
<p>这也是道家的一种“内丹修炼术”，在《还真集》当中有这样的描述：</p>
<p><img src="/../images/%E5%AE%8B%E6%9C%9D%E4%BC%A0%E4%B8%8B%E6%9D%A5%E7%9A%84%E4%B8%80%E5%B9%85%E2%80%9C%E5%81%87%E5%80%9F%E4%BF%AE%E7%9C%9F%E5%9B%BE%E2%80%9D.assets/34fae6cd7b899e51aed4977f03b5b23ac8950d1a.jpeg" alt="img">癖隐子《借假修真图》</p>
<blockquote>
<p>“中关炼气化神，补离中之阴而成乾也。”</p>
</blockquote>
<p>这便是这幅《借假修真图》的核心所在，从内丹筑基到“神”与“气”的结合，是一整套完整的体系。</p>
<p><img src="/../images/%E5%AE%8B%E6%9C%9D%E4%BC%A0%E4%B8%8B%E6%9D%A5%E7%9A%84%E4%B8%80%E5%B9%85%E2%80%9C%E5%81%87%E5%80%9F%E4%BF%AE%E7%9C%9F%E5%9B%BE%E2%80%9D.assets/dbb44aed2e738bd41e3030d3e399ecdf267ff9df.jpeg" alt="img">癖隐子《借假修真图》</p>
<p>这件《借假修真图》究竟是宋代的何人所绘，我们不得而知，但从上面的小楷与绘画的笔触来看，此人在书画领域并没有高深造诣，但所绘制的图形内容却是千古罕见，如今在国内的许多道观当中都有着一幅《借假修真图》，但所绘制的内容虽然与此作大同小异，但细节精微之处却远不及此作。</p>
<p><img src="/../images/%E5%AE%8B%E6%9C%9D%E4%BC%A0%E4%B8%8B%E6%9D%A5%E7%9A%84%E4%B8%80%E5%B9%85%E2%80%9C%E5%81%87%E5%80%9F%E4%BF%AE%E7%9C%9F%E5%9B%BE%E2%80%9D.assets/d058ccbf6c81800a056c5e42f32758f3838b4788.jpeg" alt="img">癖隐子《借假修真图》</p>
<p>此作不仅是了解人身体密码的一幅“神图”，更是提高生命质量和人圣境界的一幅名品并且也可以适合张挂客厅、书房、卧室。</p>
<p><img src="/../images/%E5%AE%8B%E6%9C%9D%E4%BC%A0%E4%B8%8B%E6%9D%A5%E7%9A%84%E4%B8%80%E5%B9%85%E2%80%9C%E5%81%87%E5%80%9F%E4%BF%AE%E7%9C%9F%E5%9B%BE%E2%80%9D.assets/83025aafa40f4bfb048be4843a5d13f9f63618a6.jpeg" alt="img">癖隐子《借假修真图》</p>
<p>而今，我们经过多方找寻，将这件极为珍贵的宋代的《借假修真图》原作进行了超高清的1：1复原，并且配以纯手工装裱，以供大家学习或者张挂。</p>
<p>欲购此《借假修真图》，请点击下面惠购：</p>
<p><img src="/../images/%E5%AE%8B%E6%9C%9D%E4%BC%A0%E4%B8%8B%E6%9D%A5%E7%9A%84%E4%B8%80%E5%B9%85%22%E5%81%87%E5%80%9F%E4%BF%AE%E7%9C%9F%E5%9B%BE%22.assets/c9fcc3cec3fdfc03325453cbe82dec9da4c226b4.jpeg" alt="img">癖隐子《借假修真图》</p>
]]></content>
  </entry>
  <entry>
    <title>微服务Eureka使用详解</title>
    <url>/post/741872fb.html</url>
    <content><![CDATA[<p>Eureka是spring cloud中的一个负责服务注册与发现的组件。遵循着CAP理论中的A(可用性)P(分区容错性)。</p>
<p>一个Eureka中分为eureka server和eureka client。其中eureka server是作为服务的注册与发现中心。eureka client既可以作为服务的生产者，又可以作为服务的消费者。具体结构如下图：</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1Eureka%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/1117146-20190510153141906-1290481315.png" alt="img"></p>
<p>上图中我们首先会启动一个或多个Eureka server，这些eureka server同步保留着所有的服务信息。然后我们启动不同的eureka client，向服务端发起服务注册和服务查询。不论我们是向那个eureka server进行的注册，最终都会同步给所有配置好的eureka server。我们获取的服务信息，也同样都是一致的。</p>
<p><strong>eureka server实现</strong></p>
<p>spring cloud是基于spring boot进行的开发，因此我们需要创建一个spring boot项目，同时在里面添加eureka server包。</p>
<p><a href="javascript:void(0);"><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1Eureka%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/copycode.gif" alt="复制代码"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure>
<p><a href="javascript:void(0);"><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1Eureka%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/copycode.gif" alt="复制代码"></a></p>
<p>添加完成后，在我们的启动类中添加注解@EnableEurekaServer</p>
<p><a href="javascript:void(0);"><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1Eureka%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/copycode.gif" alt="复制代码"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaServer</span><br><span class="line">public class ServiceRegistryApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ServiceRegistryApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="javascript:void(0);"><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1Eureka%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/copycode.gif" alt="复制代码"></a></p>
<p>然后是一些配置信息在配置文件中配置：</p>
<p><a href="javascript:void(0);"><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1Eureka%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/copycode.gif" alt="复制代码"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#服务端口</span><br><span class="line">server.port=8077</span><br><span class="line">#服务名称</span><br><span class="line">spring.application.name=eureka-server</span><br><span class="line">#服务地址</span><br><span class="line">eureka.instance.hostname=localhost</span><br><span class="line"></span><br><span class="line">#不向注册中心注册自己</span><br><span class="line">eureka.client.register-with-eureka=false</span><br><span class="line">#取消检索服务</span><br><span class="line">eureka.client.fetch-registry=false</span><br><span class="line">#开启注册中心的保护机制，默认是开启</span><br><span class="line">eureka.server.enable-self-preservation=true</span><br><span class="line">#设置保护机制的阈值，默认是0.85。</span><br><span class="line">eureka.server.renewal-percent-threshold=0.5</span><br><span class="line"></span><br><span class="line">#注册中心路径，如果有多个eureka server，在这里需要配置其他eureka server的地址，用&quot;,&quot;进行区分，如&quot;http://address:8888/eureka,http://address:8887/eureka&quot;</span><br><span class="line">eureka.client.service-url.default-zone=http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka</span><br></pre></td></tr></table></figure>
<p><a href="javascript:void(0);"><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1Eureka%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/copycode.gif" alt="复制代码"></a></p>
<p>配置完成后，我们运行启动类，可以看到打印出来的信息里面，eureka server已经启动。</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1Eureka%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/1117146-20190510155914378-657511819.png" alt="img"></p>
<p>这个时候可以进入地址<a href="http://localhost:8077，查看注册中心：">http://localhost:8077，查看注册中心：</a></p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1Eureka%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/1117146-20190510160314356-1516024080.png" alt="img"></p>
<p><strong>eureka client服务注册</strong></p>
<p>同样的先添加eureka client的包</p>
<p><a href="javascript:void(0);"><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1Eureka%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/copycode.gif" alt="复制代码"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure>
<p><a href="javascript:void(0);"><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1Eureka%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/copycode.gif" alt="复制代码"></a></p>
<p>然后在启动类中添加注解@EnableEurekaClient。</p>
<p><a href="javascript:void(0);"><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1Eureka%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/copycode.gif" alt="复制代码"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">// 注意：服务端配置的是EnableEurekaServer，客户端配置的是EnableEurekaClient</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">public class UserServerApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(UserServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="javascript:void(0);"><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1Eureka%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/copycode.gif" alt="复制代码"></a></p>
<p>在这里我们可以创建一个controller，用来提供一个服务，并填写返回值。</p>
<p><a href="javascript:void(0);"><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1Eureka%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/copycode.gif" alt="复制代码"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;users/&#123;id&#125;&quot;)</span><br><span class="line">    public String getUser(@PathVariable(&quot;id&quot;) String id) &#123;</span><br><span class="line">        System.out.println(&quot;接收到请求[/users/&quot; + id + &quot;]&quot;);</span><br><span class="line">        return &quot;testUser&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="javascript:void(0);"><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1Eureka%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/copycode.gif" alt="复制代码"></a></p>
<p>在配置文件中添加配置信息：</p>
<p><a href="javascript:void(0);"><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1Eureka%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/copycode.gif" alt="复制代码"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#服务端口</span><br><span class="line">server.port=7001</span><br><span class="line">#服务名称</span><br><span class="line">spring.application.name=user</span><br><span class="line">#服务地址</span><br><span class="line">eureka.instance.hostname=localhost</span><br><span class="line"></span><br><span class="line">#注册中心路径，表示我们向这个注册中心注册服务，如果向多个注册中心注册，用“，”进行分隔</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:8077/eureka</span><br><span class="line">#心跳间隔5s，默认30s。每一个服务配置后，心跳间隔和心跳超时时间会被保存在server端，不同服务的心跳频率可能不同，server端会根据保存的配置来分别探活</span><br><span class="line">eureka.instance.lease-renewal-interval-in-seconds=5</span><br><span class="line">#心跳超时时间10s，默认90s。从client端最后一次发出心跳后，达到这个时间没有再次发出心跳，表示服务不可用，将它的实例从注册中心移除</span><br><span class="line">eureka.instance.lease-expiration-duration-in-seconds=10</span><br></pre></td></tr></table></figure>
<p><a href="javascript:void(0);"><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1Eureka%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/copycode.gif" alt="复制代码"></a></p>
<p>然后我们运行启动类，查看打印出来的日志信息，红框内容表示用eureka注册服务user，状态为up。</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1Eureka%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/1117146-20190510162508612-1407779871.png" alt="img"></p>
<p>这时我们再访问我们的注册中心地址：<a href="http://localhost:8077，里面已经有了一个服务实例USER了。">http://localhost:8077，里面已经有了一个服务实例USER了。</a></p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1Eureka%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/1117146-20190510162723518-1046183288.png" alt="img"></p>
<p>如果这个时候我们再把服务关掉，查看eureka server的控制台打印：</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1Eureka%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/1117146-20190510165215284-2136799844.png" alt="img"></p>
<p>注意看时间，不是在我们关掉服务的时候立即检测出来，而是差不多120秒后，先打印一个WARN，服务USER已经超出过期时间。然后打印一个INFO，将服务USER的实例从注册中心移除。</p>
<p><strong>eureka client服务消费者</strong></p>
<p>上面我们创建了一个注册中心和一个注册的服务，下面我们再通过eureka client来调用所注册的服务。</p>
<p>在eureka中，实际上是不区分服务的消费者和服务生产者的，一个服务的消费者，同样也可以是一个服务的生产者。因此我们首先要做的就是再创建一个eureka client。这个enreka client命名为roleServer</p>
<p>创建好eureka client后，我们创建一个配置类，创建RestTemplate来进行服务间的连接</p>
<p><a href="javascript:void(0);"><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1Eureka%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/copycode.gif" alt="复制代码"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class RestConfig &#123;</span><br><span class="line">    </span><br><span class="line">    @Bean</span><br><span class="line">    @LoadBalanced //负载均衡</span><br><span class="line">    public RestTemplate restTemplate() &#123;</span><br><span class="line">        return new RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="javascript:void(0);"><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1Eureka%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/copycode.gif" alt="复制代码"></a></p>
<p>然后在Controller中进行服务的调用：</p>
<p><a href="javascript:void(0);"><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1Eureka%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/copycode.gif" alt="复制代码"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class RoleController &#123;</span><br><span class="line"></span><br><span class="line">    // 这里配置的是我们要调用的服务实例名，我们要调用USER服务，因此这里的地址是USER</span><br><span class="line">    private String rest_url_prefix = &quot;http://user&quot;;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;roles/&#123;id&#125;&quot;)</span><br><span class="line">    public String getRole(@PathVariable(&quot;id&quot;) String id) &#123;</span><br><span class="line">        System.out.println(&quot;接收到请求[/roles/&quot; + id + &quot;]&quot;);</span><br><span class="line"></span><br><span class="line">        // 调用USER服务中的/users/&#123;id&#125;服务</span><br><span class="line">        return restTemplate.getForObject(rest_url_prefix + &quot;/users/&quot; + id, String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="javascript:void(0);"><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1Eureka%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/copycode.gif" alt="复制代码"></a></p>
<p>配置完成，运行启动类，我们首先在服务注册中心可以看到这两个服务实例</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1Eureka%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/1117146-20190510172143269-61885358.png" alt="img"></p>
<p>我们访问ROLE服务中定义的请求路径：<a href="http://localhost:7003/roles/1%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E9%A1%B5%E9%9D%A2%E8%BF%94%E5%9B%9E%E4%BA%86%E6%88%91%E4%BB%AC%E5%9C%A8USER%E6%9C%8D%E5%8A%A1%E4%B8%AD%E7%9A%84%E5%AE%9A%E4%B9%89%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC&quot;testUser&quot;%EF%BC%9A">http://localhost:7003/roles/1，可以看到页面返回了我们在USER服务中的定义的返回值&quot;testUser&quot;：</a></p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1Eureka%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/1117146-20190510172311650-1823076496.png" alt="img"></p>
<p>由此，我们的一个euraka注册中心、服务生产者、服务消费者均已经创建完成。</p>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,Eureka</tag>
      </tags>
  </entry>
  <entry>
    <title>对《切韵》一书成书的思考</title>
    <url>/post/3c99c8d7.html</url>
    <content><![CDATA[<p><strong>对《切韵》一书成书的思考</strong></p>
<p>​                     <strong>李 沣</strong></p>
<p><strong>《切韵》是我国最早的具有完整意义的韵书。是陆法言参考了前人的韵书文献，集中了多人的智慧，以萧该、颜之推的意见为主，将南北音韵系统综合研究的结果。</strong></p>
<p><strong>陆法言《切韵•序》中说：“欲广文路，自可清浊皆通；若赏知音，即须轻重有异。吕静《韵集》，夏侯该《韵略》，阳休之《韵略》，周思言《音韵》，李季节《音谱》，杜台卿《韵略》等，各有乖互。”说明陆法言博览了各种韵书，但发觉这些韵书都有偏颇，都不完整，甚至互相矛盾。当刘臻、颜之推、卢思道、李若、萧该、辛德源、薛道衡、魏彦渊这八位当时的著名学者到陆法言家饮酒论韵时，对音韵之学，各抒高见，进行了热烈地讨论。“欲更捃选精切，除削疏缓，萧（该）颜（之推）多所决定。”在这中， 萧该、颜之推的言论和意见也更为丰富、完整和准确。“魏著作（渊）谓法言曰：「向来论难，疑处悉尽，何不随口记之。我辈数人，定则定矣。」”陆法言在魏彦渊的建议下，于是在灯下提笔粗略地记录了这次讨论的结果。后来陆法言又请教了许多懂音韵的人，得到了音韵学的精华。陆法言获罪免官为民后，隐居山野，私训弟子，“遂取诸家音韵， 古今字书，以前所记者定之，为《切韵》五卷。”编辑成了五卷本《切韵》。</strong></p>
<p><strong>学界普遍认同，《切韵》反映了当时汉语的语音。这一语音系统完整的保存在后来的《广韵》，甚而《集韵》等书中。作为中古汉语的代表，颜之推在《音辞》中说：“共以帝王都邑，参校方俗，考核古今，为之折衷。**</strong>搉**<strong>而量之，独金陵与洛下耳。”颜之推的这席话，是他对音韵学整理的见解，也是他的同辈尤其也是陆法言编辑《切韵》的原则。</strong> <strong>要制订一种权威的、标准的、能为各地接受的语音体系，必须以帝王都邑的音韵为主，参校各地的方言俗语，考核古音今音的变化规律，为之“折中”。所谓“折中”，既不是对这些语音要素全盘接受，也不是全盘否定，而是广收精华，融为一体。在当时要更准确地把握音韵规律，就是要着重研究和把握金陵和洛阳这两地的音韵特点和构成。因为这两地的音韵系统，已经是各个不同时代众多语音的折中或综合。</strong></p>
<p><strong>因为《切韵》对后世影响很大，学界对《切韵》的性质、源头、构成等问题，曾进行过多次讨论，尽管讨论中有争论，理解有差异甚至有矛盾，但对《切韵》性质等问题的总体认知基本一致。</strong></p>
<p><strong>王力先生在其《汉语史稿》中说：</strong></p>
<p><strong>“陆法言的《切韵》是现在能见到的最早的一般韵书。它在汉语史上占有重要的地位。根据《切韵》的语音系统，可以上推古音，下推今音，现代汉语普通话和各地方言的语音系统，基本上可以从《切韵》系统上得到解释。中古汉语的语音，以《切韵》系统为标准。《切韵》的系统并不代表当时（隋代）的首都长安的实际语音，它只代表一种被认为文学语言的语音系统。”</strong></p>
<p><strong>“依南北朝的韵文观察，《切韵》所包括的字，适与南北朝韵文所表现的系统相当。可见《切韵》大致仍以南北朝的实际语言为标准。”⑴</strong></p>
<p><strong>王力先生的意见是《切韵》包涵了古音、今音、各地方言，它虽然产生于隋的首都长安，但它与长安的实际语音无关，而与南北朝的韵文相当。</strong></p>
<p><strong>周祖谟说：“《切韵》分韵不仅与齐、梁、陈之间诗文押韵的情况基本一致，而且与梁代吴郡顾野王《玉篇》的韵类几乎全部相同。⑵</strong></p>
<p><strong>周祖谟的意见是，《切韵》与齐、梁、陈的诗文押韵基本一致，而且与梁代顾野王的《玉篇》韵类几乎全部相同。强调了《切韵》与南朝的诗文和《玉篇》的承继关系。</strong></p>
<p><strong>黄淬伯说：“《切音》音系既是当时南北方音的复杂组合，又经过萧该、颜之推的规划，颜之推所推的金陵与洛下的音系一定蕴藏在《切韵》之中，假若全面的研究六朝韵语或其它相关资料，我想当时民语的基础方言即金陵与洛下的音系是可以从《切韵》中发现的。”⑶</strong></p>
<p><strong>邵荣芬说：“《切韵》音系大体上是一个活方言的音系，只是部分地集中了一些方音的特点。具体地说，当时洛阳一带的语音是它的基础，金陵一带的语音是它的主要参考对象。”⑷</strong></p>
<p><strong>黄、邵的意见都说《切韵》的基础是各地民间的方言，而洛阳和金陵的方言音系，对其影响更为直接，但认为两者对《切韵》的作用不完全一样。</strong></p>
<p><strong>赵振铎说：“以洛阳为中心的中原一带方言是有资格作为这个基础的。”“洛阳是我国的古都之一，是古代的政治、经济、文化中心”⑸</strong></p>
<p><strong>周祖谟说：“《切韵》音系的基础，应当是公元六世纪南北土人通用的雅言。”这种雅言就是“当时应用的书音和官于金陵的士大夫通用的语言。”⑹</strong></p>
<p><strong>赵强调了洛语对《切韵》的基础作用，而周祖谟强调了对《切韵》产生直接影响的讲的，是当时南北应用的书音和官于金陵的士大夫通用的语言。因此要真正理解《切韵》成书的基础和要义，就要深入研究六朝时期官于金陵的士大夫的通用语言。</strong></p>
<p><strong>陆法言的《切韵》成书于大隋仁寿元年，即公元601年。他们那次对声韵学的讨论是在20年前，大致是公元580年左右。而隋灭南朝的陈是在公元589年。也就是说，《切韵》虽成书于隋，但基础在六朝即魏晋南北朝时期。例如对《切韵》影响最大的是萧该、颜之推二人，因为他们俩对韵学都有很深的研究造诣，都是音韵大家，萧该著有《汉书音义》、《文选音义》和《后汉书音义》，颜之推著有《颜氏家训•音辞篇》。而对萧该、颜之推的语音影响最大、最直接的，是萧、颜的父辈、祖辈等人，而萧、颜的父、祖辈，以至于曾祖以上，他们都是南迁的北方士家豪族，都是南朝的宋、齐、梁、陈时代的士族官僚之家。金陵官音，与南迁士族和侨郡、侨县制度有重要关系，因此弄懂“金陵之音”，就需要把南朝的政治、经济、文化大背景弄清楚。</strong></p>
<p><strong>西晋末年“八王之乱”的直接的政治后果，就是形成了中国历史上第二次大规模的北人南迁浪潮。</strong></p>
<p> <strong>《晋书•王导传》载：“洛京倾复，中州士女避乱江左者十六七。”就是说十分之六七的北方豪族、士族男女都逃到江南去了。</strong></p>
<p><strong>《晋书•地理志》载：“永嘉之乱……幽、冀、青、并、兖五州及徐州之一淮北流人，相率过江淮。” “及胡寇南侵，淮南百姓皆渡江。”</strong></p>
<p><strong>《晋书•郗鉴传》载：鲁人郗鉴初率乡里“千余家，避难于鲁之峄山，三年间，众至数万。”，后又率众屯晋陵（今江苏常州）。</strong></p>
<p><strong>黄河流域的士家豪族和自由民的大规模、集体南迁，前后延续了160多年，是几代人前后相继的行动。学者统计，西晋末和南朝时，南迁北人大约有90多万，占了整个北方人口的八分之一。⑺</strong></p>
<p><strong>北人南迁地，主要是长江流域，即当时的益、荆、扬三州。而扬州地区，即东晋的政治中心，聚集的南迁汉人最多，大约有26万。而这26万北人主要是山东人和与之相邻的苏北人。这26万山东、苏北人主要迁居在长江南岸的建邺（南京）、京口（镇江）、晋陵（常州）及长江北岸的广陵（扬州）等地。⑻</strong></p>
<p><strong>晋元帝司马睿是司马懿的曾孙，琅**</strong>玡**<strong>王司马由的孙子，嗣琅**</strong>玡**<strong>王司马觐的儿子。琅**</strong>玡**<strong>王氏自王祥以来，一直是冠冕盛门。晋司马氏与琅**</strong>玡**<strong>王氏“素相亲善”。</strong> <strong>元帝渡江，就是听从了王导的建议，即“永嘉初，用王导计，始镇建邺。”司马氏要在江南建邺做皇帝，其主要靠山就是琅琊王氏。</strong></p>
<p><strong>晋元帝政治上完全依靠王导，军事上完全依靠王敦，因此民间有“王与马，共天下”之说。</strong></p>
<p><strong>元帝渡江时，跟随大量琅琊国人，“晋乱，琅琊国人随元帝过江千余户。”</strong></p>
<p><strong>元帝过江后，身边参赞机务的也多为琅琊国人，如琅琊王氏、颜氏、诸葛氏、刘氏等，《晋书•诸葛恢传》载：“时王氏为将军，而恢兄弟及颜含并居显要。”说明晋元帝时，琅**</strong>玡**<strong>颜氏的颜含和诸葛氏的恢兄弟，“并居显要”。颜之推乃颜含的八世孙。琅琊颜氏的显赫地位，是从颜含开始东渡江左，辅佐晋元帝在建邺做皇帝开始的。</strong></p>
<p><strong>跟随元帝渡江的琅琊人可用万计。为使这些以氏族、家族为纽带，世家与宾客、部曲结为一体的庞大人群扎根江南，在江南能安居乐业，元帝于太兴三年（公元320年），侨立怀德县于建康，以安置这些琅琊侨民。成帝司马衍又于咸康元年（公元335年），在江乘县（今江苏句容县北60里）境内侨立琅琊郡。东晋政权并根据王导的提议实行了“侨寄法”。所谓“侨寄”，就是把迁到长江流域的北方人，按照在北方时的州、郡、县名，重新命名新地，保持了原来 族群、乡里的稳定性。根据《侨寄法》，在建康周围 江乘（今南京栖霞）、晋陵（今常州）设置了南琅**</strong>玡**<strong>、南东莞、南兰陵等郡县，在武进设立南彭城、南临淮等三郡**</strong>,<strong>**在与建康相对的江北丹徒（今镇江）设南徐州。</strong>                                             </p>
<p><strong>《侨寄法》的另一功能就是设立官位，安置南迁士人。南迁后王导劝元帝选取北方名士百余人做属官。用官位来安抚南迁士家豪族。颜之推在《观我生赋》自注中说：中原士族随晋元帝渡江的有百家，因此江东有《百家谱》，东晋政权要依靠这百家，就必须给这百家官职和特权。范文澜先生说：“东晋政权主要是这一百家的政权”⑼</strong></p>
<p><strong>从洛阳南迁的司马氏政权，身边除王导兄弟外，还有一大批来自琅**</strong>玡**<strong>、兰陵、彭城的青徐士家豪族，他们在建业（建康或曰金陵）周围聚族而居。因此，金陵的语言、语音系统，实际是洛语和青徐方音的杂处或者说结合，而琅**</strong>玡**<strong>、兰陵、彭城的方音在这里占有重要的地位。侨居江南的北方政权**</strong>，要能在江南立住脚，必须与江南的地方势力，即江南的士家豪族，结合起来，以取得他们的配合和支持。因此王导的重要策略就是以北方士族做骨干，用南方士族做辅助。为此，王导在大庭广众下，常有意地讲吴语，来安抚南方士族，这还引起一些北方士族的不满。在北人占主导地位的政治格局下，无论怎么样提倡说吴语，洛语甚至青徐方音在南朝依然占有重要地位，由于聚族而居，青徐方音仍会代代口耳相传。**</p>
<p><strong>周祖谟说：金陵雅言，就是“当时应用的书音和官于金陵的士大夫通用的语言。”</strong></p>
<p><strong>继东晋政权后的江南，是彭城（徐州）刘裕的宋、宋后是萧道成（刘裕的继母是萧氏，萧氏是刘宋的外戚）的齐、齐后是同为萧氏的梁。萧该，又名子宝，祖父萧恢是梁武帝萧衍之弟。而梁武帝萧衍是齐武帝（萧道成之子萧赜）的族弟。南齐皇帝萧道成虽然生在江南，但祖籍是兰陵（今山东省枣庄市峄城镇）。萧道成的高祖萧整，是东晋初年南迁江南的。这样无论南朝宋、齐、梁的皇帝，还是周围的臣僚，都有挥之不去的青徐之根和青徐方音。</strong></p>
<p><strong>在这种背景下，金陵音系，绝对不是单纯的吴音，也不是单纯的洛下之音，而是洛下之音、金陵之音和青徐方音的融合物，是个复合之音。青徐之音，是不可忽视的音韵要素。</strong></p>
<p><strong>参考资料：</strong></p>
<p><strong>⑴王力：《南北朝诗人用韵考》，清华学报1936（11）</strong></p>
<p><strong>⑵、⑹周祖谟：《〈切韵〉的性质和它的音系基础》，中华书局1966年版。</strong></p>
<p><strong>⑶黄淬伯：《论〈切韵〉音系并批判高本汉的论点》，南京大学学报1957年（2）。</strong></p>
<p><strong>⑷邵荣芬：《〈切韵〉音系的性质和它在汉语语音史上的地位》，《中国语文》1961年。</strong></p>
<p><strong>⑸赵振铎：《从〈切韵•序〉论〈切韵〉》，《中国语文》1962年（10）。</strong></p>
<p><strong>⑺谭其骧：《晋永嘉乱后之民族迁徙》，载《燕京学报》十五期。</strong></p>
<p><strong>⑻田余庆：《秦汉魏晋史探微》第341页，中华书局1993年版。</strong></p>
<p><strong>⑼范文澜：《中国通史》第二册第457页，人民出版社1949年版。</strong></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>-杂记</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务核心研究之--编排</title>
    <url>/post/b938b9cc.html</url>
    <content><![CDATA[<p><strong>目录：</strong><br> 一、微服务编排的必要性<br> 二：3种常见的微服务编排方式<br> 1、Orchestration（编制）<br> 2、Choreography（编排）<br> 3、API网关<br> 三、微服务编排的框架（Orchestration方式）<br> 1、流程编排的思路<br> 2、流程编排的模型<br> 3、适配参数<br> 4、流水号<br> 5、调用链分析<br> 四、微服务编排的事务一致性<br> 五、微服务编排的监控工具支撑</p>
<h3 id="一、微服务编排的必要性"><a href="#一、微服务编排的必要性" class="headerlink" title="一、微服务编排的必要性"></a>一、微服务编排的必要性</h3><p>微服务是目前流行的一种新兴的软件架构风格，在微服务体系结构中，可以将应用分解为多个更小颗粒度的服务, 各个服务可以由不同的团队并行独立开发、部署。</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A0%B8%E5%BF%83%E7%A0%94%E7%A9%B6%E4%B9%8B--%E7%BC%96%E6%8E%92/9812895-19404e9a6e7d358f.jpeg" alt="img"></p>
<p>（图片来源：<a href="https://links.jianshu.com/go?to=https://www.nginx.com/blog/introduction-to-microservices/">https://www.nginx.com/blog/introduction-to-microservices/</a>）</p>
<p>以一个出租车调度软件为例，最开始是一个单体应用，应用核心是业务逻辑，由定义服务、域对象和事件的模块完成。尽管也是模块化逻辑，但是最终它还是会打包并部署为单体式应用。随着时间增加，功能逐渐增多，代码越来越多，这个软件就会越来越难维护。这时使用微服务架构就是不错的选择。一个微服务一般完成某个特定的功能，比如定单管理、客户管理等等。每一个微服务都有自己的业务逻辑和适配器。一些微服务还会发布API给其它微服务和应用客户端使用。其它微服务完成一个Web UI，运行时，每一个微服务实例可能是一个Docker容器。</p>
<p>《The Art of Scalability》(中文书名：架构即未来) 一书介绍了一个应用横向扩展所需要遵守的AKF扩展模型。根据AKF扩展模型，横向扩展实际上包含了三个维度，而横向扩展解决方案则是这三个维度上所做工作的结合。X轴表示水平复制，Y轴表示应用功能拆解，Z轴表示按数据拆分。微服务架构模式对应于代表可扩展模型的Y轴。</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A0%B8%E5%BF%83%E7%A0%94%E7%A9%B6%E4%B9%8B--%E7%BC%96%E6%8E%92/9812895-106c00a0e57d0a19.jpeg" alt="img"></p>
<p>当一个系统采用了微服务架构后，原有的业务可能并没有发生变化，但系统已被拆分成了很多新的微服务，与传统架构相比，微服务架构下会更依赖通过各微服务之间的协作来实现一个完整的业务流程，这种协作就是服务编排。编排涉及到RPC、分布式事务等，需要有完善的编排框架来支撑。</p>
<h3 id="二：3种常见的微服务编排方式"><a href="#二：3种常见的微服务编排方式" class="headerlink" title="二：3种常见的微服务编排方式"></a>二：3种常见的微服务编排方式</h3><p>目前有3种常见的微服务编排方式，实现微服务的组合与协调，可根据开发项目的实际情况进行选择。</p>
<h5 id="1、Orchestration（编制）"><a href="#1、Orchestration（编制）" class="headerlink" title="1、Orchestration（编制）"></a>1、Orchestration（编制）</h5><p>Orchestration<strong>面向可执行的流程</strong>：通过一个可执行的流程来协同内部及外部的服务交互，通过流程来控制总体的目标、涉及的操作、服务调用顺序。</p>
<p>Orchestration和BPM、ESB的思想很相似，首先要有一个<strong>流程控制服务</strong>，该服务接收请求，依照业务逻辑规则，依次调用各个微服务，并最终完成处理逻辑。可以把控制服务视作BPM、ESB引擎，微服务视作BPM、ESB的各种组件。</p>
<p>Orchestration实现方案多是<strong>同步</strong>的。</p>
<p><strong>优点</strong>：<br> 流程控制服务时时刻刻都知道每一笔业务究竟进行到了什么地步，监控业务成了相对简单的事情。<br> <strong>缺点</strong>：<br> 1）流程控制服务很容易控制了太多的业务逻辑，耦合度过高，变得臃肿。<br> 2）各个微服务退化为单纯的增删改查，失去自身价值。</p>
<h5 id="2、Choreography（编排）"><a href="#2、Choreography（编排）" class="headerlink" title="2、Choreography（编排）"></a>2、Choreography（编排）</h5><p>Choreography<strong>面向协作</strong>：通过消息的交互序列来控制各个部分资源的交互，参与交互的资源都是对等的，没有集中的控制。</p>
<p>Choreography可以看作一种<strong>消息驱动模式</strong>，或者说是订阅发布模式，每笔业务到来后，各个监听改事件的服务，会主动获取消息，处理，并可以按需发布自己的消息。可以把不同队列看作不同种类的消息，微服务看作消息处理函数。</p>
<p>Choreography实现方案多是<strong>异步</strong>的。</p>
<p><strong>优点</strong>：<br> 耦合度低，每个服务都可以各司其职。<br> <strong>缺点</strong>：<br> 1）业务流程是通过订阅的方式来体现的，很难直接监控每笔业务的处理，因此难于调试。<br> 2）由于没有预定义流程，所以很难在事前保证流程正确性，基本靠事后分析数据来判断。<br> 3）当一个业务流程会嵌入到多个服务中时，维护会很困难。<br> <strong>建议</strong>：<br> 1）小粒度的服务需要组合，服务的粒度越小，越需要组合。<br> 2）增加相应的监控系统，来保证业务顺畅进行。</p>
<h5 id="3、API网关"><a href="#3、API网关" class="headerlink" title="3、API网关"></a>3、API网关</h5><p>API网关可以看作一种简单的<strong>接口聚合/拆分的方式</strong>：每笔业务到来后先到达网关，网关调用各微服务，并最终聚合/拆分需反馈的结果。</p>
<p>API网关其实就是一个<strong>适配网关</strong>，比如对于Web端，可以一个页面同时发起几十个请求，而对于移动端，最好是一个页面就几个请求。而采用API网关，后面的微服务可以是相同的。</p>
<p><strong>优点</strong>：<br> 对外接口相对稳定。<br> <strong>缺点</strong>：<br> 只适合业务逻辑较为简单的场景，业务逻辑过于复杂时，网关接口耦合度及复杂度会急剧升高，变得臃肿。</p>
<h3 id="三、微服务编排的框架（Orchestration方式）"><a href="#三、微服务编排的框架（Orchestration方式）" class="headerlink" title="三、微服务编排的框架（Orchestration方式）"></a>三、微服务编排的框架（Orchestration方式）</h3><p>对编排流程、适配参数、调用链分析等方面思路的考量，构成微服务编排的框架思路。</p>
<h5 id="1、编排流程的思路"><a href="#1、编排流程的思路" class="headerlink" title="1、编排流程的思路"></a>1、编排流程的思路</h5><p>原子服务提供REST接口或者监听事件，通过流程编排这些原子服务来实现一个新的复杂服务。</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A0%B8%E5%BF%83%E7%A0%94%E7%A9%B6%E4%B9%8B--%E7%BC%96%E6%8E%92/9812895-59869d9042a34b9a.jpeg" alt="img"></p>
<h5 id="2、编排流程的模型"><a href="#2、编排流程的模型" class="headerlink" title="2、编排流程的模型"></a>2、编排流程的模型</h5><ul>
<li>活动模型。例如（赋值、invoke（调用）、空）</li>
<li>控制模型。例如（顺序、分支、循环、异常抛出、异常捕获、并行）</li>
</ul>
<p>当然，有很多编排框架提供了更多方便的活动，比如普元的编排框架提供了本地调用、rest调用、webservice调用等活动，从而在使用上更加的方便，有了这些基本的模型，我们就能方便的编排出复杂的业务流程。（如下图）</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A0%B8%E5%BF%83%E7%A0%94%E7%A9%B6%E4%B9%8B--%E7%BC%96%E6%8E%92/9812895-d35bc8d7f8395ed9.jpg" alt="img"></p>
<p>在invoke（调用）的时候我们知道有同步和异步的区别。同步实现起来简单，但是在多级级联编排的时候要避免因为某个服务的长响应时间导致雪崩效应，一般可以通过设置合理的超时时间限流和服务熔断策略来避免；同样，在异步调用的时候，应该能自动缓存上下文和避免缓存爆掉，能自动建立异步响应和请求之间的关联。同样，提到并行也必须考虑不同的聚合方式，比如是部分聚合还是全部聚合。（如下图）</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A0%B8%E5%BF%83%E7%A0%94%E7%A9%B6%E4%B9%8B--%E7%BC%96%E6%8E%92/9812895-8377cd3456f80d6e.jpeg" alt="img"></p>
<h5 id="3、适配参数"><a href="#3、适配参数" class="headerlink" title="3、适配参数"></a>3、适配参数</h5><p>流程编排完成之后，我们还需要给每个被编的服务提供正确的参数，是一个适配的过程。<br> 一个编排服务（abcd）由a、b、c、d服务编排而成，每个服务都会有自己的出参入参。适配的过程就是从上下文中给入参赋值以及将出参的结果写入到上下文中。（如下图）</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A0%B8%E5%BF%83%E7%A0%94%E7%A9%B6%E4%B9%8B--%E7%BC%96%E6%8E%92/9812895-2a22d8fd090186dd.jpg" alt="img"></p>
<p>编排服务执行到不同阶段，组成上下文的模型也是不一样的。从最初服务的开始执行的时候，上下文中只有系统级的参数和入参（请求报文），到执行完一个被编服务后上下文就会增加这个被编服务的出参（响应报文），执行上下文是一个不断增大的过程。所以适配不仅仅存在于编排服务的入参和被编服务的入参之间，还存在于被编服务和在其之前的服务出参之间。（如下图）</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A0%B8%E5%BF%83%E7%A0%94%E7%A9%B6%E4%B9%8B--%E7%BC%96%E6%8E%92/9812895-2535760ad5358385.jpg" alt="img"></p>
<p>实现适配最直接的方式是用手工编码完成点到点的映射赋值，但有更高效的方式，通过使用元数据对所有的出参和入参标记着色，然后就可以自动完成同样颜色之间的自动映射。这种标志着色可以靠数据字典实现。（如下图）</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A0%B8%E5%BF%83%E7%A0%94%E7%A9%B6%E4%B9%8B--%E7%BC%96%E6%8E%92/9812895-c21b666bd375517f.jpeg" alt="img"></p>
<p>这里的数据字典是指抽象出业务含义的基本数据项，如账户，交易额等。通过这些数据字典可以定义出服务所需的的数据结构（服务参数和服务返回值），这样不同的数据结构之间可以按照数据字典进行自动适配。（如下图）</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A0%B8%E5%BF%83%E7%A0%94%E7%A9%B6%E4%B9%8B--%E7%BC%96%E6%8E%92/9812895-0278e379e523dc6c.jpeg" alt="img"></p>
<h5 id="4、流水号"><a href="#4、流水号" class="headerlink" title="4、流水号"></a>4、流水号</h5><p>编排服务在执行上下文的组成模型过程中，框架也会产生一部分数据，这一部分数据主要是流水号(id)和安全方面的考量。按照《基于微服务的企业应用架构设计范式》流水号的生成应该遵循GAIR模式。<br> <strong>GlobalID:</strong> 全局流水号，如果请求中的globalId为空，则编排服务生成，否则保持不变。<br> <strong>AnswerID:**响应流水号，服务提供者生成，可以作为提供者受理的凭证<br> **InRequestID:</strong> 前台流水号，由前台生成<br> **RequestID:**请求流水号，编排服务的协调器生成，生成规则由服务提供者定义。（如下图）</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A0%B8%E5%BF%83%E7%A0%94%E7%A9%B6%E4%B9%8B--%E7%BC%96%E6%8E%92/9812895-e6f9908ac613a8eb.jpg" alt="img"></p>
<h5 id="5、调用链分析"><a href="#5、调用链分析" class="headerlink" title="5、调用链分析"></a>5、调用链分析</h5><p>随着服务的增多，对调用链的分析也会越来越复杂。在一个由很多微服务组成的系统中，他们之间的调用关系会形成复杂的网络。</p>
<p>Google针对服务化应用全链路追踪的问题发表了Dapper论文，介绍了他们如何进行服务追踪分析，其基本思路是在服务调用的请求和响应中加入ID，标明上下游请求的关系，利用这些信息，可以可视化地分析服务调用链路和服务间的依赖关系。（如下图）</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A0%B8%E5%BF%83%E7%A0%94%E7%A9%B6%E4%B9%8B--%E7%BC%96%E6%8E%92/9812895-08e741cd19bab756.jpeg" alt="img"></p>
<p>通过服务调用追踪生成的服务调用栈，可以查看在哪一步出现了错误，以及发现哪里的调用较慢，进行系统优化。（如下图）</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A0%B8%E5%BF%83%E7%A0%94%E7%A9%B6%E4%B9%8B--%E7%BC%96%E6%8E%92/9812895-c83de3f5f84c3723.jpeg" alt="img"></p>
<p>能编排流程，能适配参数，这个编排框架已经具备运行的能力，接下来要考虑的就是事务的一致性问题。</p>
<h3 id="四、微服务编排的事务一致性"><a href="#四、微服务编排的事务一致性" class="headerlink" title="四、微服务编排的事务一致性"></a>四、微服务编排的事务一致性</h3><p>依据CAP理论，分布式系统需要在可用性和一致性之间做出选择。如果选择提供一致性，就需要付出在满足一致性之前阻塞其他并发访问的代价，阻塞持续的时间往往不能确定，尤其是在系统已经表现出高延迟时或者网络故障导致失去连接时，因此，可用性一般是更多人的选择，但是在服务和数据库之间维护数据一致性是非常根本的需求，<strong>编排框架应该选择满足最终一致性。</strong></p>
<p>补偿模式是一种很好的实现最终一致性的途径。 <strong>补偿模式核心思想是：针对每个操作，都要注册一个与其对应的补偿（撤销）操作，一般来说操作本身和其补偿操作会在一个事务里完成，当其后续操作失败后，需要按相反顺序完成前面注册的所有撤销操作。</strong></p>
<p>通过一个实例来说明：一家旅行公司提供预订行程的业务，可以通过公司的网站提前预订飞机票、火车票、酒店等。假设一位客户规划的行程是，(1)上海-北京6月19日9点的某某航班，(2)某某酒店住宿3晚，(3)北京-上海6月22日17点火车。在客户提交行程后，旅行公司的预订行程业务按顺序串行的调用航班预订服务、酒店预订服务、火车预订服务。最后的火车预订服务成功后整个预订业务才算完成。如果火车票预订服务没有调用成功，那么之前预订的航班、酒店都得取消。取消之前预订的酒店、航班即为补偿过程。（如下图）</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A0%B8%E5%BF%83%E7%A0%94%E7%A9%B6%E4%B9%8B--%E7%BC%96%E6%8E%92/9812895-db6d56577f63ea82.jpeg" alt="img"></p>
<p>在补偿模式中，我们要求参与补偿的微服务必须提供补偿操作，并且补偿操作必须是幂等的，补偿框架可以在异常时自动调用补偿操作完成补偿。</p>
<p>跟RPC比，补偿模式的核心价值是少了锁资源的代价，流程也相对简单，但实际操作中，补偿操作不太好定义，其中间状态处理也会比较棘手。</p>
<p>现在RESTful作为一个轻量级的rpc协议已经被广泛采用，能不能很好的支持RESTful服务的事务一致性也是衡量编排框架的是否成熟的一个标准。</p>
<p>一个通过RESTful扩展规范来支持补偿模式事务一致性的思路：通过PATCH的HTTP Method来表示compensation操作，并且支持通过服务来查询编排服务执行的状态。（如下图）</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A0%B8%E5%BF%83%E7%A0%94%E7%A9%B6%E4%B9%8B--%E7%BC%96%E6%8E%92/9812895-bef4b8e5e9f64ce4.jpeg" alt="img"></p>
<blockquote>
<p>补偿模式一个常见的坑：由于是通过rpc的调用，因为网络和调度的关系，可能出现补偿请求比原交易先到达的情况，这会导致补偿操作直接会失败，因为此时原交易尚未发生，最终原交易到达时会被成功的执行，最终就导致了事务不一致。</p>
</blockquote>
<p>填这个坑的办法就是在编排框架发现补偿操作补偿的原交易不存在时，补记录一条原交易的流水，从而保证原交易晚到时会因为记录流水失败而不会成功。（如下图）</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A0%B8%E5%BF%83%E7%A0%94%E7%A9%B6%E4%B9%8B--%E7%BC%96%E6%8E%92/9812895-d4768ca3ccd39816.jpeg" alt="img"></p>
<p>图片描述</p>
<h3 id="五、微服务编排的监控工具支撑"><a href="#五、微服务编排的监控工具支撑" class="headerlink" title="五、微服务编排的监控工具支撑"></a>五、微服务编排的监控工具支撑</h3><p>在生产环境中，我们需要通过查看日志来排除故障，应该有支持日志全路径回放的工具，来帮助我们快速定位故障。</p>
<p>本文所讲的编排实际是编制，是一种集中式的控制，也就意味着如果被编排的服务有响应缓慢的情况，可能会影响到其他服务。这时候我们需要更快的监控来帮助我们发现这类服务，从而尽早优化。监控工具需要具备以下功能：</p>
<ul>
<li>通过可视化分布式系统的模块和他们之间的相互联系来理解系统拓扑。点击某个节点会展示这个模块的详情，比如它当前的状态和请求数量。</li>
<li>实时监控应用内部的活动线程。</li>
<li>可视化请求和响应数量来定位潜在问题（请求时间段分布、错误请求、响应时长等）。</li>
<li>在分布式环境中为每个调用生成可视图，定位瓶颈和失败点。</li>
<li>查看应用上的其他详细信息，比如CPU使用率，内存/垃圾回收，TPS，和JVM参数。</li>
</ul>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>微服务,编排</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据Flink详细教程(终篇)</title>
    <url>/post/c1de84f3.html</url>
    <content><![CDATA[<p>大数据计算框架 <a href="https://flink.apache.org/">Flink</a> 实战教程共分为3篇。涵盖 <a href="https://baike.baidu.com/item/flink/9078426?fr=aladdin">Flink</a> 安装配置、基本原理、核心概念、 流处理 API 和批处理 API、存储及状态一致性、容错机制、实战案例以及面试题讲解等。</p>
<p>本篇为第3篇，主要讲解 <a href="https://flink.apache.org/">Flink</a> 的<strong>实战</strong>案例。第1篇看<a href="d713bc0c.html">这里</a>；第2篇看<a href="7f834cb4.html">这里</a>。</p>
<p>【<strong>仅需一次订阅，作者所有专栏都能看</strong>】</p>
<p>推荐【<strong>Kafka</strong>】<a href="https://bigbird.blog.csdn.net/article/details/108770504">https://bigbird.blog.csdn.net/article/details/108770504</a><br>推荐【<strong>Flink</strong>】<a href="https://blog.csdn.net/hellozpc/article/details/109413465">https://blog.csdn.net/hellozpc/article/details/109413465</a><br>推荐【<strong>SpringBoot</strong>】<a href="https://blog.csdn.net/hellozpc/article/details/107095951">https://blog.csdn.net/hellozpc/article/details/107095951</a><br>推荐【<strong>SpringCloud</strong>】<a href="https://blog.csdn.net/hellozpc/article/details/83692496">https://blog.csdn.net/hellozpc/article/details/83692496</a><br>推荐【<strong>Mybatis</strong>】<a href="https://blog.csdn.net/hellozpc/article/details/80878563">https://blog.csdn.net/hellozpc/article/details/80878563</a><br>推荐【<strong>SnowFlake</strong>】<a href="https://blog.csdn.net/hellozpc/article/details/108248227">https://blog.csdn.net/hellozpc/article/details/108248227</a><br>推荐【<strong>并发限流</strong>】<a href="https://blog.csdn.net/hellozpc/article/details/107582771">https://blog.csdn.net/hellozpc/article/details/107582771</a></p>
<p>本篇在讲解<a href="https://flink.apache.org/">Flink</a>案例之前先补充了几个知识点。</p>
<h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul>
<li><ul>
<li><ul>
<li><a href="#BroadCast_StateBroadCast_Stream_19">BroadCast State和BroadCast Stream</a></li>
<li><a href="#RocksDB_425">RocksDB</a></li>
<li><a href="#QueryableState_502">QueryableState</a></li>
<li><ul>
<li><a href="#QueryableState_506">QueryableState组件</a></li>
<li><a href="#Queryable_State_514">开启Queryable State</a></li>
<li><a href="#Flink_536">在Flink中使状态可查询</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#_736">实战案例</a></li>
<li><ul>
<li><a href="#UV_738">网页UV统计</a></li>
<li><ul>
<li><a href="#_742">日志数据实体类</a></li>
<li><a href="#Flink_754">Flink应用程序</a></li>
<li><a href="#topic_851">创建topic</a></li>
<li><a href="#jarflink_895">上传jar到flink集群中运行</a></li>
<li><a href="#Flink_903">远程提交Flink应用</a></li>
<li><a href="#springbootflink_915">springboot启动flink任务</a></li>
<li><ul>
<li><a href="#pomxml_917">pom.xml</a></li>
<li><a href="#SpringBoot_1067">SpringBoot入口类</a></li>
<li><a href="#Flink_1089">Flink应用程序</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#_1210">头条实时热榜统计</a></li>
<li><a href="#_1569">订单超时检测</a></li>
<li><ul>
<li><a href="#CEP_1573">CEP简介</a></li>
<li><a href="#_1615">近邻模式</a></li>
<li><a href="#_1651">模式检测</a></li>
</ul>
</li>
<li><a href="#_1840">订单系统实时对账</a></li>
</ul>
</li>
<li><a href="#_2012">面试题集锦</a></li>
</ul>
</li>
</ul>
<h3 id="BroadCast-State和BroadCast-Stream"><a href="#BroadCast-State和BroadCast-Stream" class="headerlink" title="BroadCast State和BroadCast Stream"></a>BroadCast State和BroadCast Stream</h3><p>BroadCastStream是由BroadCastState(广播状态)组成的数据流。BroadcastStream通常是通过调用DataStream的 broadcast() 方法返回，该方法的入参是一个 MapStateDescriptor对象。BroadcastStream后面不支持算子操作，只能使用DataStream的connect方法去连接BroadcastStream，得到一个BroadcastConnectedStream。</p>
<p>BroadcastState是Flink支持的Operator State的一种。使用广播状态可以将输入流中的数据广播(broadcast)到下游的operator的每个并发Task中。由于这些数据能够被所有Task共享，因此BroadcastState经常用在一些需要共享数据的场景，比如配置分发，这样每个Task都可以读取到最新的配置文件数据。</p>
<p>使用Broadcast State的一般步骤是：先创建一个Keyed或Non-Keyed的Data Stream，再调用DataStream的 broadcast() 方法得到一个Broadcasted Stream，该方法传入的是一个MapStateDescriptor对象。最后将处理数据的Data Stream连接到Broadcasted Stream上得到一个BroadcastConnectedStream。这样就将Broadcast State广播到Data Stream下游operator的每个并发实例中。</p>
<p>若业务Data Stream是Keyed Stream，则连接到Broadcasted Stream后，添加的处理函数为KeyedBroadcastProcessFunction。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">KeyedBroadcastProcessFunction</span>&lt;KS, IN1, IN2, OUT&gt; <span class="keyword">extends</span> <span class="title class_">BaseBroadcastProcessFunction</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">processElement</span><span class="params">(<span class="keyword">final</span> IN1 value, <span class="keyword">final</span> ReadOnlyContext ctx, <span class="keyword">final</span> Collector&lt;OUT&gt; out)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">processBroadcastElement</span><span class="params">(<span class="keyword">final</span> IN2 value, <span class="keyword">final</span> Context ctx, <span class="keyword">final</span> Collector&lt;OUT&gt; out)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>泛型参数的含义如下：</p>
<p>KS：Keyed Stream的keyBy的元素类型</p>
<p>IN1：非Broadcast的Data Stream中的数据记录的类型</p>
<p>IN2：Broadcast Stream中的数据记录的类型</p>
<p>OUT：经过处理后返回数据的数据类型</p>
<p>若Data Stream是Non-Keyed Stream，则连接到Broadcasted Stream后，添加的处理函数为BroadcastProcessFunction。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BroadcastProcessFunction</span>&lt;IN1, IN2, OUT&gt; <span class="keyword">extends</span> <span class="title class_">BaseBroadcastProcessFunction</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">processElement</span><span class="params">(<span class="keyword">final</span> IN1 value, <span class="keyword">final</span> ReadOnlyContext ctx, <span class="keyword">final</span> Collector&lt;OUT&gt; out)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">processBroadcastElement</span><span class="params">(<span class="keyword">final</span> IN2 value, <span class="keyword">final</span> Context ctx, <span class="keyword">final</span> Collector&lt;OUT&gt; out)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述泛型参数的含义与KeyedBroadcastProcessFunction中的相同，只是没有keyBy操作，所以就没有KS泛型参数。</p>
<p>下面一个完整的例子来阐述如何使用广播处理函数。</p>
<p>需求1)：自定义一个数据源，构建一个广播流，定时读取配置文件。在处理流中应用最新的配置，如果业务数据流中的元素在配置文件中开启处理标记则处理，否则忽略。</p>
<p>编写自定义数据源读定时取配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfigSource</span> <span class="keyword">implements</span> <span class="title class_">SourceFunction</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isRunning</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">confPath</span> <span class="operator">=</span> <span class="string">&quot;F:\\data\\conf.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * run方法里编写数据产生逻辑</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(SourceContext&lt;String&gt; ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">while</span> (isRunning) &#123;</span><br><span class="line">            List&lt;String&gt; lines = Files.readAllLines(Paths.get(confPath));</span><br><span class="line">            lines.forEach(ctx::collect);</span><br><span class="line">            Thread.sleep(<span class="number">30000</span>);<span class="comment">//每隔30秒更新一次配置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cancel</span><span class="params">()</span> &#123;</span><br><span class="line">        isRunning = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编写Flink应用程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BroadCastDemo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9001</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">hostname</span> <span class="operator">=</span> <span class="string">&quot;192.168.174.136&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">delimiter</span> <span class="operator">=</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//定义MapStateDescriptor来保存要广播的数据</span></span><br><span class="line">        <span class="keyword">final</span> MapStateDescriptor&lt;String, String&gt; CONFIG_DESCRIPTOR = <span class="keyword">new</span> <span class="title class_">MapStateDescriptor</span>&lt;&gt;(</span><br><span class="line">                <span class="string">&quot;config&quot;</span>,</span><br><span class="line">                BasicTypeInfo.STRING_TYPE_INFO,</span><br><span class="line">                BasicTypeInfo.STRING_TYPE_INFO);</span><br><span class="line">        <span class="comment">//创建广播流，向下游广播配置数据</span></span><br><span class="line">        BroadcastStream&lt;String&gt; broadcastStream = env.addSource(<span class="keyword">new</span> <span class="title class_">MyConfigSource</span>()).broadcast(CONFIG_DESCRIPTOR);</span><br><span class="line">        <span class="comment">//创建业务数据流</span></span><br><span class="line">        <span class="comment">//连接socket获取输入数据</span></span><br><span class="line">        DataStreamSource&lt;String&gt; dataStreamSource = env.socketTextStream(hostname, port, delimiter);</span><br><span class="line">        dataStreamSource.connect(broadcastStream).process(<span class="keyword">new</span> <span class="title class_">BroadcastProcessFunction</span>&lt;String, String, Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processElement</span><span class="params">(String value, ReadOnlyContext ctx, Collector&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">//获取广播数据</span></span><br><span class="line">                ReadOnlyBroadcastState&lt;String, String&gt; broadcastState = ctx.getBroadcastState(CONFIG_DESCRIPTOR);</span><br><span class="line">                <span class="type">String</span> <span class="variable">flag</span> <span class="operator">=</span> broadcastState.get(value);</span><br><span class="line">                <span class="comment">//如果key对应的value为1，则表示该数据要被处理</span></span><br><span class="line">                <span class="keyword">if</span> (flag != <span class="literal">null</span> &amp;&amp; flag.equals(<span class="string">&quot;1&quot;</span>)) &#123;</span><br><span class="line">                    out.collect(value + <span class="string">&quot;被处理了&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processBroadcastElement</span><span class="params">(String value, Context ctx, Collector&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;update config:&quot;</span> + value);</span><br><span class="line">                String[] split = value.split(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> split[<span class="number">0</span>];</span><br><span class="line">                <span class="type">String</span> <span class="variable">flag</span> <span class="operator">=</span> split[<span class="number">1</span>];</span><br><span class="line">                <span class="comment">//接收广播数据，更新State</span></span><br><span class="line">                BroadcastState&lt;String, String&gt; broadcastState = ctx.getBroadcastState(CONFIG_DESCRIPTOR);</span><br><span class="line">                broadcastState.put(key, flag);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).print();</span><br><span class="line"></span><br><span class="line">        env.execute(<span class="string">&quot;broadcast&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置文件conf.txt：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cat=<span class="number">1</span></span><br><span class="line">dog=<span class="number">0</span></span><br><span class="line">fish=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>linux控制台输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 ~]# nc -lk 9001</span><br><span class="line">cat</span><br><span class="line">dog</span><br><span class="line">fish</span><br></pre></td></tr></table></figure>
<p>idea控制台输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">update config:cat=<span class="number">1</span></span><br><span class="line">update config:dog=<span class="number">0</span></span><br><span class="line">update config:fish=<span class="number">1</span></span><br><span class="line">cat被处理了</span><br><span class="line">fish被处理了</span><br></pre></td></tr></table></figure>
<p>修改conf.txt</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cat=<span class="number">1</span></span><br><span class="line">dog=<span class="number">1</span></span><br><span class="line">fish=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>linux控制台输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dog</span><br></pre></td></tr></table></figure>
<p>IDEA控制台输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">update config:cat=<span class="number">1</span></span><br><span class="line">update config:dog=<span class="number">1</span></span><br><span class="line">update config:fish=<span class="number">1</span></span><br><span class="line">dog被处理了</span><br></pre></td></tr></table></figure>
<p>需求2)：从kafka topic中读取各个城市的网约车最高限速配置，并实时处理司机上报的里程数据，如果超速则告警。司机里程实时上报也使用kafka topic来接收。</p>
<p>kafka的详细教程参见博文 <a href="https://blog.csdn.net/hellozpc/article/details/105680217">《kafka详细教程》</a><a href="https://blog.csdn.net/hellozpc/article/details/105680217">https://blog.csdn.net/hellozpc/article/details/105680217</a></p>
<p>pom依赖引入kafka连接器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-kafka_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Java 代码</p>
<p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DriverUploadInfo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String driverId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前时间戳(毫秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> timestamp;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前里程表记录的总里程数(米)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> totalMileage;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 城市编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String cityCode;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;DriverUploadInfo&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;driverId=&#x27;&quot;</span> + driverId + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, timestamp=&quot;</span> + timestamp +</span><br><span class="line">                <span class="string">&quot;, totalMileage=&quot;</span> + totalMileage +</span><br><span class="line">                <span class="string">&quot;, cityCode=&#x27;&quot;</span> + cityCode + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Flink应用程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BroadCastDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//kafka配置参数</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        props.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;192.168.174.136:9092&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;zookeeper.connect&quot;</span>, <span class="string">&quot;192.168.174.136:2181&quot;</span>);</span><br><span class="line">        <span class="comment">//props.put(&quot;group.id&quot;, &quot;metric-group&quot;);</span></span><br><span class="line">        props.put(<span class="string">&quot;key.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;value.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;auto.offset.reset&quot;</span>, <span class="string">&quot;latest&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义MapStateDescriptor来保存要广播的数据</span></span><br><span class="line">        <span class="keyword">final</span> MapStateDescriptor&lt;String, Double&gt; CONFIG_DESCRIPTOR = <span class="keyword">new</span> <span class="title class_">MapStateDescriptor</span>&lt;&gt;(</span><br><span class="line">                <span class="string">&quot;speed_config&quot;</span>,</span><br><span class="line">                BasicTypeInfo.STRING_TYPE_INFO,</span><br><span class="line">                BasicTypeInfo.DOUBLE_TYPE_INFO);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置数据流，读取配置</span></span><br><span class="line">        BroadcastStream&lt;String&gt; broadcastStream = env.addSource(<span class="keyword">new</span> <span class="title class_">FlinkKafkaConsumer</span>&lt;&gt;(</span><br><span class="line">                <span class="string">&quot;city_speed_config&quot;</span>,  <span class="comment">//kafka topic</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">SimpleStringSchema</span>(),  <span class="comment">// String 序列化</span></span><br><span class="line">                props)).broadcast(CONFIG_DESCRIPTOR);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//业务数据流，处理数据</span></span><br><span class="line">        DataStreamSource&lt;String&gt; dataStreamSource = env.addSource(<span class="keyword">new</span> <span class="title class_">FlinkKafkaConsumer</span>&lt;&gt;(</span><br><span class="line">                <span class="string">&quot;driver_upload&quot;</span>,  <span class="comment">//kafka topic</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">SimpleStringSchema</span>(),  <span class="comment">// String 序列化</span></span><br><span class="line">                props));</span><br><span class="line"></span><br><span class="line">        KeyedStream&lt;DriverUploadInfo, String&gt; driverStream = dataStreamSource.map(<span class="keyword">new</span> <span class="title class_">MapFunction</span>&lt;String, DriverUploadInfo&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> DriverUploadInfo <span class="title function_">map</span><span class="params">(String value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="type">DriverUploadInfo</span> <span class="variable">driverUploadInfo</span> <span class="operator">=</span> JSON.parseObject(value, DriverUploadInfo.class);</span><br><span class="line">                <span class="keyword">return</span> driverUploadInfo;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).keyBy(<span class="keyword">new</span> <span class="title class_">KeySelector</span>&lt;DriverUploadInfo, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getKey</span><span class="params">(DriverUploadInfo value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> value.driverId;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        driverStream.connect(broadcastStream).process(<span class="keyword">new</span> <span class="title class_">KeyedBroadcastProcessFunction</span>&lt;Object, DriverUploadInfo, String, Object&gt;() &#123;</span><br><span class="line">            <span class="comment">//使用ValueState保存上一次司机状态信息</span></span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">transient</span> ValueState&lt;DriverUploadInfo&gt; driverState;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                ValueStateDescriptor&lt;DriverUploadInfo&gt; descriptor = <span class="keyword">new</span> <span class="title class_">ValueStateDescriptor</span>&lt;&gt;(<span class="string">&quot;driverInfoState&quot;</span>, DriverUploadInfo.class);</span><br><span class="line">                driverState = getRuntimeContext().getState(descriptor);<span class="comment">//注册状态</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processElement</span><span class="params">(DriverUploadInfo driverUploadInfo, ReadOnlyContext ctx, Collector&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;received event:&quot;</span> + driverUploadInfo);</span><br><span class="line">                ReadOnlyBroadcastState&lt;String, Double&gt; broadcastState = ctx.getBroadcastState(CONFIG_DESCRIPTOR);</span><br><span class="line">                <span class="type">Double</span> <span class="variable">speedLimit</span> <span class="operator">=</span> broadcastState.get(driverUploadInfo.cityCode);</span><br><span class="line"></span><br><span class="line">                <span class="type">DriverUploadInfo</span> <span class="variable">previousInfo</span> <span class="operator">=</span> driverState.value();</span><br><span class="line">                <span class="keyword">if</span> (previousInfo != <span class="literal">null</span> &amp;&amp; speedLimit != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//计算平均车速，通过里程表数差除以时间戳之差求得这段时间内的平均速度</span></span><br><span class="line">                    <span class="type">double</span> <span class="variable">distance</span> <span class="operator">=</span> driverUploadInfo.totalMileage - previousInfo.totalMileage;</span><br><span class="line">                    <span class="type">double</span> <span class="variable">interval</span> <span class="operator">=</span> (driverUploadInfo.timestamp - previousInfo.timestamp) / <span class="number">1000</span>;</span><br><span class="line">                    <span class="type">double</span> <span class="variable">speed</span> <span class="operator">=</span> distance / interval;</span><br><span class="line">                    System.out.println(<span class="string">&quot;current speedLimit:&quot;</span> + speedLimit + <span class="string">&quot;,current speed:&quot;</span> + speed);</span><br><span class="line">                    <span class="keyword">if</span> (speed &gt; speedLimit) &#123;</span><br><span class="line">                        out.collect(<span class="keyword">new</span> <span class="title class_">Tuple2</span>&lt;String, Double&gt;(driverUploadInfo.driverId + <span class="string">&quot;已超速&quot;</span>, speed));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//更新状态</span></span><br><span class="line">                driverState.update(driverUploadInfo);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processBroadcastElement</span><span class="params">(String value, Context ctx, Collector&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;update config:&quot;</span> + value);</span><br><span class="line">                List&lt;CityConfig&gt; cityConfigs = JSON.parseArray(value, CityConfig.class);</span><br><span class="line">                BroadcastState&lt;String, Double&gt; broadcastState = ctx.getBroadcastState(CONFIG_DESCRIPTOR);</span><br><span class="line">                cityConfigs.forEach(e -&gt; &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        broadcastState.put(e.cityCode, e.speedLimit);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                        ex.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).print();</span><br><span class="line"></span><br><span class="line">        env.execute(<span class="string">&quot;Broadcast State demo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在linux上启动Kafka集群测试。</p>
<p>创建配置topic，topic名称city_speed_config</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-topics.sh --create --topic city_speed_config --bootstrap-server 192.168.174.136:9092</span><br></pre></td></tr></table></figure>
<p>创建业务数据topic接收司机上报数据，topic名称driver_upload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-topics.sh --create --topic driver_upload --bootstrap-server 192.168.174.136:9092</span><br></pre></td></tr></table></figure>
<p>查看主题列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-topics.sh --list --bootstrap-server 192.168.174.136:9092</span><br></pre></td></tr></table></figure>
<p>运行Java程序，启动Flink作业。</p>
<p>使用Kafka生产者脚本发送消息到主题city_speed_config：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-console-producer.sh --topic city_speed_config --bootstrap-server 192.168.174.136:9092</span><br></pre></td></tr></table></figure>
<p>输入 <code>[&#123;&quot;cityCode&quot;:&quot;320100&quot;,&quot;speedLimit&quot;:&quot;45&quot;&#125;,&#123;&quot;cityCode&quot;:&quot;320101&quot;,&quot;speedLimit&quot;:&quot;55&quot;&#125;]</code></p>
<p>使用Kafka生产者脚本发送消息到主题driver_upload ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-console-producer.sh --topic driver_upload --bootstrap-server 192.168.174.136:9092</span><br></pre></td></tr></table></figure>
<p>一条一条输入下列数据，观察IDEA控制台的输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;&quot;driverId&quot;:&quot;D10001&quot;,&quot;cityCode&quot;:&quot;320100&quot;,&quot;timestamp&quot;:1607347920499,&quot;totalMileage&quot;:1000&#125;</span><br><span class="line">&#123;&quot;driverId&quot;:&quot;D10001&quot;,&quot;cityCode&quot;:&quot;320100&quot;,&quot;timestamp&quot;:1607347921501,&quot;totalMileage&quot;:1040&#125;</span><br><span class="line">&#123;&quot;driverId&quot;:&quot;D10001&quot;,&quot;cityCode&quot;:&quot;320100&quot;,&quot;timestamp&quot;:1607347922503,&quot;totalMileage&quot;:1090&#125;</span><br><span class="line">&#123;&quot;driverId&quot;:&quot;D10001&quot;,&quot;cityCode&quot;:&quot;320100&quot;,&quot;timestamp&quot;:1607347923503,&quot;totalMileage&quot;:1120&#125;</span><br><span class="line">1234</span><br><span class="line">&#123;&quot;driverId&quot;:&quot;D10002&quot;,&quot;cityCode&quot;:&quot;320101&quot;,&quot;timestamp&quot;:1607347920499,&quot;totalMileage&quot;:1000&#125;</span><br><span class="line">&#123;&quot;driverId&quot;:&quot;D10002&quot;,&quot;cityCode&quot;:&quot;320101&quot;,&quot;timestamp&quot;:1607347921501,&quot;totalMileage&quot;:1040&#125;</span><br><span class="line">&#123;&quot;driverId&quot;:&quot;D10002&quot;,&quot;cityCode&quot;:&quot;320101&quot;,&quot;timestamp&quot;:1607347922503,&quot;totalMileage&quot;:1095&#125;</span><br><span class="line">&#123;&quot;driverId&quot;:&quot;D10002&quot;,&quot;cityCode&quot;:&quot;320101&quot;,&quot;timestamp&quot;:1607347923503,&quot;totalMileage&quot;:1151&#125;</span><br></pre></td></tr></table></figure>
<p>IDEA控制台输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">update config:[&#123;<span class="string">&quot;cityCode&quot;</span>:<span class="string">&quot;320100&quot;</span>,<span class="string">&quot;speedLimit&quot;</span>:<span class="string">&quot;45&quot;</span>&#125;,&#123;<span class="string">&quot;cityCode&quot;</span>:<span class="string">&quot;320101&quot;</span>,<span class="string">&quot;speedLimit&quot;</span>:<span class="string">&quot;55&quot;</span>&#125;]  </span><br><span class="line">received event:DriverUploadInfo&#123;driverId=<span class="string">&#x27;D10001&#x27;</span>, timestamp=<span class="number">1607347920499</span>, totalMileage=<span class="number">1000.0</span>, cityCode=<span class="string">&#x27;320100&#x27;</span>&#125;</span><br><span class="line">received event:DriverUploadInfo&#123;driverId=<span class="string">&#x27;D10001&#x27;</span>, timestamp=<span class="number">1607347921501</span>, totalMileage=<span class="number">1040.0</span>, cityCode=<span class="string">&#x27;320100&#x27;</span>&#125;</span><br><span class="line">current speedLimit:<span class="number">45.0</span>,current speed:<span class="number">40.0</span></span><br><span class="line">received event:DriverUploadInfo&#123;driverId=<span class="string">&#x27;D10001&#x27;</span>, timestamp=<span class="number">1607347922503</span>, totalMileage=<span class="number">1090.0</span>, cityCode=<span class="string">&#x27;320100&#x27;</span>&#125;</span><br><span class="line">current speedLimit:<span class="number">45.0</span>,current speed:<span class="number">50.0</span></span><br><span class="line">(D10001已超速,<span class="number">50.0</span>)</span><br><span class="line">received event:DriverUploadInfo&#123;driverId=<span class="string">&#x27;D10001&#x27;</span>, timestamp=<span class="number">1607347923503</span>, totalMileage=<span class="number">1120.0</span>, cityCode=<span class="string">&#x27;320100&#x27;</span>&#125;</span><br><span class="line">current speedLimit:<span class="number">45.0</span>,current speed:<span class="number">30.0</span></span><br><span class="line">received event:DriverUploadInfo&#123;driverId=<span class="string">&#x27;D10002&#x27;</span>, timestamp=<span class="number">1607347920499</span>, totalMileage=<span class="number">1000.0</span>, cityCode=<span class="string">&#x27;320101&#x27;</span>&#125;</span><br><span class="line">received event:DriverUploadInfo&#123;driverId=<span class="string">&#x27;D10002&#x27;</span>, timestamp=<span class="number">1607347921501</span>, totalMileage=<span class="number">1040.0</span>, cityCode=<span class="string">&#x27;320101&#x27;</span>&#125;</span><br><span class="line">current speedLimit:<span class="number">55.0</span>,current speed:<span class="number">40.0</span></span><br><span class="line">received event:DriverUploadInfo&#123;driverId=<span class="string">&#x27;D10002&#x27;</span>, timestamp=<span class="number">1607347922503</span>, totalMileage=<span class="number">1095.0</span>, cityCode=<span class="string">&#x27;320101&#x27;</span>&#125;</span><br><span class="line">current speedLimit:<span class="number">55.0</span>,current speed:<span class="number">55.0</span></span><br><span class="line">received event:DriverUploadInfo&#123;driverId=<span class="string">&#x27;D10002&#x27;</span>, timestamp=<span class="number">1607347923503</span>, totalMileage=<span class="number">1151.0</span>, cityCode=<span class="string">&#x27;320101&#x27;</span>&#125;</span><br><span class="line">current speedLimit:<span class="number">55.0</span>,current speed:<span class="number">56.0</span></span><br><span class="line">(D10002已超速,<span class="number">56.0</span>)</span><br></pre></td></tr></table></figure>
<p>重新发送配置数据到主题city_speed_config：</p>
<p>[{“cityCode”:“320100”,“speedLimit”:“60”},{“cityCode”:“320101”,“speedLimit”:“40”}]</p>
<p>再次发送业务数据到主题driver_upload 验证配置修改是否生效：</p>
<p>{“driverId”:“D10001”,“cityCode”:“320100”,“timestamp”:1607347920499,“totalMileage”:1000}</p>
<p>{“driverId”:“D10001”,“cityCode”:“320100”,“timestamp”:1607347921501,“totalMileage”:1061}</p>
<p>{“driverId”:“D10001”,“cityCode”:“320101”,“timestamp”:1607347922501,“totalMileage”:1112}</p>
<p>IDEA控制台输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">update config:[&#123;<span class="string">&quot;cityCode&quot;</span>:<span class="string">&quot;320100&quot;</span>,<span class="string">&quot;speedLimit&quot;</span>:<span class="string">&quot;60&quot;</span>&#125;,&#123;<span class="string">&quot;cityCode&quot;</span>:<span class="string">&quot;320101&quot;</span>,<span class="string">&quot;speedLimit&quot;</span>:<span class="string">&quot;40&quot;</span>&#125;]</span><br><span class="line">received event:DriverUploadInfo&#123;driverId=<span class="string">&#x27;D10001&#x27;</span>, timestamp=<span class="number">1607347920499</span>, totalMileage=<span class="number">1000.0</span>, cityCode=<span class="string">&#x27;320100&#x27;</span>&#125;</span><br><span class="line">current speedLimit:<span class="number">60.0</span>,current speed:<span class="number">40.0</span></span><br><span class="line">received event:DriverUploadInfo&#123;driverId=<span class="string">&#x27;D10001&#x27;</span>, timestamp=<span class="number">1607347921501</span>, totalMileage=<span class="number">1061.0</span>, cityCode=<span class="string">&#x27;320100&#x27;</span>&#125;</span><br><span class="line">current speedLimit:<span class="number">60.0</span>,current speed:<span class="number">61.0</span></span><br><span class="line">(D10001已超速,<span class="number">61.0</span>)</span><br><span class="line">received event:DriverUploadInfo&#123;driverId=<span class="string">&#x27;D10001&#x27;</span>, timestamp=<span class="number">1607347922501</span>, totalMileage=<span class="number">1112.0</span>, cityCode=<span class="string">&#x27;320101&#x27;</span>&#125;</span><br><span class="line">current speedLimit:<span class="number">40.0</span>,current speed:<span class="number">51.0</span></span><br><span class="line">(D10001已超速,<span class="number">51.0</span>)</span><br></pre></td></tr></table></figure>
<p>可见配置修改已经生效！至此，广播流的案例完结。</p>
<h3 id="RocksDB"><a href="#RocksDB" class="headerlink" title="RocksDB"></a>RocksDB</h3><p>RocksDB是使用C++编写的嵌入式kv存储引擎，其键值均允许使用二进制流。由Facebook基于levelDB开发， 提供向后兼容的levelDB API。RocksDB使用LSM存储引擎，这也是许多非关系型数据库比如Hbase的核心思想。RocksDB支持多种压缩算法，配置灵活，存储层可以直接使用内存，使用Flash，使用硬盘或者HDFS。</p>
<p>以RocksDB的Java驱动为例，来演示一下RocksDB的使用。</p>
<p>引入pom依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.rocksdb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocksdbjni<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.13.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Java代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.rocksdb.Options;</span><br><span class="line"><span class="keyword">import</span> org.rocksdb.RocksDB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RocksDemo</span> &#123;</span><br><span class="line">    <span class="comment">// RocksDB是由C++编写，在Java中使用首先需要加载JNI Native库</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// a static method that loads the RocksDB C++ library.</span></span><br><span class="line">        RocksDB.loadLibrary();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// the Options class contains a set of configurable DB options that determines the behaviour of the database.</span></span><br><span class="line">        <span class="comment">// 创建配置</span></span><br><span class="line">        <span class="type">Options</span> <span class="variable">dbOpt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Options</span>();</span><br><span class="line">        <span class="comment">// 当数据库不存在时自动创建(路径中的上层目录需要先创建好)</span></span><br><span class="line">        dbOpt.setCreateIfMissing(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 指定RocksDB文件存储位置，默认是本地文件，存储在本地磁盘；也可以使用分布式文件系统比如HDFS</span></span><br><span class="line">        <span class="type">RocksDB</span> <span class="variable">rdb</span> <span class="operator">=</span> RocksDB.open(dbOpt, <span class="string">&quot;d:\\data\\rocksdb&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// RocksDB以字节流形式保存数据</span></span><br><span class="line">        <span class="type">byte</span>[] key = <span class="string">&quot;data&quot;</span>.getBytes();</span><br><span class="line">        <span class="type">byte</span>[] value = <span class="string">&quot;hello rocks db&quot;</span>.getBytes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用put方法写入数据</span></span><br><span class="line">        rdb.put(key, value);</span><br><span class="line">        System.out.println(<span class="string">&quot;数据写入到RocksDB&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用get方法读取数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;从RocksDB读取数据，key = &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(key) + <span class="string">&quot;，value=&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(rdb.get(key)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除数据</span></span><br><span class="line">        rdb.delete(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        rdb.close();</span><br><span class="line">        dbOpt.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述入门案例演示了RocksDB的存储和查询，那么在Flink中如何使用RocksDB作为状态后端存储呢？</p>
<p>引入pom依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-statebackend-rocksdb_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>设置RocksDB状态后端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">env.setStateBackend(<span class="keyword">new</span> <span class="title class_">RocksDBStateBackend</span>(<span class="string">&quot;file:///D://data//rocksdb_flink&quot;</span>, <span class="literal">true</span>));</span><br></pre></td></tr></table></figure>
<h3 id="QueryableState"><a href="#QueryableState" class="headerlink" title="QueryableState"></a>QueryableState</h3><p>上述案例中，状态后端存储的状态数据我们是没法直接读取的，都是二进制流。Flink提供了一种获取运行时状态的机制，让我们可以实时获取到Job运行时的State。这就是可查询状态(Queryable State)服务，顾名思义就是允许用户从外部系统(如业务系统)中查询Flink作业内部的状态(State)。在一些需要给外部系统开放状态查询的场景可以使用此特性。</p>
<h4 id="QueryableState组件"><a href="#QueryableState组件" class="headerlink" title="QueryableState组件"></a>QueryableState组件</h4><p>QueryableStateClient：客户端组件，可以独立于Flink集群运行，用于提交用户查询请求。</p>
<p>QueryableStateClientProxy：代理组件，运行在每个TaskManager上(即在Flink集群中)，负责接收客户端的请求。客户端的查询请求通常带一个key，代理组件从JobManager处查得key所属的TaskManager，将客户端请求转发到该TaskManager上运行的QueryableStateServer中，并将用户查询的状态结果转发给客户端。</p>
<p>QueryableStateServer：状态查询组件，运行在每个TaskManager上，负责管理本地状态，处理客户端的查询。</p>
<h4 id="开启Queryable-State"><a href="#开启Queryable-State" class="headerlink" title="开启Queryable State"></a>开启Queryable State</h4><p>引入pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-queryable-state-runtime_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>本地代码中开启Queryable State服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Configuration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">config.setInteger(ConfigOptions.key(<span class="string">&quot;rest.port&quot;</span>).intType().defaultValue(<span class="number">8081</span>), <span class="number">8081</span>);</span><br><span class="line"><span class="comment">//开启Queryable State服务</span></span><br><span class="line">config.setBoolean(QueryableStateOptions.ENABLE_QUERYABLE_STATE_PROXY_SERVER, <span class="literal">true</span>);</span><br><span class="line"><span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.createLocalEnvironmentWithWebUI(config);</span><br></pre></td></tr></table></figure>
<h4 id="在Flink中使状态可查询"><a href="#在Flink中使状态可查询" class="headerlink" title="在Flink中使状态可查询"></a>在Flink中使状态可查询</h4><p>有2种方式设置状态可查询。</p>
<p>1）QueryableStateStream</p>
<p>在将数据流转换为KeyedStream后调用asQueryableState()方法返回一个QueryableStateStream数据流。</p>
<p>需求：自定义数据源，接收用户每秒上报1个随机数。每隔10秒统计1次每个用户这10秒内上传的最大数值输出。并开启状态可查询，使用客户端每秒查一次指定用户的状态并输出。</p>
<p>自定义数据源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDataSource</span> <span class="keyword">implements</span> <span class="title class_">SourceFunction</span>&lt;Tuple2&lt;String, Integer&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isRunning</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * run方法里编写数据产生逻辑，假设有3个用户，他们每秒钟上传一个数字</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(SourceContext&lt;Tuple2&lt;String, Integer&gt;&gt; ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SecureRandom</span> <span class="variable">secureRandom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecureRandom</span>();</span><br><span class="line">        <span class="keyword">while</span> (isRunning) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> secureRandom.nextInt(<span class="number">1000</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> secureRandom.nextInt(<span class="number">1000</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> secureRandom.nextInt(<span class="number">1000</span>);</span><br><span class="line">            Tuple2&lt;String, Integer&gt; hd = <span class="keyword">new</span> <span class="title class_">Tuple2</span>&lt;&gt;(<span class="string">&quot;恒大&quot;</span>, i1);</span><br><span class="line">            System.out.println(<span class="string">&quot;source time:&quot;</span> + LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>)) + <span class="string">&quot;,value:&quot;</span> + hd.toString());</span><br><span class="line"></span><br><span class="line">            Tuple2&lt;String, Integer&gt; le = <span class="keyword">new</span> <span class="title class_">Tuple2</span>&lt;&gt;(<span class="string">&quot;刘二&quot;</span>, i2);</span><br><span class="line">            System.out.println(<span class="string">&quot;source time:&quot;</span> + LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>)) + <span class="string">&quot;,value:&quot;</span> + le.toString());</span><br><span class="line"></span><br><span class="line">            Tuple2&lt;String, Integer&gt; zs = <span class="keyword">new</span> <span class="title class_">Tuple2</span>&lt;&gt;(<span class="string">&quot;张三&quot;</span>, i3);</span><br><span class="line">            System.out.println(<span class="string">&quot;source time:&quot;</span> + LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>)) + <span class="string">&quot;,value:&quot;</span> + zs.toString());</span><br><span class="line"></span><br><span class="line">            ctx.collect(hd);</span><br><span class="line">            ctx.collect(le);</span><br><span class="line">            ctx.collect(zs);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cancel</span><span class="params">()</span> &#123;</span><br><span class="line">        isRunning = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>flink应用代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueryableState</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        config.setInteger(ConfigOptions.key(<span class="string">&quot;rest.port&quot;</span>).intType().defaultValue(<span class="number">8081</span>), <span class="number">8081</span>);</span><br><span class="line">        <span class="comment">//开启Queryable State服务</span></span><br><span class="line">        config.setBoolean(QueryableStateOptions.ENABLE_QUERYABLE_STATE_PROXY_SERVER, <span class="literal">true</span>);</span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.createLocalEnvironmentWithWebUI(config);</span><br><span class="line">        DataStreamSource&lt;Tuple2&lt;String, Integer&gt;&gt; dataStreamSource = env.addSource(<span class="keyword">new</span> <span class="title class_">MyDataSource</span>());</span><br><span class="line">        SingleOutputStreamOperator&lt;Tuple2&lt;String, Integer&gt;&gt; result = dataStreamSource.keyBy(<span class="keyword">new</span> <span class="title class_">KeySelector</span>&lt;Tuple2&lt;String, Integer&gt;, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getKey</span><span class="params">(Tuple2&lt;String, Integer&gt; value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> value.f0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).timeWindow(Time.seconds(<span class="number">10</span>))</span><br><span class="line">                .apply(<span class="keyword">new</span> <span class="title class_">WindowFunction</span>&lt;Tuple2&lt;String, Integer&gt;, Tuple2&lt;String, Integer&gt;, String, TimeWindow&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">apply</span><span class="params">(String o, TimeWindow window, Iterable&lt;Tuple2&lt;String, Integer&gt;&gt; input, Collector&lt;Tuple2&lt;String, Integer&gt;&gt; out)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        List&lt;Tuple2&lt;String, Integer&gt;&gt; items = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                        Iterator&lt;Tuple2&lt;String, Integer&gt;&gt; iterator = input.iterator();</span><br><span class="line">                        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                            items.add(iterator.next());</span><br><span class="line">                        &#125;</span><br><span class="line">                        Collections.sort(items, Comparator.comparing(e -&gt; e.f1));</span><br><span class="line">                        Tuple2&lt;String, Integer&gt; max = items.get(items.size() - <span class="number">1</span>);</span><br><span class="line">                        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>);</span><br><span class="line">                        System.out.println((<span class="string">&quot;window[&quot;</span> + sdf.format(window.getStart()) + <span class="string">&quot;,&quot;</span> + sdf.format(window.getEnd()) + <span class="string">&quot;],max：&quot;</span> + max));</span><br><span class="line">                        out.collect(max);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        result.print();</span><br><span class="line"></span><br><span class="line">        result.keyBy(<span class="keyword">new</span> <span class="title class_">KeySelector</span>&lt;Tuple2&lt;String, Integer&gt;, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getKey</span><span class="params">(Tuple2&lt;String, Integer&gt; value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> value.f0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).asQueryableState(<span class="string">&quot;MaxValueIn10s&quot;</span>);<span class="comment">//asQueryableState使得结果的状态可查</span></span><br><span class="line">        env.execute(<span class="string">&quot;queryableState demo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>客户端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueryClient1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//jobID是运行上述flink作业时控制台输出的</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jobID</span> <span class="operator">=</span> <span class="string">&quot;db6ba9ca3bcd15cf7f06da4122ea975d&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">JobID</span> <span class="variable">jobId</span> <span class="operator">=</span> JobID.fromHexString(jobID);</span><br><span class="line">        System.out.println(<span class="string">&quot;jobId:&quot;</span> + jobId);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">jobManagerHost</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">jobManagerPort</span> <span class="operator">=</span> <span class="number">9069</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">QueryableStateClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryableStateClient</span>(jobManagerHost, jobManagerPort);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用状态描述符来描述我们要查询的状态</span></span><br><span class="line">        ValueStateDescriptor&lt;Tuple2&lt;String, Integer&gt;&gt; stateDescriptor = <span class="keyword">new</span> <span class="title class_">ValueStateDescriptor</span>&lt;Tuple2&lt;String, Integer&gt;&gt;(<span class="string">&quot;maxvalue&quot;</span>, TypeInformation.of(<span class="keyword">new</span> <span class="title class_">TypeHint</span>&lt;Tuple2&lt;String, Integer&gt;&gt;() &#123;</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询指定用户的状态，key对应keyBy的元素类型</span></span><br><span class="line">        <span class="comment">//比如这里每隔1秒查询Flink中恒大这个用户的状态</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;恒大&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            CompletableFuture&lt;ValueState&lt;Tuple2&lt;String, Integer&gt;&gt;&gt; completableFuture =</span><br><span class="line">                    client.getKvState(</span><br><span class="line">                            jobId,</span><br><span class="line">                            <span class="string">&quot;MaxValueIn10s&quot;</span>,</span><br><span class="line">                            key,</span><br><span class="line">                            BasicTypeInfo.STRING_TYPE_INFO,</span><br><span class="line">                            stateDescriptor);</span><br><span class="line">            System.out.println(completableFuture.get().value());</span><br><span class="line">            <span class="comment">//每隔1秒查询一次</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2）StateDescriptor</p>
<p>通过ValueStateDescriptor.setQueryable()方法开放此状态，使此状态可查询。还是以上面的需求举例。</p>
<p>改动点在于不使用KeyedStream的asQueryableState()方法，而是在状态描述符上直接设置状态可查询。</p>
<p>flink应用代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueryableState2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        config.setInteger(ConfigOptions.key(<span class="string">&quot;rest.port&quot;</span>).intType().defaultValue(<span class="number">8081</span>), <span class="number">8081</span>);</span><br><span class="line">        <span class="comment">//开启Queryable State服务</span></span><br><span class="line">        config.setBoolean(QueryableStateOptions.ENABLE_QUERYABLE_STATE_PROXY_SERVER, <span class="literal">true</span>);</span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.createLocalEnvironmentWithWebUI(config);</span><br><span class="line">        DataStreamSource&lt;Tuple2&lt;String, Integer&gt;&gt; dataStreamSource = env.addSource(<span class="keyword">new</span> <span class="title class_">MyDataSource</span>());</span><br><span class="line">        SingleOutputStreamOperator&lt;Tuple2&lt;String, Integer&gt;&gt; result = dataStreamSource.keyBy(<span class="keyword">new</span> <span class="title class_">KeySelector</span>&lt;Tuple2&lt;String, Integer&gt;, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getKey</span><span class="params">(Tuple2&lt;String, Integer&gt; value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> value.f0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).timeWindow(Time.seconds(<span class="number">10</span>))</span><br><span class="line">                .apply(<span class="keyword">new</span> <span class="title class_">RichWindowFunction</span>&lt;Tuple2&lt;String, Integer&gt;, Tuple2&lt;String, Integer&gt;, String, TimeWindow&gt;() &#123;</span><br><span class="line">                    <span class="comment">// 定义一个ValueState，来存放状态</span></span><br><span class="line">                    <span class="keyword">private</span> <span class="keyword">transient</span> ValueState&lt;Tuple2&lt;String, Integer&gt;&gt; maxValueState;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="comment">//用状态描述符来描述我们要查询的状态</span></span><br><span class="line">                        ValueStateDescriptor&lt;Tuple2&lt;String, Integer&gt;&gt; stateDescriptor = <span class="keyword">new</span> <span class="title class_">ValueStateDescriptor</span>&lt;Tuple2&lt;String, Integer&gt;&gt;(<span class="string">&quot;maxvalue&quot;</span>, TypeInformation.of(<span class="keyword">new</span> <span class="title class_">TypeHint</span>&lt;Tuple2&lt;String, Integer&gt;&gt;() &#123;</span><br><span class="line">                        &#125;));</span><br><span class="line">                        <span class="comment">//在状态描述符上直接设置状态可查询</span></span><br><span class="line">                        stateDescriptor.setQueryable(<span class="string">&quot;MaxValueIn10s&quot;</span>);</span><br><span class="line">                        maxValueState = getRuntimeContext().getState(stateDescriptor);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">apply</span><span class="params">(String o, TimeWindow window, Iterable&lt;Tuple2&lt;String, Integer&gt;&gt; input, Collector&lt;Tuple2&lt;String, Integer&gt;&gt; out)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        List&lt;Tuple2&lt;String, Integer&gt;&gt; items = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                        Iterator&lt;Tuple2&lt;String, Integer&gt;&gt; iterator = input.iterator();</span><br><span class="line">                        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                            items.add(iterator.next());</span><br><span class="line">                        &#125;</span><br><span class="line">                        Collections.sort(items, Comparator.comparing(e -&gt; e.f1));</span><br><span class="line">                        Tuple2&lt;String, Integer&gt; max = items.get(items.size() - <span class="number">1</span>);</span><br><span class="line">                        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>);</span><br><span class="line">                        System.out.println((<span class="string">&quot;window[&quot;</span> + sdf.format(window.getStart()) + <span class="string">&quot;,&quot;</span> + sdf.format(window.getEnd()) + <span class="string">&quot;],max：&quot;</span> + max));</span><br><span class="line">                        <span class="comment">//更新状态值</span></span><br><span class="line">                        maxValueState.update(max);</span><br><span class="line">                        out.collect(max);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;);</span><br><span class="line">        result.print();</span><br><span class="line"></span><br><span class="line">        env.execute(<span class="string">&quot;queryableState demo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>客户端代码没有变化，只要改变jobId的值，依然能够查询到指定用户的实时state值。</p>
<h2 id="实战案例"><a href="#实战案例" class="headerlink" title="实战案例"></a>实战案例</h2><h3 id="网页UV统计"><a href="#网页UV统计" class="headerlink" title="网页UV统计"></a>网页UV统计</h3><p>web应用中将用户对每个页面的请求日志发送到Kafka中，Flink从Kafka中消费日志数据，并解析日志、统计每个页面当日独立用户访问量(UV)，最后将统计结果输出到redis中供其它服务查询。</p>
<h4 id="日志数据实体类"><a href="#日志数据实体类" class="headerlink" title="日志数据实体类"></a>日志数据实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserVisitEvent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String traceId;<span class="comment">//日志id</span></span><br><span class="line">    <span class="keyword">public</span> String date;<span class="comment">//日志日期，如：20201221</span></span><br><span class="line">    <span class="keyword">public</span> Integer pageId;<span class="comment">//web页面id</span></span><br><span class="line">    <span class="keyword">public</span> String uid;<span class="comment">//用户id</span></span><br><span class="line">    <span class="keyword">public</span> String url;<span class="comment">//页面url</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Flink应用程序"><a href="#Flink应用程序" class="headerlink" title="Flink应用程序"></a>Flink应用程序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UVdemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        <span class="comment">//kafka配置参数</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;192.168.174.129:9092&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;web-uv-stat&quot;</span>);</span><br><span class="line">        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, <span class="string">&quot;latest&quot;</span>);</span><br><span class="line">        FlinkKafkaConsumer011&lt;String&gt; kafkaConsumer011 = <span class="keyword">new</span> <span class="title class_">FlinkKafkaConsumer011</span>&lt;&gt;(</span><br><span class="line">                <span class="string">&quot;uv_statistics&quot;</span>,  <span class="comment">//kafka topic</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">SimpleStringSchema</span>(),  <span class="comment">// String 序列化</span></span><br><span class="line">                props);</span><br><span class="line"></span><br><span class="line">        <span class="type">FlinkJedisPoolConfig</span> <span class="variable">redisConf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FlinkJedisPoolConfig</span></span><br><span class="line">                .Builder().setHost(<span class="string">&quot;127.0.0.1&quot;</span>).setPort(<span class="number">6379</span>).build();</span><br><span class="line"></span><br><span class="line">        env.addSource(kafkaConsumer011)</span><br><span class="line">                .setParallelism(<span class="number">2</span>)</span><br><span class="line">                .map(str -&gt; &#123;</span><br><span class="line">                    <span class="comment">//解析日志时间戳，转换为日期</span></span><br><span class="line">                    Map&lt;String, String&gt; o = JSON.parseObject(str, Map.class);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">timestamp</span> <span class="operator">=</span> o.get(<span class="string">&quot;timestamp&quot;</span>);</span><br><span class="line">                    <span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> Instant.ofEpochMilli(Long.parseLong(timestamp));</span><br><span class="line">                    <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.ofInstant(instant, ZoneId.systemDefault());</span><br><span class="line">                    <span class="type">UserVisitEvent</span> <span class="variable">userVisitEvent</span> <span class="operator">=</span> JSON.parseObject(str, UserVisitEvent.class);</span><br><span class="line">                    userVisitEvent.date = localDateTime.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyyMMdd&quot;</span>));</span><br><span class="line">                    <span class="keyword">return</span> userVisitEvent;</span><br><span class="line">                &#125;)</span><br><span class="line">                .keyBy(<span class="string">&quot;date&quot;</span>, <span class="string">&quot;pageId&quot;</span>)<span class="comment">//按照日期和页面id分组，每个页面用独立的KeyedState来存储数据</span></span><br><span class="line">                .map(<span class="keyword">new</span> <span class="title class_">RichMapFunction</span>&lt;UserVisitEvent, Tuple2&lt;String, Long&gt;&gt;() &#123;</span><br><span class="line">                    <span class="comment">// 存储userId集合，使用MapState存储key即可，value不使用</span></span><br><span class="line">                    <span class="keyword">private</span> MapState&lt;String, String&gt; userIdSet;</span><br><span class="line">                    <span class="comment">// MapState没有统计元素个数的方法，所以需要一个存储UV值的状态</span></span><br><span class="line">                    <span class="keyword">private</span> ValueState&lt;Long&gt; uvCount;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="built_in">super</span>.open(parameters);</span><br><span class="line">                        <span class="comment">// 从状态中恢复userIdSet状态</span></span><br><span class="line">                        userIdSet = getRuntimeContext().getMapState(</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">MapStateDescriptor</span>&lt;&gt;(<span class="string">&quot;userIdSet&quot;</span>,</span><br><span class="line">                                        TypeInformation.of(<span class="keyword">new</span> <span class="title class_">TypeHint</span>&lt;String&gt;() &#123;</span><br><span class="line">                                        &#125;),</span><br><span class="line">                                        TypeInformation.of(<span class="keyword">new</span> <span class="title class_">TypeHint</span>&lt;String&gt;() &#123;</span><br><span class="line">                                        &#125;)));</span><br><span class="line">                        <span class="comment">// 从状态中恢复uvCount状态</span></span><br><span class="line">                        uvCount = getRuntimeContext().getState(<span class="keyword">new</span> <span class="title class_">ValueStateDescriptor</span>&lt;&gt;(<span class="string">&quot;uvCount&quot;</span>, TypeInformation.of(<span class="keyword">new</span> <span class="title class_">TypeHint</span>&lt;Long&gt;() &#123;</span><br><span class="line">                        &#125;)));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Tuple2&lt;String, Long&gt; <span class="title function_">map</span><span class="params">(UserVisitEvent userVisitEvent)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="comment">// 设置uvCount初始值</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="literal">null</span> == uvCount.value()) &#123;</span><br><span class="line">                            uvCount.update(<span class="number">0L</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (!userIdSet.contains(userVisitEvent.uid)) &#123;</span><br><span class="line">                            userIdSet.put(userVisitEvent.uid, <span class="literal">null</span>);</span><br><span class="line">                            <span class="comment">//用户首次访问才更新uvCount计数</span></span><br><span class="line">                            uvCount.update(uvCount.value() + <span class="number">1</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 生成写入redis的数据，格式:key=date_pageId,value=count值</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">redisKey</span> <span class="operator">=</span> userVisitEvent.date + <span class="string">&quot;_&quot;</span></span><br><span class="line">                                + userVisitEvent.pageId;</span><br><span class="line">                        System.out.println(redisKey + <span class="string">&quot;:&quot;</span> + uvCount.value());</span><br><span class="line">                        <span class="keyword">return</span> Tuple2.of(redisKey, uvCount.value());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .addSink(<span class="keyword">new</span> <span class="title class_">RedisSink</span>&lt;&gt;(redisConf, <span class="keyword">new</span> <span class="title class_">RedisSinkMapper</span>()));</span><br><span class="line"></span><br><span class="line">        env.execute(<span class="string">&quot;UV Statistics&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">RedisSinkMapper</span> <span class="keyword">implements</span> <span class="title class_">RedisMapper</span>&lt;Tuple2&lt;String, Long&gt;&gt; &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> RedisCommandDescription <span class="title function_">getCommandDescription</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RedisCommandDescription</span>(RedisCommand.SET);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getKeyFromData</span><span class="params">(Tuple2&lt;String, Long&gt; data)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> data.f0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getValueFromData</span><span class="params">(Tuple2&lt;String, Long&gt; data)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> data.f1.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="创建topic"><a href="#创建topic" class="headerlink" title="创建topic"></a>创建topic</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vm1 ~]# kafka-topics.sh --create --zookeeper 192.168.174.136:2181 --replication-factor 2 -partitions 2 --topic uv_statistics</span><br></pre></td></tr></table></figure>
<p>运行Flink应用，使用kafka生产者脚本向topic发送数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-console-producer.sh --topic uv_statistics --bootstrap-server 192.168.174.136:9092</span><br><span class="line">&gt;&#123;&quot;timestamp&quot;:&quot;1607695647643&quot;,&quot;pageId&quot;:1001,&quot;traceId&quot;:&quot;tid-11&quot;,&quot;uid&quot;:&quot;U0001&quot;,&quot;url&quot;:&quot;/user/login&quot;&#125;</span><br><span class="line">&gt;&#123;&quot;timestamp&quot;:&quot;1607695647643&quot;,&quot;pageId&quot;:1001,&quot;traceId&quot;:&quot;tid-11&quot;,&quot;uid&quot;:&quot;U0001&quot;,&quot;url&quot;:&quot;/user/login&quot;&#125;</span><br><span class="line">&gt;&#123;&quot;timestamp&quot;:&quot;1607695647643&quot;,&quot;pageId&quot;:1001,&quot;traceId&quot;:&quot;tid-11&quot;,&quot;uid&quot;:&quot;U0002&quot;,&quot;url&quot;:&quot;/user/login&quot;&#125;</span><br><span class="line">&gt;&#123;&quot;timestamp&quot;:&quot;1607695647643&quot;,&quot;pageId&quot;:1001,&quot;traceId&quot;:&quot;tid-11&quot;,&quot;uid&quot;:&quot;U0001&quot;,&quot;url&quot;:&quot;/user/login&quot;&#125;</span><br><span class="line">&gt;&#123;&quot;timestamp&quot;:&quot;1607695647643&quot;,&quot;pageId&quot;:1001,&quot;traceId&quot;:&quot;tid-11&quot;,&quot;uid&quot;:&quot;U0002&quot;,&quot;url&quot;:&quot;/user/login&quot;&#125;</span><br><span class="line">&gt;&#123;&quot;timestamp&quot;:&quot;1607695647643&quot;,&quot;pageId&quot;:1001,&quot;traceId&quot;:&quot;tid-11&quot;,&quot;uid&quot;:&quot;U0002&quot;,&quot;url&quot;:&quot;/user/login&quot;&#125;</span><br><span class="line">&gt;&#123;&quot;timestamp&quot;:&quot;1607695647643&quot;,&quot;pageId&quot;:1001,&quot;traceId&quot;:&quot;tid-11&quot;,&quot;uid&quot;:&quot;U0003&quot;,&quot;url&quot;:&quot;/user/login&quot;&#125;          </span><br><span class="line">&gt;&#123;&quot;timestamp&quot;:&quot;1607695647643&quot;,&quot;pageId&quot;:1002,&quot;traceId&quot;:&quot;tid-11&quot;,&quot;uid&quot;:&quot;U0003&quot;,&quot;url&quot;:&quot;/user/login&quot;&#125; </span><br><span class="line">&gt;&#123;&quot;timestamp&quot;:&quot;1607695647643&quot;,&quot;pageId&quot;:1002,&quot;traceId&quot;:&quot;tid-11&quot;,&quot;uid&quot;:&quot;U0003&quot;,&quot;url&quot;:&quot;/user/login&quot;&#125;</span><br><span class="line">&gt;&#123;&quot;timestamp&quot;:&quot;1607695647643&quot;,&quot;pageId&quot;:1002,&quot;traceId&quot;:&quot;tid-11&quot;,&quot;uid&quot;:&quot;U1442&quot;,&quot;url&quot;:&quot;/user/login&quot;&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到flink应用程序输出正常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">20201211_1001</span>:<span class="number">1</span></span><br><span class="line"><span class="number">20201211_1001</span>:<span class="number">2</span></span><br><span class="line"><span class="number">20201211_1001</span>:<span class="number">2</span></span><br><span class="line"><span class="number">20201211_1001</span>:<span class="number">3</span></span><br><span class="line"><span class="number">20201211_1002</span>:<span class="number">1</span></span><br><span class="line"><span class="number">20201211_1002</span>:<span class="number">1</span></span><br><span class="line"><span class="number">20201211_1002</span>:<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>同时redis里面也能查询到最新的统计数据。打开redis客户端，执行下列命令获取key的值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get 20201211_1002</span><br><span class="line">&quot;2&quot;</span><br><span class="line">127.0.0.1:6379&gt; get 20201211_1001</span><br><span class="line">&quot;3&quot;</span><br></pre></td></tr></table></figure>
<h4 id="上传jar到flink集群中运行"><a href="#上传jar到flink集群中运行" class="headerlink" title="上传jar到flink集群中运行"></a>上传jar到flink集群中运行</h4><p>上述程序是在本地运行的，也可以提交到Flink集群中运行。Flink应用程序打包方式以及如何提交到flink集群参见<a href="https://blog.csdn.net/hellozpc/article/details/109413465">第一篇</a>的快速入门案例。提交之前确保kafka和redis都已经启动，且能正常连接。<br><img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AEFlink%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B(%E7%BB%88%E7%AF%87)/20210115214543415.png" alt="在这里插入图片描述"></p>
<p>由此可见，在集群多并行度环境下，依然正常输出正确的结果！</p>
<h4 id="远程提交Flink应用"><a href="#远程提交Flink应用" class="headerlink" title="远程提交Flink应用"></a>远程提交Flink应用</h4><p>只要像下面这样修改运行环境，运行主函数所在的类即可远程提交flink任务：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.createRemoteEnvironment(<span class="string">&quot;192.168.174.136&quot;</span>, <span class="number">8081</span>, <span class="string">&quot;F:\\flink\\flink_job_uv\\target\\flink_job_uv-0.0.1-SNAPSHOT-jar-with-dependencies.jar&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>提交到flink集群中运行后，本地idea关闭flink应用程序不会影响已经提交到flink集群中的job。即已提交到集群中运行的job不会被终止。注意，提交job时要把flink应用程序中用到的其它类所在的jar包带上。即flink应用程序所依赖的类库要打包成jar包传入，否则会报各种类找不到的异常：<code>ClassNotFoundException</code>。</p>
<p>在实际生产中，可以先将flink应用程序工程打成jar。通过springboot应用在程序启动时提交flink任务。springboot应用程序也打成jar，这样就可以通过运行springboot应用启动flink计算任务。</p>
<h4 id="springboot启动flink任务"><a href="#springboot启动flink任务" class="headerlink" title="springboot启动flink任务"></a>springboot启动flink任务</h4><h5 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 排除自带的logback依赖 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--            &lt;scope&gt;provided&lt;/scope&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-streaming-java_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--            &lt;scope&gt;provided&lt;/scope&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-clients_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-kafka_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.bahir<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-redis_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.73<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 编译插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- scala编译插件,用于将scala代码编译成class文件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.alchim31.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">scalaCompatVersion</span>&gt;</span>2.11<span class="tag">&lt;/<span class="name">scalaCompatVersion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">scalaVersion</span>&gt;</span>2.11.12<span class="tag">&lt;/<span class="name">scalaVersion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>compile-scala<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>add-source<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>test-compile-scala<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>add-source<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 打jar包插件(会包含所有依赖) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 可以设置jar包的入口类(可选) --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.bigbird.flink_job_uv.FlinkJobUvApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Springboot打包插件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;plugin&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;version&gt;2.2.6.RELEASE&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;/plugin&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="SpringBoot入口类"><a href="#SpringBoot入口类" class="headerlink" title="SpringBoot入口类"></a>SpringBoot入口类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlinkJobUvApplication</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ContextRefreshedEvent&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(FlinkJobUvApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ContextRefreshedEvent contextRefreshedEvent)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;submit flink job...&quot;</span>);</span><br><span class="line">            UVdemo.submitJob();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Flink应用程序-1"><a href="#Flink应用程序-1" class="headerlink" title="Flink应用程序"></a>Flink应用程序</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UVdemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">submitJob</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span></span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.createRemoteEnvironment(<span class="string">&quot;192.168.174.136&quot;</span>, <span class="number">8081</span>, <span class="string">&quot;F:\\flink\\flink_job_uv\\flink_job_uv-0.0.1-SNAPSHOT-jar-with-dependencies.jar&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//kafka配置参数</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;192.168.174.136:9092&quot;</span>);</span><br><span class="line">        props.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">&quot;web-uv-stat&quot;</span>);</span><br><span class="line">        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, <span class="string">&quot;latest&quot;</span>);</span><br><span class="line">        FlinkKafkaConsumer&lt;String&gt; kafkaConsumer011 = <span class="keyword">new</span> <span class="title class_">FlinkKafkaConsumer</span>&lt;&gt;(</span><br><span class="line">                <span class="string">&quot;uv_statistics&quot;</span>,  <span class="comment">//kafka topic</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">SimpleStringSchema</span>(),  <span class="comment">// String 序列化</span></span><br><span class="line">                props);</span><br><span class="line"></span><br><span class="line">        <span class="type">FlinkJedisPoolConfig</span> <span class="variable">redisConf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FlinkJedisPoolConfig</span></span><br><span class="line">                .Builder().setHost(<span class="string">&quot;192.168.174.1&quot;</span>).setPort(<span class="number">6379</span>).build();</span><br><span class="line"></span><br><span class="line">        env.addSource(kafkaConsumer011)</span><br><span class="line">                .map(<span class="keyword">new</span> <span class="title class_">MapFunction</span>&lt;String, UserVisitEvent&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> UserVisitEvent <span class="title function_">map</span><span class="params">(String str)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="comment">//解析日志时间戳，转换为日期</span></span><br><span class="line">                        Map&lt;String, String&gt; o = JSON.parseObject(str, Map.class);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">timestamp</span> <span class="operator">=</span> o.get(<span class="string">&quot;timestamp&quot;</span>);</span><br><span class="line">                        <span class="type">UserVisitEvent</span> <span class="variable">userVisitEvent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserVisitEvent</span>();</span><br><span class="line">                        <span class="keyword">if</span> (timestamp != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> Instant.ofEpochMilli(Long.parseLong(timestamp));</span><br><span class="line">                            <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.ofInstant(instant, ZoneId.systemDefault());</span><br><span class="line">                            userVisitEvent = JSON.parseObject(str, UserVisitEvent.class);</span><br><span class="line">                            userVisitEvent.date = localDateTime.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyyMMdd&quot;</span>));</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;timestamp不能为空&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">return</span> userVisitEvent;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .keyBy(<span class="string">&quot;date&quot;</span>, <span class="string">&quot;pageId&quot;</span>)<span class="comment">//按照日期和页面id分组，每个页面用独立的KeyedState来存储数据</span></span><br><span class="line">                .map(<span class="keyword">new</span> <span class="title class_">RichMapFunction</span>&lt;UserVisitEvent, Tuple2&lt;String, Long&gt;&gt;() &#123;</span><br><span class="line">                    <span class="comment">// 存储userId集合，使用MapState存储key即可，value不使用</span></span><br><span class="line">                    <span class="keyword">private</span> MapState&lt;String, String&gt; userIdSet;</span><br><span class="line">                    <span class="comment">// MapState没有统计元素个数的方法，所以需要一个存储UV值的状态</span></span><br><span class="line">                    <span class="keyword">private</span> ValueState&lt;Long&gt; uvCount;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="built_in">super</span>.open(parameters);</span><br><span class="line">                        <span class="comment">// 从状态中恢复userIdSet状态</span></span><br><span class="line">                        userIdSet = getRuntimeContext().getMapState(</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">MapStateDescriptor</span>&lt;&gt;(<span class="string">&quot;userIdSet&quot;</span>,</span><br><span class="line">                                        TypeInformation.of(<span class="keyword">new</span> <span class="title class_">TypeHint</span>&lt;String&gt;() &#123;</span><br><span class="line">                                        &#125;),</span><br><span class="line">                                        TypeInformation.of(<span class="keyword">new</span> <span class="title class_">TypeHint</span>&lt;String&gt;() &#123;</span><br><span class="line">                                        &#125;)));</span><br><span class="line">                        <span class="comment">// 从状态中恢复uvCount状态</span></span><br><span class="line">                        uvCount = getRuntimeContext().getState(<span class="keyword">new</span> <span class="title class_">ValueStateDescriptor</span>&lt;&gt;(<span class="string">&quot;uvCount&quot;</span>, TypeInformation.of(<span class="keyword">new</span> <span class="title class_">TypeHint</span>&lt;Long&gt;() &#123;</span><br><span class="line">                        &#125;)));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Tuple2&lt;String, Long&gt; <span class="title function_">map</span><span class="params">(UserVisitEvent userVisitEvent)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="comment">// 设置uvCount初始值</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="literal">null</span> == uvCount.value()) &#123;</span><br><span class="line">                            uvCount.update(<span class="number">0L</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (!userIdSet.contains(userVisitEvent.uid)) &#123;</span><br><span class="line">                            userIdSet.put(userVisitEvent.uid, <span class="literal">null</span>);</span><br><span class="line">                            <span class="comment">//用户首次访问才更新uvCount计数</span></span><br><span class="line">                            uvCount.update(uvCount.value() + <span class="number">1</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 生成写入redis的数据，格式:key=date_pageId,value=count值</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">redisKey</span> <span class="operator">=</span> userVisitEvent.date + <span class="string">&quot;_&quot;</span></span><br><span class="line">                                + userVisitEvent.pageId;</span><br><span class="line">                        System.out.println(redisKey + <span class="string">&quot;:&quot;</span> + uvCount.value());</span><br><span class="line">                        <span class="keyword">return</span> Tuple2.of(redisKey, uvCount.value());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .addSink(<span class="keyword">new</span> <span class="title class_">RedisSink</span>&lt;&gt;(redisConf, <span class="keyword">new</span> <span class="title class_">RedisSinkMapper</span>()));</span><br><span class="line"></span><br><span class="line">        env.execute(<span class="string">&quot;UV Statistics_demo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">RedisSinkMapper</span> <span class="keyword">implements</span> <span class="title class_">RedisMapper</span>&lt;Tuple2&lt;String, Long&gt;&gt; &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> RedisCommandDescription <span class="title function_">getCommandDescription</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RedisCommandDescription</span>(RedisCommand.SET);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getKeyFromData</span><span class="params">(Tuple2&lt;String, Long&gt; data)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> data.f0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getValueFromData</span><span class="params">(Tuple2&lt;String, Long&gt; data)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> data.f1.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，flink应用程序中传入的jar路径是Flink应用程序所有的依赖库打成的jar包。因此是先将flink应用程序及其依赖库打jar包，存放到指定位置。再将SpringBoot工程打成jar包。因此pom文件中有两种打包插件，分别用于打包flink应用程序和Springboot。</p>
<p>打包命令：mvn package -DskipTests</p>
<p>运行SpringBoo应用即可提交flink任务到集群中运行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar flink_job_uv-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>
<p>取消任务可以在Flink web页面(笔者的flink集群web地址是<a href="http://vm1:8081/">http://vm1:8081/</a> )或者linux命令行操作。</p>
<p>SpringBoot直接停止、取消flink任务的实现方式欢迎留言！</p>
<h3 id="头条实时热榜统计"><a href="#头条实时热榜统计" class="headerlink" title="头条实时热榜统计"></a>头条实时热榜统计</h3><p>需求描述：每5分钟统计一次1小时内南京地区的热点新闻，输出topN条热门新闻。新闻点击阅读数据来自kafka消息队列(由业务系统或者ETL系统写入处理过的数据到kafka中)。</p>
<p>输入数据实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新闻数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewsInfo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String newsId;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> categoryId;</span><br><span class="line">    <span class="keyword">public</span> String city;</span><br><span class="line">    <span class="keyword">public</span> String content;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> timestamp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>计数数据实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 某个窗口内特定新闻的计数值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewsWindowCount</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String newsId;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> windowEnd;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Flink应用程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 热榜统计：每5分钟统计1次1小时内南京地区的热点新闻，输出头条新闻</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotListStatistics</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//简单起见，数据也可从文本文件中读取;并从数据中提取时间戳生成水位线</span></span><br><span class="line">        <span class="comment">//DataStreamSource&lt;String&gt; inputStreamSource = env.readTextFile(&quot;D:\\news.txt&quot;);</span></span><br><span class="line">        <span class="comment">//从kafka接收输入数据</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        props.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;192.168.244.128:9092&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;news-group&quot;</span>);<span class="comment">//指定消费者组</span></span><br><span class="line">        props.put(<span class="string">&quot;key.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);  <span class="comment">//key 反序列化</span></span><br><span class="line">        props.put(<span class="string">&quot;value.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;auto.offset.reset&quot;</span>, <span class="string">&quot;latest&quot;</span>); <span class="comment">//value 反序列化</span></span><br><span class="line"></span><br><span class="line">        DataStreamSource&lt;String&gt; inputStreamSource = env.addSource(<span class="keyword">new</span> <span class="title class_">FlinkKafkaConsumer</span>&lt;&gt;(<span class="string">&quot;topic_hotlist&quot;</span>, <span class="keyword">new</span> <span class="title class_">SimpleStringSchema</span>(), props));</span><br><span class="line"></span><br><span class="line">        DataStream&lt;NewsInfo&gt; dataStream = inputStreamSource.map(line -&gt; &#123;</span><br><span class="line">            String[] split = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="type">NewsInfo</span> <span class="variable">newsInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NewsInfo</span>();</span><br><span class="line">            newsInfo.newsId = split[<span class="number">0</span>];</span><br><span class="line">            newsInfo.categoryId = Integer.parseInt(split[<span class="number">1</span>]);</span><br><span class="line">            newsInfo.city = split[<span class="number">2</span>];</span><br><span class="line">            newsInfo.content = split[<span class="number">3</span>];</span><br><span class="line">            newsInfo.timestamp = Long.parseLong(split[<span class="number">4</span>]);</span><br><span class="line">            <span class="keyword">return</span> newsInfo;</span><br><span class="line">        &#125;)</span><br><span class="line">                <span class="comment">//由于输入数据是单调递增的时间戳,可以直接使用Flink提供的水位线生成器MonotonousTimestamps,也可以使用固定延迟的水位线</span></span><br><span class="line">                .assignTimestampsAndWatermarks(WatermarkStrategy.&lt;NewsInfo&gt;forMonotonousTimestamps()</span><br><span class="line">                        .withTimestampAssigner((element, recordTimestamp) -&gt; element.timestamp));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//过滤南京地区的热榜;分组开窗聚合,得到每个窗口内各个新闻的count值</span></span><br><span class="line">        DataStream&lt;NewsWindowCount&gt; aggregateStream = dataStream.filter(e -&gt; e.city.equals(<span class="string">&quot;南京&quot;</span>))</span><br><span class="line">                .keyBy(e -&gt; e.newsId)<span class="comment">//按照新闻id分组</span></span><br><span class="line">                .timeWindow(Time.hours(<span class="number">1</span>), Time.minutes(<span class="number">5</span>))<span class="comment">//一小时的窗口，每隔5分滑动一次</span></span><br><span class="line">                .aggregate(<span class="keyword">new</span> <span class="title class_">CountAggregation</span>(), <span class="keyword">new</span> <span class="title class_">ItemWindowCountFunction</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将同一窗口内的新闻按计数值排序，统计topN热点新闻(使用状态编程、定时器)</span></span><br><span class="line">        DataStream&lt;String&gt; processRes = aggregateStream</span><br><span class="line">                .keyBy(<span class="string">&quot;windowEnd&quot;</span>)</span><br><span class="line">                .process(<span class="keyword">new</span> <span class="title class_">TopNHotListFunction</span>(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        processRes.print();</span><br><span class="line"></span><br><span class="line">        env.execute(<span class="string">&quot;hot list&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义增量聚合函数，完成每个新闻热点的计数累加功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CountAggregation</span> <span class="keyword">implements</span> <span class="title class_">AggregateFunction</span>&lt;NewsInfo, Long, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Long <span class="title function_">createAccumulator</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">//初始值为0</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Long <span class="title function_">add</span><span class="params">(NewsInfo value, Long accumulator)</span> &#123;</span><br><span class="line">            <span class="comment">//每来一次相同的新闻点击数据，计数加一</span></span><br><span class="line">            <span class="keyword">return</span> accumulator + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Long <span class="title function_">getResult</span><span class="params">(Long accumulator)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> accumulator;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Long <span class="title function_">merge</span><span class="params">(Long a, Long b)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义全量窗口聚合函数，输出封装好的ItemWindowCount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ItemWindowCountFunction</span> <span class="keyword">implements</span> <span class="title class_">WindowFunction</span>&lt;Long, NewsWindowCount, String, TimeWindow&gt; &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">apply</span><span class="params">(String key, TimeWindow window, Iterable&lt;Long&gt; input, Collector&lt;NewsWindowCount&gt; out)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            Iterator&lt;Long&gt; iterator = input.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                iterator.next();</span><br><span class="line">                size++;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;size is:&quot;</span> + size);</span><br><span class="line"></span><br><span class="line">            <span class="type">NewsWindowCount</span> <span class="variable">newsWindowCount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NewsWindowCount</span>();</span><br><span class="line">            <span class="comment">//这里input迭代器里只有一个元素</span></span><br><span class="line">            newsWindowCount.count = input.iterator().next();</span><br><span class="line">            newsWindowCount.newsId = key;</span><br><span class="line">            newsWindowCount.windowEnd = window.getEnd();</span><br><span class="line">            out.collect(newsWindowCount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TopNHotListFunction</span> <span class="keyword">extends</span> <span class="title class_">KeyedProcessFunction</span>&lt;Tuple, NewsWindowCount, String&gt; &#123;</span><br><span class="line">        <span class="comment">//输出topN的结果数据</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> topN;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先定义状态变量，在生命周期方法里获取</span></span><br><span class="line">        <span class="keyword">private</span> ListState&lt;NewsWindowCount&gt; newsWindowCountListState = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TopNHotListFunction</span><span class="params">(<span class="type">int</span> topN)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.topN = topN;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            newsWindowCountListState = getRuntimeContext().getListState(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ListStateDescriptor</span>&lt;&gt;(<span class="string">&quot;newsCountListState&quot;</span>, NewsWindowCount.class));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processElement</span><span class="params">(NewsWindowCount value, Context ctx, Collector&lt;String&gt; out)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="comment">//每来一个数据直接加入状态ListState中</span></span><br><span class="line">            newsWindowCountListState.add(value);</span><br><span class="line">            <span class="comment">//注册一个windowEnd+1毫秒触发的定时器</span></span><br><span class="line">            ctx.timerService().registerEventTimeTimer(value.windowEnd + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 当所有所有的窗口统计结果都到达，触发定时器，输出排序</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> timestamp</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> out</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTimer</span><span class="params">(<span class="type">long</span> timestamp, OnTimerContext ctx, Collector&lt;String&gt; out)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="comment">//将ListState中的数据放到可排序的数据结构里面</span></span><br><span class="line">            List&lt;NewsWindowCount&gt; newsWindowCounts = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            Iterator&lt;NewsWindowCount&gt; iterator = newsWindowCountListState.get().iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                newsWindowCounts.add(iterator.next());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//清除状态，节省内存</span></span><br><span class="line">            newsWindowCountListState.clear();</span><br><span class="line">            newsWindowCounts.sort(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;NewsWindowCount&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(NewsWindowCount o1, NewsWindowCount o2)</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (o1.count == o2.count) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o1.count &gt; o2.count) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将新闻排名格式化输出</span></span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">outputStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">            outputStr.append(<span class="string">&quot;windowEndTime:&quot;</span>).append(<span class="keyword">new</span> <span class="title class_">Timestamp</span>(timestamp - <span class="number">1</span>)).append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; Math.min(newsWindowCounts.size(), topN); i++) &#123;</span><br><span class="line">                <span class="type">NewsWindowCount</span> <span class="variable">newsWindowCount</span> <span class="operator">=</span> newsWindowCounts.get(i);</span><br><span class="line">                outputStr.append(<span class="string">&quot;No.&quot;</span>).append(i + <span class="number">1</span>)</span><br><span class="line">                        .append(<span class="string">&quot; 新闻ID:&quot;</span>).append(newsWindowCount.newsId).append(<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">                        .append(<span class="string">&quot; 点击量:&quot;</span>).append(newsWindowCount.count)</span><br><span class="line">                        .append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            out.collect(outputStr.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>准备数据news.txt</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">100001,1,南京,鸟哥发财了,1608285818351,20201218 18:03:38:351</span><br><span class="line">100002,1,南京,李晶发财了,1608285878351,20201218 18:04:38:351</span><br><span class="line">100002,1,北京,李晶发财了,1608285900000,20201218 18:05:00:000</span><br><span class="line">100003,1,南京,衡总发财了,1608285900002,20201218 18:05:00:002</span><br><span class="line"></span><br><span class="line">100001,1,南京,鸟哥发财了,1608285938351,20201218 18:05:38:351</span><br><span class="line">100005,1,南京,军哥发财了,1608286058351,20201218 18:07:38:351</span><br><span class="line">100005,1,南京,军哥发财了,1608286178351,20201218 18:09:38:351</span><br><span class="line">100005,1,南京,军哥发财了,1608286200000,20201218 18:10:00:000</span><br><span class="line">100001,1,南京,鸟哥发财了,1608286200002,20201218 18:10:00:002</span><br><span class="line">100003,1,南京,衡总发财了,1608286298351,20201218 18:11:38:351</span><br><span class="line"></span><br><span class="line">100002,1,南京,李晶发财了,1608289200000,20201218 19:00:00:000</span><br><span class="line">100002,1,南京,李晶发财了,1608289200002,20201218 19:00:00:002</span><br><span class="line">100002,1,南京,李晶发财了,1608289500002,20201218 19:00:05:002</span><br></pre></td></tr></table></figure>
<p>分别运行flink应用程序、kafka生产者工具，并发送第一条消息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-topics.sh --create --zookeeper 192.168.174.136:2181 --replication-factor 2 -partitions 2 --topic topic_hotlist</span><br><span class="line">kafka-console-producer.sh --topic topic_hotlist --bootstrap-server 192.168.174.136:9092</span><br><span class="line">&gt;100001,1,南京,鸟哥发财了,1608285818351</span><br></pre></td></tr></table></figure>
<p>flink应用程序收到第一条数据时没有输出，直到收到第4条时间戳为1608285900002的数据才触发计算，此时数据的时间戳正好比window的endTime 18:05:00加1毫秒大，因此触发计算。但是输出的统计结果不含时间戳为1608285900000的这条边界数据，因此结果如下：</p>
<p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="number">100002</span>,<span class="number">1</span>,南京,李晶发财了,<span class="number">1608285878351</span></span><br><span class="line">&gt;<span class="number">100002</span>,<span class="number">1</span>,北京,李晶发财了,<span class="number">1608285900000</span></span><br><span class="line">&gt;<span class="number">100003</span>,<span class="number">1</span>,南京,衡总发财了,<span class="number">1608285900002</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">windowEndTime:<span class="number">2020</span>-<span class="number">12</span>-<span class="number">18</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">00.0</span></span><br><span class="line">No<span class="number">.1</span> 新闻ID:<span class="number">100001</span>	 点击量:<span class="number">1</span></span><br><span class="line">No<span class="number">.2</span> 新闻ID:<span class="number">100002</span>	 点击量:<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>以此类推，时间戳为1608286200001的数据到达时，再次触发计算，累计统计前一小时的数据。</p>
<p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="number">100001</span>,<span class="number">1</span>,南京,鸟哥发财了,<span class="number">1608285938351</span></span><br><span class="line">&gt;<span class="number">100005</span>,<span class="number">1</span>,南京,军哥发财了,<span class="number">1608286058351</span></span><br><span class="line">&gt;<span class="number">100005</span>,<span class="number">1</span>,南京,军哥发财了,<span class="number">1608286178351</span></span><br><span class="line">&gt;<span class="number">100005</span>,<span class="number">1</span>,南京,军哥发财了,<span class="number">1608286200000</span></span><br><span class="line">&gt;<span class="number">100001</span>,<span class="number">1</span>,南京,鸟哥发财了,<span class="number">1608286200002</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">windowEndTime:<span class="number">2020</span>-<span class="number">12</span>-<span class="number">18</span> <span class="number">18</span>:<span class="number">10</span>:<span class="number">00.0</span></span><br><span class="line">No<span class="number">.1</span> 新闻ID:<span class="number">100005</span>	 点击量:<span class="number">2</span></span><br><span class="line">No<span class="number">.2</span> 新闻ID:<span class="number">100001</span>	 点击量:<span class="number">2</span></span><br><span class="line">No<span class="number">.3</span> 新闻ID:<span class="number">100002</span>	 点击量:<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>当时间戳跳变到19:00:00:000时，之前的窗口全部触发计算。因此输出统计结果如下:</p>
<p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="number">100003</span>,<span class="number">1</span>,南京,衡总发财了,<span class="number">1608286298351</span></span><br><span class="line">&gt;<span class="number">100002</span>,<span class="number">1</span>,南京,李晶发财了,<span class="number">1608289200000</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">windowEndTime:<span class="number">2020</span>-<span class="number">12</span>-<span class="number">18</span> <span class="number">18</span>:<span class="number">15</span>:<span class="number">00.0</span></span><br><span class="line">No<span class="number">.1</span> 新闻ID:<span class="number">100001</span>	 点击量:<span class="number">3</span></span><br><span class="line">No<span class="number">.2</span> 新闻ID:<span class="number">100005</span>	 点击量:<span class="number">3</span></span><br><span class="line">No<span class="number">.3</span> 新闻ID:<span class="number">100002</span>	 点击量:<span class="number">1</span></span><br><span class="line"></span><br><span class="line">windowEndTime:<span class="number">2020</span>-<span class="number">12</span>-<span class="number">18</span> <span class="number">18</span>:<span class="number">20</span>:<span class="number">00.0</span></span><br><span class="line">No<span class="number">.1</span> 新闻ID:<span class="number">100005</span>	 点击量:<span class="number">3</span></span><br><span class="line">No<span class="number">.2</span> 新闻ID:<span class="number">100001</span>	 点击量:<span class="number">3</span></span><br><span class="line">No<span class="number">.3</span> 新闻ID:<span class="number">100002</span>	 点击量:<span class="number">1</span></span><br><span class="line"></span><br><span class="line">windowEndTime:<span class="number">2020</span>-<span class="number">12</span>-<span class="number">18</span> <span class="number">18</span>:<span class="number">25</span>:<span class="number">00.0</span></span><br><span class="line">No<span class="number">.1</span> 新闻ID:<span class="number">100005</span>	 点击量:<span class="number">3</span></span><br><span class="line">No<span class="number">.2</span> 新闻ID:<span class="number">100001</span>	 点击量:<span class="number">3</span></span><br><span class="line">No<span class="number">.3</span> 新闻ID:<span class="number">100002</span>	 点击量:<span class="number">1</span></span><br><span class="line"></span><br><span class="line">windowEndTime:<span class="number">2020</span>-<span class="number">12</span>-<span class="number">18</span> <span class="number">18</span>:<span class="number">30</span>:<span class="number">00.0</span></span><br><span class="line">No<span class="number">.1</span> 新闻ID:<span class="number">100001</span>	 点击量:<span class="number">3</span></span><br><span class="line">No<span class="number">.2</span> 新闻ID:<span class="number">100005</span>	 点击量:<span class="number">3</span></span><br><span class="line">No<span class="number">.3</span> 新闻ID:<span class="number">100002</span>	 点击量:<span class="number">1</span></span><br><span class="line"></span><br><span class="line">windowEndTime:<span class="number">2020</span>-<span class="number">12</span>-<span class="number">18</span> <span class="number">18</span>:<span class="number">35</span>:<span class="number">00.0</span></span><br><span class="line">No<span class="number">.1</span> 新闻ID:<span class="number">100001</span>	 点击量:<span class="number">3</span></span><br><span class="line">No<span class="number">.2</span> 新闻ID:<span class="number">100005</span>	 点击量:<span class="number">3</span></span><br><span class="line">No<span class="number">.3</span> 新闻ID:<span class="number">100002</span>	 点击量:<span class="number">1</span></span><br><span class="line"></span><br><span class="line">windowEndTime:<span class="number">2020</span>-<span class="number">12</span>-<span class="number">18</span> <span class="number">18</span>:<span class="number">40</span>:<span class="number">00.0</span></span><br><span class="line">No<span class="number">.1</span> 新闻ID:<span class="number">100005</span>	 点击量:<span class="number">3</span></span><br><span class="line">No<span class="number">.2</span> 新闻ID:<span class="number">100001</span>	 点击量:<span class="number">3</span></span><br><span class="line">No<span class="number">.3</span> 新闻ID:<span class="number">100002</span>	 点击量:<span class="number">1</span></span><br><span class="line"></span><br><span class="line">windowEndTime:<span class="number">2020</span>-<span class="number">12</span>-<span class="number">18</span> <span class="number">18</span>:<span class="number">45</span>:<span class="number">00.0</span></span><br><span class="line">No<span class="number">.1</span> 新闻ID:<span class="number">100001</span>	 点击量:<span class="number">3</span></span><br><span class="line">No<span class="number">.2</span> 新闻ID:<span class="number">100005</span>	 点击量:<span class="number">3</span></span><br><span class="line">No<span class="number">.3</span> 新闻ID:<span class="number">100002</span>	 点击量:<span class="number">1</span></span><br><span class="line"></span><br><span class="line">windowEndTime:<span class="number">2020</span>-<span class="number">12</span>-<span class="number">18</span> <span class="number">18</span>:<span class="number">50</span>:<span class="number">00.0</span></span><br><span class="line">No<span class="number">.1</span> 新闻ID:<span class="number">100001</span>	 点击量:<span class="number">3</span></span><br><span class="line">No<span class="number">.2</span> 新闻ID:<span class="number">100005</span>	 点击量:<span class="number">3</span></span><br><span class="line">No<span class="number">.3</span> 新闻ID:<span class="number">100003</span>	 点击量:<span class="number">1</span></span><br><span class="line"></span><br><span class="line">windowEndTime:<span class="number">2020</span>-<span class="number">12</span>-<span class="number">18</span> <span class="number">18</span>:<span class="number">55</span>:<span class="number">00.0</span></span><br><span class="line">No<span class="number">.1</span> 新闻ID:<span class="number">100001</span>	 点击量:<span class="number">3</span></span><br><span class="line">No<span class="number">.2</span> 新闻ID:<span class="number">100005</span>	 点击量:<span class="number">3</span></span><br><span class="line">No<span class="number">.3</span> 新闻ID:<span class="number">100003</span>	 点击量:<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>输入<code>&gt;100002,1,南京,李晶发财了,1608289200002</code>时，</p>
<p>由于时间戳对应19:00:00:002，触发了window endTime 为19:00:00.0的窗口：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">windowEndTime:2020-12-18 19:00:00.0</span><br><span class="line">No.1 新闻ID:100001	 点击量:3</span><br><span class="line">No.2 新闻ID:100005	 点击量:3</span><br><span class="line">No.3 新闻ID:100003	 点击量:1</span><br></pre></td></tr></table></figure>
<p>输入最后一条数据100002,1,南京,李晶发财了,1608289500002时，输出如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">windowEndTime:2020-12-18 19:05:00.0</span><br><span class="line">No.1 新闻ID:100005	 点击量:3</span><br><span class="line">No.2 新闻ID:100002	 点击量:2</span><br><span class="line">No.3 新闻ID:100001	 点击量:2</span><br></pre></td></tr></table></figure>
<p>19:05:00.0统计的前1小时的区间为[18:05:00.0,19:05:00.0)</p>
<h3 id="订单超时检测"><a href="#订单超时检测" class="headerlink" title="订单超时检测"></a>订单超时检测</h3><p>在介绍实际案例之前，先补充一下CEP的理论知识。</p>
<h4 id="CEP简介"><a href="#CEP简介" class="headerlink" title="CEP简介"></a>CEP简介</h4><p>CEP是复杂事件处理（Complex Event Processing）的缩写。在Flink中，CEP用于在事件流中检测匹配事件模式，即对一个或多个简单事件构成的事件流进行一定规则地匹配，然后输出满足条件的复杂事件，也就是最终用户想要的结果。</p>
<p>Flink CEP提供了一组Pattern API，对输入流数据进行复杂事件规则定义，用来提取符合规则的事件序列。</p>
<p>Pattern API的使用步骤：</p>
<p>1）定义一个Pattern</p>
<p>2）将创建好的Pattern应用到输入事件流上</p>
<p>3）匹配出满足模式的事件序列，得到结果</p>
<p>Pattern API的分类：</p>
<p>1）个体模式(Individual Patterns)</p>
<p> 组成复杂规则的单个独立的模式定义，比如：start.times(3).where(new SimpleCondition(){…})</p>
<p> 个体模式又分 singleton(单例)模式和looping(循环）模式。单例模式只能接收一个事件而循环模式可以接收多个。</p>
<p> 可以在个体模式后面追加量词，指定循环次数。</p>
<p> 比如：</p>
<p> start.times(4) //匹配出现4次</p>
<p> start.times(2，4) //匹配出现2,3或者4次</p>
<p> 每个模式都需要指定触发条件，作为事件模式匹配的依据。个体模式可以通过.where() .or()和.until()来指定条件</p>
<p>2）组合模式(Combining Patterns)</p>
<p> 由一个个个体模式组合而成，进而形成一整个模式序列。组合模式必须以一个初始模式开始，比如：</p>
<p> Pattern&lt;Event，Event&gt; start=Pattern.begin(“start”)</p>
<p>3）模式组(Groups of patterns)</p>
<p> 将一个模式序列作为条件嵌套在个体模式里构成一组模式</p>
<h4 id="近邻模式"><a href="#近邻模式" class="headerlink" title="近邻模式"></a>近邻模式</h4><p>1）严格近邻(Strict Contigutity)</p>
<p> 要求所有事件按照严格的顺序出现，中间没有任何不匹配的事件，使用.next()指定。例如对于模式“a next b”，事件序列</p>
<p> [a,c,b]并未匹配。</p>
<p>2）宽松近邻(Relaxed Contigutity)</p>
<p> 允许中间出现不匹配的事件，由.followedBy()指定。例如对于模式“a followedBy b”，事件[a,c,b]匹配。</p>
<p>3）不确定性宽松近邻(Non-Deterministic Relaxed Contigutity)</p>
<p> 进一步放宽条件，之前匹配过的条件还可以再次使用。由followedByAny()指定。例如对于模式“a followedByAny b”，事件序列</p>
<p> [a,c,b,b]匹配两次，分别为{a,b},{a,b}。</p>
<p>4）不允许某种近邻关系</p>
<p> .notNext() 不允许某个事件严格紧邻前一个事件发生</p>
<p> .notFollowedBy() 不想允许某个事件在两个事件之间发生</p>
<p>注意：</p>
<p>所有模式必须以.begin()开始</p>
<p>模式序列不能以.notFollowedBy()结束</p>
<p>not模式不允许使用optional修饰</p>
<p>可以为模式指定时间约束，指定多长时间内匹配有效，比如：</p>
<p>next.within(Time.seconds(5))</p>
<h4 id="模式检测"><a href="#模式检测" class="headerlink" title="模式检测"></a>模式检测</h4><p>1）一般模式检测</p>
<p>模式确定后，应用到输入流，用于模式匹配得到一个PatternStream</p>
<p>DataStream input=…</p>
<p>Pattern&lt;Event,Event&gt; pattern=Pattern.begin(“start”).where(…)…</p>
<p>PatternStream patternStream=CEP.pattern(input,pattern);</p>
<p>匹配事件的提取</p>
<p>在得到PatternStream之后，可以使用select或者fastselect方法从检测到的事件序列中提取事件。</p>
<p>select方法使用参数Map,List&gt;来接收匹配到的事件序列，Map的key为模式的名称，value是所有匹配的事件的列表。</p>
<p>2）超时模式检测</p>
<p>select方法和fastselect方法可以指定超时处理程序，超时处理程序会接收到目前为止由模式匹配到的所有事件，可以指定一个OutputTag定义接收到的超时事件序列。</p>
<p>订单超时检测案例</p>
<p>1）导入pom依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">flink.version</span>&gt;</span>1.11.1<span class="tag">&lt;/<span class="name">flink.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scala.version</span>&gt;</span>2.12<span class="tag">&lt;/<span class="name">scala.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">kafka.version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">kafka.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">123456</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-cep_$&#123;scala.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2）定义订单事件实体和结果实体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderEvent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String orderId;</span><br><span class="line">    <span class="keyword">private</span> String eventType;</span><br><span class="line">    <span class="keyword">private</span> String transactId;</span><br><span class="line">    <span class="keyword">private</span> Long timeStamp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderEvent</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderEvent</span><span class="params">(String orderId, String eventType, String transactId, Long timeStamp)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderId = orderId;</span><br><span class="line">        <span class="built_in">this</span>.eventType = eventType;</span><br><span class="line">        <span class="built_in">this</span>.transactId = transactId;</span><br><span class="line">        <span class="built_in">this</span>.timeStamp = timeStamp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略getter/setter方法/toString方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">123456789101112131415161718</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderRes</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String orderId;</span><br><span class="line">    <span class="keyword">private</span> String resultState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderRes</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderRes</span><span class="params">(String orderId, String resultState)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderId = orderId;</span><br><span class="line">        <span class="built_in">this</span>.resultState = resultState;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略getter/setter方法/toString方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">12345678910111213</span></span><br></pre></td></tr></table></figure>
<p>3）flink应用程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderPayTimeOutDetection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取数据源，转换为实体类</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">resource</span> <span class="operator">=</span> OrderPayTimeOutDetection.class.getResource(<span class="string">&quot;/orderLog.txt&quot;</span>);</span><br><span class="line">        DataStreamSource&lt;String&gt; dataStreamSource = env.readTextFile(resource.getPath());</span><br><span class="line">        DataStream&lt;OrderEvent&gt; orderEventStream = dataStreamSource.map(line -&gt; &#123;</span><br><span class="line">            String[] split = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderEvent</span>(split[<span class="number">0</span>], split[<span class="number">1</span>], split[<span class="number">2</span>], <span class="keyword">new</span> <span class="title class_">Long</span>(split[<span class="number">3</span>]));</span><br><span class="line">        &#125;).assignTimestampsAndWatermarks(<span class="keyword">new</span> <span class="title class_">AscendingTimestampExtractor</span>&lt;OrderEvent&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">extractAscendingTimestamp</span><span class="params">(OrderEvent orderEvent)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> orderEvent.getTimeStamp() * <span class="number">1000L</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义模式</span></span><br><span class="line">        Pattern&lt;OrderEvent, OrderEvent&gt; orderPayPattern = Pattern.&lt;OrderEvent&gt;begin(<span class="string">&quot;create&quot;</span>).where(<span class="keyword">new</span> <span class="title class_">SimpleCondition</span>&lt;OrderEvent&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">filter</span><span class="params">(OrderEvent orderEvent)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> orderEvent.getEventType().equals(<span class="string">&quot;create&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">                <span class="comment">//宽松近邻，只要下单之后又支付操作即可</span></span><br><span class="line">                .followedBy(<span class="string">&quot;pay&quot;</span>).where(<span class="keyword">new</span> <span class="title class_">SimpleCondition</span>&lt;OrderEvent&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">filter</span><span class="params">(OrderEvent orderEvent)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="keyword">return</span> orderEvent.getEventType().equals(<span class="string">&quot;pay&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">//15分钟之类必须支付完成</span></span><br><span class="line">                .within(Time.minutes(<span class="number">15</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用侧输出流标签表示超时事件</span></span><br><span class="line">        OutputTag&lt;OrderRes&gt; orderTimeoutTag = <span class="keyword">new</span> <span class="title class_">OutputTag</span>&lt;OrderRes&gt;(<span class="string">&quot;order-timeout&quot;</span>) &#123;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将Pattern应用到输入事件流上得到PatternStream</span></span><br><span class="line">        PatternStream&lt;OrderEvent&gt; patternStream = CEP.pattern(orderEventStream.keyBy(OrderEvent::getOrderId), orderPayPattern);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用select方法实现对匹配事件和超时事件的处理</span></span><br><span class="line">        SingleOutputStreamOperator&lt;OrderRes&gt; resStream = patternStream.select(orderTimeoutTag, <span class="keyword">new</span> <span class="title class_">OrderTimeOutSelection</span>(), <span class="keyword">new</span> <span class="title class_">OrderPayedSelection</span>());</span><br><span class="line"></span><br><span class="line">        resStream.print(<span class="string">&quot;payed ok&quot;</span>);</span><br><span class="line">        resStream.getSideOutput(orderTimeoutTag).print(<span class="string">&quot;payed timeout&quot;</span>);</span><br><span class="line"></span><br><span class="line">        env.execute(<span class="string">&quot;Order payTimeOut dDetection&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//超时事件处理</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OrderTimeOutSelection</span> <span class="keyword">implements</span> <span class="title class_">PatternTimeoutFunction</span>&lt;OrderEvent, OrderRes&gt; &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> OrderRes <span class="title function_">timeout</span><span class="params">(Map&lt;String, List&lt;OrderEvent&gt;&gt; pattern, <span class="type">long</span> timeoutTimestamp)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="comment">//由于是单例模式，可以直接取第一个元素</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">orderId</span> <span class="operator">=</span> pattern.get(<span class="string">&quot;create&quot;</span>).get(<span class="number">0</span>).getOrderId();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderRes</span>(orderId, <span class="string">&quot;timeout:&quot;</span> + timeoutTimestamp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正常事件匹配</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OrderPayedSelection</span> <span class="keyword">implements</span> <span class="title class_">PatternSelectFunction</span>&lt;OrderEvent, OrderRes&gt; &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> OrderRes <span class="title function_">select</span><span class="params">(Map&lt;String, List&lt;OrderEvent&gt;&gt; pattern)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">orderId</span> <span class="operator">=</span> pattern.get(<span class="string">&quot;pay&quot;</span>).get(<span class="number">0</span>).getOrderId();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderRes</span>(orderId, <span class="string">&quot;payed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4）测试数据orderLog.txt</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">O9850001,create,,1610543460</span><br><span class="line">O9850002,create,,1610543520</span><br><span class="line">O9850003,create,,1610543580</span><br><span class="line">O9850002,pay,3c586d2g8,1610543580</span><br><span class="line">O9850004,create,,1610543760</span><br><span class="line">O9850001,pay,6c18cs3e8,1610544358</span><br><span class="line">O9850005,create,,1610544361</span><br><span class="line">O9850004,pay,fc1gce2g8,1610543760</span><br><span class="line">O9850003,pay,1c18us3e2,1610544580</span><br><span class="line">O9850006,create,,1610544600</span><br><span class="line">O9850005,pay,gc6g3st15,1610544600</span><br></pre></td></tr></table></figure>
<p>上述订单数据中包含订单号、订单状态、支付回码、时间戳，可以发现，订单O9850003、O9850006的支付时间超过15分钟或者未支付。运行程序，验证猜想。</p>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">payed ok&gt; OrderRes&#123;orderId=O9850001, resultState=<span class="string">&#x27;payed&#x27;</span>&#125;</span><br><span class="line">payed timeout&gt; OrderRes&#123;orderId=O9850006, resultState=<span class="string">&#x27;timeout:1610545500000&#x27;</span>&#125;</span><br><span class="line">payed ok&gt; OrderRes&#123;orderId=O9850005, resultState=<span class="string">&#x27;payed&#x27;</span>&#125;</span><br><span class="line">payed ok&gt; OrderRes&#123;orderId=O9850004, resultState=<span class="string">&#x27;payed&#x27;</span>&#125;</span><br><span class="line">payed timeout&gt; OrderRes&#123;orderId=O9850003, resultState=<span class="string">&#x27;timeout:1610544480000&#x27;</span>&#125;</span><br><span class="line">payed ok&gt; OrderRes&#123;orderId=O9850002, resultState=<span class="string">&#x27;payed&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="订单系统实时对账"><a href="#订单系统实时对账" class="headerlink" title="订单系统实时对账"></a>订单系统实时对账</h3><p>上一个案例中已经有了订单支付状态事件数据，再结合到账事件数据，两者比对就可以进行对账操作。</p>
<p>只要两个数据的支付码能够匹配就是比对成功</p>
<p>1）准备数据payCallBackLog.txt</p>
<p>和上文案例中的orderLog.txt对比可以发现，payCallBackLog.txt最后两条数据没有匹配的，orderLog.txt最后一条没有匹配的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3c586d2g8,yqb,1610543460</span><br><span class="line">6c18cs3e8,wechat,1610543520</span><br><span class="line">fc1gce2g8,yqb,1610543580</span><br><span class="line">1c18us3e2,yqb,1610543590</span><br><span class="line">2c53cw938,wechat,1610543760</span><br><span class="line">gc6g3st15,wechat,1610543860</span><br></pre></td></tr></table></figure>
<p>2）OrderPayCallBackEvent实体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderPayCallBackEvent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String transactId;</span><br><span class="line">    <span class="keyword">private</span> String payChannel;</span><br><span class="line">    <span class="keyword">private</span> Long timeStamp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderPayCallBackEvent</span><span class="params">(String transactId, String payChannel, Long timeStamp)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.transactId = transactId;</span><br><span class="line">        <span class="built_in">this</span>.payChannel = payChannel;</span><br><span class="line">        <span class="built_in">this</span>.timeStamp = timeStamp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略getter/setter方法/toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3）flink对账应用程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付对账</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayReconcile</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义侧输出流标签保存对账不匹配的数据</span></span><br><span class="line">    <span class="comment">//订单支付事件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> OutputTag&lt;OrderEvent&gt; unmatchedOrderPay = <span class="keyword">new</span> <span class="title class_">OutputTag</span>&lt;OrderEvent&gt;(<span class="string">&quot;unmatched_order_pay&quot;</span>) &#123;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//到账事件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> OutputTag&lt;OrderPayCallBackEvent&gt; unmatchedOrderPayCallBack = <span class="keyword">new</span> <span class="title class_">OutputTag</span>&lt;OrderPayCallBackEvent&gt;(<span class="string">&quot;unmatched_order_pay_callback&quot;</span>) &#123;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取数据源，转换为实体类</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">orderEventResource</span> <span class="operator">=</span> PayReconcile.class.getResource(<span class="string">&quot;/orderLog.txt&quot;</span>);</span><br><span class="line">        DataStreamSource&lt;String&gt; dataStreamSource1 = env.readTextFile(orderEventResource.getPath());</span><br><span class="line">        DataStream&lt;OrderEvent&gt; orderEventStream = dataStreamSource1.map(line -&gt; &#123;</span><br><span class="line">            String[] split = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderEvent</span>(split[<span class="number">0</span>], split[<span class="number">1</span>], split[<span class="number">2</span>], <span class="keyword">new</span> <span class="title class_">Long</span>(split[<span class="number">3</span>]));</span><br><span class="line">        &#125;).assignTimestampsAndWatermarks(<span class="keyword">new</span> <span class="title class_">AscendingTimestampExtractor</span>&lt;OrderEvent&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">extractAscendingTimestamp</span><span class="params">(OrderEvent orderEvent)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> orderEvent.getTimeStamp() * <span class="number">1000L</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).filter(data -&gt; !<span class="string">&quot;&quot;</span>.equals(data.getTransactId()));<span class="comment">//过滤得到pay事件</span></span><br><span class="line"></span><br><span class="line">        <span class="type">URL</span> <span class="variable">orderPayResource</span> <span class="operator">=</span> PayReconcile.class.getResource(<span class="string">&quot;/payCallBackLog.txt&quot;</span>);</span><br><span class="line">        DataStreamSource&lt;String&gt; dataStreamSource2 = env.readTextFile(orderPayResource.getPath());</span><br><span class="line">        DataStream&lt;OrderPayCallBackEvent&gt; orderPayEventStream = dataStreamSource2.map(line -&gt; &#123;</span><br><span class="line">            String[] split = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderPayCallBackEvent</span>(split[<span class="number">0</span>], split[<span class="number">1</span>], <span class="keyword">new</span> <span class="title class_">Long</span>(split[<span class="number">2</span>]));</span><br><span class="line">        &#125;).assignTimestampsAndWatermarks(<span class="keyword">new</span> <span class="title class_">AscendingTimestampExtractor</span>&lt;OrderPayCallBackEvent&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">extractAscendingTimestamp</span><span class="params">(OrderPayCallBackEvent orderPayEvent)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> orderPayEvent.getTimeStamp() * <span class="number">1000L</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将2条流进行合流操作，检查匹配项</span></span><br><span class="line">        SingleOutputStreamOperator&lt;Tuple2&lt;OrderEvent, OrderPayCallBackEvent&gt;&gt; resStream = orderEventStream.keyBy(OrderEvent::getTransactId)</span><br><span class="line">                .connect(orderPayEventStream.keyBy(OrderPayCallBackEvent::getTransactId))</span><br><span class="line">                .process(<span class="keyword">new</span> <span class="title class_">PayMatchDetection</span>());</span><br><span class="line"></span><br><span class="line">        resStream.print(<span class="string">&quot;matched_pays&quot;</span>);</span><br><span class="line">        resStream.getSideOutput(unmatchedOrderPay).print(<span class="string">&quot;unmatched-orders-pay&quot;</span>);</span><br><span class="line">        resStream.getSideOutput(unmatchedOrderPayCallBack).print(<span class="string">&quot;unmatched-order-pays-callback&quot;</span>);</span><br><span class="line"></span><br><span class="line">        env.execute(<span class="string">&quot;pay reconcile job&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">PayMatchDetection</span> <span class="keyword">extends</span> <span class="title class_">CoProcessFunction</span>&lt;OrderEvent, OrderPayCallBackEvent, Tuple2&lt;OrderEvent, OrderPayCallBackEvent&gt;&gt; &#123;</span><br><span class="line">        <span class="comment">//定义状态，保存当前已经到来的订单支付事件和支付到账事件</span></span><br><span class="line">        ValueState&lt;OrderEvent&gt; orderPayState;</span><br><span class="line">        ValueState&lt;OrderPayCallBackEvent&gt; orderPayCallBackState;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            orderPayState = getRuntimeContext().getState(<span class="keyword">new</span> <span class="title class_">ValueStateDescriptor</span>&lt;OrderEvent&gt;(<span class="string">&quot;order_pay&quot;</span>, OrderEvent.class));</span><br><span class="line">            orderPayCallBackState = getRuntimeContext().getState(<span class="keyword">new</span> <span class="title class_">ValueStateDescriptor</span>&lt;OrderPayCallBackEvent&gt;(<span class="string">&quot;order_pay_callBack&quot;</span>, OrderPayCallBackEvent.class));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processElement1</span><span class="params">(OrderEvent orderEvent, Context context, Collector&lt;Tuple2&lt;OrderEvent, OrderPayCallBackEvent&gt;&gt; collector)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="comment">//订单支付事件到来时判断有没有对应的支付回调事件</span></span><br><span class="line">            <span class="type">OrderPayCallBackEvent</span> <span class="variable">orderPayCallBackEvent</span> <span class="operator">=</span> orderPayCallBackState.value();</span><br><span class="line">            <span class="keyword">if</span> (orderPayCallBackEvent != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//如果支付回调不为空，说明支付成功回调事件已经到达，输出匹配结果，清空状态</span></span><br><span class="line">                collector.collect(<span class="keyword">new</span> <span class="title class_">Tuple2</span>&lt;&gt;(orderEvent, orderPayCallBackEvent));</span><br><span class="line">                orderPayCallBackState.clear();</span><br><span class="line">                orderPayState.clear();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果支付回调事件没来，注册一个5秒钟的定时器</span></span><br><span class="line">                context.timerService().registerEventTimeTimer((orderEvent.getTimeStamp() + <span class="number">5</span>) * <span class="number">1000L</span>);</span><br><span class="line">                <span class="comment">//更新订单支付事件状态</span></span><br><span class="line">                orderPayState.update(orderEvent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processElement2</span><span class="params">(OrderPayCallBackEvent orderPayCallBackEvent, Context context, Collector&lt;Tuple2&lt;OrderEvent, OrderPayCallBackEvent&gt;&gt; collector)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="comment">//订单支付回调事件到来时判断有没有对应的订单支付事件</span></span><br><span class="line">            <span class="type">OrderEvent</span> <span class="variable">orderEvent</span> <span class="operator">=</span> orderPayState.value();</span><br><span class="line">            <span class="keyword">if</span> (orderEvent != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//如果订单支付事件不为空，说明订单支付事件已经到达，输出匹配结果，清空状态</span></span><br><span class="line">                collector.collect(<span class="keyword">new</span> <span class="title class_">Tuple2</span>&lt;&gt;(orderEvent, orderPayCallBackEvent));</span><br><span class="line">                orderPayCallBackState.clear();</span><br><span class="line">                orderPayState.clear();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果订单支付事件没来，注册一个2秒钟的定时器</span></span><br><span class="line">                context.timerService().registerEventTimeTimer((orderPayCallBackEvent.getTimeStamp() + <span class="number">2</span>) * <span class="number">1000L</span>);</span><br><span class="line">                <span class="comment">//更新订单支付事件状态</span></span><br><span class="line">                orderPayCallBackState.update(orderPayCallBackEvent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTimer</span><span class="params">(<span class="type">long</span> timestamp, OnTimerContext ctx, Collector&lt;Tuple2&lt;OrderEvent, OrderPayCallBackEvent&gt;&gt; out)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="comment">//触发定时器，为了省略删除定时器的操作，可以这样做：</span></span><br><span class="line">            <span class="comment">//如果有一个事件不为空，则另一个对应的事件就还没到达，因为如果两个事件都到达会清空状态，导致两者同时为空</span></span><br><span class="line">            <span class="keyword">if</span> (orderPayState.value() != <span class="literal">null</span>) &#123;</span><br><span class="line">                ctx.output(unmatchedOrderPay, orderPayState.value());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (orderPayCallBackState.value() != <span class="literal">null</span>) &#123;</span><br><span class="line">                ctx.output(unmatchedOrderPayCallBack, orderPayCallBackState.value());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//清空状态</span></span><br><span class="line">            orderPayState.clear();</span><br><span class="line">            orderPayCallBackState.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4）运行应用程序，输出对账成功的和对账失败的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">unmatched-order-pays-callback&gt; OrderPayCallBackEvent&#123;transactId=<span class="string">&#x27;2c53cw938&#x27;</span>, payChannel=<span class="string">&#x27;wechat&#x27;</span>, timeStamp=<span class="number">1610543760</span>&#125;</span><br><span class="line">unmatched-order-pays-callback&gt; OrderPayCallBackEvent&#123;transactId=<span class="string">&#x27;gc6g3st15&#x27;</span>, payChannel=<span class="string">&#x27;wechat&#x27;</span>, timeStamp=<span class="number">1610543860</span>&#125;</span><br><span class="line">unmatched-orders-pay&gt; OrderEvent&#123;orderId=O9850005, eventType=<span class="string">&#x27;pay&#x27;</span>, transactId=<span class="string">&#x27;gc6g3st5&#x27;</span>, timeStamp=<span class="number">1610544600</span>&#125;</span><br></pre></td></tr></table></figure>
<p>可见和之前的猜想一致。</p>
<h2 id="面试题集锦"><a href="#面试题集锦" class="headerlink" title="面试题集锦"></a>面试题集锦</h2><p><strong>1.谈谈flink集群中都有哪些角色？它们都有什么作用？</strong></p>
<p>Flink运行时架构由两种类型的进程组成：一个JobManager，以及多个TaskManager以及提交任务的Client。</p>
<p>JobManager进程由3个不同的组件构成：ResourceManager、Dispatcher、JobMaster。</p>
<p>JobManager在集群中充当管理者Master的角色，是整个集群的协调者，负责接收Flink Job，协调检查点，Failover故障恢复等。</p>
<p>TaskManager是具体执行计算的Worker，在其上执行Flink Job的一组Task，每个TaskManager负责管理其所在节点上的资源，比如内存、磁盘、网络，并将资源的状态向JobManager汇报。</p>
<p>Client是用来提交Flink应用程序的。当用户提交Flink应用程序时，会首先创建一个Client，该Client首先会对用户提交的Flink程序进行预处理，并提交到Flink集群中，Client从用户提交的Flink程序配置中获取JobManager的地址，并建立到JobManager的连接，将Flink Job提交给JobManager。</p>
<p><strong>2.slot和parallelism的关系以及并行度是如何设置的？</strong></p>
<p>一个算子(operator)的子任务(subtask)数，称之为该算子的并行度(parallelism)。</p>
<p>Slot指的是TaskManager能够提供的并发执行能力，是静态的并行能力的概念。而Parallelism则是TaskManager 实际会使用的并发能力，是动态的并行能力的概念。动态占用的资源总数必须小于静态能够提供的资源数。</p>
<p>parallelism有多种设置方法。</p>
<p>可以在算子层面设置，即代码中各个算子后面调用api直接设置。</p>
<p>可以在执行层面设置，即在Environment 中全局设置。</p>
<p>也可以在配置文件中设置，在flink-conf.yaml中配置。</p>
<p>还可以在命令行提交任务时 -p 指定。</p>
<p><strong>3.聊聊Flink的反压机制</strong></p>
<p>反压，即backpressure，也称作背压。通常在流计算处理链路中，如果数据输入的速度高于数据处理的速度，就会导致数据堆积。比如在Flink中，sink端处理数据的速度跟不上source端接收数据的速度，那么就会导致数据堆积，慢慢的，sink端的低效反过来给其上游链路造成了压力。如果说系统能感知到消息堆积，并调整消息发送(接收)的速度，使得数据的发送(接收)速度能和处理速度相协调，那么该系统就是具有背压感知机制的系统。Flink无疑就是具有背压应对机制的系统。</p>
<p>在Flink的<a href="https://www.ververica.com/how-flink-handles-backpressure">官方博客</a>中有这样的实验，将数据接收task的速度调整到其最大速度的60%，数据处理task以同样的速度处理。然后将数据处理task的速度降至其最高速度的30%，此时会产生背压问题，但是在Flink中，此时数据接收task的速度也自然降至其最高速度的30%。最后停止数据接收task的人为降速，数据接收task和数据消费task都达到了其最大速度。这就是flink中的反压处理机制，保证数据接收的速度不会快于数据消费的速度。Flink 使用了高效有界的分布式阻塞队列，类似Java中的通用阻塞队列(BlockingQueue)。下游消费者消费变慢，上游就会受到阻塞。Flink没有使用复杂的机制来处理反压问题， 而是利用自身作为纯数据流引擎的优势来优雅地处理反压问题。</p>
<p><strong>4.端到端的exactly-once保证；如何保证消费kakfa数据不丢失</strong></p>
<p>端到端的一致性指的是贯穿整个流处理应用的每一个组件都保证了其自身的一致性。</p>
<p>端到端的一致性要求数据源（source端）支持可重设数据的读取位置、从故障恢复时数据不会重复写入外设（sink端）。其次flink内部处理器使用checkpoint机制保证一致。</p>
<p>sink端一致性的具体实现有幂等写入和事务写入两种方式。事务性写入又有预写日志（WAL）和两阶段提交（2PC）两种方式。如果外部系统不支持事务，那么可以用预写日志的方式，把结果数据先当成状态保存，然后在收到 checkpoint 完成的通知时，一次性写入 sink 系统。</p>
<p>为了保证端到端的一致性，flink会维护消费kafka的偏移量，内部又有checkpoint机制，因此能够保证消费kafka数据不丢失。</p>
<p><strong>5.说一下flink的状态机制、容错机制</strong></p>
<p>官网对Flink的介绍是：一个用于无界和有界数据流上的有状态计算的分布式处理框架。因此Flink必然有一套状态管理机制来保证其状态的一致性。</p>
<p>在Flink中，状态与特定算子相关联。常用的就是Managed State下的Keyed State。Flink利用checkpoint机制对各个任务的状态进行快照保存，在故障恢复时能够保证状态一致性。Flink通过状态后端来管理状态以及对checkpoint存储，状态后端通常支持内存、分布式文件系统、嵌入式数据库rocksDB。</p>
<p>Flink的容错机制和状态管理是息息相关的。容错本质上就是对状态的容错，就是保证状态不丢失，后续可以重新读取状态恢复现场。</p>
<p><strong>6.谈一下flink的watermark机制</strong></p>
<p>watermark本质上是为了处理乱序或者延迟数据而引入整体的时间延迟机制。主要用来衡量EventTime的进展，能够在一定程度上容忍迟到的数据，能够将迟到的数据纳入正常的处理中。</p>
<p><strong>7.讲讲flink中的几种时间语义</strong></p>
<p>在flink中，有3中不同的时间语义</p>
<ul>
<li>event time：事件创建的时间。比如用户点击按钮触发时。</li>
<li>ingestion time：数据进入flink的时间。即经过一系列的网络传输，进入flink source的时间。</li>
<li>processing time：flink执行operator操作时本地系统时间。从source进来到分配到TaskManager中的slot处理也是耗时的，比如数据重分区，因此存在理论上的时间差。即理论上processing time晚于ingestion time。</li>
</ul>
<p><strong>8.谈谈CEP的应用</strong></p>
<p>CEP是复杂事件处理(Complex Event Processing)的简称。CEP 可以在无界事件流中检测匹配某种模式的事件，输出用户想得到的数据。CEP中的个体模式、组合模式、模式组能够让我们在处理复杂的业务逻辑时游刃有余。具体应用参见本文的订单系统实时对账。全文连载于CSDN博客。请访问个人主页：<a href="https://blog.csdn.net/hellozpc">https://blog.csdn.net/hellozpc</a></p>
<p><strong>9.讲讲你们公司的flink架构以及你们是如何提交实时任务的</strong></p>
<p>我主要用公司的flink集群做司机车辆位置上报数据的处理，我们用的是腾讯云4核的4G的机器。共10台机器，随业务量的增加动态扩展。每台机器的slot数和cpu核数保持一致。我们使用的是standalone模式，并且配置了HA 高可用。我们通常有两种提交作业的方式。</p>
<p>1）直接将flink应用打成jar包，通过命令行或者页面提交任务</p>
<p>2）在代码中使用createRemoteEnvironment远程提交任务，可以集成到SpringBoot应用中</p>
<p><strong>10.你们在使用flink时有没有使用到关系数据库存储数据，如何做的</strong></p>
<p>我们一般不会直接将flink的数据写入到RDBMS中。一般先将处理结果写入kafka，rabbitmq中，再写入mysql。用消息队列来为关系型数据库降低压力。</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据,Flink</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务架构实践</title>
    <url>/post/7411a531.html</url>
    <content><![CDATA[<p><strong>目录</strong></p>
<p>业务背景<br> 微服务概念<br> 微服务技术选型<br> 微服务架构设计<br> 微服务架构设计落地<br> 微服务架构设计过程中积累的心得<br> 总结</p>
<p><strong>一、业务背景</strong></p>
<p><strong>1.1</strong> <strong>产品现状</strong></p>
<p>1、各产品系统独立开发，代码复用率低，系统之间互相调用，耦合严重，系统解耦独立部署困难。<br> 2、传统的单体架构，规模越来越大也越来越笨重；当新功能的开发、功能的重构变得不再敏捷可控；测试者的回归测试边界难以琢磨；系统的上线部署也变的艰难<br> 3、高并发访问下无法提供可靠性服务<br> 4、持续集成、持续部署、持续交付等工程效率化工具严重缺失<br> 5、监控系统、日志分析等系统稳定性工具严重缺失<br> 以上种种情况，都让我们应对需求的变化而变得迟钝。</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/clip_image001.jpg" alt="img"></p>
<p><strong>1.2</strong> <strong>业务需求</strong></p>
<p>架构肯定是为业务需求而生的，先来看看我们面对的业务需求及其特点。平台最主要满足两大类业务需求：面向餐饮企业在餐饮新零售下的经营和运营需求和面向产品及运营团队。<br> 具体来看：<br> 1、餐饮新零售下的餐饮企业经营和运营的痛点</p>
<p>·      如何提升营销能力和管理会员，以更低的成本为餐饮企业带来更多利润</p>
<p>·      如何对数据进行深度挖掘和分析，助力决策者进行运营决策</p>
<p>·      如何掌握实时数据，让决策者及时了解餐厅运营情况</p>
<p>2、面向产品及运营团队</p>
<p>·      主要是提升产品控制能力，促进整体系统的良好运转</p>
<p>因此开发SAAS服务的产品迫在眉睫，需要满足快速开发、灵活升级、高性能、高可用、高稳定、简化运维等更高的需求。</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/clip_image002.jpg" alt="img"></p>
<p>这一步的转型，不是”快”与”慢”，而是”生”与”死”。</p>
<p><strong>二、微服务概念</strong></p>
<p>专注于单一责任与功能独立运行的服务，模组化方式组合出大型应用。</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/clip_image004.jpg" alt="img"></p>
<p><strong>2.1</strong> <strong>特点</strong></p>
<p>·      集中式架构：单体无分散</p>
<p>·      分布式架构：分散压力</p>
<p>·      微服务架构：分散能力</p>
<p><img src="/images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/clip_image006.jpg" alt="img"></p>
<p><strong>2.2</strong> <strong>微服务架构优势</strong></p>
<p>·      每个微服务组件都是简单灵活的，能够独立部署。不再像单体应用时代，应用需要一个庞大的应用服务器来支撑。</p>
<p>·      可以由一个小团队负责更专注专业，相应的也就更高效可靠。</p>
<p>·      微服务之间是松耦合的，微服务内部是高内聚的，每个微服务很容易按需扩展。</p>
<p><strong>三、微服务技术选型和微服务的问题</strong></p>
<p><strong>3.1</strong> <strong>技术选型</strong></p>
<p><img src="/images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/clip_image008.jpg" alt="img"></p>
<p><strong>3.1.1</strong> <strong>技术矩阵结论</strong></p>
<p>·      Netflix提供了比较全面的解决方案</p>
<p>·      Spring Cloud对于Netflix的封装比较全面</p>
<p>·      Spring Cloud基于Spring Boot，团队有基础</p>
<p>·      Spring Cloud提供了Control Bus能够帮助实现监控埋点</p>
<p>·      业务应用部署在阿里云，Spring Cloud对12 Factors以及Cloud-Native的支持，有利于在云环境下使用</p>
<p><strong>3.1.2</strong> <strong>团队期望</strong></p>
<p>·      首先支持Rest</p>
<p>·      团队技术栈和实例比较单薄，希望对新的技术平滑的学习曲线和能够Hold住</p>
<p>·      小团队，希望能够有一个比较全面的解决方案</p>
<p>·      目前团队主要采用Spring Cloud + Spring Boot的方式实现服务化</p>
<p>有关技术选型详细分析，请查看我的上一篇文章<a href="http://mp.weixin.qq.com/s?__biz=MzI4NjY0NTYwMg==&mid=2247483821&idx=1&sn=e54f3a6d0ff89f892c05bc8ec9fc5da3&chksm=ebd88da0dcaf04b64033dda78a64475d478b80a587a6a5270d0d0b6c67c2d1fcb4d4dba78473&scene=21#wechat_redirect">《我的技术选型》</a>。</p>
<p><strong>3.2</strong> <strong>微服务带来的问题</strong></p>
<p>·      依赖服务变更很难跟踪，其他团队的服务接口文档过期怎么办？依赖的服务没有准备好，如何验证我开发的功能。</p>
<p>·      部分模块重复构建，跨团队、跨系统、跨语言会有很多的重复建设。</p>
<p>·      微服务放大了分布式架构的系列问题，如分布式事务怎么处理？依赖服务不稳定怎么办？</p>
<p>·      运维复杂度陡增，如：部署物数量多、监控进程多导致整体运维复杂度提升。</p>
<p><img src="/images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/clip_image010.jpg" alt="img"></p>
<p>上面这些问题我们应该都遇到过，并且总结形成了自己的一些解决方案，比如提供文档管理、服务治理、服务模拟的工具和框架； 实现统一认证、统一配置、统一日志框架、分布式汇总分析； 采用全局事务方案、采用异步模拟同步；搭建持续集成平台、统一监控平台等等。</p>
<p>微服务架构是一把双刃剑，虽然解决了集中式架构和分布式架构的问题，却带来了如上种种问题。因此我们是需要一个微服务应用平台才能整体性的解决这些问题。</p>
<p><strong>四、微服务架构设计</strong></p>
<p><strong>4.1</strong> <strong>微服务应用架构设计原则</strong></p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/clip_image012.jpg" alt="img"></p>
<p><strong>4.2</strong> <strong>微服务应用架构设计目标</strong></p>
<p>微服务架构设计的目标，满足快速开发、灵活升级、高性能、高可用、高稳定、简化运维等更高的需求。</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/clip_image014.jpg" alt="img"></p>
<p><strong>4.3</strong> <strong>微服务应用总体架构</strong></p>
<p>微服务应用平台的总体架构，主要是从开发集成、微服务运行容器与平台、运行时监控治理和外部渠道接入等维度来划分和考虑的。</p>
<p>·      开发集成：主要是搭建一个微服务平台需要具备的一些工具和仓库</p>
<p>·      运行时：要有微服务平台来提供一些基础能力和分布式的支撑能力，我们的微服务运行容器则会运行在这个平台之上。</p>
<p>·      监控治理：则是致力于在运行时能够对受管的微服务进行统一的监控、配置等能力。</p>
<p>·      服务网关： 则是负责与前端的WEB应用 移动APP 等渠道集成，对前端请求进行认证鉴权，然后路由转发。</p>
<p><strong>4.4</strong> <strong>微服务框架概览</strong></p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/clip_image016.jpg" alt="img"></p>
<p>这里不详细讲解服务框架中每一个组件，另开一篇文章来讲解。</p>
<p><strong>五、微服务架构设计落地</strong></p>
<p><strong>5.1</strong> <strong>基础环境</strong></p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/clip_image018.jpg" alt="img"></p>
<p>一个企业的IT建设非常重要的三大基础环境：团队协作环境、服务基础环境、IT基础设施。</p>
<p>·      团队协作环境：主要是DevOps领域的范畴，负责从需求到计划任务，团队协作，再到质量管理、持续集成和发布。</p>
<p>·      服务基础环境：指的是微服务应用平台，其目标主要就是要支撑微服务应用的设计开发测试，运行期的业务数据处理和应用的管理监控。</p>
<p>·      IT基础设施：主要是各种运行环境支撑如IaaS (VM虚拟化)和CaaS (容器虚拟化)等实现方式。</p>
<p><strong>5.2</strong> <strong>服务通信</strong></p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/clip_image020.jpg" alt="img"></p>
<p>服务间的通信，往往采用HTTP+REST 和 RPC通信协议。</p>
<p>HTTP+REST，对服务约束完全靠提供者的自觉。</p>
<p>·      特点是简单，对开发使用友好。</p>
<p>·      缺点治理起来困难，连接的无状态，缺失多路复用、服务端推送等。</p>
<p>RPC对通信双方定义了数据约束。</p>
<p>·      连接大多基于长连接以获得性能的提升及附带的服务端推、调用链路监控埋点等，增强了系统的附加能力。</p>
<p>·      缺点是对调用端提出了新的要求。</p>
<p>综合来看，RPC从性能、契约优先来说具有优势，如何做到扬长避短呢？<br> 引入GateWay层，让REST与RPC的优点进行融合，在GateWay层提供REST的接入能力。</p>
<p><strong>5.3</strong> <strong>服务注册**</strong>/<strong>**发现</strong></p>
<p>以前的单体应用之间互相调用时配置个IP或域名就行了，但在微服务架构下，服务提供者会有很多，手工配置IP地址或域名又变成了一个耦合和繁琐的事情。那么服务自动注册发现的方案就解决了这个问题。<br> 我们的服务注册发现能力是依赖SpringCloud Eureka组件实现的。服务在启动的时候，会将自己要发布的服务注册到服务注册中心；运行时，如果需要调用其他微服务的接口，那么就要先到注册中心获取服务提供者的地址，拿到地址后，通过微服务容器内部的简单负载均衡期进行路由用。</p>
<p>Eureka Server特点：</p>
<p>·      Eureka Client会缓存服务注册信息</p>
<p>·      Eureka Server的注册信息只存储在内存中</p>
<p>·      Eureka的注册只针对application级别，不支持更细粒度的服务注册，如单个服务Rest</p>
<p>·      服务每隔30秒向Eureka Server发送心跳，不建议修改心跳时间。Eureka用这个时间来判断集群内是否存在大范围的服务通信异常</p>
<p>·      如果在15分钟内有85%的服务没有被续约，则Eureka Server停止移除已注册的服务，以保障已注册的服务信息不丢失</p>
<p>·      Eureka Server之间的数据同步，采用全量拉取，增量同步的方式</p>
<p>·      Eureka 满足分布式事务中的CAP理论中的AP</p>
<p><strong>5.4</strong> <strong>集中式配置管理</strong></p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/clip_image022.jpg" alt="img"></p>
<p>微服务分布式环境下，一个系统拆分为很多个微服务，一定要告别运维手工修改配置配置的方式。需要采用集中配置管理的方式来提升运维的效率。<br> 配置文件主要有运行前的静态配置和运行期的动态配置两种。</p>
<p>·      静态配置通常是在编译部署包之前设置好。</p>
<p>·      动态配置则是系统运行过程中需要调整的系统变量或者业务参数。</p>
<p>要想做到集中的配置管理，那么需要注意以下几点。</p>
<p>·      配置与介质分离，这个就需要通过制定规范的方式来控制。</p>
<p>·      配置的方式要统一，格式、读写方式、变更热更新的模式尽量统一，要采用统一的配置框架。</p>
<p>·      需要运行时需要有个配置中心来统一管理业务系统中的配置信息。</p>
<p>概念抽象：<br> 介质，是源码编译后的产物与环境无关，多环境下应该是可以共用的如：jar</p>
<p><strong>5.5</strong> <strong>统一认证鉴权</strong></p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/clip_image024.jpg" alt="img"></p>
<p>安全认证方面，我们基于Spring Security OAuth2 + JWT做安全令牌，实现统一的安全认证与鉴权，使得微服务之间能够按需隔离和安全互通。<br> 认证鉴权一定是个公共的服务，而不是多个系统各自建设。</p>
<p><strong>5.6</strong> <strong>分布式调用</strong></p>
<p>微服务架构下，相对于传统部署方式，存在更多的分布式调用，那么“如何在不确定的环境中交付确定的服务”，这句话可以简单理解为，我所依赖的服务的可靠性是无法保证的情况下，我如何保证自己能够正常的提供服务，不被我依赖的其他服务拖垮？<br> 我们采用的方案：</p>
<p>·      合理的超时时间</p>
<p>·      合理的重试机制</p>
<p>·      合理的异步机制</p>
<p>·      合理的限流机制（调用次数和频率）</p>
<p>·      合理的降级机制</p>
<p>·      合理的熔断机制</p>
<p>推荐SEDA架构来解决这个问题。<br> SEDA : staged event-driven architecture本质上就是采用分布式事件驱动的模式，用异步模拟来同步，无阻塞等待，再加上资源分配隔离结起来的一个解决方案。</p>
<p><strong>5.7</strong> <strong>分布式事务</strong></p>
<p><strong>分布式事务**</strong>-CAP**</p>
<p>·      C 分布式环境下多个节点的数据是否强一致</p>
<p>·      A 分布式服务能一直保证可用状态</p>
<p>·      P 网络分区的容错性</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/clip_image025.jpg" alt="img"></p>
<p><strong>分布式事务**</strong>-<strong>**策略</strong></p>
<p>·      避免跨库事务，尽可能相关表在同一个DB</p>
<p>·      2PC 3PC TCC 补偿模式等， 耗时且复杂</p>
<p>·      基于MQ的最终一致性 简单、高效、易于理解</p>
<p>·      将远程分布式事务拆解成一系列本地的事务</p>
<p><strong>分布式事务**</strong>-<strong><strong>基于</strong></strong>MQ**</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/clip_image027.jpg" alt="img"></p>
<p><strong>5.8</strong> <strong>服务拆分</strong></p>
<p><strong>服务拆分方式</strong></p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/clip_image029.jpg" alt="img"></p>
<p>AKF扩展立方体，是抽象总结的应用扩展的三个维度。</p>
<p>·      X轴 扩展部署实例，就是讲单体系统多运行几个实例，做个集群加负载均衡的模式。</p>
<p>·      Y轴 业务领域分离，就是基于不同的业务拆分。</p>
<p>·      Z轴 数据隔离分区，比如共享单车在用户量激增时，集群模式撑不住了，那就按照用户请求的地区进行数据分区，北京、上海、深圳等多建几个集群。</p>
<p><strong>服务拆分要点</strong></p>
<p>·      低耦合、高内聚：一个服务完成一个独立的功能</p>
<p>·      按照团队结构：小规模团队维护，快速迭代</p>
<p><strong>5.9</strong> <strong>数据库拆分</strong></p>
<p>单库单表难以支撑日益增长的业务量和数据量，服务拆分了数据库也跟着拆分。</p>
<p> <strong>5.9.1</strong> <strong>模式</strong></p>
<p>·      垂直拆分</p>
<p>·      水平拆分</p>
<p><strong>5.9.2</strong> <strong>原则</strong></p>
<p>·      尽可能不拆分</p>
<p>·      避免跨库事务</p>
<p>·      单表量级1000w</p>
<p>·      避免垮裤join（冗余、全局表）</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/clip_image030.jpg" alt="img"></p>
<p><strong>5.10</strong> <strong>日志管理</strong></p>
<p>日志主要有三种，系统日志，业务日志，跟踪日志。有了这些日志，在出问题的时候能够帮助我们获取一些关键信息进行问题定位。<br> 要想做到，出了问题能够追根溯源，那么我们需要一个可以将整个完整的请求调用链串联起来的标识，这个标识能够让我们快速定位问题发生的具体时间地点以及相关信息，能够快速还原业务交易全链路。对这些日志与流水的细节处理，对于系统运维问题定位有非常大的帮助。通常开源框架只是提供基础的框架，而设计一个平台则一定要考虑直接提供统一规范的基础能力。</p>
<p>分布式跟踪</p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/clip_image032.jpg" alt="img"></p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/clip_image034.jpg" alt="img"></p>
<p><strong>5.11</strong> <strong>服务契约与**</strong>API**<strong>管理</strong></p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/clip_image036.jpg" alt="img"></p>
<p>对于前面提到的微服务带来的依赖管理问题，我们需要提供API管理能力。说到API管理，那首先就用提到服务契约。<br> 服务契约，主要描述服务接口的输入输出规格标准和其他一些服务调用集成相关的规格内容。</p>
<p><strong>5.12</strong> <strong>服务契约与服务模拟</strong></p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/clip_image038.jpg" alt="img"></p>
<p>有了服务契约，研发人员就可以方便的获取到依赖服务变更的情况，能够及时的根据依赖服务的变化调整自己的程序，并且能够方便的进行模拟测试验证。<br> 根据契约生成模拟服务也就是我们常说的服务挡板，这样即使依赖的其他服务还无法提供功能，我们也可以通过挡板来进行联调测试。</p>
<p><strong>5.13</strong> <strong>微服务容器</strong></p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/clip_image040.jpg" alt="img"></p>
<p>我们要做稳定、高效、易扩展的微服务应用，实际上我们需要做的事情还是非常多的。如果没有一个统一的微服务容器，这些能力在每个微服务组件中都需要建设一遍，也很难集成到一起。有了统一的微服务运行容器和一些公共的基础服务，前面所提到的微服务架构下部分组件重复建设的问题也迎刃而解。</p>
<p><strong>5.14</strong> <strong>持续集成与持续部署</strong></p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/clip_image042.jpg" alt="img"></p>
<p>在运维方面，首先我们要解决的就是持续集成和持续交付，能够方便的用持续集成环境把程序编译成介质包和部署包并持续稳定的部署到每个环境。<br> 概念抽象：<br> 介质：是源码编译后的产物与环境无关，多环境下应该是可以共用的。如：jar<br> 配置：则是环境相关的信息。<br> 部署包=配置+介质。</p>
<p><strong>5.15</strong> <strong>微服务平台与容器云、**</strong>DevOps**<strong>的关系</strong></p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/clip_image044.jpg" alt="img"></p>
<p>就微服务应用平台本身来说，并不依赖DevOps和容器云，开发好的部署包可以运行在物理机、虚拟机或者是容器中。然而当微服务应用平台结合了DevOps和容器云之后，我们就会发现，持续集成和交付变成了一个非常简单便捷并且又可靠的过程。简单几步操作，整套开发、测试、预发或者生产环境就能够搭建完成。<br> 整个过程的复杂度都由平台给屏蔽掉了，通过三大基础环境的整合，我们能够使分散的微服务组件更简单方便的进行统一管理和运维交付。</p>
<p><strong>5.16</strong> <strong>技术团队的组织</strong></p>
<p><strong>技术团队组织</strong> <strong>–</strong> <strong>小团队</strong></p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/clip_image046.jpg" alt="img"></p>
<p>根据“康威定律”，软件架构是由组织的架构决定的，因此按照贝索斯“two-pizza”团队的理论和敏捷方法，构建小的团队，可以有效减少沟通成本，有利于团队的自治。<br> 我们通过让一个小的团队有比较全面的建制，Leader（熟悉业务和技术）+ 前端工程师 + 后端工程师，往往可以能够比较独立地承接一个或者几个业务的工作。这样团队成员整体负责一个或者几个业务模块，可以极大地提高团队成员的参与感、使命感和责任感，团队成员相互帮助，高度自治，大家要么一起成功，要么一起失败。</p>
<p><strong>技术团队组织</strong> <strong>–</strong> <strong>团队划分</strong></p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/clip_image048.jpg" alt="img"></p>
<p>团队的划分，是按照业务线划分的。随着业务的复杂度的增加，可以按照业务/子业务线的方式来划分团队，但并不是绝对的扁平化，而是严格遵循two-pizza原则。<br> 业务线的划分常常按业务细分，技术团队要负责支持全部业务线，因此技术团队的划分通常按系统或者是业务，Two pizza团队的原则在组织层级的任何部分都适用，当人数过多时，必须继续拆分。</p>
<p><strong>技术团队组织</strong> <strong>–</strong> <strong>团队合作</strong></p>
<p><img src="/../images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5/clip_image050.jpg" alt="img"></p>
<p><strong>技术团队组织</strong> <strong>–</strong> <strong>结果导向</strong></p>
<p>\1.    主人翁意识（Ownership）</p>
<p>\2.    行动力（Bias for Action）</p>
<p>\3.    吃自己的狗粮（Eat your dog food）<br> • 工程师负责从需求调研、设计、开发、测试、部署、维护、监控、功能升级等一系列的工作，也就是说软件工程师负责应用或者服务的全生命周期的所有工作<br> • 运维是团队成员的第一要务，在强大的自动化运维工具的支撑下，软件工程师必须负责服务或者应用的SLA</p>
<p>\4.    开发人员参与架构设计，而不是架构师参与开发<br> • 研发人员是Owner，对业务和团队负责<br> • 强调抽象和简化，将复杂的问题分解成简单的问题，并有效解决，避免过度设计<br> • 鼓励用新技术解决问题，但强调掌控力</p>
<p><strong>六、微服务架构设计过程中积累的心得</strong></p>
<p>·      深入理解业务</p>
<p>·      设计阶段要追求完美，实践阶段要考虑实际情况作出平衡</p>
<p>·      容错能力</p>
<p>·      监控先行</p>
<p>·      任何上线可回滚</p>
<p><strong>七、总结</strong></p>
<p>微服务架构是技术升级，但更多的是管理模式的升级、思维方式的转变。</p>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,spring cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>拷贝网页上的公式到本地</title>
    <url>/post/d1234036.html</url>
    <content><![CDATA[<h3 id="有时在写文章或者搞别的东西的时候需要用到别人的公式，然而一般这些公式都是复制不了的，如果这个时候一个个去打可以说相当要命。然而我们可以通过：mathpix这个神器轻轻松松解决这个问题。有了它之后，在哪看到公式直接截图就可以帮我们翻译成latex公式。"><a href="#有时在写文章或者搞别的东西的时候需要用到别人的公式，然而一般这些公式都是复制不了的，如果这个时候一个个去打可以说相当要命。然而我们可以通过：mathpix这个神器轻轻松松解决这个问题。有了它之后，在哪看到公式直接截图就可以帮我们翻译成latex公式。" class="headerlink" title="有时在写文章或者搞别的东西的时候需要用到别人的公式，然而一般这些公式都是复制不了的，如果这个时候一个个去打可以说相当要命。然而我们可以通过：mathpix这个神器轻轻松松解决这个问题。有了它之后，在哪看到公式直接截图就可以帮我们翻译成latex公式。"></a>有时在写文章或者搞别的东西的时候需要用到别人的公式，然而一般这些公式都是复制不了的，如果这个时候一个个去打可以说相当要命。然而我们可以通过：mathpix这个神器轻轻松松解决这个问题。有了它之后，在哪看到公式直接截图就可以帮我们翻译成latex公式。<img src="/../images/%E6%8B%B7%E8%B4%9D%E7%BD%91%E9%A1%B5%E4%B8%8A%E7%9A%84%E5%85%AC%E5%BC%8F%E5%88%B0%E6%9C%AC%E5%9C%B0/20190227174410743.png" alt="img"></h3><h3 id="就像上面这个，一截就变成了下面的这一串latex公式描述"><a href="#就像上面这个，一截就变成了下面的这一串latex公式描述" class="headerlink" title="就像上面这个，一截就变成了下面的这一串latex公式描述"></a>就像上面这个，一截就变成了下面的这一串latex公式描述</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\alpha = - \arctan \left( \frac &#123; z _ &#123; 2 &#125; \sin \vartheta _ &#123; 2 &#125; - z _ &#123; 1 &#125; \sin \vartheta _ &#123; 1 &#125; &#125; &#123; z _ &#123; 2 &#125; \cos \vartheta _ &#123; 2 &#125; - z _ &#123; 1 &#125; \cos \vartheta _ &#123; 1 &#125; &#125; \right)</span><br></pre></td></tr></table></figure>
<h3 id="接着，我们可以把这段描述放到Typora等markdown工具中，公式又将美好的出现在我们面前。"><a href="#接着，我们可以把这段描述放到Typora等markdown工具中，公式又将美好的出现在我们面前。" class="headerlink" title="接着，我们可以把这段描述放到Typora等markdown工具中，公式又将美好的出现在我们面前。"></a>接着，我们可以把这段描述放到Typora等markdown工具中，公式又将美好的出现在我们面前。</h3><h3 id="当然到这里其实是不完整的。因为word虽然也可以支持latex公式，但还是比较麻烦。有没有方法能直接将上面的代码转成word直接能识别的格式呢？"><a href="#当然到这里其实是不完整的。因为word虽然也可以支持latex公式，但还是比较麻烦。有没有方法能直接将上面的代码转成word直接能识别的格式呢？" class="headerlink" title="当然到这里其实是不完整的。因为word虽然也可以支持latex公式，但还是比较麻烦。有没有方法能直接将上面的代码转成word直接能识别的格式呢？"></a>当然到这里其实是不完整的。因为word虽然也可以支持latex公式，但还是比较麻烦。有没有方法能直接将上面的代码转成word直接能识别的格式呢？</h3><h3 id="有。还是以Typora为例，如下图所示选择“复制到-MS-Word”"><a href="#有。还是以Typora为例，如下图所示选择“复制到-MS-Word”" class="headerlink" title="有。还是以Typora为例，如下图所示选择“复制到 MS Word”"></a>有。还是以Typora为例，如下图所示选择“复制到 MS Word”</h3><p><img src="/../images/%E6%8B%B7%E8%B4%9D%E7%BD%91%E9%A1%B5%E4%B8%8A%E7%9A%84%E5%85%AC%E5%BC%8F%E5%88%B0%E6%9C%AC%E5%9C%B0/20190227174837162.png" alt="img"></p>
<h3 id="在word或者PowerPoint中右键选择"><a href="#在word或者PowerPoint中右键选择" class="headerlink" title="在word或者PowerPoint中右键选择"></a>在word或者PowerPoint中右键选择</h3><p><img src="/../images/%E6%8B%B7%E8%B4%9D%E7%BD%91%E9%A1%B5%E4%B8%8A%E7%9A%84%E5%85%AC%E5%BC%8F%E5%88%B0%E6%9C%AC%E5%9C%B0/20190227175130769.png" alt="img"></p>
<h3 id="公式就优雅的过来啦！！！"><a href="#公式就优雅的过来啦！！！" class="headerlink" title="公式就优雅的过来啦！！！"></a>公式就优雅的过来啦！！！</h3><p><img src="/../images/%E6%8B%B7%E8%B4%9D%E7%BD%91%E9%A1%B5%E4%B8%8A%E7%9A%84%E5%85%AC%E5%BC%8F%E5%88%B0%E6%9C%AC%E5%9C%B0/20190227175214295.png" alt="img"></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>-技术</tag>
      </tags>
  </entry>
  <entry>
    <title>教你如何修改win7旗舰版系统远程桌面端口</title>
    <url>/post/6e092dae.html</url>
    <content><![CDATA[<p>**<a href="http://www.windows7en.com/">win7旗舰版</a>**系统中的远程终端服务是一项功能非常强大的服务，同时也成了入侵者长驻主机的通道，入侵者可以利用一些手段得到管理员账号和密码并入侵主机。下面，墨染暖心教你如何通过修改win7旗舰版远程桌面默认端口，防范黑客入侵。</p>
<p>　　远程终端服务基于端口3389。入侵者一般先扫描主机开放端口，一旦发现其开放了3389端口，就会进行下一步的入侵，所以我们只需要修改该务默认端口就可以避开大多数入侵者的耳目。</p>
<p>　　<strong>具体操作步骤：</strong></p>
<p>　　1、打开“开始“→”运行”，输入“regedit”，按下回车键，打开注册表，依次点开：[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\Wds\rdpwd\Tds\tcp]，可以看到PortNumber的默认值是3389，修改成所希望的端口即可，例如此处墨染暖心用的是8080，同时，要注意点选“十进制”。见下图：</p>
<p><img src="/../images/%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9win7%E6%97%97%E8%88%B0%E7%89%88%E7%B3%BB%E7%BB%9F%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E7%AB%AF%E5%8F%A3/4-140923161S0V8.jpg" alt="修改成所希望的端口"></p>
<p>　　2、打开[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp]，将PortNumber的值(默认是3389)修改成端口8080，注意使用十进制。</p>
<p>　　PS：网上很多教程到此就结束了。的确，如果是XP或2003系统，这样客户端就可以通过8080端口进行远程桌面连接。但是，在win7旗舰版系统下，光修改以上两处的端口为8080，客户端是无法进行远程桌面连接的。究其原因，原来<a href="http://www.windows7en.com/">win7旗舰版</a> 加强了自带防火墙的功能。下面是一张已经将远程桌面的本地端口修改为8080后的截图，原本默认本地端口为3389：</p>
<p><img src="/../images/%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9win7%E6%97%97%E8%88%B0%E7%89%88%E7%B3%BB%E7%BB%9F%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E7%AB%AF%E5%8F%A3/4-14092316194EV.jpg" alt="远程桌面的本地端口修改为8080后"></p>
<p>　　再PS：从入站规则里的防火墙策略里，如果不手动修改防火墙策略的端口为8080，是不能发现有任何一条防火墙策略的本地端口为8080的。也就是说，在入站规则里，如果不开启对8080端口的放行，防火墙会默认拒绝外界访问8080端口，这也是客户端不能成功进行远程桌面连接的原因。</p>
<p>　　3、只有通过修改注册表的方式来修改防火墙策略。在注册表中依次打开[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\SharedAccess\Defaults\FirewallPolicy\FirewallRules]，将RemoteDesktop-In-TCP的值中包含3389的数据改成8080，并保存。</p>
<p>　　4、接着依次点开[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\SharedAccess\Parameters\FirewallPolicy\FirewallRules]，将RemoteDesktop-In-TCP的值中包含3389的数据改成8080，并保存。</p>
<p>　　5、修改完毕，重新启动电脑，那么以后远程登录的时候使用端口8080就可以了。</p>
<p>　　具体的访问的方法是IP:端口号，如192.168.100.100：8080，如下图：</p>
<p><img src="/../images/%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9win7%E6%97%97%E8%88%B0%E7%89%88%E7%B3%BB%E7%BB%9F%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E7%AB%AF%E5%8F%A3/4-140923162049633.jpg" alt="端口号，如192.168.100.100：8080"></p>
]]></content>
      <categories>
        <category>win7</category>
      </categories>
      <tags>
        <tag>-win7</tag>
      </tags>
  </entry>
  <entry>
    <title>数据仓库的治理一塌糊涂，没有管理好数据，最后都会怎么样</title>
    <url>/post/1acb5491.html</url>
    <content><![CDATA[<p>“年年数据要治理，数据年年治不好”。</p>
<p>数仓治理的老大难，通常是跟着*<strong>*业务需求快跑**</strong>，要不是*<strong>*数据零散在各个团队**</strong>，或者是大家的*<strong>*研发规范有不同**</strong>，作为一项通过维度模型来约束规范的工种来讲，“模型”的治理难度，大于“架构”。</p>
<p>目前整个行业通常的模型治理方法，是规定一种建模规范，大家在编码的过程中各自遵守。当业务开始变得模糊不清的时候，再专门抽调时间，来做人工治理。就像黄河一样，流沙清理了一次又一次，但上游还是会冲下新的流沙。</p>
<p><img src="/../images/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E7%9A%84%E6%B2%BB%E7%90%86%E4%B8%80%E5%A1%8C%E7%B3%8A%E6%B6%82%EF%BC%8C%E6%B2%A1%E6%9C%89%E7%AE%A1%E7%90%86%E5%A5%BD%E6%95%B0%E6%8D%AE%EF%BC%8C%E6%9C%80%E5%90%8E%E9%83%BD%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7/32-%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E6%95%B0%E6%8D%AE%E6%B2%BB%E7%90%861.png" alt="数据仓库数据治理,数据仓库建模,数据仓库维度建模,数据仓库建模理论"></p>
<p>数仓的假设既然都是采用的维度建模，那么其设计思想必然是自下而上的进行建设，*<strong>*与架构进行类比，也就是先做好子模块，最后做顶层设计**</strong>。</p>
<p>但如果设计者不熟悉对应的领域模型，一旦业务上发生了变动，一张核心表动辄几百张的引用，会让重构的工作变得困难无比。</p>
<p>强如阿里，会做一些更进一步的工作，比如模型的健康分，看看你的*<strong>*存储成本有多少、计算成本有多少、生命周期是不是合理、代码规范有没有避免全表扫描**</strong>，等等。但这些工作只能发现一些常规的问题，也依然需要进行人工治理，不仅效率上没有得到提高，每天推送的邮件也会让你产生心烦。</p>
<p>投入多少人，投入多少时间，终归是解决了一时的问题，而非长远。</p>
<p><img src="/../images/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E7%9A%84%E6%B2%BB%E7%90%86%E4%B8%80%E5%A1%8C%E7%B3%8A%E6%B6%82%EF%BC%8C%E6%B2%A1%E6%9C%89%E7%AE%A1%E7%90%86%E5%A5%BD%E6%95%B0%E6%8D%AE%EF%BC%8C%E6%9C%80%E5%90%8E%E9%83%BD%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7/32-%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E6%95%B0%E6%8D%AE%E6%B2%BB%E7%90%862.png" alt="数据仓库数据治理,数据仓库建模,数据仓库维度建模,数据仓库建模理论"></p>
<p>因此，换个思路考虑问题，当业务高速发展时，数仓势必要跟着跑，不然业务都跪了，数仓又有何用。但业务通常不会一直处于高速发展的阶段，就像长跑一样，总有跑跑停停的时候，因此如果我们*<strong>*遵循一定的做事方法，流程上多一点步骤**</strong>，那么就会极大的延缓数仓治理的问题。</p>
<p>即不追求长久的问题解决，而以一段时间内的稳定为目标，比如一年。当业务已经发展到比较稳定的阶段，再回过头来做治理，既能够避免因为业务变动而影响模型重构，也可以节省大家的精力和压力，就不失为一种解决思路了。</p>
<p>完美的解决方案通常不存在，退而求其次是大多数人的选择。当技术无法解决问题时，不妨用另类思路去解决。</p>
<h3 id="0x01-事前：理论"><a href="#0x01-事前：理论" class="headerlink" title="\|0x01 事前：理论**"></a><strong><em>\</em>|0x01 事前：理论**</strong></h3><p>数仓的指导思想是什么？如果一定有定义，那么就是：以维度建模为基础，根据业务域和数据域设计主题模型，构建一致性的维度和事实。</p>
<p>以下简略叙述理论，维度模型已经有很多的讲解文章，这里只是起到思路讲解的作用。</p>
<p>从宏观上讲，首先要了解数据的统计周期，是*<strong>*增量同步**</strong>，*<strong>*还是全量同步**</strong>，并根据预估的数据量设计ODS。</p>
<p>其次，要大致*<strong>*了解业务域的划分情况**</strong>，将一类不可拆分的行为作为一类，比如支付、比如搜索。当有了宏观的划分之后，就可以根据这些业务过程，构建最明细粒度的事实表，也就是DWD。</p>
<p>再次，基于DWD便可以*<strong>*根据主题对象进行数据建模**</strong>，构建公共粒度的汇总指标事实表。很多时候，由于需要加工一定的业务逻辑，可能带来DWD依赖DWS的情况，比如基于时间序列的业务过程，这里就需要避免统计类型或者业务类型的逻辑，加工到DWD中，这部分应该放到ADS层去做。</p>
<p><img src="/../images/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E7%9A%84%E6%B2%BB%E7%90%86%E4%B8%80%E5%A1%8C%E7%B3%8A%E6%B6%82%EF%BC%8C%E6%B2%A1%E6%9C%89%E7%AE%A1%E7%90%86%E5%A5%BD%E6%95%B0%E6%8D%AE%EF%BC%8C%E6%9C%80%E5%90%8E%E9%83%BD%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7/32-%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E6%95%B0%E6%8D%AE%E6%B2%BB%E7%90%863.png" alt="数据仓库数据治理,数据仓库建模,数据仓库维度建模,数据仓库建模理论"></p>
<p>最后，*<strong>*定义好一致性的维度**</strong>，即DIM。通常是静态的信息，如果存在动态可变的属性，还是放到DWD比较合适。</p>
<p>从这里开始，每位研发同学，都可以掌握维度建模的核心思想，通常公共层建设好之后，应该是变动极其小的，为了避免设计不好导致的后续维护问题，模型一定要有*<strong>*评审**</strong>，即便是忙，也至少要找一个人帮忙进行*<strong>*CodeReview**</strong>。</p>
<p>根据这些建模方法，我们就可以愉快的进行ADS层的业务开发了。</p>
<h3 id="0x02-事中：方法"><a href="#0x02-事中：方法" class="headerlink" title="\|0x02 事中：方法**"></a><strong><em>\</em>|0x02 事中：方法**</strong></h3><p>掌握了建模方法，不代表可以发挥创造力，就像谷歌编码规范一样，有很多的Tips要贯彻强调：</p>
<p>不仅表名设计要有规范，字段命名也要有规范，指标如果不能根据命名猜出大概的涵义，那么设计上就是失败的；</p>
<p>善于利用分区、临时表等方法，降低表的依赖层级；</p>
<p>扩展字段按照key-value的形式进行存储，虽然get_json_object慢，但它很简洁；</p>
<p>小数精度要用*<strong>*Decimal**</strong>，而不是会出问题的Double；</p>
<p>每个任务都要进行摸底，*<strong>*解决会产生数据倾斜的地方**</strong>，常见于Join的空值问题。</p>
<p><img src="/../images/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E7%9A%84%E6%B2%BB%E7%90%86%E4%B8%80%E5%A1%8C%E7%B3%8A%E6%B6%82%EF%BC%8C%E6%B2%A1%E6%9C%89%E7%AE%A1%E7%90%86%E5%A5%BD%E6%95%B0%E6%8D%AE%EF%BC%8C%E6%9C%80%E5%90%8E%E9%83%BD%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7/32-%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E6%95%B0%E6%8D%AE%E6%B2%BB%E7%90%864.png" alt="数据仓库数据治理,数据仓库建模,数据仓库维度建模,数据仓库建模理论"></p>
<h3 id="0xFF-事后：检测"><a href="#0xFF-事后：检测" class="headerlink" title="\|0xFF 事后：检测**"></a><strong><em>\</em>|0xFF 事后：检测**</strong></h3><p>数据问题的检测是一门大学问。</p>
<p>通常而言，检测有三种方式：基于统计；基于自动规则；基于价值衡量。</p>
<p>基于统计：因为前文提到了，我们能够根据规范进行编码，因此我们便可以清晰的统计，ODS/DWD/DWS/ADS层各有多少张表，每个业务域有多少张表，每张表的引用次数是多少，产品出口的ADS表到最底下的ODS表依赖层级有多深，*<strong>*基于这些统计，我们便可以对整个数仓的建设情况有一个大体的了解**</strong>。</p>
<p>如果某个数据域表数量过多，或者某个DWD表下游太多，或者ADS到ODS的层级过深，大家便可以根据具体的情况进行治理。这种方法有一个好处：简单，做几张BI报表便可以完成，但问题便是，即便知道了具体问题，治理起来也是一件棘手的问题。</p>
<p>基于自动规则：既然提到了，基于统计，我们能够掌握大体的情况，那么有没有方法进行更细化的分析，提供解决的指导思路呢？这便是基于自动规则的检测方法。</p>
<p><img src="/../images/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E7%9A%84%E6%B2%BB%E7%90%86%E4%B8%80%E5%A1%8C%E7%B3%8A%E6%B6%82%EF%BC%8C%E6%B2%A1%E6%9C%89%E7%AE%A1%E7%90%86%E5%A5%BD%E6%95%B0%E6%8D%AE%EF%BC%8C%E6%9C%80%E5%90%8E%E9%83%BD%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7/32-%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E6%95%B0%E6%8D%AE%E6%B2%BB%E7%90%865.png" alt="数据仓库数据治理,数据仓库建模,数据仓库维度建模,数据仓库建模理论"></p>
<p>例如，我们可以*<strong>*检测重复开发的表有哪些**</strong>，通过表名相似性/字段相似性/数据量相似性等，估算两两之间的相似情况，如果相似程度90%以上，通常它们是可以合并的。</p>
<p>再者，我们可以使用更高阶的算法，比如计算两张表的主键与上下游引用，如果主键相似，且上下游表高度重合，那么这样的两张表也是可以合并的。*<strong>*准确来讲，自动规则，体现了我们对于数仓模型的理解程度。**</strong></p>
<p>基于价值衡量：*<strong>*治理也要有优先级，优先治理高价值的场景，或者寻找低价值的重构点**</strong>，都是投入侧重点的最重要因素。比如，A表只有一个下游，占用了1TB的空间，而B表有1000个下游，占用了1GB的空间，是不是意味着B表价值远大于A表？</p>
<p>不见得，只要下游的收益，大于存储这些数据的成本，就是有用的。因此只根据收益和成本，来衡量数据表的价值，容易产生极端。这里如果有算法的同学能够接入，做一些类似于*<strong>*C-V模型**</strong>的公式，找出异常点，就能够相对准确的衡量价值。但这一点目前比较难以实现。</p>
<p>最后提一下工具的重要性。数据治理有一个很棘手的问题，我们发现了有问题的表，如何进行纠正？比如字段不同了要废弃，比如命名不规范要重新改，那么如果下游依赖过多，又涉及权限问题，基本上就算是无药可救的状态了。</p>
<p>这时候开发一个插件，能够*<strong>*同步Hive解决命名问题，同步下游修改字段命名，以及将表的权限复制到新表中**</strong>，就很有用。</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>整套1208-20160109_免费高速下载百度云 斐讯PSG1208刷机大合集</title>
    <url>/post/fb16d405.html</url>
    <content><![CDATA[<p>整套1208-20160109_免费高速下载|百度云 网盘-分享无限制</p>
<p><a href="http://pan.baidu.com/s/1ges68Jx#path=%2F%E6%95%B4%E5%A5%971208-20160109">http://pan.baidu.com/s/1ges68Jx#path=%252F%25E6%2595%25B4%25E5%25A5%25971208-20160109</a></p>
<p>斐讯PSG1208刷机教程<br><a href="http://pan.baidu.com/s/1bpXKlS%E9%87%8C%E9%9D%A2%E6%9C%89%E8%A7%86%E9%A2%91%E9%87%8C%E7%9A%84%E5%85%A8%E9%83%A8%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E5%B7%A5%E5%85%B7%E5%92%8Cbreed%E8%BF%98%E6%9C%89%E4%B8%80%E4%B8%AA%E5%8D%8E%E7%A1%95%E8%80%81%E6%AF%9B%E5%AD%90%E5%9B%BA%E4%BB%B6">http://pan.baidu.com/s/1bpXKlS里面有视频里的全部所需要的工具和breed还有一个华硕老毛子固件</a><br>原帖  <a href="http://forum.anywlan.com/forum.php?mod=viewthread&tid=384522&extra=page=1&filter=author&orderby=dateline">http://forum.anywlan.com/forum.p … 6orderby%3Ddateline</a><br>刷完潘多拉后</p>
<p>在浏览器中输入192.168.1.1 密码admin 点击登入 OK 进入到路由页面<br>1 进入路由管理界面后点击左侧的“接口”，选择“WAN”。<br>2 点击“协议”选项栏里的“DHCP客户端”改为“PPPoE”,点击“切换协议”。<br>3 在“PAP/CHAP用户名”输入你宽带的用户名，“PAP/CHAP密码”输入你宽带的密码。<br>4 在当前页面点击“高级设置”,“使用网关跃点”输入“40”，点击右下角的“保存并应用”。<br>上面的是潘多拉固件普通拨号方法，接下来才是怎么多播。如果不需要多播，到此步即可结束操作。<br>5 点击左侧的”虚拟WAN接口“，“启用”前面打对钩，“虚拟接口”数量建议输入“10”，“断线自动重连”打对钩，最低在线数输入“1”，“保存并应用”。<br>6 等待15S后，点击“重新并发拨号”。<br>7 检查多拨状态，点左侧“负载均衡”，等1分钟，看看你下图的接口绿了几个就是成功多拨了几个。<br>原帖  <a href="http://www.52pojie.cn/thread-409698-1-1.html">http://www.52pojie.cn/thread-409698-1-1.html</a><br>不需要多拨的，可以刷华硕的，感觉比原厂固件好<br>地址 <a href="http://www.right.com.cn/forum/thread-161324-1-1.html">http://www.right.com.cn/forum/thread-161324-1-1.html</a><br>更新更多斐讯k1 斐讯1208固件  <a href="http://www.right.com.cn/forum/forum.php?mod=viewthread&tid=181006&highlight=1208">http://www.right.com.cn/forum/fo … &amp;highlight=1208</a><br> 下载地址 <a href="http://pan.baidu.com/s/1skl0VIP">http://pan.baidu.com/s/1skl0VIP</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>-技术</tag>
      </tags>
  </entry>
  <entry>
    <title>斐讯PSG1208 K1 免拆机刷breed恢复控制台</title>
    <url>/post/cf81e54b.html</url>
    <content><![CDATA[<p>Breed，不是 U-Boot，也不是 U-Boot 的改进版，是全新、独立的、跟 U-Boot 平级的 Bootloader。</p>
<p>进入breed恢复控制台的方法:路由断电,按住复位键不放,路由通电,5秒后放开复位键,等一会,在浏览器上打开192.168.1.1,进入breed恢复控制台.</p>
<p>今天有人找我要潘多拉的设置方法,这里发教程,需要的朋友去安装吧.</p>
<p>看这么多人路由器刷了潘多拉，发个多拨教程</p>
<p>首先本文是介绍breed恢复控制台的,不是介绍刷固件的,刷完breed恢复控制台,不刷固件的话,是正常使用原版固件的,没任何影响的,刷了breed恢复控制台后,可以轻松的备份固件(也就是路由器的系统),更新固件,刷第三方固件,超频等,具体介绍和功能看注释.至于刷第三方固件有什么用,本文不作介绍.</p>
<p>刷breed恢复控制台步骤:<br>1.先接好路由,设置好,让路由能连网;<br>2.查看自己的电脑ip地址,这里假设电脑的ip是192.168.2.100;<br>3.在浏览器上登陆路由器,192.168.2.1,账号:admin,密码:admin;<br>4.浏览器地址栏打开 <a href="http://192.168.2.1/goform/Diagnosis?pingAddr=192.168.2.100%7Cecho&quot;&quot;%7Ctelnetd">http://192.168.2.1/goform/Diagnosis?pingAddr=192.168.2.100|echo&quot;&quot;|telnetd</a> (红色部分是本机ip,如果你的电脑ip不是192.168.2.100,请改成你电脑的ip);<br>5.点击 <a href="http://www.cr173.com/k/kscd/">开始菜单</a>-&gt;运行,输入cmd,打开控制台;<br>6.telnet 192.168.2.1,账号:admin,密码:admin;<br>7.cd /tmp;<br>8.wget <a href="http://breed.hackpascal.net/breed-mt7620-reset1.bin">http://breed.hackpascal.net/breed-mt7620-reset1.bin</a>;</p>
<p>9.mtd_write write breed-mt7620-reset1.bin Bootloader;</p>
<p>10.重启路由,按住复位键(大概3-5秒左右),如果看到路由器的部分或全部LED连闪4次，或 ping 通即表明进入 Web 刷机模式(路由地址为:192.168.1.1).<br>如果不按住复位键则正常启动路由(路由地址为:192.168.2.1).</p>
<p>这时你就可以刷入你想要使用的固件了,建议刷固件前先备份固件,如果刷的新的固件不能用,可以重新刷备份的固件就可以了.</p>
<p>潘多拉固件下载地址:<br><a href="http://downloads.openwrt.org.cn/PandoraBox/Xiaomi-Mini-R1CM/stable/PandoraBox-ralink-mt7620-xiaomi-mini-squashfs-sysupgrade-r1024-20150608.bin">http://downloads.openwrt.org.cn/PandoraBox/Xiaomi-Mini-R1CM/stable/PandoraBox-ralink-mt7620-xiaomi-mini-squashfs-sysupgrade-r1024-20150608.bin</a></p>
<p>老毛子Padavan固件:<a href="http://www.right.com.cn/forum/thread-161324-1-1.html">http://www.right.com.cn/forum/thread-161324-1-1.html</a></p>
<p>注释:<br>breed恢复控制台作用功能:<br>Breed，不是 U-Boot，也不是 U-Boot 的改进版，是全新、独立的、跟 U-Boot 平级的 Bootloader。<br>[功能介绍]<br>Breed 拥有不死 U-Boot 的全部功能，并且还有以下特性：<br>真正多线程<br>实时刷机进度，进度条能准确反映刷机进度<br>Web 页面快速响应<br>最大固件备份速度，依 Flash 而定，一般能达到 1MB/s<br>免按复位键进入 Web 刷机模式<br>telnet 功能，免 TTL 进入 Breed 命令控制台<br>复位键定义测试功能<br>固件启动失败自动进入 Web 刷机模式</p>
<p>Web 界面跟不死 U-Boot 基本一致</p>
<p>[U-Boot功能介绍]<br>能够启动 TP-LINK 原厂固件、OpenWrt 固件 (包含石像鬼固件)、DD-WRT 固件、UBNT 固件<br>支持大量 Flash，支持型号识别，能自动识别未知 FLASH 的大小 (4M / 8M / 16M / 32M)。<br>支持 TP-LINK 固件头和 U-Boot 固件头。<br>带 Web 刷机界面。支持开机按 RESET/W<a href="http://www.cr173.com/k/photoshopcs5/">PS</a> 按钮进入刷机界面。<br>开启交换机 LED，以便检查 U-Boot 更新固件时网络连接是否正常<br>所有版本均有不死超频功能</p>
<p>[Web 刷机界面功能]<br>兼容大部分主流浏览器<br>自动分配 IP 地址，不用手动修改计算机 IP 地址<br>显示 FLASH 型号和大小、CPU 型号、内存容量、系统频率<br>固件更新，U-Boot、固件、ART均可更新；支持直刷编程器固件<br>自动去除 TP-LINK 官方固件的 U-Boot 部分<br>自动补充 ART，解决刷官方固件丢失无线的问题<br>刷机前文件大小、MD5值确认<br>恢复出厂设置<br>不死超频/降频<br>修改特定设备的相关信息，包括修改 MAC 地址和 PIN 码、修改 UBNT 无线 MAC 地址等<br>编程器固件备份<br>网络控制台 (UDP 协议)<br>支持 Web 界面重启路由<br>详细的失败信息<br>全中文版界面</p>
<h1 id="PSG1208-K1固件下载地址"><a href="#PSG1208-K1固件下载地址" class="headerlink" title="PSG1208 K1固件下载地址"></a>PSG1208 K1固件下载地址</h1><p>Breed控制台：<a href="http://breed.hackpascal.net/breed-mt7620-reset1.bin">http://breed.hackpascal.net/breed-mt7620-reset1.bin</a></p>
<p>小米潘多拉（多拨）：<a href="http://downloads.openwrt.org.cn/PandoraBox/Xiaomi-Mini-R1CM/">http://downloads.openwrt.org.cn/PandoraBox/Xiaomi-Mini-R1CM/</a></p>
<p>老毛子改（华硕稳定版本）：<a href="http://pan.baidu.com/s/1qWr367y">http://pan.baidu.com/s/1qWr367y</a></p>
<h1 id="斐讯PSG1208刷机大合集"><a href="#斐讯PSG1208刷机大合集" class="headerlink" title="斐讯PSG1208刷机大合集"></a>斐讯PSG1208刷机大合集</h1><p>斐讯PSG1208刷机教程  <a href="http://pan.baidu.com/s/1bpXKlS%E9%87%8C%E9%9D%A2%E6%9C%89%E8%A7%86%E9%A2%91%E9%87%8C%E7%9A%84%E5%85%A8%E9%83%A8%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E5%B7%A5%E5%85%B7%E5%92%8Cbreed">http://pan.baidu.com/s/1bpXKlS里面有视频里的全部所需要的工具和breed</a></p>
<p>还有一个华硕老毛子固件 原帖  <a href="http://forum.anywlan.com/forum.p">http://forum.anywlan.com/forum.p</a> … 6orderby%3Ddateline </p>
<p>刷完潘多拉后 在浏览器中输入192.168.1.1 密码admin 点击登入 OK 进入到路由页面 </p>
<p>1 进入路由管理界面后点击左侧的“接口”，选择“WAN”。 </p>
<p>2 点击“协议”选项栏里的“DHCP客户端”改为“PPPoE”,点击“切换协议”。 </p>
<p>3 在“PAP/CHAP用户名”输入你宽带的用户名，“PAP/CHAP密码”输入你宽带的密码。</p>
<p> 4 在当前页面点击“高级设置”,“使用网关跃点”输入“40”，点击右下角的“保存并应用”。 上面的是潘多拉固件普通拨号方法，接下来才是怎么多播。如果不需要多播，到此步即可结束操作。</p>
<p> 5 点击左侧的”虚拟WAN接口“，“启用”前面打对钩，“虚拟接口”数量建议输入“10”，“断线自动重连”打对钩，最低在线数输入“1”，“保存并应用”。 </p>
<p>6 等待15S后，点击“重新并发拨号”。 </p>
<p>7 检查多拨状态，点左侧“负载均衡”，等1分钟，看看你下图的接口绿了几个就是成功多拨了几个。 </p>
<p>原帖  <a href="http://www.52pojie.cn/thread-409698-1-1.html">http://www.52pojie.cn/thread-409698-1-1.html</a> </p>
<p>不需要多拨的，可以刷华硕的，感觉比原厂固件好 地址  <a href="http://www.right.com.cn/forum/thread-161324-1-1.html">http://www.right.com.cn/forum/thread-161324-1-1.html</a></p>
<p> 更新更多斐讯k1 斐讯1208固件  <a href="http://www.right.com.cn/forum/fo">http://www.right.com.cn/forum/fo</a> … &amp;highlight=1208  </p>
<p>下载地址  <a href="http://pan.baidu.com/s/1skl0VIP">http://pan.baidu.com/s/1skl0VIP</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>-斐讯 -技术</tag>
      </tags>
  </entry>
  <entry>
    <title>有了数据湖，距离数据仓库消失还有几年？</title>
    <url>/post/72a100cc.html</url>
    <content><![CDATA[<p>很多人跟我一样，对于数据湖充满好奇，也许还读了不少数据湖文章，但无论别人怎么说，你还是会觉得难以把握数据湖的本质。</p>
<p>有些人会望文生义说，数据湖嘛，就是什么东西都可以往里面扔，特别是对非结构数据的处理比较方便。</p>
<p><strong><em>\</em>是这样吗？**</strong></p>
<p>有案例才有鉴别，有的人找了数据湖的作者AWS来说明数据湖是什么东西，比如下图：</p>
<p><img src="/../images/%E6%9C%89%E4%BA%86%E6%95%B0%E6%8D%AE%E6%B9%96%EF%BC%8C%E8%B7%9D%E7%A6%BB%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E6%B6%88%E5%A4%B1%E8%BF%98%E6%9C%89%E5%87%A0%E5%B9%B4%EF%BC%9F/34-%E6%95%B0%E6%8D%AE%E6%B9%96%E5%92%8C%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E7%9A%84%E5%8C%BA%E5%88%AB1.png" alt="数据湖和数据仓库的区别,湖仓一体,数据湖和数据仓库,数据入湖"></p>
<p>不懂数据的人也许会觉得数据湖很厉害，而懂数据的人也许会觉得仅是一堆数据仓库技术的堆砌包装而已，你看上面那张框架图，哪个专业词汇数据人士会不懂？凭什么数据湖被炒作成了一个新概念？</p>
<p>有比较才有鉴别，因此很多文章对数据湖与数据仓库做了比较，下面是网上流传的一些说法：</p>
<p><img src="/../images/%E6%9C%89%E4%BA%86%E6%95%B0%E6%8D%AE%E6%B9%96%EF%BC%8C%E8%B7%9D%E7%A6%BB%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E6%B6%88%E5%A4%B1%E8%BF%98%E6%9C%89%E5%87%A0%E5%B9%B4%EF%BC%9F/34-%E6%95%B0%E6%8D%AE%E6%B9%96%E5%92%8C%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E7%9A%84%E5%8C%BA%E5%88%AB2.png" alt="数据湖和数据仓库的区别,湖仓一体,数据湖和数据仓库,数据入湖"></p>
<p>这种比较似乎能找到点区别，难道结构化与非结构化就成了数据仓库和数据湖的一个主要区别？BI和机器学习成为了主要区别？</p>
<p>事实上，这种比较有较大逻辑漏洞：即是从结果出发来看差异，然后又用这个差异来说明区别，颠倒了因果，因此受到了不少专业人士的鄙视。比如AWS的数据湖能够处理非结构化数据，而数据仓库无法处理非结构化数据，就认为这是数据湖与数据仓库的本质区别之一。</p>
<p>本文来跟大家聊聊我所理解的数据湖的本质，对于一种新事物不了解本质，你就很难驾驭它，下面这张图道尽了一切。</p>
<p><img src="/../images/%E6%9C%89%E4%BA%86%E6%95%B0%E6%8D%AE%E6%B9%96%EF%BC%8C%E8%B7%9D%E7%A6%BB%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E6%B6%88%E5%A4%B1%E8%BF%98%E6%9C%89%E5%87%A0%E5%B9%B4%EF%BC%9F/34-%E6%95%B0%E6%8D%AE%E6%B9%96%E5%92%8C%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E7%9A%84%E5%8C%BA%E5%88%AB3.png" alt="数据湖和数据仓库的区别,湖仓一体,数据湖和数据仓库,数据入湖"></p>
<p>下面我用一篇文章来具体说明数据湖与数据仓库的区别，更多的是给出why，知其所以然是理解事物的一个原则。</p>
<p>数据仓库和数据湖的处理流程可以用下图来示意，其中用红圈标出了5个对标的流程节点。</p>
<p><img src="/../images/%E6%9C%89%E4%BA%86%E6%95%B0%E6%8D%AE%E6%B9%96%EF%BC%8C%E8%B7%9D%E7%A6%BB%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E6%B6%88%E5%A4%B1%E8%BF%98%E6%9C%89%E5%87%A0%E5%B9%B4%EF%BC%9F/34-%E6%95%B0%E6%8D%AE%E6%B9%96%E5%92%8C%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E7%9A%84%E5%8C%BA%E5%88%AB4.png" alt="数据湖和数据仓库的区别,湖仓一体,数据湖和数据仓库,数据入湖"></p>
<p>可以看到，数据湖并不比数据仓库在处理流程上多出了什么内容，更多的在于结构性的变化，下面就从数*<strong>*据存储、模型设计、加工工具、开发人员**</strong>和*<strong>*消费人员**</strong>五个方面来进行比较。</p>
<h4 id="（1）数据存储"><a href="#（1）数据存储" class="headerlink" title="\（1）数据存储**"></a><strong><em>\</em>（1）数据存储**</strong></h4><p>数据仓库采集、处理过程中存储下来的数据一般是以结构化的形式存在的，即使原始数据是非结构化的，但这些非结构化数据也只是在源头暂存一下，它通过结构化数据的形式进入数据仓库，成了数据仓库的基本存储格式，这个跟数据仓库的模型（维度或关系建模）都是建立在关系型数据基础上的特点有关。</p>
<p>事实上，是传统的数据建模负担让数据仓库只处理结构化数据，其实谁都没规定过数据仓库只处理和存储结构化数据。</p>
<p>数据湖包罗万象，轻装上阵，结构化与非结构化数据都成为了数据湖本身的一部分，这体现了数据湖中“湖”这个概念。因为没有数据仓库建模的限制，当然什么东西都可以往里面扔，但这为其变成数据沼泽埋下了伏笔。</p>
<p>看了这段也许无法让人信服，不要急，接着往下看。</p>
<h4 id="（2）模型设计"><a href="#（2）模型设计" class="headerlink" title="\（2）模型设计**"></a><strong><em>\</em>（2）模型设计**</strong></h4><p>数据仓库中所有的Schema(比如表结构)都是预先设计并生成好的，数据仓库建设最重要的工作就是建模，其通过封装好的、稳定的模型对外提供有限的、标准化的数据服务，模型能否设计的高内聚、松耦合成了评估数据仓库好坏的一个标准，就好比数据中台非常强调数据服务的复用性一样。</p>
<p>你会发现，数据仓库很像数据领域的计划经济，所有的产品（模型）都是预先生成好的，模型可以变更，但相当缓慢。</p>
<p>数据湖的模型不是预先生成的，而是随着每个应用的需要即时设计生成的，其更像是市场经济的产物，牺牲了复用性却带来了灵活性，这也是为什么数据湖的应用更多强调探索分析的原因。</p>
<h4 id="（3）加工工具"><a href="#（3）加工工具" class="headerlink" title="\（3）加工工具**"></a><strong><em>\</em>（3）加工工具**</strong></h4><p>数据仓库的采集、处理工具一般是比较封闭的，很多采取代码的方式暴力实现，大多只向集中的专业开发人员开放，主要的目的是实现数据的统一采集和建模，它不为消费者（应用方）服务，也没这个必要。</p>
<p>数据湖的采集和处理工具是完全开放的，因为第（2）点提到过：数据湖的模型是由应用即席设计生成的，意味着应用必须具备针对数据湖数据的直接ETL能力和加工能力才能完成定制化模型的建设，否则就没有落地的可能，更无灵活性可言。</p>
<p>工具能否开放、体验是否足够好是数据湖能够成功的一个前提，显然传统数据仓库的一些采集和开发工具是不行的，它们往往不可能向普通大众开放。</p>
<h4 id="（4）开发人员"><a href="#（4）开发人员" class="headerlink" title="\（4）开发人员**"></a><strong><em>\</em>（4）开发人员**</strong></h4><p>数据仓库集中开发人员处理数据涵盖了数据采集、存储、加工等各个阶段，其不仅要管理数据流，也要打造工具流。</p>
<p>由于数据流最终要为应用服务，因此其特别关注数据模型的质量，而工具流只要具备基本的功能、满足性能要求就可以了，反正是数据仓库团队人员自己用，导致的后果是害苦了运营人员。</p>
<p>数据湖完全不一样，集中开发人员在数据流阶段只负责把原始数据扔到数据湖，更多的精力花在对工具流的改造上，因为这些工具是直接面向最终使用者的，假如不好用，数据湖就不能用了。</p>
<h4 id="（5）应用人员"><a href="#（5）应用人员" class="headerlink" title="\（5）应用人员**"></a><strong><em>\</em>（5）应用人员**</strong></h4><p>数据仓库对于应用人员暴露的所有东西就是建好的数据模型，应用方的所有角色只能在数据仓库限定好的数据模型范围内倒腾，这在一定程度上限制了应用方的创新能力。比如原始数据有个字段很有价值，但数据仓库集中开发人员却把它过滤了。</p>
<p>这种问题在数据仓库中很常见，很多取数人员只会取宽表，对于源端数据完全不清楚，所谓成也数据仓库，败也数据仓库。</p>
<p>数据湖的应用方则可以利用数据湖提供的工具流接触到最生鲜的原始数据，涵盖了从数据采集、抽取、存储、加工的各个阶段，其可以基于对业务的理解，压榨出原始数据的最大价值。</p>
<p><strong><em>\</em>可以看到，数据仓库和数据湖，代表着两种数据处理模式和服务模式，是数据技术领域的一次轮回。**</strong></p>
<p>早在ORACLE的DBLINK时代，我们就有了第一代的数据湖，因为那个时候ORACLE一统天下，ORALCE的DBLINK让直接探索原始数据有了可能。</p>
<p>随着数据量的增长和数据类型的不断丰富，我们不得不搞出一种新的“数据库”来集成各种数据。</p>
<p><strong><em>\</em>但那个时候搞出的为什么是数据仓库而不是数据湖呢？**</strong></p>
<p>主要还是应用驱动力的问题。</p>
<p>因为那个时候大家关注的是报表，而报表最核心的要求就是准确性和一致性，标准化、规范化的维度和关系建模正好适应了这一点，集中化的数据仓库支撑模式就是一种变相的计划经济。</p>
<p>随着大数据时代到来和数字化的发展，很多企业发现，原始数据的非结构化比例越来越高，前端应用响应的要求越来越高，海量数据挖掘的要求越来越对，报表取数已经满足不了数据驱动业务的要求了。</p>
<p><img src="/../images/%E6%9C%89%E4%BA%86%E6%95%B0%E6%8D%AE%E6%B9%96%EF%BC%8C%E8%B7%9D%E7%A6%BB%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E6%B6%88%E5%A4%B1%E8%BF%98%E6%9C%89%E5%87%A0%E5%B9%B4%EF%BC%9F/34-%E6%95%B0%E6%8D%AE%E6%B9%96%E5%92%8C%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E7%9A%84%E5%8C%BA%E5%88%AB5.gif" alt="数据湖和数据仓库的区别,湖仓一体,数据湖和数据仓库,数据入湖"></p>
<p>一方面企业需要深挖各种数据，从展示数据为主（报表）逐步向挖掘数据（探索预测）转变，另一方面企业也需要从按部就班的支撑模式向快速灵活的方向转变，要求数据仓库能够开放更多的灵活性给应用方，这个时候数据仓库就有点撑不住了。</p>
<p><strong><em>\</em>数据湖就是在这种背景下诞生的。**</strong></p>
<p>其实早在数据湖出来之前，很多企业就在做类似数据湖的工作了，比如我们5年前重构hadoop大数据平台的时候，就已经要求源端能将各种格式的数据直接扔过来，然后用不同的引擎处理，非结构化的就自己做一个定制化的ETL工具，只是没有统一进行整合而已。</p>
<p>ETL之所以不开放，主要是驱动力不够，其实我们没有那么多类型的数据要定制化抽取，也许后续会需要吧。</p>
<p>而可视化开发平台使用比较广泛，只是因为市场觉得IT做的太慢了，需要一个可视化平台来直接操作。</p>
<p>很多企业不搞可视化开发平台也是容易理解的，报表就能活得很好，干嘛业务人员要自己开发和挖掘。现在数据湖叫的欢的，大多是互联网公司，比如亚马逊，这是很正常的。</p>
<p>数据湖和数据仓库，不能说谁更好谁更差，大家都有可取之处，阿里最近一篇文章提到的数湖一体是很好的概念，可以实现双方的优势互补，我这里画一张图，方便你的理解：</p>
<p> <strong><em>\</em><img src="/../images/%E6%9C%89%E4%BA%86%E6%95%B0%E6%8D%AE%E6%B9%96%EF%BC%8C%E8%B7%9D%E7%A6%BB%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E6%B6%88%E5%A4%B1%E8%BF%98%E6%9C%89%E5%87%A0%E5%B9%B4%EF%BC%9F/34-%E6%95%B0%E6%8D%AE%E6%B9%96%E5%92%8C%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E7%9A%84%E5%8C%BA%E5%88%AB6.png" alt="数据湖和数据仓库的区别,湖仓一体,数据湖和数据仓库,数据入湖">**</strong></p>
<h3 id="何谓湖仓一体？"><a href="#何谓湖仓一体？" class="headerlink" title="\何谓湖仓一体？**"></a><strong><em>\</em>何谓湖仓一体？**</strong></h3><p>（1）湖和仓的数据/元数据无缝打通，互相补充，数据仓库的模型反哺到数据湖（成为原始数据一部分），湖的结构化应用知识沉淀到数据仓库</p>
<p>（2）湖和仓有统一的开发体验，存储在不同系统的数据，可以通过一个统一的开发/管理平台操作</p>
<p>（3）数据湖与数据仓库的数据，系统可以根据自动的规则决定哪些数据放在数仓，哪些保留在数据湖，进而形成一体化</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习10个最佳人工智能开发框架和AI库（优缺点总结）</title>
    <url>/post/d0f5fd4f.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>通过本文我们来一起看一些用于人工智能的高质量AI库，它们的优点和缺点，以及它们的一些特点。</p>
<p><strong>人工智能（AI）</strong>已经存在很长时间了。然而，由于这一领域的巨大进步，近年来它已成为一个流行语。人工智能曾经被称为一个完整的书呆子和天才的领域，但由于各种开发库和框架的发展，它已经成为一个友好的IT领域，并有很多人正走进它。</p>
<p>在这篇文章中，我们将研究用于人工智能的优质库，它们的优缺点以及它们的一些特征。让我们深入并探索这些<strong>人工智能库</strong>的世界！</p>
<h2 id="1-TensorFlow"><a href="#1-TensorFlow" class="headerlink" title="1. TensorFlow"></a><strong>1. TensorFlow</strong></h2><h4 id="“使用数据流图表的可伸缩机器学习的计算”"><a href="#“使用数据流图表的可伸缩机器学习的计算”" class="headerlink" title="“使用数据流图表的可伸缩机器学习的计算”"></a>“使用数据流图表的可伸缩机器学习的计算”</h4><p><img src="/../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A010%E4%B8%AA%E6%9C%80%E4%BD%B3%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E5%92%8CAI%E5%BA%93%EF%BC%88%E4%BC%98%E7%BC%BA%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%89/1528726843672650.png" alt="img"></p>
<p><strong>语言：</strong>C ++或Python。</p>
<p>当进入AI时，你会听到的第一个框架之一就是Google的TensorFlow。</p>
<p>TensorFlow是一个使用数据流图表进行数值计算的开源软件。这个框架被称为具有允许在任何CPU或GPU上进行计算的架构，无论是台式机、服务器还是移动设备。这个框架在Python编程语言中是可用的。</p>
<p>TensorFlow对称为节点的数据层进行排序，并根据所获得的任何信息做出决定。</p>
<p><img src="/../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A010%E4%B8%AA%E6%9C%80%E4%BD%B3%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E5%92%8CAI%E5%BA%93%EF%BC%88%E4%BC%98%E7%BC%BA%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%89/1528726844586861.png" alt="img"></p>
<p><strong>优点：</strong></p>
<ul>
<li>使用易于学习的语言（Python）。</li>
<li>使用计算图表抽象。</li>
<li>用于TensorBoard的可用性的可视化。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>这很慢，因为Python不是语言中最快的。</li>
<li>缺乏许多预先训练的模型。</li>
<li>不完全开源。</li>
</ul>
<h2 id="2-Microsoft-CNTK"><a href="#2-Microsoft-CNTK" class="headerlink" title="2. Microsoft CNTK"></a><strong>2. Microsoft CNTK</strong></h2><h4 id="“开源深度学习工具包”"><a href="#“开源深度学习工具包”" class="headerlink" title="“开源深度学习工具包”"></a>“开源深度学习工具包”</h4><p><img src="/../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A010%E4%B8%AA%E6%9C%80%E4%BD%B3%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E5%92%8CAI%E5%BA%93%EF%BC%88%E4%BC%98%E7%BC%BA%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%89/1528726844730194.png" alt="img"></p>
<p><strong>语言：</strong>C ++。</p>
<p>我们可以称之为微软对Google的TensorFlow的回应。</p>
<p>微软的计算网络工具包是一个增强分离计算网络模块化和维护的库，提供学习算法和模型描述。</p>
<p>在需要大量服务器进行操作的情况下，CNTK可以同时利用多台服务器。</p>
<p>据说它的功能与Google的TensorFlow相近；但是，它会更快。</p>
<p><img src="/../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A010%E4%B8%AA%E6%9C%80%E4%BD%B3%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E5%92%8CAI%E5%BA%93%EF%BC%88%E4%BC%98%E7%BC%BA%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%89/1528726844668687.png" alt="img"></p>
<p><strong>优点：</strong></p>
<ul>
<li>这是非常灵活的。</li>
<li>允许分布式训练。</li>
<li>支持C ++、C＃、Java和Python。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>它以一种新的语言――网络描述语言（Network Description Language , NDL）来实现。</li>
<li>缺乏可视化。</li>
</ul>
<h2 id="3-Theano"><a href="#3-Theano" class="headerlink" title="3. Theano"></a><strong>3. Theano</strong></h2><h4 id="“数值计算库”"><a href="#“数值计算库”" class="headerlink" title="“数值计算库”"></a>“数值计算库”</h4><p><img src="/../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A010%E4%B8%AA%E6%9C%80%E4%BD%B3%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E5%92%8CAI%E5%BA%93%EF%BC%88%E4%BC%98%E7%BC%BA%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%89/1528726845929886.png" alt="img"></p>
<p><strong>语言：</strong>Python。</p>
<p>Theano是TensorFlow的强有力竞争者，是一个功能强大的Python库，允许以高效率的方式进行涉及多维数组的数值操作。</p>
<p>Theano库透明地使用GPU来执行数据密集型计算而不是CPU，因此操作效率很高。</p>
<p>出于这个原因，Theano已经被用于为大规模的计算密集型操作提供动力大约十年。</p>
<p>然而，在2017年9月，宣布Theano的主要开发将于2017年11月发布的1.0版本后停止。</p>
<p>这并不意味着它是一个不够强大的库。你仍然可以随时进行深入的学习研究。</p>
<p><img src="/../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A010%E4%B8%AA%E6%9C%80%E4%BD%B3%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E5%92%8CAI%E5%BA%93%EF%BC%88%E4%BC%98%E7%BC%BA%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%89/1528726845589168.png" alt="img"></p>
<p><strong>优点：</strong></p>
<ul>
<li>正确优化CPU和GPU。</li>
<li>有效的数字任务。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>与其他库相比，原生Theano有点低级。</li>
<li>需要与其他库一起使用以获得高度的抽象化。</li>
<li>AWS上有点bug。</li>
</ul>
<h2 id="4-Caffe"><a href="#4-Caffe" class="headerlink" title="4. Caffe"></a><strong>4. Caffe</strong></h2><h4 id="“快速、开源的深度学习框架”"><a href="#“快速、开源的深度学习框架”" class="headerlink" title="“快速、开源的深度学习框架”"></a>“快速、开源的深度学习框架”</h4><p><img src="/../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A010%E4%B8%AA%E6%9C%80%E4%BD%B3%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E5%92%8CAI%E5%BA%93%EF%BC%88%E4%BC%98%E7%BC%BA%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%89/1528726846426756.png" alt="img"></p>
<p><strong>语言：</strong>C ++。</p>
<p>Caffe是一个强大的深度学习框架。</p>
<p>像这个清单上的其他框架一样，深度学习的研究速度非常快。</p>
<p>借助Caffe，您可以非常轻松地构建用于图像分类的卷积神经网络（CNN）。Caffe在GPU上运行良好，这有助于在运行期间提高速度。</p>
<p>Caffe主要的类有：</p>
<p><img src="/../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A010%E4%B8%AA%E6%9C%80%E4%BD%B3%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E5%92%8CAI%E5%BA%93%EF%BC%88%E4%BC%98%E7%BC%BA%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%89/1528726846867003.png" alt="img"></p>
<p><strong>优点：</strong></p>
<ul>
<li>Python和MATLAB的绑定可用。</li>
<li>性能表现良好。</li>
<li>无需编写代码即可进行模型的训练。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>对于经常性网络不太好。</li>
<li>新体系结构不太好。</li>
</ul>
<h2 id="5-Keras"><a href="#5-Keras" class="headerlink" title="5. Keras"></a><strong>5. Keras</strong></h2><h4 id="“人类的深度学习”"><a href="#“人类的深度学习”" class="headerlink" title="“人类的深度学习”"></a>“人类的深度学习”</h4><blockquote>
</blockquote>
<p><strong>语言：</strong>Python。</p>
<p>Keras是一个用Python编写的开源的神经网络库。</p>
<p>与TensorFlow、CNTK和Theano不同，Keras不是一个端到端的机器学习框架。</p>
<p>相反，它作为一个接口，提供了一个高层次的抽象化，这使得无论它坐落在哪个框架上，神经网络的配置都会变得容易。</p>
<p>谷歌的TensorFlow目前支持Keras作为后端，而微软的CNTK也会在很短的时间内做到这一点。</p>
<p><img src="/../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A010%E4%B8%AA%E6%9C%80%E4%BD%B3%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E5%92%8CAI%E5%BA%93%EF%BC%88%E4%BC%98%E7%BC%BA%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%89/71f35ef9c4f49cd2dfa051dbdf6c47a2.jpg" alt="img"></p>
<p><strong>优点：</strong></p>
<ul>
<li>它是用户友好的。</li>
<li>它很容易扩展。</li>
<li>在CPU和GPU上无缝运行。</li>
<li>与Theano和TensorFlow无缝工作。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>不能有效地用作独立的框架。</li>
</ul>
<h2 id="6-Torch"><a href="#6-Torch" class="headerlink" title="6. Torch"></a><strong>6. Torch</strong></h2><h4 id="“一个开源的机器学习库”"><a href="#“一个开源的机器学习库”" class="headerlink" title="“一个开源的机器学习库”"></a>“一个开源的机器学习库”</h4><blockquote>
</blockquote>
<p><strong>语言：</strong>C。</p>
<p>Torch是一个用于科学和数字操作的开源机器学习库。</p>
<p>这是一个基于Lua编程语言而非Python的库。</p>
<p>Torch通过提供大量的算法，使得深度学习研究更容易，并且提高了效率和速度。它有一个强大的N维数组，这有助于切片和索引等操作。它还提供了线性代数程序和神经网络模型。<a href="http://torch.ch/">
</a></p>
<p><img src="/../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A010%E4%B8%AA%E6%9C%80%E4%BD%B3%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E5%92%8CAI%E5%BA%93%EF%BC%88%E4%BC%98%E7%BC%BA%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%89/46a202b7e2595403f3df336e8736d4f5.jpg" alt="img"></p>
<p><strong>优点：</strong></p>
<ul>
<li>非常灵活。</li>
<li>高水平的速度和效率。</li>
<li>大量的预训练模型可用。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>不清楚的文献记录。</li>
<li>缺乏即时使用的即插即用代码。</li>
<li>它基于一种不那么流行的语言――Lua。</li>
</ul>
<h2 id="7-Accord-NET"><a href="#7-Accord-NET" class="headerlink" title="7. Accord.NET"></a><strong>7. Accord.NET</strong></h2><h4 id="“机器学习、计算机视觉、统计和-NET通用科学计算”"><a href="#“机器学习、计算机视觉、统计和-NET通用科学计算”" class="headerlink" title="“机器学习、计算机视觉、统计和.NET通用科学计算”"></a>“机器学习、计算机视觉、统计和.NET通用科学计算”</h4><p><img src="/../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A010%E4%B8%AA%E6%9C%80%E4%BD%B3%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E5%92%8CAI%E5%BA%93%EF%BC%88%E4%BC%98%E7%BC%BA%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%89/97742ad082554ea8c7a12a6c20923c01.png" alt="img"></p>
<p><strong>语言：</strong>C＃。</p>
<p>这是专为C＃程序员设计的。</p>
<p>Accord.NET框架是一个.NET机器学习框架，使音频和图像处理变得简单。</p>
<p>这个框架可以有效地处理数值优化、人工神经网络，甚至可视化。除此之外，Accord.NET对计算机视觉和信号处理的功能非常强大，同时也使得算法的实现变得简单。</p>
<p><img src="/../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A010%E4%B8%AA%E6%9C%80%E4%BD%B3%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E5%92%8CAI%E5%BA%93%EF%BC%88%E4%BC%98%E7%BC%BA%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%89/bcb92c9f748b469c96cff329f8f3b804.jpg" alt="img"></p>
<p><strong>优点：</strong></p>
<ul>
<li>它有一个强大而积极的开发团队。</li>
<li>非常有据可查的框架。</li>
<li>质量可视化。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>不是一个非常流行的框架。</li>
<li>比TensorFlow慢。</li>
</ul>
<h2 id="8-Spark-MLlib"><a href="#8-Spark-MLlib" class="headerlink" title="8. Spark MLlib"></a><strong>8. Spark MLlib</strong></h2><h4 id="“可扩展的机器学习库”"><a href="#“可扩展的机器学习库”" class="headerlink" title="“可扩展的机器学习库”"></a>“可扩展的机器学习库”</h4><blockquote>
<p><img src="/../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A010%E4%B8%AA%E6%9C%80%E4%BD%B3%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E5%92%8CAI%E5%BA%93%EF%BC%88%E4%BC%98%E7%BC%BA%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%89/eb3a3a6644854728d920ae1c1622425b.png" alt="img"></p>
</blockquote>
<p><strong>语言：</strong>Scala。</p>
<p>Apache的Spark MLlib是一个非常可扩展的机器学习库。</p>
<p>它非常适用于诸如Java、Scala、Python，甚至R等语言。它非常高效，因为它可以与Python库和R库中的numpy进行互操作。</p>
<p>MLlib可以轻松插入到Hadoop工作流程中。它提供了机器学习算法，如分类、回归和聚类。</p>
<p>这个强大的库在处理大型数据时非常快速。</p>
<p><img src="/../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A010%E4%B8%AA%E6%9C%80%E4%BD%B3%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E5%92%8CAI%E5%BA%93%EF%BC%88%E4%BC%98%E7%BC%BA%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%89/19a2dc5b2a510cbfa8e085cd4becc9d8.jpg" alt="img"></p>
<p><strong>优点：</strong></p>
<ul>
<li>对于大规模数据处理非常快速。</li>
<li>提供多种语言。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>陡峭的学习曲线。</li>
<li>即插即用仅适用于Hadoop。</li>
</ul>
<h2 id="9-Sci-kit-Learn"><a href="#9-Sci-kit-Learn" class="headerlink" title="9. Sci-kit Learn"></a><strong>9. Sci-kit Learn</strong></h2><h4 id="“用Python的机器学习”"><a href="#“用Python的机器学习”" class="headerlink" title="“用Python的机器学习”"></a>“用Python的机器学习”</h4><p><img src="/../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A010%E4%B8%AA%E6%9C%80%E4%BD%B3%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E5%92%8CAI%E5%BA%93%EF%BC%88%E4%BC%98%E7%BC%BA%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%89/fa3129d1a5c4d32652c43ee5bfefc44e.jpg" alt="img"></p>
<p><strong>语言：</strong>Python。</p>
<p>Sci-kit learn是一个非常强大的机器学习Python库，主要用于构建模型。</p>
<p>使用numpy、SciPy和matplotlib等其他库构建，对统计建模技术（如分类、回归和聚类）非常有效。</p>
<p>Sci-kit learn带有监督学习算法、无监督学习算法和交叉验证等功能。</p>
<p><strong>优点：</strong></p>
<ul>
<li>许多主要算法的可用性。</li>
<li>有效的数据挖掘。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>不是构建模型的最佳选择。</li>
<li>GPU效率不高。</li>
</ul>
<h2 id="10-MLPack"><a href="#10-MLPack" class="headerlink" title="10. MLPack"></a><strong>10. MLPack</strong></h2><h4 id="“可扩展的C-机器学习库”"><a href="#“可扩展的C-机器学习库”" class="headerlink" title="“可扩展的C ++机器学习库”"></a>“可扩展的C ++机器学习库”</h4><p><img src="/../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A010%E4%B8%AA%E6%9C%80%E4%BD%B3%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E5%92%8CAI%E5%BA%93%EF%BC%88%E4%BC%98%E7%BC%BA%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%89/7547e8233eeaacfaa9dafe699537df27.png" alt="img"></p>
<p><strong>语言：</strong>C ++。</p>
<p>MLPack是一个用C ++实现的可扩展的机器学习库。因为它是用C ++编写的，所以你可以猜测它对于内存管理是非常好的。</p>
<p>MLPack以极高的速度运行，因为高质量的机器学习算法与库一起出现。这个库是对新手友好的，并提供了一个简单的API使用。</p>
<p><img src="/../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A010%E4%B8%AA%E6%9C%80%E4%BD%B3%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E5%92%8CAI%E5%BA%93%EF%BC%88%E4%BC%98%E7%BC%BA%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%89/a6801074bf4cc841424d99d786c6537b.png" alt="img"></p>
<p><strong>优点：</strong></p>
<ul>
<li>非常可扩展。</li>
<li>Python和C ++绑定可用。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>不是最好的文献记录。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>本文讨论的库非常有效，并且随着时间的推移已经证明都是高质量的。像Facebook、谷歌、雅虎、苹果和微软这样的大公司都利用其中的一些库来进行深度学习和机器学习项目，那么你为什么不呢？</p>
<p>你能想到你经常使用的但并不在这个列表中的其他库吗？</p>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>-人工智能 -机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>无监督学习</title>
    <url>/post/f54fd71a.html</url>
    <content><![CDATA[<p><strong>目录</strong></p>
<ul>
<li><a href="https://www.cnblogs.com/weihuchao/p/6874683.html#_label0">1 关于机器学习</a></li>
<li>2 sklearn库中的标准数据集及基本功能<ul>
<li><a href="https://www.cnblogs.com/weihuchao/p/6874683.html#_label1_0">2.1 标准数据集</a></li>
<li><a href="https://www.cnblogs.com/weihuchao/p/6874683.html#_label1_1">2.2 sklearn库的基本功能</a></li>
</ul>
</li>
<li><a href="https://www.cnblogs.com/weihuchao/p/6874683.html#_label2">3 关于无监督学习</a></li>
<li><a href="https://www.cnblogs.com/weihuchao/p/6874683.html#_label3">4 K-means方法及应用</a></li>
<li><a href="https://www.cnblogs.com/weihuchao/p/6874683.html#_label4">5 DBSCAN方法及应用</a></li>
<li><a href="https://www.cnblogs.com/weihuchao/p/6874683.html#_label5">6  PCA方法及其应用</a></li>
<li><a href="https://www.cnblogs.com/weihuchao/p/6874683.html#_label6">7 NMF方法及其实例</a></li>
<li><a href="https://www.cnblogs.com/weihuchao/p/6874683.html#_label7">8 基于聚类的“图像分割”</a></li>
</ul>
<p><strong>正文</strong></p>
<h1 id="1-关于机器学习"><a href="#1-关于机器学习" class="headerlink" title="1 关于机器学习"></a>1 关于机器学习</h1><p>　　机器学习是实现人工智能的手段, 其主要研究内容是如何利用数据或经验进行学习, 改善具体算法的性能 </p>
<p>　　　　多领域交叉, 涉及概率论、统计学, 算法复杂度理论等多门学科</p>
<p>　　　　广泛应用于网络搜索、垃圾邮件过滤、推荐系统、广告投放、信用评价、欺诈检测、股票交易和医疗诊断等应用<br>　　机器学习的分类</p>
<p>　　　　<strong>监督学习</strong> （Supervised Learning）</p>
<p>　　　　　　从给定的数据集中学习出一个函数, 当新的数据到来时, 可以根据这个函数预测结果, 训练集通常由人工标注</p>
<p>　　　　<strong>无监督学习</strong> （Unsupervised Learning）</p>
<p>　　　　　　相较于监督学习, 没有人工标注</p>
<p>　　　　<strong>强化学习</strong>（Reinforcement Learning，增强学习）</p>
<p>　　　　　　通过观察通过什么样的动作获得最好的回报, 每个动作都会对环境有所影响, 学习对象通过观察周围的环境进行判断</p>
<p>　　　　<strong>半监督学习</strong>（Semi-supervised Learning）</p>
<p>　　　　　　介于监督学习和无监督学习</p>
<p>　　　　<strong>深度学习</strong> (Deep Learning)</p>
<p>　　　　　　利用深层网络神经模型, 抽象数据表示特征</p>
<p>　　在Python中使用**Scikit-learn(简化为sklearn)**这一模块来处理机器学习</p>
<p>　　　　<a href="http://scikit-learn.org/stable/">官网</a></p>
<p>　　　　主要是依赖于numpy, scipy和matplotlib库</p>
<p>　　　　开源可复用</p>
<p>　　sklearn中机器学习模型十分丰富, 需要根据问题的类型来选择适当的模型</p>
<p>　　sklearn常用的函数</p>
<p>　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170518151628182-1057765599.png" alt="img"></p>
<p>　　关于sklearn库</p>
<p>　　　　sklearn是scikit-learn的简称，是一个基于Python的第三方模块。sklearn库集成了一些常用的机器学习方法，在进行机器学习任务时，并不需要实现算法，只需要简单的调用sklearn库中提供的模块就能完成大多数的机器学习任务。</p>
<p>　　　　安装sklearn库需要安装numpy, scipy(sklearn的基础, 集成了多种数学算法和函数), matplotlib(数据绘图工具)</p>
<p>　　　　<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/">安装地址</a></p>
<p>　　　　注意安装有顺序: numpy -&gt; scipy -&gt; matplotlib -&gt; sklearn</p>
<p><a href="https://www.cnblogs.com/weihuchao/p/6874683.html#_labelTop">回到顶部</a></p>
<h1 id="2-sklearn库中的标准数据集及基本功能"><a href="#2-sklearn库中的标准数据集及基本功能" class="headerlink" title="2 sklearn库中的标准数据集及基本功能"></a>2 sklearn库中的标准数据集及基本功能</h1><h2 id="2-1-标准数据集"><a href="#2-1-标准数据集" class="headerlink" title="2.1 标准数据集"></a>2.1 标准数据集</h2><p>　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170518162319478-267092604.png" alt="img"></p>
<p>　　1) 波士顿房价数据集</p>
<p>　　　　波士顿房价数据集包含506组数据，每条数据包含房屋以及房屋周围的详细信息。其中包括城镇犯罪率、一氧化氮浓度、住宅平均房间数、到中心区域的加距离以及自住房平均房价等。因此，波士顿房价数据集能够应用到回归问题上。</p>
<p>　　　　加载数据集</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sklearn.datasets.load_boston()</span><br></pre></td></tr></table></figure>
<p>　　　　其中有参数return_X_y, 设置为True是会返回(data, target)两个数据, <strong>默认为False</strong>, 只返回data(包含了data和target两个部分的内容)</p>
<p>　　　　具体使用</p>
<p>　　　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170518163922713-1506268480.png" alt="img"></p>
<p>　　2) 鸢尾花数据集</p>
<p>　　　　鸢尾花数据集采集的是鸢尾花的测量数据以及其所属的类别</p>
<p>　　　　测量数据包括: 萼片长度、萼片宽度、花瓣长度、花瓣宽度</p>
<p>　　　　类别共分为三类: Iris Setosa，Iris Versicolour，Iris Virginica, 该数据集可用于多分类问题</p>
<p>　　　　加载数据集</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sklearn.datasets. load_iris()</span><br></pre></td></tr></table></figure>
<p>　　　　同样有参数return_X_y, 使用方法雷同</p>
<p>　　　　具体实例</p>
<p>　　　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170518164919900-1535707821.png" alt="img"></p>
<p>　　3) 手写数字数据集</p>
<p>　　　　手写数字数据集包括1797个0-9的手写数字数据，每个数字由8*8大小的矩阵构成，矩阵中值的范围是0-16，代表颜色的深度。</p>
<p>　　　　加载数据集</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sklearn.datasets.load_digits()</span><br></pre></td></tr></table></figure>
<p>　　　　return_X_y: 效果依旧, True返回(data, target), 默认False直接返回全部内容</p>
<p>　　　　n_class: 设置数据类别, 返回数据的类别比设置类别低的数据样本, 设置为5就会返回0~4的数据 </p>
<p>　　　　基本使用<br>　　　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170518165720525-228666888.png" alt="img"></p>
<h2 id="2-2-sklearn库的基本功能"><a href="#2-2-sklearn库的基本功能" class="headerlink" title="2.2 sklearn库的基本功能"></a>2.2 sklearn库的基本功能</h2><p>　　sklearn库的共分为6大部分，分别用于完成分类任务、回归任务、聚类任务、降维任务、 模型选择以及数据的预处理</p>
<p>　　1) <strong>分类</strong>任务</p>
<p>　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170518170108494-1242465797.png" alt="img"></p>
<p>　　2) <strong>回归</strong>任务</p>
<p>　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170518170135635-1624450024.png" alt="img"></p>
<p>　　3) <strong>聚类</strong>任务</p>
<p> 　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170518170203385-816326160.png" alt="img"></p>
<p>　　4) <strong>降维</strong>任务</p>
<p>　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170518170219666-1472992565.png" alt="img"></p>
<p><a href="https://www.cnblogs.com/weihuchao/p/6874683.html#_labelTop">回到顶部</a></p>
<h1 id="3-关于无监督学习"><a href="#3-关于无监督学习" class="headerlink" title="3 关于无监督学习"></a>3 关于无监督学习</h1><p>　　无监督学习的目标</p>
<p>　　　　利用无标签的数据学习数据的分布或数据与数据之间的关系被称作无监督学习</p>
<p>　　　　有监督学习和无监督学习的最大区别在于数据是否有标签</p>
<p>　　　　无监督学习最常应用的场景是<strong>聚类(clustering)**和</strong>降维(DimensionReduction)**</p>
<p>　　<strong>聚类</strong></p>
<p>　　　　聚类(clustering)，就是根据数据的“相似性”将数据分为多类的过程</p>
<p>　　　　评估两个不同样本之间的“相似性” ，通常使用的方法就是计算两个样本之间的“距离”。使用不同的方法计算样本间的距离会关系到聚类结果的好坏</p>
<p>　　1) <strong>欧氏距离</strong></p>
<p>　　　　欧氏距离是最常用的一种距离度量方法，源于欧式空间中<strong>两点的距离</strong>。</p>
<p>　　　　计算公式</p>
<p>　　　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170518170709135-1532917790.png" alt="img"></p>
<p>　　　　直观表示</p>
<p>　　　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170518170832182-886281143.png" alt="img"></p>
<p>　　2) <strong>曼哈顿距离</strong></p>
<p>　　　　曼哈顿距离也称作“城市街区距离”，类似于在城市之中驾车行驶，<strong>从一个十字路口到另外一个十字楼口的距离(x与y两个方向的距离之和)</strong></p>
<p>　　　　计算公式</p>
<p> 　　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170518170923869-2101076582.png" alt="img"></p>
<p>　　　　直观表示</p>
<p>　　　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170518170948603-1805810447.png" alt="img"></p>
<p>　　3) <strong>马氏距离</strong></p>
<p>　　　　马氏距离表示数据的协方差距离，是一种尺度无关的度量方式。也就是说马氏距离会先将样本点的各个属性标准化，再计算样本间的距离。</p>
<p>　　　　计算公式, 其中s是协方差矩阵</p>
<p>　　　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170518171114385-1175330249.png" alt="img"></p>
<p>　　　　马氏空间的距离</p>
<p>　　　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170518171159057-1051433700.png" alt="img"></p>
<p>　　4) <strong>夹角余弦</strong></p>
<p>　　　　余弦相似度用向量空间中两个向量夹角的余弦值作为衡量两个样本差异的大小。余弦值越接近1，说明两个向量夹角越接近0度，表明两个向量越相似</p>
<p>　　　　计算公式</p>
<p>　　　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170518171255244-1619807957.png" alt="img"></p>
<p>　　　　二维空间显示</p>
<p>　　　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170518171312307-1211754309.png" alt="img"></p>
<p>　　sklearn提供的常用聚类算法函数包含在<strong>sklearn.cluster</strong>这个模块中</p>
<p>　　以同样的数据集应用于不同的算法，可能会得到不同的结果，算法所耗费的时间也不尽相同，这是由算法的特性决定的</p>
<p>　　sklearn.cluster</p>
<p>　　　　sklearn.cluster模块提供的各聚类算法函数可以使用不同的数据形式作为输入</p>
<p>　　　　标准数据输入格式:<strong>[**</strong>样本个数，特征个数****]**定义的矩阵形式</p>
<p>　　　　相似性矩阵输入格式：即由**[样本数目，样本数目]**定义的矩阵形式，矩阵中的每一个元素为两个样本的相似度，如DBSCAN，AffinityPropagation(近邻传播算法)接受这种输入。如果以余弦相似度为例，则对角线元素全为1. 矩阵中每个元素的取值范围为[0,1]</p>
<p>　　具有代表性的聚类函数</p>
<p>　　　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170518172253010-1621085682.png" alt="img"></p>
<p>　　<strong>降维</strong></p>
<p>　　　　降维就是在保证数据所具有的代表性特征或分布的情况下, 将<strong>高维数据转化为低维数据</strong>的过程</p>
<p>　　　　作用:</p>
<p>　　　　　　数据可视化</p>
<p>　　　　　　作为中间过程, 起到精简数据, 提高其他机器学习算法效率的作用</p>
<p>　　分类和降维</p>
<p>　　　　聚类和分类都是无监督学习的典型任务，任务之间存在关联，比如某些高纬数据的分类可以通过降维处理更好的获得，另外学界研究也表明代表性的分类算法如k-means与降维算法如NMF之间存在等价性</p>
<p>　　sklearn和降维</p>
<p>　　　　降维是机器学习领域的一个重要研究内容，有很多被工业界和学术界接受的典型算法，截止到目前sklearn库提供7种降维算法</p>
<p>　　　　降维过程也可以被理解为对<strong>数据集的组成成份进行分解（decomposition）</strong>的过程，因此sklearn为降维模块命名为decomposition, 在对降维算法调用需要使用sklearn.decomposition模块</p>
<p>　　　　sklearn.decomposition的常用算法</p>
<p>　　　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170518173946947-1840266132.png" alt="img"></p>
<p><a href="https://www.cnblogs.com/weihuchao/p/6874683.html#_labelTop">回到顶部</a></p>
<h1 id="4-K-means方法及应用"><a href="#4-K-means方法及应用" class="headerlink" title="4 K-means方法及应用"></a>4 K-means方法及应用</h1><p>　　k-means算法也就是<strong>k均值算法</strong></p>
<p>　　k-means算法以k为参数，把n个对象分成k个簇, 使簇内具有较高的相似度, 而簇间的相似度较低</p>
<p>　　处理结果如下</p>
<p>　　　　1 随机选择k个点作为初始的聚类中心；</p>
<p>　　　　2 对于剩下的点，根据其与聚类中心的距离，将其归入最近的簇</p>
<p>　　　　3 对每个簇，计算所有点的均值作为新的聚类中心</p>
<p>　　　　4 重复2、 3直到聚类中心不再发生改变</p>
<p>　　k-meams方法的处理过程如下</p>
<p>　　　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170518184141416-532536277.png" alt="img"></p>
<p>　　创建k-means实例</p>
<p>　　　　创建实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sklearn.cluster.Kmeans()</span><br></pre></td></tr></table></figure>
<p>　　　　n_clusters: 用于指定聚类中心的个数, 一般设定此参数, 别的参数使用默认值</p>
<p>　　　　init: 初始聚类中心的初始化方法, 默认值是k-means++</p>
<p>　　　　max_iter: 最大的跌打次数, 默认值是30</p>
<p>　　创建实例后, 可以通过实例对象调用<strong>fit_predict()**计算</strong>簇中心以及为簇分配序号**</p>
<p>　　　　其中会传入参数data, 用于传入需要加载的数据</p>
<p>　　　　返回的结果是一个label, 是聚类后各个数据所属的标签</p>
<p>　　k-means实例还有一个参数 <strong>cluster_centers_</strong>, 可以通过处理该参数的值来得到更进一步的处理数据　　</p>
<p>　　k-means的应用</p>
<p>　　处理中国1999年各省份的消费水平</p>
<p>　　　　处理的技术路线: sklearn.cluster.Kmeans</p>
<p>　　　　数据模型为</p>
<p>　　　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170525123220341-1430445217.png" alt="img"></p>
<p>　　　　具体实例代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">from sklearn.cluster import KMeans</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">def loadData(filePath):</span><br><span class="line">    fr = open(filePath,&#x27;r+&#x27;)</span><br><span class="line">    lines = fr.readlines()</span><br><span class="line">    retData = []</span><br><span class="line">    retCityName = []</span><br><span class="line">    for line in lines:</span><br><span class="line">        items = line.strip().split(&quot;,&quot;)</span><br><span class="line">        retCityName.append(items[0])</span><br><span class="line">        retData.append([float(items[i]) for i in range(1,len(items))])</span><br><span class="line">    return retData,retCityName</span><br><span class="line">  </span><br><span class="line">      </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    data,cityName = loadData(&#x27;31省市居民家庭消费水平-city.txt&#x27;)</span><br><span class="line">    km = KMeans(n_clusters=4)</span><br><span class="line">    label = km.fit_predict(data)</span><br><span class="line">    expenses = np.sum(km.cluster_centers_,axis=1)</span><br><span class="line">    #print(expenses)</span><br><span class="line">    CityCluster = [[],[],[],[]]</span><br><span class="line">    for i in range(len(cityName)):</span><br><span class="line">        CityCluster[label[i]].append(cityName[i])</span><br><span class="line">    for i in range(len(CityCluster)):</span><br><span class="line">        print(&quot;Expenses:%.2f&quot; % expenses[i])</span><br><span class="line">        print(CityCluster[i])</span><br></pre></td></tr></table></figure>
<p>　　　　程序结果</p>
<p>　　　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170525122740950-2018421250.png" alt="img"></p>
<p>　　深入程序解释</p>
<p>　　　　label是一个列表类型, 具体的值是 对应的数据被分成哪一类的索引</p>
<p>　　　　也就是说, 遍历cityname的时候同步取得label的值, 就可以对应的把城市名字放到合适的分类中, 这就是下面这句话的来源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CityCluster[label[i]].append(cityName[i])</span><br></pre></td></tr></table></figure>
<p>　　　　生成的cluster_centers_是一个二维数据, 是一个列表里面套列表, 里面列表存储的是一个分类中, 每个城市的值对应处理得到的结果</p>
<p>　　　　所以对这个值在1维上相加得到的就是每一个聚类的综合的值, 这就是这句话的来源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">expenses = np.sum(km.cluster_centers_,axis=1)</span><br></pre></td></tr></table></figure>
<p>　　深入k-means</p>
<p>　　　　k-means在计算两条数据相似性时, <strong>默认是使用欧式距离</strong>, 且没有给对应的参数来修改这个默认的计算距离的方法</p>
<p>　　　　如果需要修改这个默认的距离方式, 需要修改源代码</p>
<p>　　　　源码位置为C:\Python36\Lib\site-packages\sklearn\metrics\pairwise.py</p>
<p>　　　　162行的euclidean_distances()函数</p>
<p>　　　　建议使用scipy.spatial.distance.cdist方法</p>
<p><a href="https://www.cnblogs.com/weihuchao/p/6874683.html#_labelTop">回到顶部</a></p>
<h1 id="5-DBSCAN方法及应用"><a href="#5-DBSCAN方法及应用" class="headerlink" title="5 DBSCAN方法及应用"></a>5 DBSCAN方法及应用</h1><p>　　DBSCAN算法是一种<strong>基于密度</strong>的聚类算法</p>
<p>　　　　DBSCAN算法聚类的时候不要预先指定簇的个数</p>
<p>　　　　因而最终的簇的个数不确定</p>
<p>　　DBSCAN算法将数据点分为三类</p>
<p>　　　　<strong>核心点</strong>: 在半径Eps内含有超过MinPts数据的点</p>
<p>　　　　<strong>边界点</strong>: 在半径Eps内点的数量小于MinPts, 但是落在核心点的邻域内</p>
<p>　　　　<strong>噪音点</strong>: 既不是核心点也不是边界点的点</p>
<p>　　DBSCAN的算法流程</p>
<p>　　　　1.将所有点标记为核心点、边界点或噪声点;</p>
<p>　　　　2.删除噪声点;</p>
<p>　　　　3.为距离在Eps之内的所有核心点之间赋予一条边;</p>
<p>　　　　4.每组连通的核心点形成一个簇;</p>
<p>　　　　5.将每个边界点指派到一个与之关联的核心点的簇中(哪一个核心点的半径范围之内)</p>
<p>　　获得密度聚类的实例</p>
<p>　　　　设Eps=3, MinPts=3, 采用曼哈顿距离聚类</p>
<p>　　　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170518192449353-152727134.png" alt="img"></p>
<p>　　　　处理核心点, 边界点, 噪声点</p>
<p>　　　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170518192532416-1288859775.png" alt="img"></p>
<p>　　　　将不超过Eps=3的点相互圈起来形成一个簇, 核心点邻域内的点都会被加入到这个簇当中</p>
<p>　　　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170518192641525-2103156938.png" alt="img"></p>
<p>　　创建DBSCAN的实例</p>
<p>　　　　使用代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sklearn.cluster.DBSCAN()</span><br></pre></td></tr></table></figure>
<p>　　　　其中有几个参数</p>
<p>　　　　eps: 两个样本被看做邻居节点的最大距离</p>
<p>　　　　min_samples: 簇的样本数</p>
<p>　　　　metric: 距离的计算方式</p>
<p>　　　　<a href="http://scikit-learn.org/stable/modules/generated/sklearn.cluster.DBSCAN.html#sklearn.cluster.DBSCAN">详细介绍</a></p>
<p>　　创建完毕DBSCAN的对象之后</p>
<p>　　　　可以后 DBSCAN对象.fix(数据) 来生成一个结果, 这个结果有一个属性是<strong>labels_</strong></p>
<p>　　　　这个就是我们需要的标签</p>
<p> 　　　其中标签中值为-1表示噪声</p>
<p>　　实例处理, 学生上网时间分布</p>
<p>　　数据</p>
<p>　　　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170525160322966-58968362.png" alt="img"></p>
<p>　　　　分别是 记录编号, 学生编号, MAC地址, IP地址, 开始上网时间, 结束上网时间, 上网时长(秒), …</p>
<p>　　具体代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import sklearn.cluster as skc</span><br><span class="line">from sklearn import metrics</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"> </span><br><span class="line">onlinetimes = &#123;&#125;</span><br><span class="line">with open(&quot;学生月上网时间分布-TestData.txt&quot;, encoding=&quot;utf8&quot;) as f:</span><br><span class="line">    for line in f:</span><br><span class="line">        info_list = line.strip().split(&#x27;,&#x27;)</span><br><span class="line">        mac = info_list[2]</span><br><span class="line">        onlinetime = int(info_list[6])</span><br><span class="line">        # 获取上网的起始时候的小时 &quot;2014-07-21 08:14:29.287000000&quot; 这个的08</span><br><span class="line">        starttime = int(info_list[4].split(&#x27; &#x27;)[1].split(&#x27;:&#x27;)[0])</span><br><span class="line">        onlinetimes[mac] = (starttime, onlinetime)</span><br><span class="line">real_X = np.array([onlinetimes[key] for key in onlinetimes]).reshape((-1, 2))</span><br><span class="line"># 只获取上网的时间点</span><br><span class="line">X = real_X[:, 0:1]</span><br><span class="line"> </span><br><span class="line">db = skc.DBSCAN(eps=0.01, min_samples=20).fit(X)</span><br><span class="line">labels = db.labels_</span><br><span class="line"> </span><br><span class="line"># 获得噪声点比例</span><br><span class="line">raito = len(labels[labels[:] == -1]) / len(labels)</span><br><span class="line">print(&#x27;Noise raito:&#x27;, format(raito, &#x27;.2%&#x27;))</span><br><span class="line"> </span><br><span class="line"># 显示算法性能</span><br><span class="line">n_clusters_ = len(set(labels)) - (1 if -1 in labels else 0)</span><br><span class="line">print(&#x27;Estimated number of clusters: %d&#x27; % n_clusters_)</span><br><span class="line">print(&quot;Silhouette Coefficient: %0.3f&quot; % metrics.silhouette_score(X, labels))</span><br><span class="line"> </span><br><span class="line">for i in range(n_clusters_):</span><br><span class="line">    print(&#x27;Cluster &#x27;, i, &#x27;:&#x27;)</span><br><span class="line">    print(list(X[labels == i].flatten()))</span><br><span class="line"> </span><br><span class="line">plt.hist(X, 24)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>　　实验结果</p>
<p>　　　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170525172657138-68858036.png" alt="img"></p>
<p>　　处理数据的技巧</p>
<p>　　　　如果原始数据不协调, 不利于数据处理, 可以对原始数据进行无损变化来使得数据大小更加合适处理</p>
<p>　　　　具体的处理办法就是取对数变换</p>
<p><a href="https://www.cnblogs.com/weihuchao/p/6874683.html#_labelTop">回到顶部</a></p>
<h1 id="6-PCA方法及其应用"><a href="#6-PCA方法及其应用" class="headerlink" title="6  PCA方法及其应用"></a>6  PCA方法及其应用</h1><p>　　PCA(Principal Component Analysis), 主成分分析, 是最常用的一种降维方法, 通常用于高维数据集的探索与可视化, 还可以用作数据压缩和预处理等</p>
<p>　　PCA可以把具有相关性的高维变量<strong>合成</strong>为线性无关的低维变量，称为主成分。主成分能够尽可能保留原始数据的信息</p>
<p>　　相关术语</p>
<p>　　1) 方差</p>
<p>　　　　是各个样本和样本均值的差的平方和的均值，用来度量一组数据的分散程度</p>
<p>　　　　公式</p>
<p>　　　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170518200233775-1681892894.png" alt="img"></p>
<p>　　2) 协方差</p>
<p>　　　　用于度量两个变量之间的线性相关性程度，若两个变量的协方差为0，则可认为二者线性无关。协方差矩阵则是由变量的协方差值构成的矩阵（对称阵）</p>
<p>　　　　公式</p>
<p>　　　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170518200343869-905360614.png" alt="img"></p>
<p>　　3) 特征向量</p>
<p>　　　　矩阵的特征向量是描述数据集结构的非零向量</p>
<p>　　　　公式</p>
<p>　　　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170518200807557-1259352640.png" alt="img"></p>
<p>　　主成分分析的原理</p>
<p>　　　　矩阵的主成分就是其协方差矩阵对应的特征向量，按照对应的特征值大小进行排序，最大的特征值就是第一主成分，其次是第二主成分，以此类推</p>
<p>　　使用PCA</p>
<p>　　　　创建PCA对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sklearn.decomposition.PCA()</span><br></pre></td></tr></table></figure>
<p>　　　　主要有两个参数</p>
<p>　　　　n_components: 指定主要成分的个数</p>
<p>　　　　svd_solver: 设置特征值分解的方法, 默认为auto, 其他可选的还有full, arpack, randomized</p>
<p>　　创建PCA对象之后, 可以通过调用**fit_transform(data)**函数传入需要降维的数据, 返回的数据就是降维之后处理完毕的数据</p>
<p>　　实例, 处理鸢尾花数据集</p>
<p>　　　　鸢尾花数据集是(150, 4)</p>
<p>　　　　可以利用PCA将数据集处理成(150, 2)的数据</p>
<p>　　　　处理鸢尾花数据让其从4维数据编程2位平面数据, 具体代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from sklearn.decomposition import PCA</span><br><span class="line">from sklearn.datasets import load_iris</span><br><span class="line">  </span><br><span class="line">data = load_iris()</span><br><span class="line">y = data.target</span><br><span class="line">X = data.data</span><br><span class="line">pca = PCA(n_components=2)</span><br><span class="line">reduced_X = pca.fit_transform(X)</span><br><span class="line">  </span><br><span class="line">red_x, red_y = [], []</span><br><span class="line">blue_x, blue_y = [], []</span><br><span class="line">green_x, green_y = [], []</span><br><span class="line">  </span><br><span class="line">for i in range(len(reduced_X)):</span><br><span class="line">    if y[i] == 0:</span><br><span class="line">        red_x.append(reduced_X[i][0])</span><br><span class="line">        red_y.append(reduced_X[i][1])</span><br><span class="line">    elif y[i] == 1:</span><br><span class="line">        blue_x.append(reduced_X[i][0])</span><br><span class="line">        blue_y.append(reduced_X[i][1])</span><br><span class="line">    else:</span><br><span class="line">        green_x.append(reduced_X[i][0])</span><br><span class="line">        green_y.append(reduced_X[i][1])</span><br><span class="line">  </span><br><span class="line">plt.scatter(red_x, red_y, c=&#x27;r&#x27;, marker=&#x27;x&#x27;)</span><br><span class="line">plt.scatter(blue_x, blue_y, c=&#x27;b&#x27;, marker=&#x27;D&#x27;)</span><br><span class="line">plt.scatter(green_x, green_y, c=&#x27;g&#x27;, marker=&#x27;.&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>　　具体结果</p>
<p>　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170525184342372-23230586.png" alt="img"></p>
<p><a href="https://www.cnblogs.com/weihuchao/p/6874683.html#_labelTop">回到顶部</a></p>
<h1 id="7-NMF方法及其实例"><a href="#7-NMF方法及其实例" class="headerlink" title="7 NMF方法及其实例"></a>7 NMF方法及其实例</h1><p>　　NMF(Non-negative Matrix Factorization, 非负矩阵分解), 是在矩阵中所有元素均为<strong>非负数</strong>约束条件之下的矩阵分解方法</p>
<p>　　基本思想：给定一个非负矩阵V，NMF能够找到一个非负矩阵W和一个非负矩阵H，使得矩阵W和H的乘积近似等于矩阵V中的值</p>
<p>　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170519085203932-1800063375.png" alt="img"></p>
<p>　　W矩阵：基础图像矩阵, 相当于从原矩阵V中抽取出来的特征</p>
<p>　　H矩阵：系数矩阵</p>
<p>　　NMF能够广泛应用于图像分析、文本挖掘和语音处理等领域</p>
<p>　　</p>
<p>　　矩阵分解优化目标: 最小化W矩阵H矩阵的乘积和原始矩阵之间的差别，目标函数如下</p>
<p>　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170519085903728-2129321519.png" alt="img"></p>
<p>　　基于KL散度的优化目标, 损失函数如下</p>
<p>　　<img src="/../images/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/1003577-20170519091244353-1606654133.png" alt="img"></p>
<p>　　<a href="http://blog.csdn.net/acdreamers/article/details/44663421/">公式的推导</a></p>
<p>　　在sklearn库中，可以使用sklearn.decomposition.NMF加载NMF算法，主要参数有</p>
<p>　　生成NMF对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sklearn.decomposition.NMF()</span><br></pre></td></tr></table></figure>
<p>　　　　n_components：用于指定分解后矩阵的单个维度k</p>
<p>　　　　init：W矩阵和H矩阵的初始化方式，默认为‘ nndsvdar’</p>
<p>　　使用NMF对人脸数据进行特征提取</p>
<p>　　　　使用 <strong>NMF对象.fit(数据)</strong> 来处理数据, 生成的内容还是在NMF对象中</p>
<p>　　　　获取处理数据 <strong>NMF对象.components_</strong> 获取得到的数据</p>
<p>　　具体使用PCA和NMF处理人脸数据并且对比展示的代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from numpy.random import RandomState</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from sklearn.datasets import fetch_olivetti_faces</span><br><span class="line">from sklearn import decomposition</span><br><span class="line">  </span><br><span class="line">n_row, n_col = 2, 3</span><br><span class="line">n_components = n_row * n_col</span><br><span class="line">image_shape = (64, 64)</span><br><span class="line">  </span><br><span class="line"># Load faces data</span><br><span class="line">dataset = fetch_olivetti_faces(shuffle=True, random_state=RandomState(0))</span><br><span class="line">faces = dataset.data</span><br><span class="line">  </span><br><span class="line">def plot_gallery(title, images, n_col=n_col, n_row=n_row):</span><br><span class="line">    plt.figure(figsize=(2. * n_col, 2.26 * n_row))</span><br><span class="line">    plt.suptitle(title, size=16)</span><br><span class="line">    for i, comp in enumerate(images):</span><br><span class="line">        plt.subplot(n_row, n_col, i + 1)</span><br><span class="line">        vmax = max(comp.max(), -comp.min())</span><br><span class="line">  </span><br><span class="line">        plt.imshow(comp.reshape(image_shape), cmap=plt.cm.gray,</span><br><span class="line">                   interpolation=&#x27;nearest&#x27;, vmin=-vmax, vmax=vmax)</span><br><span class="line">        plt.xticks(())</span><br><span class="line">        plt.yticks(())</span><br><span class="line">    plt.subplots_adjust(0.01, 0.05, 0.99, 0.94, 0.04, 0.)</span><br><span class="line">  </span><br><span class="line">      </span><br><span class="line">plot_gallery(&quot;First centered Olivetti faces&quot;, faces[:n_components])</span><br><span class="line"> </span><br><span class="line">estimators = [</span><br><span class="line">    (&#x27;Eigenfaces - PCA using randomized SVD&#x27;,</span><br><span class="line">         decomposition.PCA(n_components=6,whiten=True)),</span><br><span class="line">  </span><br><span class="line">    (&#x27;Non-negative components - NMF&#x27;,</span><br><span class="line">         decomposition.NMF(n_components=6, init=&#x27;nndsvda&#x27;, tol=5e-3))</span><br><span class="line">]</span><br><span class="line">  </span><br><span class="line">for name, estimator in estimators:</span><br><span class="line">    print(&quot;Extracting the top %d %s...&quot; % (n_components, name))</span><br><span class="line">    print(faces.shape)</span><br><span class="line">    estimator.fit(faces)</span><br><span class="line">    components_ = estimator.components_</span><br><span class="line">    plot_gallery(name, components_[:n_components])</span><br><span class="line">  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/weihuchao/p/6874683.html#_labelTop">回到顶部</a></p>
<h1 id="8-基于聚类的“图像分割”"><a href="#8-基于聚类的“图像分割”" class="headerlink" title="8 基于聚类的“图像分割”"></a>8 基于聚类的“图像分割”</h1><p>　　图像分割：利用图像的灰度、颜色、纹理、形状等特征，把图像分成若干个互不重叠的区域，并使这些特征在同一区域内呈现相似性，在不同的区域之间存在明显的差异性。 然后就可以将分割的图像中具有独特性质的区域提取出来用于不同的研究</p>
<p>　　图像分割技术已在实际生活中得到广泛的应用。例如：在机车检验领域，可以应用到轮毂裂纹图像的分割，及时发现裂纹，保证行车安全；在生物医学工程方面，对肝脏CT图像进行分割，为临床治疗和病理学研究提供帮助</p>
<p>　　图像分割常用方法：</p>
<p>　　　　1 阈值分割：对图像灰度值进行度量，设置不同类别的阈值，达到分割的目的</p>
<p>　　　　2 边缘分割：对图像边缘进行检测，即检测图像中灰度值发生跳变的地方，则为一片区域的边缘</p>
<p>　　　　3 直方图法：对图像的颜色建立直方图，而直方图的波峰波谷能够表示一块区域的颜色值的范围，来达到分割的目的</p>
<p>　　　　4 特定理论：基于聚类分析、小波变换等理论完成图像分割</p>
<p>　　实例描述</p>
<p>　　　　目标: 利用K-means聚类算法对图像像素点颜色进行聚类实现简单的图像分割 </p>
<p>　　　　输出: 同一聚类中的点使用相同颜色标记，不同聚类颜色不同</p>
<p>　　　　技术路线: sklearn.cluster.KMeans</p>
<p>　　具体代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import PIL.Image as image</span><br><span class="line">from sklearn.cluster import KMeans</span><br><span class="line">  </span><br><span class="line">def loadData(filePath):</span><br><span class="line">    f = open(filePath,&#x27;rb&#x27;)</span><br><span class="line">    data = []</span><br><span class="line">    img = image.open(f)</span><br><span class="line">    m,n = img.size</span><br><span class="line">    for i in range(m):</span><br><span class="line">        for j in range(n):</span><br><span class="line">            x,y,z = img.getpixel((i,j))</span><br><span class="line">            data.append([x/256.0,y/256.0,z/256.0])</span><br><span class="line">    f.close()</span><br><span class="line">    return np.mat(data),m,n</span><br><span class="line">  </span><br><span class="line">imgData,row,col = loadData(&#x27;kmeans/bull.jpg&#x27;)</span><br><span class="line">label = KMeans(n_clusters=4).fit_predict(imgData)</span><br><span class="line">  </span><br><span class="line">label = label.reshape([row,col])</span><br><span class="line">pic_new = image.new(&quot;L&quot;, (row, col))</span><br><span class="line">for i in range(row):</span><br><span class="line">    for j in range(col):</span><br><span class="line">        pic_new.putpixel((i,j), int(256/(label[i][j]+1)))</span><br><span class="line">pic_new.save(&quot;result-bull-4.jpg&quot;, &quot;JPEG&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>-大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>最全面的改造Zuul网关为Spring Cloud Gateway（包含Zuul核心实现和Spring Cloud Gateway核心实现）</title>
    <url>/post/216aad53.html</url>
    <content><![CDATA[<p><strong>前言：</strong></p>
<p>最近开发了Zuul网关的实现和Spring Cloud Gateway实现，对比Spring Cloud Gateway发现后者性能好支持场景也丰富。在高并发或者复杂的分布式下，后者限流和自定义拦截也很棒。</p>
<p><strong>提示：</strong></p>
<p>本文主要列出本人开发的Zuul网关核心代码以及Spring Cloud Gateway核心代码实现。因为本人技术有限，主要是参照了 <strong><a href="https://cloud.spring.io/spring-cloud-gateway/single/spring-cloud-gateway.html">Spring Cloud Gateway</a></strong> 如有不足之处还请见谅并留言指出。</p>
<p>1：为什么要做网关</p>
<p>（1）网关层对外部和内部进行了隔离，保障了后台服务的安全性。</p>
<p>（2）对外访问控制由网络层面转换成了运维层面，减少变更的流程和错误成本。</p>
<p>（3）减少客户端与服务的耦合，服务可以独立运行，并通过网关层来做映射。</p>
<p>（4）通过网关层聚合，减少外部访问的频次，提升访问效率。</p>
<p>（5）节约后端服务开发成本，减少上线风险。</p>
<p>（6）为服务熔断，灰度发布，线上测试提供简单方案。</p>
<p>（7）便于进行应用层面的扩展。 </p>
<p>相信在寻找相关资料的伙伴应该都知道，在微服务环境下，要做到一个比较健壮的流量入口还是很重要的，需要考虑的问题也比较复杂和众多。</p>
<p>2：网关和鉴权基本实现架构（图中包含了auth组件，或SSO，文章结尾会提供此组件的实现）</p>
<p>![img](../images/最全面的改造Zuul网关为Spring Cloud Gateway/822716-20190805222236873-514557442.png)</p>
<p>3：Zuul的实现</p>
<p>（1）第一代的zuul使用的是netflix开发的，在pom引用上都是用的原来的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- zuul网关最基本要用到的 --&gt;</span><br><span class="line">       &lt;!-- 封装原来的jedis，用处是在网关里来放token到redis或者调redis来验证当前是否有效，或者说直接用redis负载--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- 客户端注册eureka使用的，微服务必备 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- zuul --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">       &lt;!-- 熔断支持 --&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--负载均衡 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- 调用feign --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- 健康 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>（2）修改application-dev.yml 的内容</p>
<p>给个提示，在原来的starter-web中 yml的 context-path是不需要用的，微服务中只需要用application-name去注册中心找实例名即可，况且webflux后context-path已经不存在了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: gateway</span><br><span class="line"></span><br><span class="line">#eureka-gateway-monitor-config 每个端口+1</span><br><span class="line">server:</span><br><span class="line">  port: 8702</span><br><span class="line"></span><br><span class="line">#eureka注册配置</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    #使用IP注册</span><br><span class="line">    prefer-ip-address: true</span><br><span class="line">    ##续约更新时间间隔设置5秒，m默认30s</span><br><span class="line">    lease-renewal-interval-in-seconds: 30</span><br><span class="line">    ##续约到期时间10秒，默认是90秒</span><br><span class="line">    lease-expiration-duration-in-seconds: 90</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8700/eureka/</span><br><span class="line"></span><br><span class="line"># route connection</span><br><span class="line">zuul:</span><br><span class="line">  host:</span><br><span class="line">    #单个服务最大请求</span><br><span class="line">    max-per-route-connections: 20</span><br><span class="line">    #网关最大连接数</span><br><span class="line">    max-total-connections: 200</span><br><span class="line">    #routes to serviceId</span><br><span class="line">    routes:</span><br><span class="line">      api-product.path: /api/product/**</span><br><span class="line">      api-product.serviceId: product</span><br><span class="line">      api-customer.path: /api/customer/**</span><br><span class="line">      api-customer.serviceId: customer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#移除url同时移除服务</span><br><span class="line">auth-props:</span><br><span class="line">  #accessIp: 127.0.0.1</span><br><span class="line">  #accessToken: admin</span><br><span class="line">  #authLevel: dev</span><br><span class="line">  #服务</span><br><span class="line">  api-urlMap: &#123;</span><br><span class="line">    product: 1&amp;2,</span><br><span class="line">    customer: 1&amp;1</span><br><span class="line">  &#125;</span><br><span class="line">  #移除url同时移除服务</span><br><span class="line">  exclude-urls:</span><br><span class="line">    - /pro</span><br><span class="line">    - /cust</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#断路时间</span><br><span class="line">hystrix:</span><br><span class="line">  command:</span><br><span class="line">    default:</span><br><span class="line">      execution:</span><br><span class="line">        isolation:</span><br><span class="line">          thread:</span><br><span class="line">            timeoutInMilliseconds: 300000</span><br><span class="line"></span><br><span class="line">#ribbon</span><br><span class="line">ribbon:</span><br><span class="line">  ReadTimeout: 15000</span><br><span class="line">  ConnectTimeout: 15000</span><br><span class="line">  SocketTimeout: 15000</span><br><span class="line">  eager-load:</span><br><span class="line">    enabled: true</span><br><span class="line">    clients: product, customer</span><br></pre></td></tr></table></figure>
<p>如果仅仅是转发，那很简单，如果要做好场景，则需要添加白名单和黑名单，在zuul里只需要加白名单即可，存在链接或者实例名才能通过filter转发。</p>
<p>重点在：</p>
<p>api-urlMap: 是实例名，如果链接不存在才会去校验，因为端口+链接可以访问，如果加实例名一起也能访问，防止恶意带实例名攻击或者抓包请求后去猜链接后缀来攻击。<br>exclude-urls: 白名单连接，每个微服务的请求入口地址，包含即通过。</p>
<p>（3）上面提到白名单，那需要初始化白名单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.yugh.gateway.config;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.InitializingBean;</span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * //路由拦截配置</span><br><span class="line"> *</span><br><span class="line"> * @author: 余根海</span><br><span class="line"> * @creation: 2019-07-02 19:43</span><br><span class="line"> * @Copyright © 2019 yugenhai. All rights reserved.</span><br><span class="line"> */</span><br><span class="line">@Data</span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">@Configuration</span><br><span class="line">@ConfigurationProperties(prefix = &quot;auth-props&quot;)</span><br><span class="line">public class ZuulPropConfig implements InitializingBean &#123;</span><br><span class="line"></span><br><span class="line">    private static final String normal = &quot;(\\w|\\d|-)+&quot;;</span><br><span class="line">    private List&lt;Pattern&gt; patterns = new ArrayList&lt;&gt;();</span><br><span class="line">    private Map&lt;String, String&gt; apiUrlMap;</span><br><span class="line">    private List&lt;String&gt; excludeUrls;</span><br><span class="line">    private String accessToken;</span><br><span class="line">    private String accessIp;</span><br><span class="line">    private String authLevel;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterPropertiesSet() throws Exception &#123;</span><br><span class="line">        excludeUrls.stream().map(s -&gt; s.replace(&quot;*&quot;, normal)).map(Pattern::compile).forEach(patterns::add);</span><br><span class="line">        log.info(&quot;============&gt; 配置的白名单Url:&#123;&#125;&quot;, patterns);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（4）核心代码zuulFilter</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.yugh.gateway.filter;</span><br><span class="line"></span><br><span class="line">import com.netflix.zuul.ZuulFilter;</span><br><span class="line">import com.netflix.zuul.context.RequestContext;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.util.CollectionUtils;</span><br><span class="line">import org.springframework.util.StringUtils;</span><br><span class="line">import org.yugh.gateway.common.constants.Constant;</span><br><span class="line">import org.yugh.gateway.common.enums.DeployEnum;</span><br><span class="line">import org.yugh.gateway.common.enums.HttpStatusEnum;</span><br><span class="line">import org.yugh.gateway.common.enums.ResultEnum;</span><br><span class="line">import org.yugh.gateway.config.RedisClient;</span><br><span class="line">import org.yugh.gateway.config.ZuulPropConfig;</span><br><span class="line">import org.yugh.gateway.util.ResultJson;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.Cookie;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.function.Function;</span><br><span class="line">import java.util.regex.Matcher;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * //路由拦截转发请求</span><br><span class="line"> *</span><br><span class="line"> * @author: 余根海</span><br><span class="line"> * @creation: 2019-06-26 17:50</span><br><span class="line"> * @Copyright © 2019 yugenhai. All rights reserved.</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">public class PreAuthFilter extends ZuulFilter &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.profiles.active&#125;&quot;)</span><br><span class="line">    private String activeType;</span><br><span class="line">    @Autowired</span><br><span class="line">    private ZuulPropConfig zuulPropConfig;</span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisClient redisClient;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String filterType() &#123;</span><br><span class="line">        return &quot;pre&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int filterOrder() &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 部署级别可调控</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     * @author yugenhai</span><br><span class="line">     * @creation: 2019-06-26 17:50</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public boolean shouldFilter() &#123;</span><br><span class="line">        RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = context.getRequest();</span><br><span class="line">        if (activeType.equals(DeployEnum.DEV.getType())) &#123;</span><br><span class="line">            log.info(&quot;请求地址 : &#123;&#125;      当前环境  : &#123;&#125; &quot;, request.getServletPath(), DeployEnum.DEV.getType());</span><br><span class="line">            return true;</span><br><span class="line">        &#125; else if (activeType.equals(DeployEnum.TEST.getType())) &#123;</span><br><span class="line">            log.info(&quot;请求地址 : &#123;&#125;      当前环境  : &#123;&#125; &quot;, request.getServletPath(), DeployEnum.TEST.getType());</span><br><span class="line">            return true;</span><br><span class="line">        &#125; else if (activeType.equals(DeployEnum.PROD.getType())) &#123;</span><br><span class="line">            log.info(&quot;请求地址 : &#123;&#125;      当前环境  : &#123;&#125; &quot;, request.getServletPath(), DeployEnum.PROD.getType());</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 路由拦截转发</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     * @author yugenhai</span><br><span class="line">     * @creation: 2019-06-26 17:50</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public Object run() &#123;</span><br><span class="line">        RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = context.getRequest();</span><br><span class="line">        String requestMethod = context.getRequest().getMethod();</span><br><span class="line">        //判断请求方式</span><br><span class="line">        if (Constant.OPTIONS.equals(requestMethod)) &#123;</span><br><span class="line">            log.info(&quot;请求的跨域的地址 : &#123;&#125;   跨域的方法&quot;, request.getServletPath(), requestMethod);</span><br><span class="line">            assemblyCross(context);</span><br><span class="line">            context.setResponseStatusCode(HttpStatusEnum.OK.code());</span><br><span class="line">            context.setSendZuulResponse(false);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        //转发信息共享 其他服务不要依赖MVC拦截器，或重写拦截器</span><br><span class="line">        if (isIgnore(request, this::exclude, this::checkLength)) &#123;</span><br><span class="line">            String token = getCookieBySso(request);</span><br><span class="line">            if(!StringUtils.isEmpty(token))&#123;</span><br><span class="line">                //context.addZuulRequestHeader(JwtUtil.HEADER_AUTH, token);</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(&quot;请求白名单地址 : &#123;&#125; &quot;, request.getServletPath());</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        String serverName = request.getServletPath().substring(1, request.getServletPath().indexOf(&#x27;/&#x27;, 1));</span><br><span class="line">        String authUserType = zuulPropConfig.getApiUrlMap().get(serverName);</span><br><span class="line">        log.info(&quot;实例服务名: &#123;&#125;  对应用户类型: &#123;&#125;&quot;, serverName, authUserType);</span><br><span class="line">        if (!StringUtils.isEmpty(authUserType)) &#123;</span><br><span class="line">            //用户是否合法和登录</span><br><span class="line">            authToken(context);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //下线前删除配置的实例名</span><br><span class="line">            log.info(&quot;实例服务: &#123;&#125;  不允许访问&quot;, serverName);</span><br><span class="line">            unauthorized(context, HttpStatusEnum.FORBIDDEN.code(), &quot;请求的服务已经作废,不可访问&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line"></span><br><span class="line">        /******************************以下代码可能会复用，勿删，若使用Gateway整个路由项目将不使用 add by - yugenhai 2019-0704********************************************/</span><br><span class="line"></span><br><span class="line">        /*String readUrl = request.getServletPath().substring(1, request.getServletPath().indexOf(&#x27;/&#x27;, 1));</span><br><span class="line">        try &#123;</span><br><span class="line">            if (request.getServletPath().length() &lt;= Constant.PATH_LENGTH || zuulPropConfig.getRoutes().size() == 0) &#123;</span><br><span class="line">                throw new Exception();</span><br><span class="line">            &#125;</span><br><span class="line">            Iterator&lt;Map.Entry&lt;String,String&gt;&gt; zuulMap = zuulPropConfig.getRoutes().entrySet().iterator();</span><br><span class="line">            while(zuulMap.hasNext())&#123;</span><br><span class="line">                Map.Entry&lt;String, String&gt; entry = zuulMap.next();</span><br><span class="line">                String routeValue = entry.getValue();</span><br><span class="line">                if(routeValue.startsWith(Constant.ZUUL_PREFIX))&#123;</span><br><span class="line">                    routeValue = routeValue.substring(1, routeValue.indexOf(&#x27;/&#x27;, 1));</span><br><span class="line">                &#125;</span><br><span class="line">                if(routeValue.contains(readUrl))&#123;</span><br><span class="line">                    log.info(&quot;请求白名单地址 : &#123;&#125;     请求跳过的真实地址  :&#123;&#125; &quot;, routeValue, request.getServletPath());</span><br><span class="line">                    return null;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(&quot;即将请求登录 : &#123;&#125;       实例名 : &#123;&#125; &quot;, request.getServletPath(), readUrl);</span><br><span class="line">            authToken(context);</span><br><span class="line">            return null;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.info(&quot;gateway路由器请求异常 :&#123;&#125;  请求被拒绝 &quot;, e.getMessage());</span><br><span class="line">            assemblyCross(context);</span><br><span class="line">            context.set(&quot;isSuccess&quot;, false);</span><br><span class="line">            context.setSendZuulResponse(false);</span><br><span class="line">            context.setResponseStatusCode(HttpStatusEnum.OK.code());</span><br><span class="line">            context.getResponse().setContentType(&quot;application/json;charset=UTF-8&quot;);</span><br><span class="line">            context.setResponseBody(JsonUtils.toJson(JsonResult.buildErrorResult(HttpStatusEnum.UNAUTHORIZED.code(),&quot;Url Error, Please Check It&quot;)));</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        */</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 检查用户</span><br><span class="line">     *</span><br><span class="line">     * @param context</span><br><span class="line">     * @return</span><br><span class="line">     * @author yugenhai</span><br><span class="line">     * @creation: 2019-06-26 17:50</span><br><span class="line">     */</span><br><span class="line">    private Object authToken(RequestContext context) &#123;</span><br><span class="line">        HttpServletRequest request = context.getRequest();</span><br><span class="line">        HttpServletResponse response = context.getResponse();</span><br><span class="line">        /*boolean isLogin = sessionManager.isLogined(request, response);</span><br><span class="line">        //用户存在</span><br><span class="line">        if (isLogin) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                User user = sessionManager.getUser(request);</span><br><span class="line">                log.info(&quot;用户存在 : &#123;&#125; &quot;, JsonUtils.toJson(user));</span><br><span class="line">               // String token = userAuthUtil.generateToken(user.getNo(), user.getUserName(), user.getRealName());</span><br><span class="line">                log.info(&quot;根据用户生成的Token :&#123;&#125;&quot;, token);</span><br><span class="line">                //转发信息共享</span><br><span class="line">               // context.addZuulRequestHeader(JwtUtil.HEADER_AUTH, token);</span><br><span class="line">                //缓存 后期所有服务都判断</span><br><span class="line">                redisClient.set(user.getNo(), token, 20 * 60L);</span><br><span class="line">                //冗余一份</span><br><span class="line">                userService.syncUser(user);</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                log.error(&quot;调用SSO获取用户信息异常 :&#123;&#125;&quot;, e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //根据该token查询该用户不存在</span><br><span class="line">            unLogin(request, context);</span><br><span class="line">        &#125;*/</span><br><span class="line">        return null;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 未登录不路由</span><br><span class="line">     *</span><br><span class="line">     * @param request</span><br><span class="line">     */</span><br><span class="line">    private void unLogin(HttpServletRequest request, RequestContext context) &#123;</span><br><span class="line">        String requestURL = request.getRequestURL().toString();</span><br><span class="line">        String loginUrl = getSsoUrl(request) + &quot;?returnUrl=&quot; + requestURL;</span><br><span class="line">        //Map map = new HashMap(2);</span><br><span class="line">        //map.put(&quot;redirctUrl&quot;, loginUrl);</span><br><span class="line">        log.info(&quot;检查到该token对应的用户登录状态未登录  跳转到Login页面 : &#123;&#125; &quot;, loginUrl);</span><br><span class="line">        assemblyCross(context);</span><br><span class="line">        context.getResponse().setContentType(&quot;application/json;charset=UTF-8&quot;);</span><br><span class="line">        context.set(&quot;isSuccess&quot;, false);</span><br><span class="line">        context.setSendZuulResponse(false);</span><br><span class="line">        //context.setResponseBody(ResultJson.failure(map, &quot;This User Not Found, Please Check Token&quot;).toString());</span><br><span class="line">        context.setResponseStatusCode(HttpStatusEnum.OK.code());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断是否忽略对请求的校验</span><br><span class="line">     * @param request</span><br><span class="line">     * @param functions</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private boolean isIgnore(HttpServletRequest request, Function&lt;HttpServletRequest, Boolean&gt;... functions) &#123;</span><br><span class="line">        return Arrays.stream(functions).anyMatch(f -&gt; f.apply(request));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断是否存在地址</span><br><span class="line">     * @param request</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private boolean exclude(HttpServletRequest request) &#123;</span><br><span class="line">        String servletPath = request.getServletPath();</span><br><span class="line">        if (!CollectionUtils.isEmpty(zuulPropConfig.getExcludeUrls())) &#123;</span><br><span class="line">            return zuulPropConfig.getPatterns().stream()</span><br><span class="line">                    .map(pattern -&gt; pattern.matcher(servletPath))</span><br><span class="line">                    .anyMatch(Matcher::find);</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 校验请求连接是否合法</span><br><span class="line">     * @param request</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private boolean checkLength(HttpServletRequest request) &#123;</span><br><span class="line">        return request.getServletPath().length() &lt;= Constant.PATH_LENGTH || CollectionUtils.isEmpty(zuulPropConfig.getApiUrlMap());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 会话存在则跨域发送</span><br><span class="line">     * @param request</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private String getCookieBySso(HttpServletRequest request)&#123;</span><br><span class="line">        Cookie cookie = this.getCookieByName(request, &quot;&quot;);</span><br><span class="line">        return cookie != null ? cookie.getValue() : null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 不路由直接返回</span><br><span class="line">     * @param ctx</span><br><span class="line">     * @param code</span><br><span class="line">     * @param msg</span><br><span class="line">     */</span><br><span class="line">    private void unauthorized(RequestContext ctx, int code, String msg) &#123;</span><br><span class="line">        assemblyCross(ctx);</span><br><span class="line">        ctx.getResponse().setContentType(&quot;application/json;charset=UTF-8&quot;);</span><br><span class="line">        ctx.setSendZuulResponse(false);</span><br><span class="line">        ctx.setResponseBody(ResultJson.failure(ResultEnum.UNAUTHORIZED, msg).toString());</span><br><span class="line">        ctx.set(&quot;isSuccess&quot;, false);</span><br><span class="line">        ctx.setResponseStatusCode(HttpStatusEnum.OK.code());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取会话里的token</span><br><span class="line">     * @param request</span><br><span class="line">     * @param name</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private Cookie getCookieByName(HttpServletRequest request, String name) &#123;</span><br><span class="line">        Map&lt;String, Cookie&gt; cookieMap = new HashMap(16);</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        if (!StringUtils.isEmpty(cookies)) &#123;</span><br><span class="line">            Cookie[] c1 = cookies;</span><br><span class="line">            int length = cookies.length;</span><br><span class="line">            for(int i = 0; i &lt; length; ++i) &#123;</span><br><span class="line">                Cookie cookie = c1[i];</span><br><span class="line">                cookieMap.put(cookie.getName(), cookie);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        if (cookieMap.containsKey(name)) &#123;</span><br><span class="line">            Cookie cookie = cookieMap.get(name);</span><br><span class="line">            return cookie;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 重定向前缀拼接</span><br><span class="line">     *</span><br><span class="line">     * @param request</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private String getSsoUrl(HttpServletRequest request) &#123;</span><br><span class="line">        String serverName = request.getServerName();</span><br><span class="line">        if (StringUtils.isEmpty(serverName)) &#123;</span><br><span class="line">            return &quot;https://github.com/yugenhai108&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;https://github.com/yugenhai108&quot;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 拼装跨域处理</span><br><span class="line">     */</span><br><span class="line">    private void assemblyCross(RequestContext ctx) &#123;</span><br><span class="line">        HttpServletResponse response = ctx.getResponse();</span><br><span class="line">        response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">        response.setHeader(&quot;Access-Control-Allow-Headers&quot;, ctx.getRequest().getHeader(&quot;Access-Control-Request-Headers&quot;));</span><br><span class="line">        response.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;*&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 if (isIgnore(request, this::exclude, this::checkLength)) { 里面可以去调鉴权组件，或者用redis去存放token，获取直接用redis负载抗流量，具体可以自己实现。</p>
<p><strong>4：Spring Cloud Gateway的实现</strong></p>
<p>（1）第二代的Gateway则是由Spring Cloud开发，而且用了最新的Spring5.0和响应式Reactor以及最新的Webflux等等，比如原来的阻塞式请求现在变成了异步非阻塞式。</p>
<p> 　那么在pom上就变了，变得和原来的starer-web也不兼容了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.yugh&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;global-auth&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">            &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">            &lt;/exclusions&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- gateway --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- feign --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- redis --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-redis-reactive&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.google.guava&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;guava&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;23.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>（2）修改application-dev.yml 的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8706</span><br><span class="line">#setting</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: gateway-new</span><br><span class="line">  #redis</span><br><span class="line">  redis:</span><br><span class="line">    host: localhost</span><br><span class="line">    port: 6379</span><br><span class="line">    database: 0</span><br><span class="line">    timeout: 5000</span><br><span class="line">  #遇到相同名字，允许覆盖</span><br><span class="line">  main:</span><br><span class="line">    allow-bean-definition-overriding: true</span><br><span class="line">  #gateway</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      #注册中心服务发现</span><br><span class="line">      discovery:</span><br><span class="line">        locator:</span><br><span class="line">          #开启通过服务中心的自动根据 serviceId 创建路由的功能</span><br><span class="line">          enabled: true</span><br><span class="line">      routes:</span><br><span class="line">        #服务1</span><br><span class="line">        - id: CompositeDiscoveryClient_CUSTOMER</span><br><span class="line">          uri: lb://CUSTOMER</span><br><span class="line">          order: 1</span><br><span class="line">          predicates:</span><br><span class="line">            # 跳过自定义是直接带实例名 必须是大写 同样限流拦截失效</span><br><span class="line">            - Path= /api/customer/**</span><br><span class="line">          filters:</span><br><span class="line">            - StripPrefix=2</span><br><span class="line">            - AddResponseHeader=X-Response-Default-Foo, Default-Bar</span><br><span class="line">            - name: RequestRateLimiter</span><br><span class="line">              args:</span><br><span class="line">                key-resolver: &quot;#&#123;@gatewayKeyResolver&#125;&quot;</span><br><span class="line">                #限额配置</span><br><span class="line">                redis-rate-limiter.replenishRate: 1</span><br><span class="line">                redis-rate-limiter.burstCapacity: 1</span><br><span class="line">        #用户微服务</span><br><span class="line">        - id: CompositeDiscoveryClient_PRODUCT</span><br><span class="line">          uri: lb://PRODUCT</span><br><span class="line">          order: 0</span><br><span class="line">          predicates:</span><br><span class="line">            - Path= /api/product/**</span><br><span class="line">          filters:</span><br><span class="line">            - StripPrefix=2</span><br><span class="line">            - AddResponseHeader=X-Response-Default-Foo, Default-Bar</span><br><span class="line">            - name: RequestRateLimiter</span><br><span class="line">              args:</span><br><span class="line">                key-resolver: &quot;#&#123;@gatewayKeyResolver&#125;&quot;</span><br><span class="line">                #限额配置</span><br><span class="line">                redis-rate-limiter.replenishRate: 1</span><br><span class="line">                redis-rate-limiter.burstCapacity: 1</span><br><span class="line">          #请求路径选择自定义会进入限流器</span><br><span class="line">          default-filters:</span><br><span class="line">            - AddResponseHeader=X-Response-Default-Foo, Default-Bar</span><br><span class="line">            - name: gatewayKeyResolver</span><br><span class="line">              args:</span><br><span class="line">                key-resolver: &quot;#&#123;@gatewayKeyResolver&#125;&quot;</span><br><span class="line">              #断路异常跳转</span><br><span class="line">            - name: Hystrix</span><br><span class="line">              args:</span><br><span class="line">                #网关异常或超时跳转到处理类</span><br><span class="line">                name: fallbackcmd</span><br><span class="line">                fallbackUri: forward:/fallbackController</span><br><span class="line"></span><br><span class="line">#safe path</span><br><span class="line">auth-skip:</span><br><span class="line">  instance-servers:</span><br><span class="line">    - CUSTOMER</span><br><span class="line">    - PRODUCT</span><br><span class="line">  api-urls:</span><br><span class="line">    #PRODUCT</span><br><span class="line">    - /pro</span><br><span class="line">    #CUSTOMER</span><br><span class="line">    - /cust</span><br><span class="line"></span><br><span class="line">    #gray-env</span><br><span class="line">    #...</span><br><span class="line"></span><br><span class="line">#log</span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    org.yugh: INFO</span><br><span class="line">    org.springframework.cloud.gateway: INFO</span><br><span class="line">    org.springframework.http.server.reactive: INFO</span><br><span class="line">    org.springframework.web.reactive: INFO</span><br><span class="line">    reactor.ipc.netty: INFO</span><br><span class="line"></span><br><span class="line">#reg</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: true</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8700/eureka/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ribbon:</span><br><span class="line">  eureka:</span><br><span class="line">    enabled: true</span><br><span class="line">  ReadTimeout: 120000</span><br><span class="line">  ConnectTimeout: 30000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#feign</span><br><span class="line">feign:</span><br><span class="line">  hystrix:</span><br><span class="line">    enabled: false</span><br><span class="line"></span><br><span class="line">#hystrix</span><br><span class="line">hystrix:</span><br><span class="line">  command:</span><br><span class="line">    default:</span><br><span class="line">      execution:</span><br><span class="line">        isolation:</span><br><span class="line">          thread:</span><br><span class="line">            timeoutInMilliseconds: 20000</span><br><span class="line"></span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &#x27;*&#x27;</span><br><span class="line">      base-path: /actuator</span><br><span class="line">  endpoint:</span><br><span class="line">    health:</span><br><span class="line">      show-details: ALWAYS</span><br></pre></td></tr></table></figure>
<p>网关限流用的 spring-boot-starter-data-redis-reactive 做令牌桶IP限流。</p>
<p>具体实现在这个类gatewayKeyResolver</p>
<p>（3）令牌桶IP限流，限制当前IP的请求配额</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.yugh.gatewaynew.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.gateway.filter.ratelimit.KeyResolver;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.server.ServerWebExchange;</span><br><span class="line">import reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * //令牌桶IP限流</span><br><span class="line"> *</span><br><span class="line"> * @author 余根海</span><br><span class="line"> * @creation 2019-07-05 15:52</span><br><span class="line"> * @Copyright © 2019 yugenhai. All rights reserved.</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class GatewayKeyResolver implements KeyResolver &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Mono&lt;String&gt; resolve(ServerWebExchange exchange) &#123;</span><br><span class="line">        return Mono.just(exchange.getRequest().getRemoteAddress().getAddress().getHostAddress());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（4）网关的白名单和黑名单配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.yugh.gatewaynew.properties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.InitializingBean;</span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * //白名单和黑名单属性配置</span><br><span class="line"> *</span><br><span class="line"> * @author  余根海</span><br><span class="line"> * @creation  2019-07-05 15:52</span><br><span class="line"> * @Copyright © 2019 yugenhai. All rights reserved.</span><br><span class="line"> */</span><br><span class="line">@Data</span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">@Configuration</span><br><span class="line">@ConfigurationProperties(prefix = &quot;auth-skip&quot;)</span><br><span class="line">public class AuthSkipUrlsProperties implements InitializingBean &#123;</span><br><span class="line"></span><br><span class="line">    private static final String NORMAL = &quot;(\\w|\\d|-)+&quot;;</span><br><span class="line">    private List&lt;Pattern&gt; urlPatterns = new ArrayList(10);</span><br><span class="line">    private List&lt;Pattern&gt; serverPatterns = new ArrayList(10);</span><br><span class="line">    private List&lt;String&gt; instanceServers;</span><br><span class="line">    private List&lt;String&gt; apiUrls;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterPropertiesSet() &#123;</span><br><span class="line">        instanceServers.stream().map(d -&gt; d.replace(&quot;*&quot;, NORMAL)).map(Pattern::compile).forEach(serverPatterns::add);</span><br><span class="line">        apiUrls.stream().map(s -&gt; s.replace(&quot;*&quot;, NORMAL)).map(Pattern::compile).forEach(urlPatterns::add);</span><br><span class="line">        log.info(&quot;============&gt; 配置服务器ID : &#123;&#125; , 白名单Url : &#123;&#125;&quot;, serverPatterns, urlPatterns);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（5）核心网关代码GatewayFilter</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.yugh.gatewaynew.filter;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">import org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line">import org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line">import org.springframework.core.Ordered;</span><br><span class="line">import org.springframework.core.io.buffer.DataBuffer;</span><br><span class="line">import org.springframework.http.HttpStatus;</span><br><span class="line">import org.springframework.http.MediaType;</span><br><span class="line">import org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line">import org.springframework.http.server.reactive.ServerHttpResponse;</span><br><span class="line">import org.springframework.util.CollectionUtils;</span><br><span class="line">import org.springframework.web.server.ServerWebExchange;</span><br><span class="line">import org.yugh.gatewaynew.config.GatewayContext;</span><br><span class="line">import org.yugh.gatewaynew.properties.AuthSkipUrlsProperties;</span><br><span class="line">import org.yugh.globalauth.common.constants.Constant;</span><br><span class="line">import org.yugh.globalauth.common.enums.ResultEnum;</span><br><span class="line">import org.yugh.globalauth.pojo.dto.User;</span><br><span class="line">import org.yugh.globalauth.service.AuthService;</span><br><span class="line">import org.yugh.globalauth.util.ResultJson;</span><br><span class="line">import reactor.core.publisher.Flux;</span><br><span class="line">import reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line">import java.nio.charset.StandardCharsets;</span><br><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.regex.Matcher;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * // 网关服务</span><br><span class="line"> *</span><br><span class="line"> * @author 余根海</span><br><span class="line"> * @creation 2019-07-09 10:52</span><br><span class="line"> * @Copyright © 2019 yugenhai. All rights reserved.</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">public class GatewayFilter implements GlobalFilter, Ordered &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private AuthSkipUrlsProperties authSkipUrlsProperties;</span><br><span class="line">    @Autowired</span><br><span class="line">    @Qualifier(value = &quot;gatewayQueueThreadPool&quot;)</span><br><span class="line">    private ExecutorService buildGatewayQueueThreadPool;</span><br><span class="line">    @Autowired</span><br><span class="line">    private AuthService authService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;</span><br><span class="line">        GatewayContext context = new GatewayContext();</span><br><span class="line">        ServerHttpRequest request = exchange.getRequest();</span><br><span class="line">        ServerHttpResponse response = exchange.getResponse();</span><br><span class="line">        response.getHeaders().setContentType(MediaType.APPLICATION_JSON_UTF8);</span><br><span class="line">        log.info(&quot;当前会话ID : &#123;&#125;&quot;, request.getId());</span><br><span class="line">        //防止网关监控不到限流请求</span><br><span class="line">        if (blackServersCheck(context, exchange)) &#123;</span><br><span class="line">            response.setStatusCode(HttpStatus.FORBIDDEN);</span><br><span class="line">            byte[] failureInfo = ResultJson.failure(ResultEnum.BLACK_SERVER_FOUND).toString().getBytes(StandardCharsets.UTF_8);</span><br><span class="line">            DataBuffer buffer = response.bufferFactory().wrap(failureInfo);</span><br><span class="line">            return response.writeWith(Flux.just(buffer));</span><br><span class="line">        &#125;</span><br><span class="line">        //白名单</span><br><span class="line">        if (whiteListCheck(context, exchange)) &#123;</span><br><span class="line">            authToken(context, request);</span><br><span class="line">            if (!context.isDoNext()) &#123;</span><br><span class="line">                byte[] failureInfo = ResultJson.failure(ResultEnum.LOGIN_ERROR_GATEWAY, context.getRedirectUrl()).toString().getBytes(StandardCharsets.UTF_8);</span><br><span class="line">                DataBuffer buffer = response.bufferFactory().wrap(failureInfo);</span><br><span class="line">                response.setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">                return response.writeWith(Flux.just(buffer));</span><br><span class="line">            &#125;</span><br><span class="line">            ServerHttpRequest mutateReq = exchange.getRequest().mutate().header(Constant.TOKEN, context.getSsoToken()).build();</span><br><span class="line">            ServerWebExchange mutableExchange = exchange.mutate().request(mutateReq).build();</span><br><span class="line">            log.info(&quot;当前会话转发成功 : &#123;&#125;&quot;, request.getId());</span><br><span class="line">            return chain.filter(mutableExchange);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //黑名单</span><br><span class="line">            response.setStatusCode(HttpStatus.FORBIDDEN);</span><br><span class="line">            byte[] failureInfo = ResultJson.failure(ResultEnum.WHITE_NOT_FOUND).toString().getBytes(StandardCharsets.UTF_8);</span><br><span class="line">            DataBuffer buffer = response.bufferFactory().wrap(failureInfo);</span><br><span class="line">            return response.writeWith(Flux.just(buffer));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getOrder() &#123;</span><br><span class="line">        return Integer.MIN_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 检查用户</span><br><span class="line">     *</span><br><span class="line">     * @param context</span><br><span class="line">     * @param request</span><br><span class="line">     * @return</span><br><span class="line">     * @author yugenhai</span><br><span class="line">     */</span><br><span class="line">    private void authToken(GatewayContext context, ServerHttpRequest request) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // boolean isLogin = authService.isLoginByReactive(request);</span><br><span class="line">            boolean isLogin = true;</span><br><span class="line">            if (isLogin) &#123;</span><br><span class="line">                //User userDo = authService.getUserByReactive(request);</span><br><span class="line">                try &#123;</span><br><span class="line">                    // String ssoToken = authCookieUtils.getCookieByNameByReactive(request, Constant.TOKEN);</span><br><span class="line">                    String ssoToken = &quot;123&quot;;</span><br><span class="line">                    context.setSsoToken(ssoToken);</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    log.error(&quot;用户调用失败 : &#123;&#125;&quot;, e.getMessage());</span><br><span class="line">                    context.setDoNext(false);</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                unLogin(context, request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;获取用户信息异常 :&#123;&#125;&quot;, e.getMessage());</span><br><span class="line">            context.setDoNext(false);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 网关同步用户</span><br><span class="line">     *</span><br><span class="line">     * @param userDto</span><br><span class="line">     */</span><br><span class="line">    public void synUser(User userDto) &#123;</span><br><span class="line">        buildGatewayQueueThreadPool.execute(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                log.info(&quot;用户同步成功 : &#123;&#125;&quot;, &quot;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 视为不能登录</span><br><span class="line">     *</span><br><span class="line">     * @param context</span><br><span class="line">     * @param request</span><br><span class="line">     */</span><br><span class="line">    private void unLogin(GatewayContext context, ServerHttpRequest request) &#123;</span><br><span class="line">        String loginUrl = getSsoUrl(request) + &quot;?returnUrl=&quot; + request.getURI();</span><br><span class="line">        context.setRedirectUrl(loginUrl);</span><br><span class="line">        context.setDoNext(false);</span><br><span class="line">        log.info(&quot;检查到该token对应的用户登录状态未登录  跳转到Login页面 : &#123;&#125; &quot;, loginUrl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 白名单</span><br><span class="line">     *</span><br><span class="line">     * @param context</span><br><span class="line">     * @param exchange</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private boolean whiteListCheck(GatewayContext context, ServerWebExchange exchange) &#123;</span><br><span class="line">        String url = exchange.getRequest().getURI().getPath();</span><br><span class="line">        boolean white = authSkipUrlsProperties.getUrlPatterns().stream()</span><br><span class="line">                .map(pattern -&gt; pattern.matcher(url))</span><br><span class="line">                .anyMatch(Matcher::find);</span><br><span class="line">        if (white) &#123;</span><br><span class="line">            context.setPath(url);</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 黑名单</span><br><span class="line">     *</span><br><span class="line">     * @param context</span><br><span class="line">     * @param exchange</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private boolean blackServersCheck(GatewayContext context, ServerWebExchange exchange) &#123;</span><br><span class="line">        String instanceId = exchange.getRequest().getURI().getPath().substring(1, exchange.getRequest().getURI().getPath().indexOf(&#x27;/&#x27;, 1));</span><br><span class="line">        if (!CollectionUtils.isEmpty(authSkipUrlsProperties.getInstanceServers())) &#123;</span><br><span class="line">            boolean black = authSkipUrlsProperties.getServerPatterns().stream()</span><br><span class="line">                    .map(pattern -&gt; pattern.matcher(instanceId))</span><br><span class="line">                    .anyMatch(Matcher::find);</span><br><span class="line">            if (black) &#123;</span><br><span class="line">                context.setBlack(true);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param request</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private String getSsoUrl(ServerHttpRequest request) &#123;</span><br><span class="line">        return request.getPath().value();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 private void authToken(GatewayContext context, ServerHttpRequest request) { 这个方法里可以自定义做验证。</p>
<p><strong>结束语：</strong></p>
<p>我实现了一遍两种网关，发现还是官网的文档最靠谱，也是能落地到项目中的。如果你需要源码的请到 <a href="https://github.com/yugenhai108/framework-applications">我的Github</a> 去clone，如果帮助到了你，还请点个 star。</p>
<p>原文地址：<a href="https://www.cnblogs.com/KuJo/p/11306361.html">https://www.cnblogs.com/KuJo/p/11306361.html</a></p>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,Spring Cloud,zuul,gateway</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习经典算法之-----最小二乘法</title>
    <url>/post/46e20187.html</url>
    <content><![CDATA[<p>最小二乘法</p>
<p>  我们以最简单的一元线性模型来解释最小二乘法。什么是一元线性模型呢？ 监督学习中，如果预测的变量是离散的，我们称其为分类（如决策树，支持向量机等），如果预测的变量是连续的，我们称其为回归。回归分析中，如果只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。对于二维空间线性是一条直线；对于三维空间线性是一个平面，对于多维空间线性是一个超平面…</p>
<p>  对于一元线性回归模型, 假设从总体中获取了n组观察值（X1，Y1），（X2，Y2）， …，（Xn，Yn）。对于平面中的这n个点，可以使用无数条曲线来拟合。要求样本回归函数尽可能好地拟合这组值。综合起来看，这条直线处于样本数据的中心位置最合理。 选择最佳拟合曲线的标准可以确定为：使总的拟合误差（即总残差）达到最小。有以下三个标准可以选择：</p>
<p>​    （1）用“残差和最小”确定直线位置是一个途径。但很快发现计算“残差和”存在相互抵消的问题。<br>​    （2）用“残差绝对值和最小”确定直线位置也是一个途径。但绝对值的计算比较麻烦。<br>​    （3）最小二乘法的原则是以“残差平方和最小”确定直线位置。用最小二乘法除了计算比较方便外，得到的估计量还具有优良特性。这种方法对异常值非常敏感。</p>
<p>　 最常用的是普通最小二乘法（ Ordinary  Least Square，OLS）：所选择的回归模型应该使所有观察值的残差平方和达到最小。（Q为残差平方和）- 即采用平方损失函数。</p>
<p> 样本回归模型：</p>
<p>​         <img src="/../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E4%B9%8B-----%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95/1354428434_7303.jpg" alt="img">          其中ei为样本（Xi, Yi）的误差</p>
<p>  平方损失函数：</p>
<p>​           <img src="/../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E4%B9%8B-----%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95/1354428515_1582.jpg" alt="img"></p>
<p>  则通过Q最小确定这条直线，即确定<img src="/../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E4%B9%8B-----%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95/1354428590_9906.jpg" alt="img">，以<img src="/../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E4%B9%8B-----%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95/1354428601_4150.jpg" alt="img">为变量，把它们看作是Q的函数，就变成了一个求极值的问题，可以通过求导数得到。求Q对两个待估参数的偏导数：</p>
<p>​          <img src="/../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E4%B9%8B-----%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95/1354428700_9699.jpg" alt="img">  </p>
<p>  根据数学知识我们知道，函数的极值点为偏导为0的点。</p>
<p>  解得：</p>
<p>​          <img src="/../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E4%B9%8B-----%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95/1354428824_3244.jpg" alt="img"></p>
<p>这就是最小二乘法的解法，就是求得平方损失函数的极值点。</p>
<p>下面通过一个例子来说明最小二乘法：</p>
<p><img src="/../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E4%B9%8B-----%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95/20160926100546115" alt="img"></p>
<p><img src="/../images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E4%B9%8B-----%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95/20160926100605037" alt="img"></p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>-大数据 -机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>极大似然估计（MLE）</title>
    <url>/post/107224d5.html</url>
    <content><![CDATA[<p>我们已经了解了似然函数是什么，但怎么去把里面的θ给求出来是个更加关键的问题。这篇我们将来探讨下这个问题。</p>
<p>还是先举一个例子，假设有一个造币厂生产某种硬币，现在我们拿到了一枚这种硬币，想试试这硬币是不是均匀的。即想知道抛这枚硬币，正反面出现的概率（记为θ）各是多少？</p>
<p>这是一个统计问题，回想一下，解决统计问题需要什么？ 数据！</p>
<p>于是我们拿这枚硬币抛了10次，得到的数据x_0x0是：反正正正正反正正正反。我们想求的正面概率θ是模型参数，而抛硬币模型是二项分布(除非硬币立起来，那么这个时候要马上去买彩票，还搞什么算法)。</p>
<p>那么，出现实验结果x0（即反正正正正反正正正反）的似然函数是多少呢？我们是这样列式的：<br>$$<br>f \left( x _ { 0 } , \theta \right) = ( 1 - \theta ) \times \theta \times \theta \times \theta \times \theta \times ( 1 - \theta ) \times \theta \times \theta \times \theta \times ( 1 - \theta ) = \theta ^ { 7 } ( 1 - \theta ) ^ { 3 } = f ( \theta )<br>$$<br>求出来函数的最大值是θ=0.7时取得的。这样，我们已经完成了对θ的极大似然估计。即抛10次硬币，发现7次硬币正面向上，最大似然估计认为正面向上的概率是0.7。</p>
<p>看完上面的公式相信很多人跟我一样是一脸懵逼的。懵逼的点就在于这他妈公式是哪里来的？为什么这样列式然后求其最大值时θ的取值就是极大似然估计的值，也就是根据给出样本的情况模型参数最有可能的取值？Why?</p>
<p>这里需要另外一个例子来告诉我们：</p>
<p>假设有一批产品，根据以往的经验知道它的次品率可能是0.1或0.3。生产这批产品的厂家认为该批产品很好，次品率大约为0.1，而收购产品的商业部门表示产品质量有问题，次品率可能为0.3。现在从这批产品中随机抽取15件，发现其中有5件是次品。问：生产厂家与收购部分谁的估计更加可靠？</p>
<p>解：记次品数为X，则<br>$$<br>X \sim B ( n , p )<br>$$<br>(这式子的意思是X服从二项分布)</p>
<p>若次品率<br>$$<br>p _ { 1 } = 0.1，<br>$$<br>则15件产品中有5件是次品的概率为：<br>$$<br>P ( X = 5 ) = C _ { 15 } ^ { 5 } 0.1 ^ { 5 } 0.9 ^ { 10 } = 0.0105<br>$$<br>若次品率<br>$$<br>p _ { 2 } = 0.3，<br>$$<br>则15件产品中有5件是次品的概率为：<br>$$<br>P ( X = 5 ) = C _ { 15 } ^ { 5 } 0.3 ^ { 5 } 0.7 ^ { 10 } = 0.2061<br>$$<br>后面的概率显然高于前面的，因此用0.3作为次品率的估计值更为可靠一些。</p>
<p>OK，解题结束，到这里相信你已经恍然大悟了。为什么极大似然估计公式是连乘。那不就是上面两道公式<br>$$<br>C _ { 15 } ^ { 5 }的右边部分吗？仔细看来，对比上下两道公式，可以发现C _ { 15 } ^ { 5 }这个部分是一样的，不同的就是C _ { 15 } ^ { 5 }的右边部分。<br>$$<br>而我们要让评估更正确，其实是要求让<br>$$<br>P ( X = 5 )这道公式取最大值的pp的值。又因为C _ { 15 } ^ { 5 }<br>$$<br>这部分写不写都不影响求解结果，它相当于一个常数，因此忽略掉那部分后，就得到了极大似然估计公式。</p>
<p>我们用更加严谨的公式把似然函数和极大似然估计都用数学表达出来如下（其中argmaxθ表示当右边函数取得最大值时θ的取值）：<br>似然函数：<br>$$<br>l ( \theta ) = P ( x | \theta ) = p \left( x _ { 1 } , x _ { 2 } , \cdots , x _ { N } | \theta \right) = \prod _ { i = 1 } ^ { N } p \left( x _ { i } | \theta \right)<br>$$</p>
<p>极大似然估计：<br>$$<br>\hat { \theta } = \arg \max _ { \theta } l ( \theta ) = \arg \max _ { \theta } \prod _ { i = 1 } ^ { N } p \left( x _ { i } | \theta \right)<br>$$</p>
<p>当然这个公式看起来虽好，但有个问题，算起来比较要命，因为是连乘啊！这求个导能把人求哭。怎么办？两边取对数（因为lnx是随着x增大而单调增大的，也就是说当lnx取得最大值的时候x也取得最大值），这个时候极大似然估计变成这样：<br>$$<br>\hat { \theta } = \arg \max _ { \theta } H ( \theta ) = \arg \max _ { \theta } \ln l ( \theta ) = \arg \max _ { \theta } \sum _ { i = 1 } ^ { N } \ln p \left( x _ { i } | \theta \right)<br>$$<br>连乘变成累加，世界瞬间清净了！</p>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>-人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建SpringCloud项目，并实现自动化部署</title>
    <url>/post/4cb6bc33.html</url>
    <content><![CDATA[<p>前一阵子一直在忙着做项目，最近有空，把项目中用到的SpringBoot微服务相关架构再梳理一遍。</p>
<p>项目资源：<a href="https://github.com/sunroyi/SpringCloud">https://github.com/sunroyi/SpringCloud</a></p>
<p>主要分为以下几步：</p>
<p>（1）搭建SpringBootService，这里是各个微服务的业务逻辑。（这里搭建了2个Service，用来测试熔断）</p>
<p>（2）搭建SpringBootEureka，用来发现服务。</p>
<p>（3）搭建SpringBootConfig，用于动态维护配置文件。</p>
<p>（4）搭建SpringBootConsumer，这个不是必须的，只有当一个更大的业务需要调用其他多个微服务Service时才需要搭建。</p>
<p>​     可以通过Ribbon+RestTemplate，Feign两种方式进行微服务之间的调用。可以加入Hystrix进行熔断处理。</p>
<p>（5）搭建SpringBootZuul，用于路由控制。可以加入Hystrix用于熔断处理。</p>
<p>（6）使用Jenkins进行代码的自动化部署。</p>
<p>-—————————————————————————————————————–</p>
<p>在项目搭建之前，需要先了解Spring Cloud中Hystrix、Ribbon以及Feign它们三者之间在处理微服务调用超时从而触发熔断降级的关系。这里我借用一下别人的描述：<a href="https://www.jianshu.com/p/31dfb595170c">https://www.jianshu.com/p/31dfb595170c</a></p>
<p><strong>Ribbon：</strong></p>
<p>它的作用是负载均衡，会帮你在每次请求时选择一台机器，均匀的把请求分发到各个机器上Ribbon的负载均衡默认使用的最经典的Round Robin轮询算法。这是啥？简单来说，就是如果订单服务对库存服务发起10次请求，那就先让你请求第1台机器、然后是第2台机器、第3台机器、第4台机器、第5台机器，接着再来—个循环，第1台机器、第2台机器。。。以此类推。</p>
<p><strong>Feign：</strong></p>
<p>Feign客户端是一个web声明式http远程调用工具，提供了接口和注解方式进行调用（用来调用其他服务）</p>
<p>Feign的一个关键机制就是使用了动态代理。</p>
<p>\1. 首先，如果你对某个接口定义了@FeignClient注解，Feign就会针对这个接口创建一个动态代理</p>
<p>\2. 接着你要是调用那个接口，本质就是会调用 Feign创建的动态代理，这是核心中的核心</p>
<p>\3. Feign的动态代理会根据你在接口上的@RequestMapping等注解，来动态构造出你要请求的服务的地址</p>
<p>\4. 最后针对这个地址，发起请求、解析响应</p>
<p><strong>Hystrix：</strong></p>
<p>在微服务架构里，一个系统会有很多的服务。以本文的业务场景为例：订单服务在一个业务流程里需要调用三个服务。现在假设订单服务自己最多只有100个线程可以处理请求，然后呢，积分服务不幸的挂了，每次订单服务调用积分服务的时候，都会卡住几秒钟，然后抛出—个超时异常。</p>
<p>咱们一起来分析一下，这样会导致什么问题？</p>
<p>\1. 如果系统处于高并发的场景下，大量请求涌过来的时候，订单服务的100个线程都会卡在请求积分服务这块。导致订单服务没有一个线程可以处理请求</p>
<p>\2. 然后就会导致别人请求订单服务的时候，发现订单服务也挂了，不响应任何请求了</p>
<p>上面这个，就是微服务架构中恐怖的服务雪崩问题</p>
<p>这么多服务互相调用，要是不做任何保护的话，某一个服务挂了，就会引起连锁反应，导致别的服务也挂。比如积分服务挂了，会导致订单服务的线程全部卡在请求积分服务这里，没有一个线程可以工作，瞬间导致订单服务也挂了，别人请求订单服务全部会卡住，无法响应。</p>
<p>Hystrix是隔离、熔断以及降级的一个框架。啥意思呢？说白了，Hystrix会搞很多个小小的线程池，比如订单服务请求库存服务是一个线程池，请求仓储服务是一个线程池，请求积分服务是一个线程池。每个线程池里的线程就仅仅用于请求那个服务。</p>
<p>打个比方：现在很不幸，积分服务挂了，会咋样？</p>
<p>当然会导致订单服务里的那个用来调用积分服务的线程都卡死不能工作了啊！但是由于订单服务调用库存服务、仓储服务的这两个线程池都是正常工作的，所以这两个服务不会受到任何影响。</p>
<p>这个时候如果别人请求订单服务，订单服务还是可以正常调用库存服务扣减库存，调用仓储服务通知发货。只不过调用积分服务的时候，每次都会报错。但是如果积分服务都挂了，每次调用都要去卡住几秒钟干啥呢？有意义吗？当然没有！所以我们直接对积分服务熔断不就得了，比如在5分钟内请求积分服务直接就返回了，不要去走网络请求卡住几秒钟，这个过程，就是所谓的熔断！那人家又说，兄弟，积分服务挂了你就熔断，好歹你干点儿什么啊！别啥都不干就直接返回啊？没问题，咱们就来个降级：每次调用积分服务，你就在数据库里记录一条消息，说给某某用户增加了多少积分，因为积分服务挂了，导致没增加成功！这样等积分服务恢复了，你可以根据这些记录手工加一下积分。这个过程，就是所谓的降级。</p>
<p>-—————————————————————————————————————–</p>
<p>我们知道在Spring Cloud微服务体系下，微服务之间的互相调用可以通过Feign进行声明式调用，在这个服务调用过程中Feign会通过Ribbon从服务注册中心获取目标微服务的服务器地址列表，之后在网络请求的过程中Ribbon就会将请求以负载均衡的方式打到微服务的不同实例上，从而实现Spring Cloud微服务架构中最为关键的功能即服务发现及客户端负载均衡调用。</p>
<p>另一方面微服务在互相调用的过程中，为了防止某个微服务的故障消耗掉整个系统所有微服务的连接资源，所以在实施微服务调用的过程中我们会要求在调用方实施针对被调用微服务的熔断逻辑。而要实现这个逻辑场景在Spring Cloud微服务框架下我们是通过Hystrix这个框架来实现的。</p>
<p>调用方会针对被调用微服务设置调用超时时间，一旦超时就会进入熔断逻辑，而这个故障指标信息也会返回给Hystrix组件，Hystrix组件会根据熔断情况判断被调微服务的故障情况从而打开熔断器，之后所有针对该微服务的请求就会直接进入熔断逻辑，直到被调微服务故障恢复，Hystrix断路器关闭为止。</p>
<p>-—————————————————————————————————————–</p>
<p><strong>一. SpringBootService的搭建</strong></p>
<p><strong>1. 创建SpringBoot项目</strong></p>
<p>1.1. New Project -&gt; Maven -&gt; Next</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190709135455549.png" alt="img"></p>
<p>1.2. 输入GroupId，ArtifactId -&gt; Next -&gt; Finish</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190710111216201.png" alt="img"></p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190710111226924.png" alt="img"></p>
<p><strong>2. SpringBoot项目的相关配置</strong></p>
<p>2.1. 在pom.xml中加入SpringBoot相关的Jar包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.sun&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;springbootService&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;version&gt;1.5.8.RELEASE&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;spring-cloud.version&gt;Edgware.SR2&lt;/spring-cloud.version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;!-- 添加这个依赖之后就可以创建一个web应用程序。starter poms部分可以引入所有需要在实际项目中使用的依赖。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            spring-boot-starter-web依赖包含所有的spring-core, spring-web, spring-webmvc，嵌入的Tomcat server和其他web应用相关的库。 --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;version&gt;3.4&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;version&gt;1.2.7&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;com.fasterxml.jackson.module&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;jackson-module-jaxb-annotations&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;version&gt;1.4.0.RELEASE&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!--Spring Cloud Config 客户端依赖--&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;version&gt;1.4.0.RELEASE&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!--Spring Boot Actuator，感应服务端变化--&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>


<p>2.2. 在resources中添加application.properties，这个文件用来进行 项目的相关配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.application.name=springbootService</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server.port=6001</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<p><strong>3. 项目结构和代码</strong></p>
<p>3.1. 项目目录结构</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190710111305815.png" alt="img"></p>
<p>其中，common目录下是一些共通代码，我这里直接拿过来用了。</p>
<p>sun下面的controller提供对外接口，entity定义实体类。</p>
<p>ComsumerClientApplication在sun目录下，是SpringBoot项目的启动文件。</p>
<p>3.2. 相关Java代码</p>
<p>（1）ComsumerClientApplication.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package sun;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.boot.web.servlet.ServletComponentScan;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@ServletComponentScan</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@RefreshScope   //开启配置更新功能</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class ConsumerClientApplication &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        SpringApplication.run(ConsumerClientApplication.class, args);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）ServiceController.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * Copyright &amp;copy; 2012-2014 &lt;a href=&quot;https://github.com/thinkgem/jeesite&quot;&gt;JeeSite&lt;/a&gt; All rights reserved.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package sun.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import common.entity.RestfulResult;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import common.utils.CommUtils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import sun.entity.ServiceInfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@RestController // 重要，如果用Controller会404</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@RequestMapping(value = &quot;service&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class ServiceController &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;hello&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void login(HttpServletRequest request, HttpServletResponse response,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                      @RequestBody ServiceInfo serviceInfo) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        RestfulResult restfulResult = new RestfulResult();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            restfulResult.setData(&quot;Service1:Welcome &quot; + serviceInfo.getName() + &quot;!&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        CommUtils.printDataJason(response, restfulResult);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;rest&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public String rest(@RequestBody ServiceInfo serviceInfo)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return &quot;Service1:Welcome &quot; + serviceInfo.getName() + &quot; !&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）ServiceInfo.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package sun.entity;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class ServiceInfo &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        this.name = name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（4）RestfulResult.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package common.entity;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class RestfulResult &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	private String result = &quot;Success&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	private String message;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	private Object data;		// 返回数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	private int cntPage;		// page数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	private long cntData;		// 返回数据总数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	public String getResult() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		return result;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	public void setResult(String result) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		this.result = result;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	public String getMessage() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		return message;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	public void setMessage(String message) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		this.message = message;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	public Object getData() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		return data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	public void setData(Object data) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		this.data = data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	public int getCntPage() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		return cntPage;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	public void setCntPage(int cntPage) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		this.cntPage = cntPage;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	public long getCntData() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		return cntData;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	public void setCntData(long cntData) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		this.cntData = cntData;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（5）CommonUtils.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package common.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class CommUtils &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	// JSON格式化</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	public static String printDataJason(HttpServletResponse response,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">			Object item) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		try &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">			JsonUtils.renderString(response, item);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">			e.printStackTrace();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		return null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	 * 随机生成6位随机验证码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	 *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	 */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	public static String createRandomVcode(int len) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		// 验证码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		String vcode = &quot;&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">			vcode = vcode + (int) (Math.random() * 9);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		return vcode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（6）JsonUtils.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package common.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class JsonUtils &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public JsonUtils() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static String renderString(HttpServletResponse response, Object object) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return renderString(response, JsonMapper.toJsonString(object), &quot;application/json&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static String renderString(HttpServletResponse response, String string, String type) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            response.setContentType(type);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            response.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            response.getWriter().print(string);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            return null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; catch (IOException var4) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            return null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（7）JsonMapper.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package common.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.annotation.JsonInclude.Include;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.core.JsonGenerator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.core.JsonParser.Feature;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.databind.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.databind.module.SimpleModule;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.databind.util.JSONPObject;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.module.jaxb.JaxbAnnotationModule;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.apache.commons.lang3.StringEscapeUtils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.TimeZone;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class JsonMapper extends ObjectMapper &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static Logger logger = LoggerFactory.getLogger(JsonMapper.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static JsonMapper mapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public JsonMapper() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        this(Include.NON_EMPTY);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public JsonMapper(Include include) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (include != null) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            this.setSerializationInclusion(include);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        this.enableSimple();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        this.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        this.getSerializerProvider().setNullValueSerializer(new JsonSerializer&lt;Object&gt;() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                jgen.writeString(&quot;&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        this.registerModule((new SimpleModule()).addSerializer(String.class, new JsonSerializer&lt;String&gt;() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            public void serialize(String value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                jgen.writeString(StringEscapeUtils.unescapeHtml4(value));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        this.setTimeZone(TimeZone.getDefault());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static JsonMapper getInstance() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (mapper == null) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            mapper = (new JsonMapper()).enableSimple();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return mapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static JsonMapper nonDefaultMapper() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (mapper == null) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            mapper = new JsonMapper(Include.NON_DEFAULT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return mapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public String toJson(Object object) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            return this.writeValueAsString(object);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; catch (IOException var3) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            logger.warn(&quot;write to json string error:&quot; + object, var3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            return null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public &lt;T&gt; T fromJson(String jsonString, Class&lt;T&gt; clazz) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (StringUtils.isEmpty(jsonString)) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            return null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; else &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                return this.readValue(jsonString, clazz);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125; catch (IOException var4) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                logger.warn(&quot;parse json string error:&quot; + jsonString, var4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                return null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public &lt;T&gt; T fromJson(String jsonString, JavaType javaType) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (StringUtils.isEmpty(jsonString)) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            return null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; else &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                return this.readValue(jsonString, javaType);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125; catch (IOException var4) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                logger.warn(&quot;parse json string error:&quot; + jsonString, var4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                return null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public JavaType createCollectionType(Class&lt;?&gt; collectionClass, Class... elementClasses) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return this.getTypeFactory().constructParametricType(collectionClass, elementClasses);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public &lt;T&gt; T update(String jsonString, T object) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            return this.readerForUpdating(object).readValue(jsonString);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; catch (JsonProcessingException var4) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            logger.warn(&quot;update json string:&quot; + jsonString + &quot; to object:&quot; + object + &quot; error.&quot;, var4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; catch (IOException var5) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            logger.warn(&quot;update json string:&quot; + jsonString + &quot; to object:&quot; + object + &quot; error.&quot;, var5);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public String toJsonP(String functionName, Object object) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return this.toJson(new JSONPObject(functionName, object));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public JsonMapper enableEnumUseToString() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        this.enable(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        this.enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return this;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public JsonMapper enableJaxbAnnotation() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        JaxbAnnotationModule module = new JaxbAnnotationModule();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        this.registerModule(module);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return this;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public JsonMapper enableSimple() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        this.configure(Feature.ALLOW_SINGLE_QUOTES, true);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        this.configure(Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return this;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public ObjectMapper getMapper() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return this;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static String toJsonString(Object object) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return getInstance().toJson(object);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static Object fromJsonString(String jsonString, Class&lt;?&gt; clazz) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return getInstance().fromJson(jsonString, clazz);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>4. 项目启动和测试</strong></p>
<p>4.1. 运行Debug，启动ConsumerClientApplication.java</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190709143402207.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;C:\Program Files\Java\jdk1.8.0_66\bin\java&quot; -agentlib:jdwp=transport=dt_socket,address=127.0.0.1:54364,suspend=y,server=n -XX:TieredStopAtLevel=1 -noverify -Dspring.output.ansi.enabled=always -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=54362 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=localhost -Dspring.liveBeansView.mbeanDomain -Dspring.application.admin.enabled=true -javaagent:D:\ideaIU-2018.1.win\lib\rt\debugger-agent.jar=file:/C:/Users/Administrator/AppData/Local/Temp/capture607016.props -Dfile.encoding=UTF-8 -classpath &quot;C:\Program Files\Java\jdk1.8.0_66\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_66\jre\lib\deploy.jar;C:\Program Files\Java\jdk1.8.0_66\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_66\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_66\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_66\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_66\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_66\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_66\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_66\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_66\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_66\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_66\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_66\jre\lib\ext\zipfs.jar;C:\Program Files\Java\jdk1.8.0_66\jre\lib\javaws.jar;C:\Program Files\Java\jdk1.8.0_66\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_66\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_66\jre\lib\jfxswt.jar;C:\Program Files\Java\jdk1.8.0_66\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_66\jre\lib\management-agent.jar;C:\Program Files\Java\jdk1.8.0_66\jre\lib\plugin.jar;C:\Program Files\Java\jdk1.8.0_66\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_66\jre\lib\rt.jar;D:\workspace20160509\springbootService\target\classes;C:\Users\Administrator\.m2\repository\org\springframework\boot\spring-boot-starter-web\1.5.8.RELEASE\spring-boot-starter-web-1.5.8.RELEASE.jar;C:\Users\Administrator\.m2\repository\org\springframework\boot\spring-boot-starter\1.5.8.RELEASE\spring-boot-starter-1.5.8.RELEASE.jar;C:\Users\Administrator\.m2\repository\org\springframework\boot\spring-boot\1.5.8.RELEASE\spring-boot-1.5.8.RELEASE.jar;C:\Users\Administrator\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\1.5.8.RELEASE\spring-boot-autoconfigure-1.5.8.RELEASE.jar;C:\Users\Administrator\.m2\repository\org\springframework\boot\spring-boot-starter-logging\1.5.8.RELEASE\spring-boot-starter-logging-1.5.8.RELEASE.jar;C:\Users\Administrator\.m2\repository\ch\qos\logback\logback-classic\1.1.11\logback-classic-1.1.11.jar;C:\Users\Administrator\.m2\repository\ch\qos\logback\logback-core\1.1.11\logback-core-1.1.11.jar;C:\Users\Administrator\.m2\repository\org\slf4j\jcl-over-slf4j\1.7.25\jcl-over-slf4j-1.7.25.jar;C:\Users\Administrator\.m2\repository\org\slf4j\jul-to-slf4j\1.7.25\jul-to-slf4j-1.7.25.jar;C:\Users\Administrator\.m2\repository\org\slf4j\log4j-over-slf4j\1.7.25\log4j-over-slf4j-1.7.25.jar;C:\Users\Administrator\.m2\repository\org\yaml\snakeyaml\1.17\snakeyaml-1.17.jar;C:\Users\Administrator\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\1.5.8.RELEASE\spring-boot-starter-tomcat-1.5.8.RELEASE.jar;C:\Users\Administrator\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\8.5.23\tomcat-embed-core-8.5.23.jar;C:\Users\Administrator\.m2\repository\org\apache\tomcat\tomcat-annotations-api\8.5.23\tomcat-annotations-api-8.5.23.jar;C:\Users\Administrator\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\8.5.23\tomcat-embed-el-8.5.23.jar;C:\Users\Administrator\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\8.5.23\tomcat-embed-websocket-8.5.23.jar;C:\Users\Administrator\.m2\repository\org\hibernate\hibernate-validator\5.3.5.Final\hibernate-validator-5.3.5.Final.jar;C:\Users\Administrator\.m2\repository\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;C:\Users\Administrator\.m2\repository\org\jboss\logging\jboss-logging\3.3.1.Final\jboss-logging-3.3.1.Final.jar;C:\Users\Administrator\.m2\repository\com\fasterxml\classmate\1.3.4\classmate-1.3.4.jar;C:\Users\Administrator\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.8.10\jackson-databind-2.8.10.jar;C:\Users\Administrator\.m2\repository\org\springframework\spring-web\4.3.12.RELEASE\spring-web-4.3.12.RELEASE.jar;C:\Users\Administrator\.m2\repository\org\springframework\spring-aop\4.3.12.RELEASE\spring-aop-4.3.12.RELEASE.jar;C:\Users\Administrator\.m2\repository\org\springframework\spring-beans\4.3.12.RELEASE\spring-beans-4.3.12.RELEASE.jar;C:\Users\Administrator\.m2\repository\org\springframework\spring-context\4.3.12.RELEASE\spring-context-4.3.12.RELEASE.jar;C:\Users\Administrator\.m2\repository\org\springframework\spring-webmvc\4.3.12.RELEASE\spring-webmvc-4.3.12.RELEASE.jar;C:\Users\Administrator\.m2\repository\org\springframework\spring-expression\4.3.12.RELEASE\spring-expression-4.3.12.RELEASE.jar;C:\Users\Administrator\.m2\repository\org\slf4j\slf4j-api\1.7.25\slf4j-api-1.7.25.jar;C:\Users\Administrator\.m2\repository\org\springframework\spring-core\4.3.12.RELEASE\spring-core-4.3.12.RELEASE.jar;C:\Users\Administrator\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar;C:\Users\Administrator\.m2\repository\com\alibaba\fastjson\1.2.7\fastjson-1.2.7.jar;C:\Users\Administrator\.m2\repository\com\fasterxml\jackson\module\jackson-module-jaxb-annotations\2.8.10\jackson-module-jaxb-annotations-2.8.10.jar;C:\Users\Administrator\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.8.10\jackson-core-2.8.10.jar;C:\Users\Administrator\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.8.0\jackson-annotations-2.8.0.jar;D:\ideaIU-2018.1.win\lib\idea_rt.jar&quot; sun.ConsumerClientApplication</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Connected to the target VM, address: &#x27;127.0.0.1:54364&#x27;, transport: &#x27;socket&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> /\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">( ( )\___ | &#x27;_ | &#x27;_| | &#x27;_ \/ _` | \ \ \ \</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> :: Spring Boot ::        (v1.5.8.RELEASE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2019-07-09 14:17:10.710  INFO 923048 --- [           main] sun.ConsumerClientApplication            : Starting ConsumerClientApplication on PC-Sun with PID 923048 (D:\workspace20160509\springbootService\target\classes started by Administrator in D:\workspace20160509\springbootPService)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2019-07-09 14:17:10.763  INFO 923048 --- [           main] sun.ConsumerClientApplication            : No active profile set, falling back to default profiles: default</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2019-07-09 14:17:11.754  INFO 923048 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@5db6b9cd: startup date [Tue Jul 09 14:17:11 CST 2019]; root of context hierarchy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2019-07-09 14:17:22.203  INFO 923048 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 6000 (http)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2019-07-09 14:17:22.285  INFO 923048 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2019-07-09 14:17:22.312  INFO 923048 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/8.5.23</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2019-07-09 14:17:23.143  INFO 923048 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2019-07-09 14:17:23.145  INFO 923048 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 11433 ms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2019-07-09 14:17:24.072  INFO 923048 --- [ost-startStop-1] o.s.b.w.servlet.ServletRegistrationBean  : Mapping servlet: &#x27;dispatcherServlet&#x27; to [/]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2019-07-09 14:17:24.089  INFO 923048 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &#x27;characterEncodingFilter&#x27; to: [/*]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2019-07-09 14:17:24.091  INFO 923048 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &#x27;hiddenHttpMethodFilter&#x27; to: [/*]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2019-07-09 14:17:24.092  INFO 923048 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &#x27;httpPutFormContentFilter&#x27; to: [/*]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2019-07-09 14:17:24.092  INFO 923048 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &#x27;requestContextFilter&#x27; to: [/*]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2019-07-09 14:17:25.239  INFO 923048 --- [           main] s.w.s.m.m.a.RequestMappingHandlerAdapter : Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@5db6b9cd: startup date [Tue Jul 09 14:17:11 CST 2019]; root of context hierarchy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2019-07-09 14:17:25.376  INFO 923048 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;&#123;[/service/hello]&#125;&quot; onto public void sun.controller.ServiceController.login(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,sun.entity.ServiceInfo)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2019-07-09 14:17:25.380  INFO 923048 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;&#123;[/error]&#125;&quot; onto public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2019-07-09 14:17:25.381  INFO 923048 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;&#123;[/error],produces=[text/html]&#125;&quot; onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2019-07-09 14:17:25.440  INFO 923048 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2019-07-09 14:17:25.440  INFO 923048 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2019-07-09 14:17:25.520  INFO 923048 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2019-07-09 14:17:25.896  INFO 923048 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2019-07-09 14:17:26.094  INFO 923048 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 6000 (http)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2019-07-09 14:17:26.100  INFO 923048 --- [           main] sun.ConsumerClientApplication            : Started ConsumerClientApplication in 17.811 seconds (JVM running for 28.604)</span><br></pre></td></tr></table></figure>
<p>4.2. 调用localhost:6001/service/hello来测试</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190709143211119.png" alt="img"></p>
<p><strong>5. 项目打包和执行</strong></p>
<p>5.1. 打包</p>
<p>Maven Projects -&gt; package</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190710111347414.png" alt="img"></p>
<p>执行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ springbootService ---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] Building jar: D:\workspace20160509\springbootService\target\springbootService-1.0-SNAPSHOT.jar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] --- spring-boot-maven-plugin:1.5.8.RELEASE:repackage (default) @ springbootService ---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] Total time: 26.847 s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] Finished at: 2019-07-09T14:36:54+08:00</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] Final Memory: 29M/250M</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<p>找到jar包目录，创建start.bat文件</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190710110945673.png" alt="img"></p>
<p>start.bat内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar springbootService-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>
<p>5.2. 执行start.bat启动</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190710111058167.png" alt="img"></p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/2019070914442888.png" alt="img"></p>
<p><strong>6. 项目复制</strong></p>
<p>为了在下面测试Hystrix熔断，这里复制一份springbootService2项目，区别有两个地方：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">ServiceController：</span><br><span class="line">/**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * Copyright <span class="symbol">&amp;copy;</span> 2012-2014 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/thinkgem/jeesite&quot;</span>&gt;</span>JeeSite<span class="tag">&lt;/<span class="name">a</span>&gt;</span> All rights reserved.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package sun.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import common.entity.RestfulResult;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import common.utils.CommUtils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import sun.entity.ServiceInfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@RestController // 重要，如果用Controller会404</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@RequestMapping(value = &quot;service&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class ServiceController &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;hello&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void login(HttpServletRequest request, HttpServletResponse response,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                      @RequestBody ServiceInfo serviceInfo) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        RestfulResult restfulResult = new RestfulResult();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            restfulResult.setData(&quot;Service2:Welcome &quot; + serviceInfo.getName() + &quot;!&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        CommUtils.printDataJason(response, restfulResult);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;rest&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public String rest(@RequestBody ServiceInfo serviceInfo)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return &quot;Service2:Welcome &quot; + serviceInfo.getName() + &quot; !&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>application.properties：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.application.name=springbootService</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server.port=6006</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">eureka.client.service-url.defaultZone=http://localhost:5000/eureka/</span><br></pre></td></tr></table></figure>
<p><strong>二. 搭建Eureka</strong></p>
<p><strong>1. 创建Maven项目springbootEureka</strong></p>
<p>同springbootService</p>
<p><strong>2. 项目结构和代码</strong></p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190710131204671.png" alt="img"></p>
<p>pom.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.sun&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;springbootEureka&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;version&gt;1.5.12.RELEASE&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;spring-cloud.version&gt;Edgware.RELEASE&lt;/spring-cloud.version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;version&gt;1.3.5.RELEASE&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<p>application.properties</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server.port=5000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">eureka.instance.hostname=localhost</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#是否向服务注册中心注册自己,默认为true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">eureka.client.register-with-eureka=false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#是否检索服务</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">eureka.client.fetch-registry=true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br></pre></td></tr></table></figure>
<p>ConsumerClientApplication.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package sun;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@EnableEurekaServer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class ConsumerClientApplication &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        SpringApplication.run(ConsumerClientApplication.class, args);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>3. 启动Eureka</strong></p>
<p>3.1. 运行Debug，启动ConsumerClientApplication.java</p>
<p>3.2. 打开<a href="http://localhost:5000，表示正常启动">http://localhost:5000，表示正常启动</a></p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190710131552934.png" alt="img"></p>
<p><strong>4. 修改springbootService，使Eureka可以发现此服务</strong></p>
<p>pom.xml中增加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;version&gt;1.4.0.RELEASE&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>application.properties中增加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eureka.client.service-url.defaultZone=http://localhost:5000/eureka/</span><br></pre></td></tr></table></figure>
<p>ConsumerClientApplication.java中增加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@EnableDiscoveryClient</span><br><span class="line">package sun;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.boot.web.servlet.ServletComponentScan;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@ServletComponentScan</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class ConsumerClientApplication &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        SpringApplication.run(ConsumerClientApplication.class, args);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动后，在Eureka中可以看到springbootService已注册</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190710132112972.png" alt="img"></p>
<p><strong>三. 搭建SpringBootConfig配置中心</strong></p>
<p>我这里用的是SVN，在config目录下创建文件springbootService-release.properties。</p>
<p>将springbootService的application.properties的内容复制进去。</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190710151054436.png" alt="img"></p>
<p>为了与原文件区分看效果，我这里将server.port设为6003（原来是6001）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.application.name=springbootService</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server.port=6003</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">eureka.client.service-url.defaultZone=http://localhost:5000/eureka/</span><br></pre></td></tr></table></figure>
<p>配置中心其实就是读取SVN上的文件后，发送给其他服务，让他们读取。</p>
<p><strong>1. 创建Maven项目springbootConfig</strong></p>
<p>同springbootService</p>
<p><strong>2. 项目结构和代码</strong></p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190710150439632.png" alt="img"></p>
<p>pom.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.sun&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;springbootConfig&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;version&gt;1.5.12.RELEASE&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;spring-cloud.version&gt;Edgware.RELEASE&lt;/spring-cloud.version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.tmatesoft.svnkit&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;svnkit&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<p>application.yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  port: 6002</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  application:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    name: springbootConfig</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  profiles:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    active: subversion</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  cloud:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    config:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      server:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        svn:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          uri: https://192.168.3.97/svn/SourceCode/SMPH/Beats/trunk/test/config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          #username: *****</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          #password: *****</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          default-label:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  client:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    service-url:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      defaultZone: http://localhost:5000/eureka/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  instance:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    preferIpAddress: true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    instance-id: $&#123;spring.cloud.client.ipAddress&#125;:$&#123;server.port&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    lease-expiration-duration-in-seconds: 30</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    lease-renewal-interval-in-seconds: 30</span><br></pre></td></tr></table></figure>
<p>ConsumerClientApplication</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package sun;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@EnableConfigServer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class ConsumerClientApplication &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        SpringApplication.run(ConsumerClientApplication.class, args);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>3. 启动Config配置中心</strong></p>
<p>3.1. Eureka中能够看到Config配置中心已注册</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190710151355609.png" alt="img"></p>
<p>3.2. 打开<a href="http://localhost:6002/springbootService/release%EF%BC%8C%E8%83%BD%E5%A4%9F%E7%9C%8B%E5%88%B0%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%85%E5%AE%B9">http://localhost:6002/springbootService/release，能够看到配置文件的内容</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;springbootService&quot;,&quot;profiles&quot;:[&quot;release&quot;],&quot;label&quot;:null,&quot;version&quot;:&quot;523&quot;,&quot;state&quot;:null,&quot;propertySources&quot;:[&#123;&quot;name&quot;:&quot;https://192.168.3.97/svn/SourceCode/SMPH/Beats/trunk/test/config/springbootService-release.properties&quot;,&quot;source&quot;:&#123;&quot;server.port&quot;:&quot;6003&quot;,&quot;eureka.client.service-url.defaultZone&quot;:&quot;http://localhost:5000/eureka/&quot;,&quot;spring.application.name&quot;:&quot;springbootService&quot;&#125;&#125;]&#125;</span><br></pre></td></tr></table></figure>
<p><strong>4. 修改springbootService，使它能从配置中心读取配置文件</strong></p>
<p>4.1. 在resources目录下创建bootstrap.yml，用来配置读取Config配置中心下的哪个文件</p>
<p>这里对应localhost:6002/springbootService-release.properties文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    application:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        name : springbootService</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cloud:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        config:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            uri : http://localhost:6002/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            profile : release</span><br></pre></td></tr></table></figure>
<p>4.2. 修改pom.xml,增加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--Spring Cloud Config 客户端依赖--&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;version&gt;1.4.0.RELEASE&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--Spring Boot Actuator，感应服务端变化--&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>4.3. 在ConsumerClientApplication.java中增加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@RefreshScope   //开启配置更新功能</span><br><span class="line">package sun;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.boot.web.servlet.ServletComponentScan;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@ServletComponentScan</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@RefreshScope   //开启配置更新功能</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class ConsumerClientApplication &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        SpringApplication.run(ConsumerClientApplication.class, args);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.4. 启动springbootService，在Eureka中可以看到，多了个端口是6003的服务。</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190710152008933.png" alt="img"></p>
<p>4.5. 接口可以从6003访问，原来的6001不能用了，说明配置中心的文件覆盖了本地的application.properties</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190710152123756.png" alt="img"></p>
<p><strong>四. 搭建SpringBootConsumerFeign，使用Feign来调用各个微服务</strong></p>
<p><strong>1.直接从springbootService复制一份，命名为springbootConsumerFeign</strong></p>
<p>别忘了把配置里面的名字都改掉</p>
<p><strong>2. 项目结构和代码</strong></p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20191126155511771.png" alt="img"></p>
<p>2.1. 在pom中添加Feign</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;version&gt;1.4.0.RELEASE&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.netflix.hystrix&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;hystrix-javanica&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;version&gt;RELEASE&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>2.2. 修改application.properties</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.application.name=springbootConsumerFeign</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server.port=6004</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">feign.hystrix.enabled=true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">eureka.client.service-url.defaultZone=http://localhost:5000/eureka/</span><br></pre></td></tr></table></figure>
<p>2.3. 在ConsumerClientApplication.java中增加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@EnableFeignClients</span><br><span class="line">package sun;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.boot.web.servlet.ServletComponentScan;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.netflix.feign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@ServletComponentScan</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@EnableFeignClients</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class ConsumerClientApplication &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        SpringApplication.run(ConsumerClientApplication.class, args);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.4. 在sun目录下添加client目录，并新建文件ServiceFeignClient</p>
<p>这里是声明接口，指向springbootService的接口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package sun.client;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import common.entity.RestfulResult;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.netflix.feign.FeignClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import sun.entity.ServiceInfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@FeignClient(value = &quot;springbootService&quot;, fallback=ServiceFallback.class) //这里的value对应调用服务的spring.applicatoin.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public interface ServiceFeignClient &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/service/hello&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    RestfulResult hello(@RequestBody ServiceInfo serviceInfo);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>添加ServiceFallback.java，用于熔断发生时的处理。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package sun.client;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import common.entity.RestfulResult;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import sun.entity.ServiceInfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class ServiceFallback implements ServiceFeignClient&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public RestfulResult hello(ServiceInfo serviceInfo) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        RestfulResult result = new RestfulResult();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        result.setData(&quot;服务调用失败&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.5. 修改ServiceController.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * Copyright &amp;copy; 2012-2014 &lt;a href=&quot;https://github.com/thinkgem/jeesite&quot;&gt;JeeSite&lt;/a&gt; All rights reserved.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package sun.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import common.entity.RestfulResult;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import common.utils.CommUtils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import sun.client.ServiceFeignClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import sun.entity.ServiceInfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class ServiceController &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ServiceFeignClient serviceFeignClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 调用：localhost:6004/consumerService?token=1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/consumerService&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void consumerService(HttpServletRequest request, HttpServletResponse response,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                       @RequestBody ServiceInfo serviceInfo)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        RestfulResult restfulResult =  serviceFeignClient.hello(serviceInfo);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        CommUtils.printDataJason(response, restfulResult);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>3. 启动springbootConsumer并测试接口</strong></p>
<p>3.1. 启动后，在Eureka中发现服务</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190710160958526.png" alt="img"></p>
<p>3.2. 调用SpringBootConsumer的接口<a href="http://localhost:6004/consumerService">http://localhost:6004/consumerService</a></p>
<p>连续调用，会轮询Service1和Service2</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20191126162220510.png" alt="img"></p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20191126162319981.png" alt="img"></p>
<p>关闭Service1，看看Hystrix是否起作用：</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20191126162405611.png" alt="img"></p>
<p><strong>五. 搭建SpringBootConsumerRibbon，使用Ribbon+RestTemplate来调用各个微服务</strong></p>
<p><strong>1.直接从springbootService复制一份，命名为springbootConsumerRibbon</strong></p>
<p>别忘了把配置里面的名字都改掉</p>
<p><strong>2. 项目结构和代码</strong></p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/2019112616281478.png" alt="img"></p>
<p>2.1. 在pom中添加Feign</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;version&gt;1.4.0.RELEASE&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.netflix.hystrix&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;hystrix-javanica&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;version&gt;RELEASE&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;version&gt;1.4.0.RELEASE&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>2.2. 修改application.properties</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.application.name=springbootConsumerRibbon</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server.port=6007</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">eureka.client.service-url.defaultZone=http://localhost:5000/eureka/</span><br></pre></td></tr></table></figure>
<p>2.3. 修改ConsumerClientApplication.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package sun;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.boot.web.servlet.ServletComponentScan;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.netflix.feign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.netflix.hystrix.EnableHystrix;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@ServletComponentScan</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@EnableHystrix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class ConsumerClientApplication &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        SpringApplication.run(ConsumerClientApplication.class, args);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @LoadBalanced</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    RestTemplate restTemplate()&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return new RestTemplate();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.4. 修改ServiceController.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * Copyright &amp;copy; 2012-2014 &lt;a href=&quot;https://github.com/thinkgem/jeesite&quot;&gt;JeeSite&lt;/a&gt; All rights reserved.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package sun.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import sun.entity.ServiceInfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class ServiceController &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    String port;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 调用：localhost:6007/consumerServiceRibbon?token=1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/consumerServiceRibbon&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @HystrixCommand(fallbackMethod=&quot;consumerServiceRibbonFallback&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public String consumerServiceRibbon(@RequestBody ServiceInfo serviceInfo)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String result = this.restTemplate.postForObject(&quot;http://springbootService/service/rest?token=1&quot;, serviceInfo, String.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public String consumerServiceRibbonFallback(@RequestBody ServiceInfo serviceInfo)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return &quot;consumerServiceRibbon异常，端口：&quot; + port + &quot;，Name=&quot; + serviceInfo.getName();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>3. 启动springbootConsumer并测试接口</strong></p>
<p>3.1. 启动后，在Eureka中发现服务</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20191126163209165.png" alt="img"></p>
<p>3.2. 调用SpringBootConsumer的接口 localhost:6007/consumerServiceRibbon?token=1</p>
<p>连续调用，会轮询Service1和Service2</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20191126163440518.png" alt="img"><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20191126163459858.png" alt="img"></p>
<p>关闭Service1，看看Hystrix是否起作用：</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20191126163321522.png" alt="img"></p>
<p><strong>六. 搭建Zuul+Hystrix</strong></p>
<p>Zuul对外提供统一的服务入口，主要是用作网址重定向。</p>
<p>还可以通过Filter实现过滤器。</p>
<p>配合Hystrix实现熔断器，当服务宕机时可以做异常处理。</p>
<p><strong>1. 创建Maven项目springbootZuul</strong></p>
<p>同springbootService</p>
<p><strong>2. 项目结构和代码</strong></p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190711144902410.png" alt="img"></p>
<p>pom.xml</p>
<p>这里我把spring boot改成了2.0版本，spring cloud改成了Finchley.SR2。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.sun&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;springbootZuul&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!--&lt;version&gt;1.5.8.RELEASE&lt;/version&gt;--&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;version&gt;2.0.0.RELEASE&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;spring-cloud.version&gt;Finchley.SR2&lt;/spring-cloud.version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!--&lt;spring-cloud.version&gt;Edgware.SR2&lt;/spring-cloud.version&gt;--&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;version&gt;1.4.0.RELEASE&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- 配置hystrix所需依赖的包 --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<p> application.yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    application:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        name : springbootZuul</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    port : 6005</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    client:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        service-url:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            defaultZone : http://localhost:5000/eureka/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zuul:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    routes:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        sbService :</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            path : /sbService/**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            serviceId : springbootService</span><br></pre></td></tr></table></figure>
<p>ConsumerClientApplication.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package sun;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@EnableZuulProxy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@RefreshScope</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class ConsumerClientApplication &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        SpringApplication.run(ConsumerClientApplication.class, args);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>serviceFilter（过滤器，非必须）</p>
<p>这里判断了请求中是否带token，如果没有，则显示”there is no request token”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package sun.filter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.netflix.zuul.ZuulFilter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.netflix.zuul.context.RequestContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.netflix.zuul.exception.ZuulException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class serviceFilter extends ZuulFilter &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static Logger log=LoggerFactory.getLogger(serviceFilter.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public String filterType() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return &quot;pre&quot;; // 定义filter的类型，有pre、route、post、error四种</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public int filterOrder() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return 0; // 定义filter的顺序，数字越小表示顺序越高，越先执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public boolean shouldFilter() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return true; // 表示是否需要执行该filter，true表示执行，false表示不执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public Object run() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // filter需要执行的具体操作</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String token = request.getParameter(&quot;token&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(token);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if(token==null)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            log.warn(&quot;there is no request token&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            ctx.setSendZuulResponse(false);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            ctx.setResponseStatusCode(401);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                ctx.getResponse().getWriter().write(&quot;there is no request token&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                e.printStackTrace();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            return null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        log.info(&quot;ok&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">ServiceFallbackProvider（熔断器，非必须）</span><br></pre></td></tr></table></figure>
<p>当没有服务时，显示”Sorry, the service is unavailable now.”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package sun.fallbackProvider;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.io.ByteArrayInputStream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.io.InputStream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.netflix.zuul.filters.route.FallbackProvider;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.http.HttpHeaders;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.http.HttpStatus;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.http.MediaType;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.http.client.ClientHttpResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class ServiceFallbackProvider implements FallbackProvider &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 指定熔断器功能应用于哪些路由的服务</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public String getRoute() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // 这里只针对&quot;springbootService&quot;服务进行熔断</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // 如果需要针对所有服务熔断，则return &quot;*&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return &quot;springbootService&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public ClientHttpResponse fallbackResponse(String route, Throwable cause) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;route:&quot;+route);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return new ClientHttpResponse() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            public HttpStatus getStatusCode() throws IOException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                return HttpStatus.OK;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            public int getRawStatusCode() throws IOException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                return 200;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            public String getStatusText() throws IOException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                return &quot;ok&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            public void close() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            // 发生熔断式，返回的信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            public InputStream getBody() throws IOException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                return new ByteArrayInputStream(&quot;Sorry, the service is unavailable now.&quot;.getBytes());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            public HttpHeaders getHeaders() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                HttpHeaders headers = new HttpHeaders();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                headers.setContentType(MediaType.APPLICATION_JSON);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                return headers;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>3. 启动springbootZuul并测试</strong></p>
<p>3.1. 在Eureka上看到springbootZuul服务已启动</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190711145930606.png" alt="img"></p>
<p>3.2. 现在可以通过统一路由访问服务了</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190711151839876.png" alt="img"></p>
<p>3.3. 使用Filter，请求不带token时的效果：</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190711151300142.png" alt="img"></p>
<p>3.4. 使用Filter，请求带token时的效果：</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190711151441855.png" alt="img"></p>
<p>3.5. 使用Hystrix，关闭springbootService服务时的效果：</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/2019071115121559.png" alt="img"></p>
<p><strong>六. 自动化部署Jenkins</strong></p>
<p><strong>1. 将代码上传到Github</strong></p>
<p>SVN也可以，这里我就用Github了。</p>
<p>先去下载Git官网下载Git-2.23.0-64-bit.exe</p>
<p>再去下载TortoiseGit，有了这个就不用老是打命令commit了。</p>
<p>1.1. 图形界面的更新代码</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190912133911598.png" alt="img"></p>
<p>Git的项目初始化就不多说了，这里介绍一下用图形界面的代码更新步骤。</p>
<p>① Git Commit -&gt; “master”</p>
<p>② Push</p>
<p>1.2. 我在将Git从1.X升级到2.X的过程中，遇到了</p>
<h1 id="SourceTree-error-1407742E-SSL-routines-SSL23-GET-SERVER-HELLO-tlsv1-alert-protocol-version"><a href="#SourceTree-error-1407742E-SSL-routines-SSL23-GET-SERVER-HELLO-tlsv1-alert-protocol-version" class="headerlink" title="SourceTree error:1407742E:SSL routines:SSL23_GET_SERVER_HELLO:tlsv1 alert protocol version"></a><a href="https://stackoverflow.com/questions/48944875/sourcetree-error1407742essl-routinesssl23-get-server-hellotlsv1-alert-protoc">SourceTree error:1407742E:SSL routines:SSL23_GET_SERVER_HELLO:tlsv1 alert protocol version</a></h1><p>的问题，将Git版本升级后也解决不了。</p>
<p>后来想起来，是不是在环境变量中配置了Git1.X的路径</p>
<p>果然，在系统里面的Path中找到了Git的配置。</p>
<p>原来Git2.X以后，默认路径放到了C:\Program Files\Git下，和原来1.X的路径不一样了。</p>
<p>所以需要把1.X的路径配置删除，否则还是会优先使用1.X的Git。</p>
<p><strong>2. 搭建Jenkins环境</strong></p>
<p>2.1. 去Jenkins官网下载war包</p>
<p>2.2. 启动Jenkins的war包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar jenkins.war --httpPort=8080</span><br></pre></td></tr></table></figure>
<p>启动后，访问<a href="http://localhost:8080/">http://localhost:8080</a>即可。</p>
<p>使用的时候需要注册，这些就省略不说了。</p>
<p>2.3. Jenkins插件的安装</p>
<p>需要安装Maven，Git等插件，才能和项目关联使用</p>
<p>Manage Jenkins -&gt; Manage Plugins -&gt; Available里面找</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190912135446413.png" alt="img"></p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190912135547490.png" alt="img"></p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190912135910484.png" alt="img"></p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190912135935518.png" alt="img"></p>
<p>2.4. 创建新项目</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190912141959340.png" alt="img"></p>
<p>在Source Code Management里面选择Git，填入自己的仓库地址：</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190912142858586.png" alt="img"></p>
<p>在Build Triggers里面，选择Poll SCM，在Schedule中填入 * * * * *  ：</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190912143047961.png" alt="img"></p>
<p>在Build中，设置pom.xml的路径</p>
<p>一开始可能会报找不到pom.xml的Error，因为Jenkins需要先从Git库中同步项目，等同步完以后，Error就会自动消失。</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190912143147440.png" alt="img"></p>
<p>在Post Steps中，Add post-build stemp -&gt; Execute Windows bath command</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190912143556991.png" alt="img"></p>
<p>添加的windows命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\JenkinsTest\process.bat 6001</span><br><span class="line">D:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">del D:\JenkinsTest\springbootService-1.0-SNAPSHOT.jar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">copy C:\Users\Administrator\.jenkins\workspace\SpringbootService\target\springbootService-1.0-SNAPSHOT.jar D:\JenkinsTest\springbootService-1.0-SNAPSHOT.jar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SET BUILD_ID=donKillMe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start javaw -Dhudson.util.ProcessTree.disable=true -jar D:\JenkinsTest\springbootService-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>
<p>效果如图：</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190912143333957.png" alt="img"></p>
<p>其中，D:\JenkinsTest\process.bat的内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">::demo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@echo off</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">::延迟环境变量扩展</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setlocal enabledelayedexpansion</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for /f &quot;delims=  tokens=1&quot; %%i in (&#x27;netstat -aon ^| findstr %1&#x27;) do (</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set a=%%i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">::判断服务是否已经启动，如果启动则杀掉进程</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if defined a (taskkill /F /pid &quot;!a:~71,7!&quot;) else (echo Service does not exist)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">::等待你按任意键结束</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pause&gt;nul</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">::执行时后面带上端口即可</span><br></pre></td></tr></table></figure>
<p>命令说明：</p>
<p>① 创建D:\JenkinsTest目录</p>
<p>② process.bat 6001 </p>
<p>是为了查找是否有占用6001端口的进程，如果有，则关闭6001端口的进程，因为我这里的Service启用的是6001端口。</p>
<p>③ 删除D:\JenkinsTest目录下的Service的Jar包，并将Jenkins自动打包生成的Jar包拷过来</p>
<p>然后通过Start javaw -jar *.jar命令在后台启动jar包。</p>
<p>④ 由于Jenkins默认在自动Build完成后，会关闭所有子进程，所以用下面这个命令可以避免Service被关闭</p>
<p>SET BUILD_ID=donKillMe</p>
<p>⑤ 据说start javaw -Dhudson.util.ProcessTree.disable=true -jar *.jar也有用，但是我用下来好像子进程还是被关闭了。</p>
<p><strong>3. 测试</strong></p>
<p>现在，当我更新代码到Git上以后，Jenkins就会自动将代码打包成Jar，然后执行我预先写好的命令自动部署启动。</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190912144816227.png" alt="img"></p>
<p>在Console Output中可以看到Jenkins的执行内容：</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/20190912144922754.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Started by user sun wenli</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Running as SYSTEM</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Building in workspace C:\Users\Administrator\.jenkins\workspace\SpringbootService</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">No credentials specified</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &gt; git.exe rev-parse --is-inside-work-tree # timeout=10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Fetching changes from the remote Git repository</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &gt; git.exe config remote.origin.url https://github.com/sunroyi/springbootService.git # timeout=10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Fetching upstream changes from https://github.com/sunroyi/springbootService.git</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &gt; git.exe --version # timeout=10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &gt; git.exe fetch --tags --force --progress https://github.com/sunroyi/springbootService.git +refs/heads/*:refs/remotes/origin/*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &gt; git.exe rev-parse &quot;refs/remotes/origin/master^&#123;commit&#125;&quot; # timeout=10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &gt; git.exe rev-parse &quot;refs/remotes/origin/origin/master^&#123;commit&#125;&quot; # timeout=10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Checking out Revision 7ee3c59e4573b4256e6949ebbaeb99c9d398a841 (refs/remotes/origin/master)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &gt; git.exe config core.sparsecheckout # timeout=10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &gt; git.exe checkout -f 7ee3c59e4573b4256e6949ebbaeb99c9d398a841</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Commit message: &quot;3&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &gt; git.exe rev-list --no-walk 7ee3c59e4573b4256e6949ebbaeb99c9d398a841 # timeout=10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Parsing POMs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Established TCP socket on 58566</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[SpringbootService] $ java -cp C:\Users\Administrator\.jenkins\plugins\maven-plugin\WEB-INF\lib\maven31-agent-1.13.jar;D:\maven\apache-maven-3.1.1\boot\plexus-classworlds-2.5.1.jar;D:\maven\apache-maven-3.1.1/conf/logging jenkins.maven3.agent.Maven31Main D:\maven\apache-maven-3.1.1 C:\Users\Administrator\.jenkins\war\WEB-INF\lib\remoting-3.29.jar C:\Users\Administrator\.jenkins\plugins\maven-plugin\WEB-INF\lib\maven31-interceptor-1.13.jar C:\Users\Administrator\.jenkins\plugins\maven-plugin\WEB-INF\lib\maven3-interceptor-commons-1.13.jar 58566</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;===[JENKINS REMOTING CAPACITY]===&gt;channel started</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Executing Maven:  -B -f C:\Users\Administrator\.jenkins\workspace\SpringbootService\pom.xml clean package</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] Scanning for projects...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO]                                                                         </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] Building springbootService 1.0-SNAPSHOT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] --- maven-clean-plugin:2.6.1:clean (default-clean) @ springbootService ---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] Deleting C:\Users\Administrator\.jenkins\workspace\SpringbootService\target</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ springbootService ---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] Using &#x27;UTF-8&#x27; encoding to copy filtered resources.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] Copying 1 resource</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] Copying 1 resource</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ springbootService ---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] Changes detected - recompiling the module!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] Compiling 7 source files to C:\Users\Administrator\.jenkins\workspace\SpringbootService\target\classes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ springbootService ---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] Using &#x27;UTF-8&#x27; encoding to copy filtered resources.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] skip non existing resourceDirectory C:\Users\Administrator\.jenkins\workspace\SpringbootService\src\test\resources</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ springbootService ---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] No sources to compile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] --- maven-surefire-plugin:2.18.1:test (default-test) @ springbootService ---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] No tests to run.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[JENKINS] Recording test results</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ springbootService ---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] Building jar: C:\Users\Administrator\.jenkins\workspace\SpringbootService\target\springbootService-1.0-SNAPSHOT.jar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] --- spring-boot-maven-plugin:1.5.8.RELEASE:repackage (default) @ springbootService ---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] Total time: 34.060s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] Finished at: Thu Sep 12 11:27:02 CST 2019</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] Final Memory: 37M/403M</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Waiting for Jenkins to finish collecting data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[JENKINS] Archiving C:\Users\Administrator\.jenkins\workspace\SpringbootService\pom.xml to com.sun/springbootService/1.0-SNAPSHOT/springbootService-1.0-SNAPSHOT.pom</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[JENKINS] Archiving C:\Users\Administrator\.jenkins\workspace\SpringbootService\target\springbootService-1.0-SNAPSHOT.jar to com.sun/springbootService/1.0-SNAPSHOT/springbootService-1.0-SNAPSHOT.jar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">channel stopped</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[SpringbootService] $ cmd /c call C:\Users\ADMINI~1\AppData\Local\Temp\jenkins2482229857112663558.bat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Users\Administrator\.jenkins\workspace\SpringbootService&gt;D:\JenkinsTest\process.bat 6001 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">成功: 已终止 PID 为 1299256 的进程。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[SpringbootService] $ cmd /c call C:\Users\ADMINI~1\AppData\Local\Temp\jenkins7623094155436157631.bat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Users\Administrator\.jenkins\workspace\SpringbootService&gt;D:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">D:\workspace20160509\Jenkins&gt;del D:\JenkinsTest\springbootService-1.0-SNAPSHOT.jar </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">D:\workspace20160509\Jenkins&gt;copy C:\Users\Administrator\.jenkins\workspace\SpringbootService\target\springbootService-1.0-SNAPSHOT.jar D:\JenkinsTest\springbootService-1.0-SNAPSHOT.jar </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">已复制         1 个文件。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">D:\workspace20160509\Jenkins&gt;SET BUILD_ID=donKillMe </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">D:\workspace20160509\Jenkins&gt;start javaw -Dhudson.util.ProcessTree.disable=true -jar D:\JenkinsTest\springbootService-1.0-SNAPSHOT.jar </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">D:\workspace20160509\Jenkins&gt;exit 0 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process leaked file descriptors. See https://jenkins.io/redirect/troubleshooting/process-leaked-file-descriptors for more information</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Finished: SUCCESS</span><br></pre></td></tr></table></figure>
<p>结果验证：</p>
<p><img src="/../images/%E6%90%AD%E5%BB%BASpringCloud%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/2019091214502842.png" alt="img"></p>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,spring cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>海淘新手入门必看——2018最新美国亚马逊海淘攻略！含海淘转运攻略海淘教程</title>
    <url>/post/1176dd62.html</url>
    <content><![CDATA[<p>海淘是什么相信大家应该都了解，在蒸蒸日上的海淘大军里，很多人在海淘购物之前担心很多问题，因此在海淘大门前徘徊许久。在没开始海淘钱我一是其中的一分子 。下面和朋友们说说亚马逊的攻略希望可以帮助那些徘徊在海淘门前的你们。</p>
<p>详细介绍一下在美国亚马逊购物的攻略！先给大家说一下，海淘一点都不复杂，这个教程虽然写了很长，但其实真正操作起来就几个步骤，大家不要看到这么长的教程就犹豫了！最关键的是第一次需要注册，填各种信息，所以第一次有点麻烦，有了第一次，以后海淘，就剩下爽了！（一）首先你需要准备一张信用卡,美国亚马逊支持双币信用卡、单币银联卡，都无手续费，直接以实时汇率转换成人民币结算！ (帮主现在用的最多的是浦发信用卡，海淘最高有25%的返现，平时看电影、吃饭也经常会有浦发信用卡的折扣，网上申请也非常方便 ) （二）其次对于英语不太好的亲来说，一个翻译软件是很有必要的，不过现在都有网页版的在线翻译，把要翻译的句子粘贴过去，基本解决问题。然后是换算。美国的重量采取的是磅，一磅等于454克，这样心里就有个谱了，因为运费牵扯到重量的。（三）由于大部分美国网站都不能直运回中国（美国亚马逊部分商品可直邮，直邮攻略请：点击这里 用手机也可以在美亚下单了），所以需要通过转运公司，什么是转运公司呢？就是帮你把东东寄回国的公司。比如你在一个美国网站上购物，在你下单时，把地址栏填写转运公司给你的地址（这个地址是你在转运公司网站上注册时获得的专属地址），然后美网就把东东寄到转运公司了，转运公司收到，就帮你再寄回国内。我现在用的比较多的是爱淘转运：点击这里注册直达关于转运，我用过的还有八达网转运、爱淘转运、铭宣海淘等，这几个个转运公司除了美国线路，还有日本、德国、澳洲等线路，这样在其他国家海淘的话，也比较方便。（一个靠谱的转运公司对我们海淘族相当关键， 建议：如果经常海淘，可以注册2到3家转运，都走一单，这样时效、价格自己就心里有谱了，别人说的再好，不如自己亲自试一下！也是试出来的~~~）</p>
<p>注册完毕，就可以看见你的美国专属地址了。（一般会有有2个地址，一个加州 一个免税州。如果没有看到，也可以联系首页上的客服，让他帮你马上开通）</p>
<p>以上部分，是海淘大部分网站需要做的准备工作，下面开始说说亚马逊。点击注册地址：<a href="http://www.amazon.com/">http://www.amazon.com</a> 在输入你的注册邮箱后，请点击sign in.</p>
<p><img src="https://zhuanlan.zhihu.com/p/data:image/svg+xml;utf8,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='271'%20height='162'%3E%3C/svg%3E" alt="img"></p>
<p>点击sign in 出现以下页面：依次输入你的邮箱地址，接着你设定密码，点击create your Aamzon account</p>
<p><img src="https://zhuanlan.zhihu.com/p/data:image/svg+xml;utf8,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='364'%20height='394'%3E%3C/svg%3E" alt="img"></p>
<p>然后填写你的名字（你的昵称，和收货人无关），再次输入邮箱地址，再次输入一次密码，点击create your Aamzon account出现下面的页面：</p>
<p><img src="https://zhuanlan.zhihu.com/p/data:image/svg+xml;utf8,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='376'%20height='513'%3E%3C/svg%3E" alt="img"></p>
<p>然后出现以下界面：恭喜你！你已经创建成功啦！</p>
<p><img src="/../images/%E6%B5%B7%E6%B7%98%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8%E5%BF%85%E7%9C%8B%E2%80%94%E2%80%942018%E6%9C%80%E6%96%B0%E7%BE%8E%E5%9B%BD%E4%BA%9A%E9%A9%AC%E9%80%8A%E6%B5%B7%E6%B7%98%E6%94%BB%E7%95%A5%EF%BC%81%E5%90%AB%E6%B5%B7%E6%B7%98%E8%BD%AC%E8%BF%90%E6%94%BB%E7%95%A5%E6%B5%B7%E6%B7%98%E6%95%99%E7%A8%8B/v2-6bde93ca6930cb74a590771c1b10d692_r.jpg" alt="img"></p>
<p>哈哈，接下来我们可以购买自己喜欢的东东了。为了进一步验证大家注册是否成功，可以关闭所有的亚马逊页面，点击亚马逊搜索页</p>
<p>如果右上角出现你的名（hello ****)，例如:</p>
<p><img src="https://zhuanlan.zhihu.com/p/data:image/svg+xml;utf8,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='242'%20height='90'%3E%3C/svg%3E" alt="img"></p>
<p>说明注册成功。给大家总结了个亚马逊的导航网站：涵盖了适合海淘的所有商品，大家可以把这个网站保存在收藏夹里，以后想找自己喜欢的商品，直接进入导航找就可以了。比如我们要买大热的Vulli Sophie苏菲小鹿，请在搜索栏输入：Vulli Sophie</p>
<p><img src="/../images/%E6%B5%B7%E6%B7%98%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8%E5%BF%85%E7%9C%8B%E2%80%94%E2%80%942018%E6%9C%80%E6%96%B0%E7%BE%8E%E5%9B%BD%E4%BA%9A%E9%A9%AC%E9%80%8A%E6%B5%B7%E6%B7%98%E6%94%BB%E7%95%A5%EF%BC%81%E5%90%AB%E6%B5%B7%E6%B7%98%E8%BD%AC%E8%BF%90%E6%94%BB%E7%95%A5%E6%B5%B7%E6%B7%98%E6%95%99%E7%A8%8B/v2-b4c418ad403bbd1c131cf1ce5b1e0a10_r.jpg" alt="img"></p>
<p>点击搜索就出现很多款如下：</p>
<p><img src="/../images/%E6%B5%B7%E6%B7%98%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8%E5%BF%85%E7%9C%8B%E2%80%94%E2%80%942018%E6%9C%80%E6%96%B0%E7%BE%8E%E5%9B%BD%E4%BA%9A%E9%A9%AC%E9%80%8A%E6%B5%B7%E6%B7%98%E6%94%BB%E7%95%A5%EF%BC%81%E5%90%AB%E6%B5%B7%E6%B7%98%E8%BD%AC%E8%BF%90%E6%94%BB%E7%95%A5%E6%B5%B7%E6%B7%98%E6%95%99%E7%A8%8B/v2-01c4d88e612aa8cb3b54bb99072035c2_r.jpg" alt="img"></p>
<p>出来的是各种型号的苏菲小鹿，我们选择第一种，一只装的。点击进去:</p>
<p><img src="/../images/%E6%B5%B7%E6%B7%98%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8%E5%BF%85%E7%9C%8B%E2%80%94%E2%80%942018%E6%9C%80%E6%96%B0%E7%BE%8E%E5%9B%BD%E4%BA%9A%E9%A9%AC%E9%80%8A%E6%B5%B7%E6%B7%98%E6%94%BB%E7%95%A5%EF%BC%81%E5%90%AB%E6%B5%B7%E6%B7%98%E8%BD%AC%E8%BF%90%E6%94%BB%E7%95%A5%E6%B5%B7%E6%B7%98%E6%95%99%E7%A8%8B/v2-65d042048466cff467ed9450194b8268_r.jpg" alt="img"></p>
<p>可以看见原价和折后的价格。绿色的”In Stock”表示目前有现货。需要注意的是，Amazon不止自己卖东西，也有类似“店中店”的概念。”Ships from and sold by”后面如果跟的是”Amazon”打头的文字，即表示是Amazon自己销售的产品，如果是 “shipped from and sold by <strong>“ ：”</strong>“不是”amazon”，那就是说这不是amazon自家的，而且可能还需要你另付邮费，请一定要看清楚。选择购买的数量，然后点击ADD TO CART放入购物车，看看购物车里的情况：</p>
<p><img src="/../images/%E6%B5%B7%E6%B7%98%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8%E5%BF%85%E7%9C%8B%E2%80%94%E2%80%942018%E6%9C%80%E6%96%B0%E7%BE%8E%E5%9B%BD%E4%BA%9A%E9%A9%AC%E9%80%8A%E6%B5%B7%E6%B7%98%E6%94%BB%E7%95%A5%EF%BC%81%E5%90%AB%E6%B5%B7%E6%B7%98%E8%BD%AC%E8%BF%90%E6%94%BB%E7%95%A5%E6%B5%B7%E6%B7%98%E6%95%99%E7%A8%8B/v2-ef96523b8f4d8287f4c689b348bb7a74_r.jpg" alt="img"></p>
<p>点击右边的结账：Proceed to Cheakout</p>
<p>接着开始填写转运公司地址，如果还没有注册转运公司的，点击这里 <a href="http://t.cn/R3L4Lsl">http://t.cn/R3L4Lsl</a></p>
<p>依次写好你的专属地址（后面会有填写示例），此处请对照你注册转运公司时给你的地址，一般会有2个地址，至于选哪个地址，请参考下面的说明：</p>
<p>在亚马逊购物，送到CA（加州）地址都是有消费税的（食品饮品类没有消费税，加州税率9%），可以选择or（免税州）免交消费税。</p>
<p><img src="/../images/%E6%B5%B7%E6%B7%98%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8%E5%BF%85%E7%9C%8B%E2%80%94%E2%80%942018%E6%9C%80%E6%96%B0%E7%BE%8E%E5%9B%BD%E4%BA%9A%E9%A9%AC%E9%80%8A%E6%B5%B7%E6%B7%98%E6%94%BB%E7%95%A5%EF%BC%81%E5%90%AB%E6%B5%B7%E6%B7%98%E8%BD%AC%E8%BF%90%E6%94%BB%E7%95%A5%E6%B5%B7%E6%B7%98%E6%95%99%E7%A8%8B/v2-f6e28038bc7bd8a4c9dddd1157260d43_r.jpg" alt="img"></p>
<p>特别注意：最后一项“IS this address also your billing address(the address that appears on your credit card or bank statement)? 是问你上面的地址是否是你的信用卡账单地址.严格来说，这里应该填写”NO”,因为您的账单地址是你办信用卡的时候所填写的账单地址，肯定不可能和转运地址相同。但根据帮主的经验，如果你买的商品价值不大，比如没超过1000美元以上，为了省事，选“yes”也是没问题的。如果你一次性买了大额的商品，为了不被亚马逊冻结你账号，您这里要选择“NO”，然后填写自己在国内的账单地址（不确定自己的账单地址可以打信用卡客服电话，电子账单也会有一个账单地址。然后用英文填写，不会翻译的可以在网上搜索一下地址翻译. 另外中国的邮编是6位，填上去会多出来1位，这个不要紧，删除一位就行了，邮编不影响）。等你下单的商品发货后，您就无需再担心账单地址问题了，发货成功就OK了！</p>
<p>常用地址英语：室/房Room，村（乡）Village，号No.，宿舍Dormitory，楼/层F，住宅区/小区Residential Quarter，甲/乙/丙/丁A/B/C/D，巷/弄Lane，单元Unit，号楼/幢Building，厂Factory，酒楼/酒店Hotel，路Road，花园Garden，街Street，县County，镇Town，市City，区District，信箱Mailbox，省Province</p>
<p>比如转运给我的地址是：</p>
<p><img src="/../images/%E6%B5%B7%E6%B7%98%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8%E5%BF%85%E7%9C%8B%E2%80%94%E2%80%942018%E6%9C%80%E6%96%B0%E7%BE%8E%E5%9B%BD%E4%BA%9A%E9%A9%AC%E9%80%8A%E6%B5%B7%E6%B7%98%E6%94%BB%E7%95%A5%EF%BC%81%E5%90%AB%E6%B5%B7%E6%B7%98%E8%BD%AC%E8%BF%90%E6%94%BB%E7%95%A5%E6%B5%B7%E6%B7%98%E6%95%99%E7%A8%8B/v2-6e3eca351a41e331ce0d27f613316b4b_r.jpg" alt="img"></p>
<p>接着开始选择运输方式。前面带了FREE的，都是免费的。购买亚马逊自营的东西，买满49美元免运费（免美国境内运费）。推荐大家加入一个亚马逊的特有服务——“亚马逊家庭计划”（如何加入，下面会有介绍），这样就可以免费试用1个月的PRIME服务（这个服务可以不用买满49美元也可以免运费，更可以选择免费的2天送达，也就是下图中的第三个选项，因为帮主写教程时已经加入妈妈计划，所以会出现下图第三项的2日免费送达，如果没有加入这个家庭计划，那亚马逊的免费送货时间就会是5到8天），加入家庭计划后，如果你不想交年费，快到一个月的时候取消就行（如何取消，下面会有说明，忘记取消也没关系，下面告诉您方法），同时注意再次确认一下你的订单，货物和地址是否正确。</p>
<p><img src="/../images/%E6%B5%B7%E6%B7%98%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8%E5%BF%85%E7%9C%8B%E2%80%94%E2%80%942018%E6%9C%80%E6%96%B0%E7%BE%8E%E5%9B%BD%E4%BA%9A%E9%A9%AC%E9%80%8A%E6%B5%B7%E6%B7%98%E6%94%BB%E7%95%A5%EF%BC%81%E5%90%AB%E6%B5%B7%E6%B7%98%E8%BD%AC%E8%BF%90%E6%94%BB%E7%95%A5%E6%B5%B7%E6%B7%98%E6%95%99%E7%A8%8B/v2-1ca9aa973acf4b33c261f881c82356f4_r.jpg" alt="img"></p>
<p>下面这步是输入信用卡的号码ADD A NEW CARD，依次输入：你的信用卡持卡人的名字（用拼音，就是你信用卡上的名字）信用卡号码和有效期。然后再次点击继续。</p>
<p><img src="/../images/%E6%B5%B7%E6%B7%98%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8%E5%BF%85%E7%9C%8B%E2%80%94%E2%80%942018%E6%9C%80%E6%96%B0%E7%BE%8E%E5%9B%BD%E4%BA%9A%E9%A9%AC%E9%80%8A%E6%B5%B7%E6%B7%98%E6%94%BB%E7%95%A5%EF%BC%81%E5%90%AB%E6%B5%B7%E6%B7%98%E8%BD%AC%E8%BF%90%E6%94%BB%E7%95%A5%E6%B5%B7%E6%B7%98%E6%95%99%E7%A8%8B/v2-b7950d4f782d2a243a3eda9154a2521a_r.jpg" alt="img"></p>
<p><img src="https://zhuanlan.zhihu.com/p/data:image/svg+xml;utf8,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='403'%20height='328'%3E%3C/svg%3E" alt="img"></p>
<p><img src="https://zhuanlan.zhihu.com/p/data:image/svg+xml;utf8,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='275'%20height='342'%3E%3C/svg%3E" alt="img"></p>
<p>如果你有优惠码，请在gift cards&amp;promotional codes里面输入，然后点击apply。价格会重新显示为优惠后的价格,请仔细检查你的订单，若没有问题的话，请点击PLACE Your Order,你就完成了本次订单!</p>
<p>有时亚马逊会先扣你信用卡1美元，这一美元是预授权，验证你信用卡的真实性，过几天发货后就退回了。亚马逊不是即时扣款的，是”发货后”或者”准备发货”才扣款，如果一单有多件商品，而亚马逊的仓库又不在同一个地方，所以基本都是分开发货，这样就会出现零散扣款，而不是一次扣除整个订单费用的情况。</p>
<p>恭喜，到现在为止，我们的第一单终于成功了！</p>
<p>下面给大家讲海淘的第二大部分：转运。</p>
<p><strong><a href="http://www.haitaobang.cn/glDetail?id=11">转运操作流程及常见问题解决方法</a></strong></p>
<p><strong>如何判断商品究竟是不是Amazon自家的？</strong></p>
<p>目前amazon上的商品主要有三种：</p>
<p>  （1）如果是 “shipped from and sold by amazon.com”,那就是amazon自家。</p>
<p>  （2）如果是 “sold by** and fullfilled by amzon”,那就是说这是amazon上的商家在卖，但是运费政策和amazon履行一致，也就是说比如amazon说满25刀包邮，这个商品虽然不是亚马逊自家的商品，但是也算在内，amazon prime享受的政策和优惠，这件商品和这家店铺都可以提供；</p>
<p> （3）如果是 “shipped from and sold by <strong>“ ：”</strong>“不是”amazon”，那就是说这不是amazon自家的，而且可能还需要你另付邮费，请一定要看清楚。</p>
<p><strong>超级省钱之两大法宝！</strong></p>
<p>  <strong>首先介绍一下，超级省钱，亚马逊独有的**</strong>Subscribe &amp; Save服务。<strong>Amazon在以下4个分类中都有Subscribe &amp; Save服务：化妆美容，食品，健康及办公用品和个人护理。使用Subscribe &amp; Save功能，可以有15个点的折扣，而且免运费。先是选择S&amp;S服务，然后选择定时发货的时间段和购买数量，从1-6个月不等，意思是Amazon每间隔多长时间自动下单，发货。如何取消呢？在本次购买Amazon发货后，点击“</strong>Your Account<strong>”，然后选择“</strong>Orders–&gt;manage subscribe &amp; save items**”，就可以把自动下单取消了。可以8.5折，而且全免运费，只有亚马逊才有哦！</p>
<p><strong>关于Subscribe &amp; Save的几个注意事项</strong></p>
<p><strong>1.只有右上角显示Subscribe &amp; Save的选项，才是可以SS的，不是所有的产品都有的。</strong></p>
<p><strong>2.选择SS的产品，无论多少金额，都是免运费的，运输时间5-7天。</strong></p>
<p><strong>3.一件SS的商品需要下单一次，多个SS商品需要下单多次，而且不能和非SS的商品一起下单，好在现在大部分的转运公司都是免费合箱的，可以把东西发到转运那免费合箱。</strong></p>
<p><strong>关于Subscribe&amp;Save**</strong>更多新政策介绍，可参考**<strong>：</strong></p>
<h1 id="美国亚马逊（S-amp-S）最新政策介绍：Amazon-Subscribe-amp-Save"><a href="#美国亚马逊（S-amp-S）最新政策介绍：Amazon-Subscribe-amp-Save" class="headerlink" title="美国亚马逊（S&amp;S）最新政策介绍：Amazon Subscribe &amp; Save"></a><a href="http://www.haitaobang.cn/glDetail?id=18"><strong>美国亚马逊（S&amp;S）最新政策介绍：Amazon Subscribe &amp; Save</strong></a></h1><p><strong>省钱第2大法宝–<strong>*<strong>\</strong>***************************<a href="https://www.amazon.com/gp/family/signup/welcome/?ref_=assoc_tag_ph_1457104784749&ie=UTF8&*Version*=1&*entries*=0&camp=1789&creative=9325&linkCode=pf4&tag=toplive-20&linkId=LJZYLD2YWF7WL2NH">********************************加入Amazon Family家庭计划********************************</a>****************************\</strong></strong> (之前的亚马逊妈妈计划Amazon Mom）<strong>，享受免费**</strong>Prime会员资格及额外折扣**</p>
<p>Amazon Family的前身是Amazon Mom计划，虽然名称换了，但内容和福利有增无减：（1）*<strong>\</strong>***********加入Amazon Family*************<strong><em>是免费的，而且可以随时取消<strong>。</strong> （2） 加入后的第一个月可免费享受Amazon Prime资格，也就是发货后免费2天送达，<strong>如果在1个月内取消，取消后也可继续享受完1个月的**</strong>Prime会员资格,但不建议加入后马上取消，因为这样有些特殊优惠就没法享受，一般快到1个月的某一天取消就行（如何取消，下面有方法；忘记取消也没关系，即使过了1个月被扣款了也能分分钟要回！下面有介绍）。** （3）Amazon还提供很多优惠給Amazon Family会员，像是尿片、湿巾有额外20%折扣等，或是其他某些婴儿用品有额外的优惠。</em></strong>*<em>\</em>**********************************************************加入Amazon Family****************************************************************只需要填写宝宝的名字和出生年月就可以了，非常的简单.</p>
<p>​                           <strong><em>*</em>***********<a href="https://www.amazon.com/gp/family/signup/welcome/?ref_=assoc_tag_ph_1457104784749&ie=UTF8&*Version*=1&*entries*=0&camp=1789&creative=9325&linkCode=pf4&tag=toplive-20&linkId=LJZYLD2YWF7WL2NH">****************亚马逊Amazon Family计划加入链接****************</a>**************</strong></p>
<p><a href="https://www.amazon.com/gp/family/signup/welcome/?ref_=assoc_tag_ph_1457104784749&ie=UTF8&*Version*=1&*entries*=0&camp=1789&creative=9325&linkCode=pf4&tag=toplive-20&linkId=LJZYLD2YWF7WL2NH"><img src="/../images/%E6%B5%B7%E6%B7%98%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8%E5%BF%85%E7%9C%8B%E2%80%94%E2%80%942018%E6%9C%80%E6%96%B0%E7%BE%8E%E5%9B%BD%E4%BA%9A%E9%A9%AC%E9%80%8A%E6%B5%B7%E6%B7%98%E6%94%BB%E7%95%A5%EF%BC%81%E5%90%AB%E6%B5%B7%E6%B7%98%E8%BD%AC%E8%BF%90%E6%94%BB%E7%95%A5%E6%B5%B7%E6%B7%98%E6%95%99%E7%A8%8B/002nUHNIzy6XLFSBs1x27&690" alt="海淘新手入门必看——2018最新美国亚马逊海淘攻略！含海淘转运攻略海淘教程"></a></p>
<p>   进入后点击<strong>Start Your 30-Day Free Trial of Prime</strong>，页面跳转至信息填写页面。最上面是填写宝宝的一些相关信息（名字、生日、性别），这里可以乱填的，因为不做审核。</p>
<p>   页面下方是输入您的信用卡信息，右侧是账单地址( 帮主实测目前只支持双币信用卡，也就是卡面上有VISA或MasterCard 或者JBC等标志)，，账单地址可以选择已有的地址或者添加一个新地址<strong>（\</strong>原则上应该是信用卡的国内账单地址，但根据帮主的测试和粉丝的反馈，填写转运地址也没问题。）****</p>
<p> 然后选择下方的按钮，提交即可，非常的简单。 </p>
<p>加入后的第一个月可免费享受Amazon Prime资格，但一个月免费期结束后如果不取消family计划，将自动从你的信用卡里扣107.91美元的年费。（<strong>最好是快到30天的时候再取消，因为有些妈妈计划的优惠，必须在没取消之前有效！如果忘记取消也没关系，帮主实测即使过了1个月信用卡被扣了107.91，通过在线联系客服，百分百能要回来！大家放心！</strong>）！ </p>
<p>想在一个月内自己取消的，只要取消Prime会员就可以，这样1个月到期后就不会扣费了！方法：点击<a href="https://www.amazon.com/gp/subs/primeclub/account/homepage.html/?ie=UTF8&tag=toplive-20&linkCode=ur2&camp=1789&creative=390957"><strong>取消Prime链接</strong></a>，登录后，点击Do not continue 按钮,在出现的界面中点击Do not continue 即可！</p>
<p><strong>如果忘记取消试用，被扣了107.91美元(或者是99美元)美金怎么办？</strong>别急，可以申诉拿回我的107.91美金，取消我的Prime资格。 点击：<a href="https://www.amazon.com/gp/help/contact-us/general-questions.html/?ie=UTF8&camp=1789&creative=390957&linkCode=ur2&nodeId=508510&tag=toplive-20&token=&type="><strong>亚马逊客服页面</strong></a></p>
<p>1） what can we help you with?那一栏选择“Prime or Something else ”<br>2 ）Tell us more about your issue<br>    Select an issue那一栏 选择“Prime Support”<br>    Select issue details 那一栏 选择“Cancel Prime Membership” ,然后点击“More help options”<br>3） How would you like to contact us? 选择 E-mail电子邮件，Phone电话，Chat在线对话。选择电子邮件或者在线对话都可以，就说:<strong>I want cancel my Prime membership,please refund me</strong>（我想取消妈妈计划资格，请退款）即可，一般107.91美元会在3-5天退回信用卡（帮主一般选择Chat，亚马逊客服都是24小时在线，一般分分钟就帮你取消，并退款给您了！）。 </p>
<p><strong>注意：免费试用家庭计划一个月的前提是之前没有加入过Prime服务，不然就没有这1个月的免费试用了。</strong></p>
<p><strong>关于家庭计划的更多详细解读，请参考帮主最新心血总结：\</strong><a href="http://www.haitaobang.cn/glDetail?id=27">**亚马逊家庭计划详细解读**</a>****</p>
<p><strong>省钱第**</strong>3大法宝–<strong><strong>亚马逊</strong></strong>Baby registry婴儿注册表！**用此方法，母婴用品、化妆品、保健品都可以有15%的优惠！</p>
<p><strong><em>\</em>因为篇幅限制，关于如何注册Baby registry及使用，请参考帮主详细教程：<a href="http://blog.sina.com.cn/s/blog_824629260102uwpc.html">**点击这里**</a>**</strong> </p>
<p><strong><em>*</em>*省钱第4大法宝–亚马逊****Wedding Registry注册表！**用此方法，电子产品、厨房用品、箱包等都有10%的优惠，注册一个月后，邮箱会收到一个10%的折扣码，结账时候输入即可。关于详细的步骤，帮主正在撰写，大家可以参考Baby registry婴儿注册表自己先研究。注册链接：<a href="http://www.amazon.com/gp/wedding/homepage/?ref=assoc_tag_ph_1402131587292&ie=UTF8&camp=1789&creative=9325&linkCode=pf4&tag=toplive-20&linkId=MYO5FOQOGMFI525M">**点击这里**</a> （先注册好，然后在你要买的商品页面右侧就会出现：”Add to Wedding Registry” ，点这个按钮就可添加到Wedding 注册表，等一个月后，邮箱收到折扣码就可以购买这些商品了。关于细节大家可先参考：<a href="http://www.amazon.com/b?ie=UTF8?t=toplive-20&node=8021049011&pf_rd_p=1877078722&pf_rd_s=center-5&pf_rd_t=601&pf_rd_i=wedding-homepage&pf_rd_m=ATVPDKIKX0DER&pf_rd_r=09FS17BGQKHRP1KGXQ0H&ref_=acs_ux_hsb_5s_5_m_WR-HP?t=toplive-20">Wedding 注册表折扣使用规则</a>）**</strong>  </p>
<p><strong>亚马逊上的东西浩如烟海，怎样才能一下子直达我们想要找的东东，没关系，帮主为你总结了亚马逊的中文分类导航：<a href="http://www.haitaobang.cn/amazon_nav">*<em>Amazon中文导航*</em></a> ，还列出了亚马逊自营商品的分类，怎么样？幸福吧！哈哈，快快收藏吧，以后此页就是你的海淘首页，再也不用浪费时间大海捞针啦，COME ON！</strong> </p>
<p>  <strong>初次海淘，怎么知道哪些东西是最值得海淘的呢？哪些东西性价比最高评价最好呢？帮主总结了海淘路上大家的使用心得，大家可以做个参考，这里的东西，帮主都是千挑万选，只要你用的着，买回来肯定不会后悔就是了。来看看吧！帮主总结在这里</strong>：</p>
<p><strong><a href="http://www.haitaobang.cn/glDetail?id=5">*<em>最值得海淘的商品推荐——“化妆品”篇*</em></a></strong></p>
<p><strong><a href="http://www.haitaobang.cn/glDetail?id=15">*<em>最值得海淘的商品推荐——“保健品”篇*</em></a></strong></p>
<p><strong><a href="http://www.haitaobang.cn/glDetail?id=19">*<em>最值得海淘的商品推荐——“母婴产品”篇*</em></a></strong></p>
<p><strong>我们怎么才能知道亚马逊哪些东西在特价呢？记得经常来这里看看：</strong></p>
<p><strong><a href="http://www.haitaobang.cn/zhekoulist?mall=%E7%BE%8E%E5%9B%BD%E4%BA%9A%E9%A9%AC%E9%80%8A">亚马逊最新折扣频道</a></strong></p>
<p>可以把这个帖子收藏起来，经常看看优惠信息，避免错过优惠。另外遇到海淘问题或者一些海淘省钱攻略等帮主也做了个索引，方便很多：</p>
<p><a href="http://blog.sina.com.cn/s/blog_824629260102uxqs.html"><strong>帮主所有海淘教程、省钱攻略汇总索引</strong></a></p>
<p>最后感谢您花了时间耐心阅读帮主准备的教程，希望我的教程能够对您有帮助。也欢迎你通过微博或微信联系帮主，给我多提宝贵意见和反馈。另外很多人问帮主是否代购，是否有淘宝店铺？在这里帮主告诉大家，帮主希望大家都学会海淘，自己来，尽量不要找代购，既节约成本又降低被骗的风险。因为帮主精力有限，目前只给大家福利代购一些推车和儿童安全座椅之类的大件，基本上和自己淘的价格是一样的。在淘宝搜索“<a href="http://haitaobang.taobao.com/">海淘帮帮主</a>”即可找到帮主店铺：<a href="http://haitaobang.taobao.com/">haitaobang.taobao.com</a></p>
<p> <strong>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</strong></p>
<p><strong>帮主补充的几点注意事项：</strong></p>
<h1 id="（一）Amazon-Prime-完整试用、取消方法（建议不用开通这个，按上面方法开通Amazon-Family，也就是亚马逊家庭计划即可，开通后包含免费1个月的Prime-，帮主写在这里是因为有些粉丝在提交订单的时候，在选择运输方式的阶段，亚马逊会提示你是否开通Prime的2日送达，很多粉丝没看清楚就直接稀里糊涂加入了！因为加入这个只能享受免费试用1个月的Prime的服务，而加入Amazon-Family除了包含免费试用1个月的Prime，还有一些其他的优惠，详见：-亚马逊家庭计划详细解读-）"><a href="#（一）Amazon-Prime-完整试用、取消方法（建议不用开通这个，按上面方法开通Amazon-Family，也就是亚马逊家庭计划即可，开通后包含免费1个月的Prime-，帮主写在这里是因为有些粉丝在提交订单的时候，在选择运输方式的阶段，亚马逊会提示你是否开通Prime的2日送达，很多粉丝没看清楚就直接稀里糊涂加入了！因为加入这个只能享受免费试用1个月的Prime的服务，而加入Amazon-Family除了包含免费试用1个月的Prime，还有一些其他的优惠，详见：-亚马逊家庭计划详细解读-）" class="headerlink" title="（一）Amazon Prime 完整试用、取消方法（建议不用开通这个，按上面方法开通Amazon Family，也就是亚马逊家庭计划即可，开通后包含免费1个月的Prime ，帮主写在这里是因为有些粉丝在提交订单的时候，在选择运输方式的阶段，亚马逊会提示你是否开通Prime的2日送达，很多粉丝没看清楚就直接稀里糊涂加入了！因为加入这个只能享受免费试用1个月的Prime的服务，而加入Amazon Family除了包含免费试用1个月的Prime，还有一些其他的优惠，详见： 亚马逊家庭计划详细解读 ）"></a>（一）Amazon Prime 完整试用、取消方法（建议不用开通这个，按上面方法开通<a href="https://www.amazon.com/gp/family/signup/welcome/?ref_=assoc_tag_ph_1457104784749&ie=UTF8&*Version*=1&*entries*=0&camp=1789&creative=9325&linkCode=pf4&tag=toplive-20&linkId=LJZYLD2YWF7WL2NH">Amazon Family，也就是亚马逊家庭计划即可</a>，开通后包含免费1个月的Prime ，帮主写在这里是因为有些粉丝在提交订单的时候，在选择运输方式的阶段，亚马逊会提示你是否开通Prime的2日送达，很多粉丝没看清楚就直接稀里糊涂加入了！因为加入这个只能享受免费试用1个月的Prime的服务，而加入<a href="https://www.amazon.com/gp/family/signup/welcome/?ref_=assoc_tag_ph_1457104784749&ie=UTF8&*Version*=1&*entries*=0&camp=1789&creative=9325&linkCode=pf4&tag=toplive-20&linkId=LJZYLD2YWF7WL2NH">Amazon Family</a>除了包含免费试用1个月的Prime，还有一些其他的优惠，详见： <a href="http://www.haitaobang.cn/glDetail?id=27">亚马逊家庭计划详细解读</a> ）</h1><p><strong>Prime服务有两大优势：</strong></p>
<blockquote>
<p><strong>享受任意金额免美国境内运费，以及免费的2个工作日送达服务。</strong></p>
</blockquote>
<p><strong>开通方法:（1）开通链接：<a href="http://www.amazon.com/tryprimefree/?ref_=assoc_tag_ph_1427739975520&_encoding=UTF8&camp=1789&creative=9325&linkCode=pf4&tag=toplive-20&linkId=FIBRZORNH4WOMVN4">点击这里</a></strong> </p>
<p>​    <strong>（2）在出现的页面中点击：<a href="http://www.amazon.com/tryprimefree/?ref_=assoc_tag_ph_1427739975520&_encoding=UTF8&camp=1789&creative=9325&linkCode=pf4&tag=toplive-20&linkId=FIBRZORNH4WOMVN4"><img src="/../images/%E6%B5%B7%E6%B7%98%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8%E5%BF%85%E7%9C%8B%E2%80%94%E2%80%942018%E6%9C%80%E6%96%B0%E7%BE%8E%E5%9B%BD%E4%BA%9A%E9%A9%AC%E9%80%8A%E6%B5%B7%E6%B7%98%E6%94%BB%E7%95%A5%EF%BC%81%E5%90%AB%E6%B5%B7%E6%B7%98%E8%BD%AC%E8%BF%90%E6%94%BB%E7%95%A5%E6%B5%B7%E6%B7%98%E6%95%99%E7%A8%8B/82462926tx6DfmKTVlMd2&690" alt="海淘新手入门必看——2018最新美国亚马逊海淘攻略！含海淘转运攻略海淘教程"></a></strong></p>
<p>​       （3）之后输入输入信用卡号，已经输过的无需输入，点击”<strong>start my free trial</strong>“ </p>
<p>之后出现如下界面就表示试用成功。在此一个月内，你都能享受免费的2个工作日送达，和任意金额免运费。</p>
<p><img src="/../images/%E6%B5%B7%E6%B7%98%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8%E5%BF%85%E7%9C%8B%E2%80%94%E2%80%942018%E6%9C%80%E6%96%B0%E7%BE%8E%E5%9B%BD%E4%BA%9A%E9%A9%AC%E9%80%8A%E6%B5%B7%E6%B7%98%E6%94%BB%E7%95%A5%EF%BC%81%E5%90%AB%E6%B5%B7%E6%B7%98%E8%BD%AC%E8%BF%90%E6%94%BB%E7%95%A5%E6%B5%B7%E6%B7%98%E6%95%99%E7%A8%8B/745a8c23gw1dnqz5uqwazj.jpg" alt="海淘新手入门必看——2018最新美国亚马逊海淘攻略！含海淘转运攻略海淘教程"></p>
<blockquote>
<p>Prime服务会自动续费，一个月之后会扣除99美元，因此我们需要关掉自动续费。这样到期就结束，而不会扣款。关闭的方法是：</p>
</blockquote>
<p>1,点击<a href="https://www.amazon.com/gp/subs/primeclub/account/homepage.html/?ie=UTF8&tag=toplive-20&linkCode=ur2&camp=1789&creative=390957"><strong>这个链接</strong></a>，登录后，进入管理，点击Do not upgrade按钮，出现如下字符will <strong>not</strong> upgrade，即表示自动关闭。建议开通后立即去取消自动续费。（这里的立即是完成第一笔购物后取消的意思）</p>
<p><img src="/../images/%E6%B5%B7%E6%B7%98%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8%E5%BF%85%E7%9C%8B%E2%80%94%E2%80%942018%E6%9C%80%E6%96%B0%E7%BE%8E%E5%9B%BD%E4%BA%9A%E9%A9%AC%E9%80%8A%E6%B5%B7%E6%B7%98%E6%94%BB%E7%95%A5%EF%BC%81%E5%90%AB%E6%B5%B7%E6%B7%98%E8%BD%AC%E8%BF%90%E6%94%BB%E7%95%A5%E6%B5%B7%E6%B7%98%E6%95%99%E7%A8%8B/745a8c23gw1dnqz6b2cqsj.jpg" alt="海淘新手入门必看——2018最新美国亚马逊海淘攻略！含海淘转运攻略海淘教程"></p>
<p>另外，如果真的忘记取消，被扣费了，也没关系，只要没有试用过Prime，按照上面妈妈计划要求退款的方法给客服写一个邮件，要求refund，Amazon也会把99美元(有消费税是107.91美元）退给你。</p>
<p>（二）：如何看商品的重量？</p>
<p>A：比如这件1150的剃须刀：<a href="http://www.amazon.com/gp/product/B006W2SYF8/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B006W2SYF8&linkCode=as2&tag=toplive-20"><strong>亚马逊剃须刀购买页面</strong></a> 在商品下面会有一个：</p>
<p><a href="http://s15.sinaimg.cn/orignal/82462926gcac0949ddd4e"><img src="/../images/%E6%B5%B7%E6%B7%98%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8%E5%BF%85%E7%9C%8B%E2%80%94%E2%80%942018%E6%9C%80%E6%96%B0%E7%BE%8E%E5%9B%BD%E4%BA%9A%E9%A9%AC%E9%80%8A%E6%B5%B7%E6%B7%98%E6%94%BB%E7%95%A5%EF%BC%81%E5%90%AB%E6%B5%B7%E6%B7%98%E8%BD%AC%E8%BF%90%E6%94%BB%E7%95%A5%E6%B5%B7%E6%B7%98%E6%95%99%E7%A8%8B/82462926gcac0949ddd4e&690" alt="海淘新手入门必看——2018最新美国亚马逊海淘攻略！含海淘转运攻略海淘教程"></a></p>
<p>其中：</p>
<h2 id="“Shipping-Weight-”就是运输重量，“Product-Dimensions-”是产品不含包装的尺寸和重量。我们运回国内，当然要看运输重量，也就是带包装的-Shipping-Weight。（有些显示为-ounces，可以自己算一下1磅-16盎司）"><a href="#“Shipping-Weight-”就是运输重量，“Product-Dimensions-”是产品不含包装的尺寸和重量。我们运回国内，当然要看运输重量，也就是带包装的-Shipping-Weight。（有些显示为-ounces，可以自己算一下1磅-16盎司）" class="headerlink" title="“Shipping Weight: ”就是运输重量，“Product Dimensions:”是产品不含包装的尺寸和重量。我们运回国内，当然要看运输重量，也就是带包装的**Shipping Weight。（有些显示为**ounces，可以自己算一下1磅=16盎司）"></a>“<strong>Shipping Weight:</strong> ”就是运输重量，“<strong>Product Dimensions:”是产品不含包装的尺寸和重量。我们运回国内，当然要看运输重量，也就是带包装的**</strong>Shipping Weight。（有些显示为**ounces，可以自己算一下1磅=16盎司）</h2><p><strong>但是转运公司最后的重量会和亚马逊标注的稍微有点差别，有时轻，有时重一点。</strong></p>
<p><strong>帮主心血总结：</strong><a href="http://www.haitaobang.cn/amazonnav/"><strong>美国亚马逊中文导航</strong></a></p>
<p><strong>更多海淘攻略：</strong></p>
<p><strong><em>\</em><a href="http://www.haitaobang.cn/glDetail?id=125">**海淘攻略全集|用支付宝就能海淘**</a>**</strong></p>
<p><a href="http://www.haitaobang.cn/gonglue/43.html"><strong><em>\</em>美国亚马逊直邮教程（电脑端）**</strong></a></p>
<h2 id="美国亚马逊直邮购物攻略（手机端）"><a href="#美国亚马逊直邮购物攻略（手机端）" class="headerlink" title="\美国亚马逊直邮购物攻略（手机端）**"></a><a href="http://www.haitaobang.cn/gonglue/99.html"><strong><em>\</em>美国亚马逊直邮购物攻略（手机端）**</strong></a></h2><h2 id="iHerb海淘攻略、最新优惠码"><a href="#iHerb海淘攻略、最新优惠码" class="headerlink" title="\iHerb海淘攻略、最新优惠码**"></a><a href="http://www.haitaobang.cn/gonglue/21.html"><strong><em>\</em>iHerb海淘攻略、最新优惠码**</strong></a></h2><h2 id="日本亚马逊海淘攻略"><a href="#日本亚马逊海淘攻略" class="headerlink" title="\日本亚马逊海淘攻略**"></a><a href="http://www.haitaobang.cn/gonglue/64.html"><strong><em>\</em>日本亚马逊海淘攻略**</strong></a></h2><h2 id="6PM手把手海淘攻略"><a href="#6PM手把手海淘攻略" class="headerlink" title="\6PM手把手海淘攻略**"></a><a href="http://www.haitaobang.cn/gonglue/69.html"><strong><em>\</em>6PM手把手海淘攻略**</strong></a></h2><h2 id="德淘安全座椅的好去处Kidsroom网站攻略"><a href="#德淘安全座椅的好去处Kidsroom网站攻略" class="headerlink" title="\德淘安全座椅的好去处Kidsroom网站攻略**"></a><a href="http://www.haitaobang.cn/gonglue/92.html"><strong><em>\</em>德淘安全座椅的好去处Kidsroom网站攻略**</strong></a></h2><h2 id="shopbop（烧包网）海淘直邮购物攻略"><a href="#shopbop（烧包网）海淘直邮购物攻略" class="headerlink" title="\shopbop（烧包网）海淘直邮购物攻略**"></a><a href="http://www.haitaobang.cn/gonglue/70.html"><strong><em>\</em>shopbop（烧包网）海淘直邮购物攻略**</strong></a></h2><h2 id="英国海淘攻略：Lookfantastic、THE-HUT、mybag-海淘下单图文教程"><a href="#英国海淘攻略：Lookfantastic、THE-HUT、mybag-海淘下单图文教程" class="headerlink" title="\英国海淘攻略：Lookfantastic、THE HUT、mybag 海淘下单图文教程**"></a><a href="http://www.haitaobang.cn/gonglue/103.html"><strong><em>\</em>英国海淘攻略：Lookfantastic、THE HUT、mybag 海淘下单图文教程**</strong></a></h2><h2 id="日本乐天国际市场海淘攻略"><a href="#日本乐天国际市场海淘攻略" class="headerlink" title="\日本乐天国际市场海淘攻略**"></a><a href="http://www.haitaobang.cn/gonglue/63.html"><strong><em>\</em>日本乐天国际市场海淘攻略**</strong></a></h2><h2 id="澳洲首家折扣药房——Roy-Young-Chemist海淘攻略"><a href="#澳洲首家折扣药房——Roy-Young-Chemist海淘攻略" class="headerlink" title="\澳洲首家折扣药房——Roy Young Chemist海淘攻略**"></a><a href="http://www.haitaobang.cn/gonglue/108.html"><strong><em>\</em>澳洲首家折扣药房——Roy Young Chemist海淘攻略**</strong></a></h2><h2 id="澳洲最大在线-Pharmacy-Online-药房购物攻略"><a href="#澳洲最大在线-Pharmacy-Online-药房购物攻略" class="headerlink" title="\澳洲最大在线 Pharmacy Online 药房购物攻略**"></a><a href="http://www.haitaobang.cn/gonglue/111.html"><strong><em>\</em>澳洲最大在线 Pharmacy Online 药房购物攻略**</strong></a></h2><p><strong><a href="http://www.haitaobang.cn/gonglue/11.html">*<em>海淘转运教程—转运操作流程及常见问题解决方法*</em></a></strong></p>
<h2 id="亚马逊Baby-registry注册及使用攻略-图文教程-超详细！-母婴用品、化妆品都可有15-优惠"><a href="#亚马逊Baby-registry注册及使用攻略-图文教程-超详细！-母婴用品、化妆品都可有15-优惠" class="headerlink" title="\亚马逊Baby registry注册及使用攻略( 图文教程 超详细！) 母婴用品、化妆品都可有15%优惠**"></a><a href="http://www.haitaobang.cn/gonglue/33.html"><strong><em>\</em>亚马逊Baby registry注册及使用攻略( 图文教程 超详细！) 母婴用品、化妆品都可有15%优惠**</strong></a></h2><h2 id="亚马逊Amazon-Family家庭计划使用攻略详细解读图文教程"><a href="#亚马逊Amazon-Family家庭计划使用攻略详细解读图文教程" class="headerlink" title="\亚马逊Amazon Family家庭计划使用攻略详细解读图文教程**"></a><a href="http://www.haitaobang.cn/gonglue/27.html"><strong><em>\</em>亚马逊Amazon Family家庭计划使用攻略详细解读图文教程**</strong></a></h2><h2 id="美国亚马逊（S-amp-S）最新政策介绍：Amazon-Subscribe-amp-Save-1"><a href="#美国亚马逊（S-amp-S）最新政策介绍：Amazon-Subscribe-amp-Save-1" class="headerlink" title="\美国亚马逊（S&amp;S）最新政策介绍：Amazon Subscribe &amp; Save**"></a><a href="http://www.haitaobang.cn/gonglue/18.html"><strong><em>\</em>美国亚马逊（S&amp;S）最新政策介绍：Amazon Subscribe &amp; Save**</strong></a></h2><h2 id="如何加入美亚Prime会员？帮主送上Prime会员免费试用教程！"><a href="#如何加入美亚Prime会员？帮主送上Prime会员免费试用教程！" class="headerlink" title="\如何加入美亚Prime会员？帮主送上Prime会员免费试用教程！**"></a><a href="http://www.haitaobang.cn/gonglue/65.html"><strong><em>\</em>如何加入美亚Prime会员？帮主送上Prime会员免费试用教程！**</strong></a></h2><h2 id="美亚购物，帮主教你玩转Prime-Pantry"><a href="#美亚购物，帮主教你玩转Prime-Pantry" class="headerlink" title="*美亚购物，帮主教你玩转Prime Pantry*"></a><strong><a href="http://www.haitaobang.cn/gonglue/66.html">*<em>美亚购物，帮主教你玩转Prime Pantry*</em></a></strong></h2><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="美国亚马逊礼品卡买赠方法图文详解"><a href="#美国亚马逊礼品卡买赠方法图文详解" class="headerlink" title="\美国亚马逊礼品卡买赠方法图文详解**"></a><a href="http://www.haitaobang.cn/gonglue/97.html"><strong><em>\</em>美国亚马逊礼品卡买赠方法图文详解**</strong></a></h2><h2 id="日本亚马逊官网中文-日亚官网中文版来啦！"><a href="#日本亚马逊官网中文-日亚官网中文版来啦！" class="headerlink" title="\日本亚马逊官网中文_日亚官网中文版来啦！**"></a><a href="http://www.haitaobang.cn/gonglue/104.html"><strong><em>\</em>日本亚马逊官网中文_日亚官网中文版来啦！**</strong></a></h2><h2 id="鞋、女包、眼镜满-150免费直邮中国"><a href="#鞋、女包、眼镜满-150免费直邮中国" class="headerlink" title="\鞋、女包、眼镜满$150免费直邮中国**"></a><a href="http://www.haitaobang.cn/gonglue/45.html"><strong><em>\</em>鞋、女包、眼镜满$150免费直邮中国**</strong></a></h2><h2 id="联系美国亚马逊客服、日本亚马逊的方法亚马逊中文客服解答"><a href="#联系美国亚马逊客服、日本亚马逊的方法亚马逊中文客服解答" class="headerlink" title="\联系美国亚马逊客服、日本亚马逊的方法亚马逊中文客服解答**"></a><a href="http://www.haitaobang.cn/gonglue/100.html"><strong><em>\</em>联系美国亚马逊客服、日本亚马逊的方法亚马逊中文客服解答**</strong></a></h2><p><strong><em>\</em>更多海淘推荐：**</strong></p>
<p><strong><a href="http://www.haitaobang.cn/gonglue/19.html">*<em>最值得海淘的商品推荐—“母婴产品”*</em></a></strong></p>
<p><strong><a href="http://www.haitaobang.cn/gonglue/20.html">*<em>海淘清单1：从怀孕到育儿必备的用品*</em></a></strong></p>
<p><strong><em>\</em>夏日特辑——海淘推荐30款宝宝防护产品**</strong></p>
<p><strong><a href="http://www.haitaobang.cn/gonglue/15.html">*<em>最值得海淘的商品推荐——“保健品”篇*</em></a></strong></p>
<p><strong><em>\</em>最\</strong><a href="http://www.haitaobang.cn/gonglue/5.html">*<em>值得海淘的商品推荐——“化妆品”篇*</em></a>**</p>
<h2 id="美亚最值得淘的保健品分类推荐"><a href="#美亚最值得淘的保健品分类推荐" class="headerlink" title="*美亚最值得淘的保健品分类推荐*"></a><strong><a href="http://www.haitaobang.cn/gonglue/113.html">*<em>美亚最值得淘的保健品分类推荐*</em></a></strong></h2><p> <strong><a href="http://www.haitaobang.cn/gonglue/118.html">*<em>美亚十大热门洗发护发产品*</em></a></strong></p>
<p> <strong><a href="http://www.haitaobang.cn/gonglue/124.html">*<em>拒绝跟风那些低调好用的天然护肤品牌*</em></a></strong></p>
<p> <strong><a href="http://www.haitaobang.cn/gonglue/35.html">*<em>iHerb畅销产品排名榜*</em></a></strong></p>
<p> <strong><a href="http://www.haitaobang.cn/gonglue/17.html">*<em>iHerb超值明星产品介绍*</em></a></strong></p>
<p> <strong><a href="http://www.haitaobang.cn/gonglue/107.html">*<em>Lookfantastic必败20件好物*</em></a></strong></p>
<p> <strong><em>\</em><a href="http://www.haitaobang.cn/gonglue/112.html">德淘买什么？推荐20款德国儿童必备药</a>**</strong></p>
<h2 id="-1"><a href="#-1" class="headerlink" title></a></h2><h2 id="——————————"><a href="#——————————" class="headerlink" title="——————————-"></a>——————————-</h2><p><strong>海淘过程中遇到问题怎么办？</strong></p>
<p>海淘过程中的任何问题，可咨询帮主公众号客服，微信公众号：<strong>海淘帮帮主</strong></p>
<p>可扫描下方二维码关注：</p>
<p><img src="/../images/%E6%B5%B7%E6%B7%98%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8%E5%BF%85%E7%9C%8B%E2%80%94%E2%80%942018%E6%9C%80%E6%96%B0%E7%BE%8E%E5%9B%BD%E4%BA%9A%E9%A9%AC%E9%80%8A%E6%B5%B7%E6%B7%98%E6%94%BB%E7%95%A5%EF%BC%81%E5%90%AB%E6%B5%B7%E6%B7%98%E8%BD%AC%E8%BF%90%E6%94%BB%E7%95%A5%E6%B5%B7%E6%B7%98%E6%95%99%E7%A8%8B/6362390296578843715873968.png" alt="海淘新手入门必看——2018最新美国亚马逊海淘攻略！含海淘转运攻略海淘教程"></p>
<p><strong>强烈推荐通过以下方式，实时获取折扣信息：</strong></p>
<p>【<strong>微信</strong>】添加微信号：<strong>haitaobang555</strong> 添加后进海淘微信群（群名额有限，手快有）</p>
<p>【<strong>微博</strong>】：@海淘帮帮主（<a href="http://weibo.com/haitaobang">点此看微博精彩</a>） </p>
<p><strong>【QQ群】： 678266923</strong>（ <a href="https://jq.qq.com/?_wv=1027&k=57mTCWx">点此直接加入</a> ）</p>
<p>【<strong>网站</strong>】：<a href="http://www.haitaobang.cn/">点此进入海淘帮官网</a>（每日更新，分类详细）</p>
<p>【<strong>全国各地QQ/微信交流群</strong>】： <a href="http://www.haitaobang.cn/gonglue/245.html">点此加入</a></p>
<p>【海淘帮 <strong>微信公众号</strong>】：</p>
<p>美国海淘折扣+问题解答，关注微信公众号：<strong>美国海淘帮</strong></p>
<p>日本海淘折扣+问题解答，关注微信公众号：<strong>日本海淘帮</strong></p>
<p>欧洲海淘折扣+问题解答，关注微信公众号：<strong>欧洲海淘帮</strong></p>
<p>澳洲海淘折扣+问题解答，关注微信公众号：<strong>澳洲海淘帮</strong></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>-其他</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习1---最简单的全连接神经网络</title>
    <url>/post/74e51a6a.html</url>
    <content><![CDATA[<p>本文有一部分内容参考以下两篇文章：<br>　　<a href="https://www.cnblogs.com/charlotte77/p/5629865.html">一文弄懂神经网络中的反向传播法——BackPropagation</a><br>　　<a href="http://ufldl.stanford.edu/wiki/index.php/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C">神经网络</a><br>　　<br>　　最简单的全连接神经网络如下图所示(这张图极其重要，本文所有的推导都参照的这张图，如果有兴趣看推导，建议保存下来跟推导一起看)：</p>
<p><img src="/../images/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A01---%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E5%85%A8%E8%BF%9E%E6%8E%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/20180210030918240" alt="这里写图片描述"></p>
<p>　　它的前向传播计算过程非常简单，这里先讲一下：</p>
<h2 id="前向传播"><a href="#前向传播" class="headerlink" title="前向传播"></a><strong>前向传播</strong></h2><hr>
<p>$$<br>\begin{aligned}<br>Y_{1} &amp;=f\left(W_{11}^{(1)} X_{1}+W_{12}^{(1)} X_{2}+K_{1}\right) \<br>Y_{2} &amp;=f\left(W_{21}^{(1)} X_{1}+W_{22}^{(1)} X_{2}+K_{1}\right) \<br>O_{1} &amp;=f\left(W_{11}^{(2)} Y_{1}+W_{12}^{(2)} Y_{2}+K_{2}\right) \<br>O_{2} &amp;=f\left(W_{21}^{(2)} Y_{1}+W_{22}^{(2)} Y_{2}+K_{2}\right)<br>\end{aligned}<br>$$<br>　　具体的，如果代入实际数值，取<br>$$<br>\begin{array}{lc}<br>X_{1}=0.05 &amp; X_{2}=0.10 \<br>K_{1}=0.35 &amp; K_{2}=0.60 \<br>W_{11}^{(1)}=0.15 &amp; W_{12}^{(1)}=0.20 \<br>W_{21}^{(1)}=0.25 &amp; W_{22}^{(1)}=0.30 \<br>W_{11}^{(2)}=0.40 &amp; W_{12}^{(2)}=0.45 \<br>W_{21}^{(2)}=0.50 &amp; W_{22}^{(2)}=0.55<br>\end{array}<br>$$</p>
<p>　　激活函数为：<br>$$<br>\frac{1}{1+e^{-z}}<br>$$<br>　　则有：<br>$$<br>\begin{array}{l}<br>z_{1}^{(1)}=0.15 * 0.05+0.20 * 0.10+0.35=0.3775 \<br>Y_{1}=\frac{1}{1+e^{-z_{1}^{(1)}}}=\frac{1}{1+e^{-0.3775}}=0.5932699921 \<br>z_{2}^{(1)}=0.25 * 0.05+0.30 * 0.10+0.35=0.3925 \<br>Y_{2}=\frac{1}{1+e^{-z_{2}^{(1)}}}=\frac{1}{1+e^{-0.3925}}=0.5968843783 \<br>z_{1}^{(2)}=0.40 * 0.5932699921+0.45 * 0.5968843783+0.60=1.1059059671 \<br>O_{1}=\frac{1}{1+e^{-z_{2}^{(2)}}}=\frac{1}{1+e^{-1.1059059671}}=0.7513650696 \<br>z_{2}^{(2)}=0.50 * 0.5932699921+0.55 * 0.5968843783+0.60=1.2249214041 \<br>O_{2}=\frac{1}{1+e^{-z_{2}^{(2)}}}=f(1.2249214041)=\frac{1}{1+e^{-1.2249210041}}=0.7729284653<br>\end{array}<br>$$</p>
<p>　　经过上面的过程，我们就完成了一次神经网络从输入到输出的计算。虽然公式代入数值看起来比较要命，但实际上对于计算机来说并没有什么。<br>　　那它有什么用呢？单看上面的例子可以说是完全没用的，因为它的输出跟输入的关系还非常的模糊。我们需要做的是训练这个网络中的参数，使得输出和输入存在某种对应关系（比如输入1、1，输出1、0来实现一个类似于加法器这样的东西），当上面网络的参数训练好了，我们工程中就只需要将数据输入这个网络，然后看看输出结果就行。从这里也大致可以看到，神经网络在实际应用中计算量大归大（可能网络本身就很复杂），但其实也还可以接受，最要命的地方是在于训练(每训练一次都要做一次前向传播计算，一般训练的次数又是以万为单位的)！<br>　　以上面的网络为例，通常我们说的训练参数就是训练公式中跟W相关的那8个数。在具体展开讲之前先补充下上面用到的神经网络的两个知识点：</p>
<ul>
<li><p><strong>激活函数</strong>，也就是上面例子中的<br>　　$$<br>  \frac{1}{1+e^{-z}}<br>  $$<br>  （事实上只要满足一定的规范，激活函数可以有无数种形态，不一定就用这个），其大体有两个作用：<br>  1.将数据归一化，因为前一层网络的计算结果很有可能不在0~1之间，而数据的范围需要统一，因此用激活函数把数据范围给限定住。<br>  　　2.打破网络的线性映射关系，如果网络只存在线性关系，则无论网络多深多复杂，最后都可以用单层网络替换，这样也就跟深度学习没什么关系了。另外更重要的一点是，如果只有线性，对于非线性的数据要分类是无能为力的。</p>
</li>
<li><p><strong>偏置项</strong>，也就是本篇最开始的网络图中最底层的那个“+1”<br>　　对这个东西有什么用，有些解释如下：<br>  　　Y=WX+b  （1）<br>  　　假设没有b，则公式退化成<br>  　　Y=WX   （2）<br>  　　假设现在要把(1,1)、(2,2)这两个点分成不同的类，则公式（2）直接就跪了，而公式（1）可以做到。<br>  　　但，本人不同意这个说法，因为这样的话(1,b)、(2,b)这两个点就分不出来了。也就是说按照这样的解释方法加入偏置项虽然能解决一部分问题，但会带入另外的问题，并没有什么卵用。<br>  　　本人对偏置项作用的看法是，偏置项要结合激活函数来看，每一层网络虽然共享一个偏置项，然而因为前面计算的结果有所差异（如例子中<br>  $$<br>  W_{11}^{(1)} X_{1}+W_{12}^{(1)} X_{2}与 W_{21}^{(1)} X_{1}+W_{22}^{(1)} X_{2}<br>  $$<br>  )，而激活函数又非线性函数，因而可以将神经元较快的分化出来。</p>
</li>
</ul>
<h2 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a><strong>反向传播</strong></h2><hr>
<p>　　承接上面，我们来讲最重要的参数训练问题，深度学习一般用反向传播法更新权重(甚至可以说反向传播是神经网络的灵魂)。它的作用其实很好理解，下面结合着上面举的例子解释一下。</p>
<p>​        上面我们的输入是：<br>$$<br>X_{1}=0.05 \quad X_{2}=0.10<br>$$</p>
<p>　　对应的输出是：<br>　　<br>$$<br>O_{1}=0.7513650696 \quad O_{2}=0.7729284653<br>$$<br>　　假设我们希望输入对应的输出为：<br>$$<br>O_{1}=0.01 \quad O_{2}=0.99<br>$$<br>　　我们就需要改变Ｗ的取值，而具体要改变多少，我们一般会用<strong>梯度下降</strong>的方法去评估。在讲梯度下降之前，先来看看评价误差大小的“损失函数”。<br>　　 <strong>损失函数</strong>，也叫做“代价函数”，损失函数越小，就代表模型拟合的越好。最常用的损失函数是均方误差：<br>　　<br>$$<br>E_{\text {总 }}=\frac{\sum_{i=1}^{n}\left(T_{i}-O_{i}\right)^{2}}{n}(其中T_{i}为期望网络输出的结果，T_{i}为实际网络输出的结果)<br>$$<br>　　代入上面例子的期望输出和实际输出数值则可以求得<br>　　<br>$$<br>E_{\text {总 }}=\frac{\sum_{i=1}^{n}\left(T_{i}-O_{i}\right)^{2}}{n}=E_{O_{1}}+E_{O_{2}}=\frac{(0.01-0.7513650696)^{2}}{2}+\frac{(0.99-0.7729284653)^{2}}{2}<br>$$<br>　　通过损失函数算出误差大小之后我们就可以大概知道网络训练的怎么样了，是不是已经大致能工作之类的。<br>　　OK，下面进入梯度下降法：<br>　　<strong>梯度下降法</strong><br>　　要求单个的W对于总体误差起到多大的影响。在数学上，就是求总体误差对相应W的偏导数。以示例中隐含层到输出层的<br>$$<br>W_{11}^{(2)} 为例, 就是求 \frac{\partial E_{总}}{\partial W_{11}^{(2)}} 。<br>$$<br>要直接求基本是不可能的，我们可以先分析下<br>$$<br>W_{11}^{(2)} 到 E_{\text {总 }}<br>$$<br>间到底经历了什么。<br>$$</p>
<ol>
<li>W_{11}^{(2)} 先与 Y_{1} 相乘<br>$$</li>
</ol>
<ol>
<li><p><em>W</em>(2)11W11(2)先与<em>Y</em>1Y1相乘</p>
</li>
<li><p>经过激活函数</p>
</li>
</ol>
<p>　　3. 经过误差计算公式，也就是损失函数</p>
<p>因此我们可以把<br>$$<br>\frac{\partial E_{总}}{\partial W_{11}^{(2)}}<br>$$<br>拆开来（链式法则，高数学的不好的同学回去翻书），如下：<br>$$<br>\frac{\partial E_{兄}}{\partial W_{11}^{(2)}}=\frac{\partial E_{兄}}{\partial O_{1}} * \frac{\partial O_{1}}{\partial z_{1}^{(2)}} * \frac{\partial z_{1}^{(2)}}{\partial W_{11}^{(2)}} \quad\left(z_{1}^{(2)} \text { 为经过激活函数前的状态 }\right)<br>$$<br>　　这样，只要能分别求出这三个部分，整体也就求出来了。<br>　　下面先列出被微分的这几项<br>$$<br>\begin{array}{l}<br>E_{\text {总 }}=E_{O_{1}}+E_{O_{2}}=\frac{\left(T_{1}-O_{1}\right)^{2}}{2}+\frac{\left(T_{2}-O_{2}\right)^{2}}{2} \<br>O_{1}=\frac{1}{1+e^{-z_{1}^{(2)}}} \<br>z_{1}^{(2)}=W_{11}^{(2)} Y_{1}+W_{12}^{(2)} Y_{2}+K_{2}<br>\end{array}<br>$$</p>
<p>　　分别做偏微分得到<br>$$<br>\begin{aligned}<br>\frac{\partial E_{\text {兄 }}}{\partial O_{1}}=\frac{\partial\left[\frac{\left(T_{1}-O_{1}\right)^{2}}{2}+\frac{\left(T_{2}-O_{2}\right)^{2}}{2}\right]}{\partial O_{1}}=-\left(T_{1}-O_{1}\right)=O_{1}-T_{1} \<br>\frac{\partial O_{1}}{\partial z_{1}^{(2)}}=\frac{\partial \frac{1}{1+e^{-z_{1}^{(2)}}}}{\partial z_{1}^{(2)}}=\frac{e^{-z_{1}^{(2)}}}{\left(1+e^{-z_{1}^{(2)}}\right)^{2}} &amp;=\frac{1+e^{-z_{1}^{(2)}-1}}{\left(1+e^{-z_{1}^{(2)}}\right)^{2}}=\frac{1}{1+e^{-z_{1}^{(2)}}}\left(1-\frac{1}{1+e^{-z_{1}^{(2)}}}\right)=O_{1}\left(1-O_{1}\right) \<br>\frac{\partial z_{1}^{(2)}}{\partial W_{11}^{(2)}} &amp;=\frac{\partial\left(W_{11}^{(2)} Y_{1}+W_{12}^{(2)} Y_{2}+K_{2}\right)}{\partial W_{11}^{(2)}}=Y_{1}<br>\end{aligned}<br>$$</p>
<p>　　代入具体数值得到<br>$$<br>\begin{array}{l}<br>\frac{\partial E_{\text {总 }}}{\partial O_{1}}=O_{1}-T_{1}=0.7513650696-0.01=0.7413650696 \<br>\frac{\partial O_{1}}{\partial z_{1}^{(2)}}=O_{1}\left(1-O_{1}\right)=0.7513650695(1-0.7513650695)=0.1868156018 \<br>\frac{\partial z_{1}^{(2)}}{\partial W_{11}^{(2)}}=Y_{1}=0.5932699921 \<br>\text { 则 } \frac{\partial E_{\text {总 }}}{\partial W_{11}^{(2)}}=\frac{\partial E_{\text {总 }}}{\partial O_{1}} * \frac{\partial O_{1}}{\partial z_{1}^{(2)}} * \frac{\partial z_{1}^{(2)}}{\partial W_{11}^{(2)}}=\left(O_{1}-T_{1}\right) * O_{1}\left(1-O_{1}\right) * Y_{1}=0.7413650696 \<br>\quad * 0.1868156018 * 0.5932699921=0.0821670406<br>\end{array}<br>$$</p>
<p>　　到此，我们求出了总体误差对相应隐含层的权重W的偏导数。他的含义是在当前位置上，如果权重W移动一小段距离，会引起总体误差的变化的大小。很容易可以想到，如果求出来的值比较大，证明该权重对误差的影响大，那么我们需要对它调整的步伐也就大。反之，则稍微调整一下就可以了。调整的公式如下：<br>$$<br>W_{n e w 11}^{(2)}=W_{11}^{(2)}-\eta * \frac{\partial E_{总}}{\partial W_{11}^{(2)}}<br>$$<br>　　公式中的η为<strong>学习速率</strong>，这哥们比较关键，如果取得太大有可能怎么训练都无法取得最优值，取得太小训练速度又非常的慢，且很容易就会陷入局部最优而出不来，关于这块的解释可以参考机器学习的书籍，如果有必要后面会专门出一篇文章来探讨这个问题，本文在示例中取η=0.5。<br>　　那么，代入数值：<br>$$<br>W_{n e w 11}^{(2)}=W_{11}^{(2)}-\eta * \frac{\partial E_{\underline{g}}}{\partial W_{11}^{(2)}}=0.40-0.5 * 0.0821670406=0.3589164797<br>$$</p>
<p>　　　　有了上面的推导，更新隐含层剩下的三个权重可以说易如反掌：<br>$$<br>　　\begin{array}{l}<br>　　W_{\text {new} 12}^{(2)}=0.45-0.5 *\left(O_{1}-T_{1}\right) * O_{1}\left(1-O_{1}\right) * Y_{2}=0.4086661861 \<br>　　W_{\text {new} 21}^{(2)}=0.50-0.5 *\left(O_{2}-T_{2}\right) * O_{2}\left(1-O_{2}\right) * Y_{1}=0.5113012703 \<br>　　W_{\text {new} 22}^{(2)}=0.55-0.5 *\left(O_{2}-T_{2}\right) * O_{2}\left(1-O_{2}\right) * Y_{2}=0.5613701211<br>　　\end{array}<br>$$</p>
<p>　　　　接下来还有输入层到隐含层的权重，基本原理是一样的，但因为所处位置比较前，所有改变这个位置的一个权重会影响两个输出的值，求偏导也要考虑两个输出的影响。<br>$$<br>　　\frac{\partial E_{\text {总 }}}{\partial W_{11}^{(1)}}=\frac{\partial E_{\text {总 }}}{\partial Y_{1}} * \frac{\partial Y_{1}}{\partial z_{1}^{(1)}} * \frac{\partial z_{1}^{(1)}}{\partial W_{11}^{(1)}}<br>$$</p>
<p>　　　　可以看到，后面两项跟隐含层到输出层的偏导几乎一模一样，可以套用其结论，公式变为：<br>$$<br>　　\frac{\partial E_{\text {总 }}}{\partial W_{11}^{(1)}}=\frac{\partial E_{\text {总 }}}{\partial Y_{1}} * Y_{1}\left(1-Y_{1}\right) * X_{1}<br>$$</p>
<p>　　　　现在主要就要求<br>$$<br>　　\frac{\partial E_{\text {总 }}}{\partial Y_{1}}，<br>$$<br>　　回头看本文一开始的图片，可以看到<em>E</em>总和<em>Y</em>1的距离是比较远的，无法直接求偏导，因而需要通过链式法则再展开一下。<br>　　　　<br>$$<br>　　\frac{\partial E_{\text {总 }}}{\partial Y_{1}}=\frac{\partial\left(E_{O_{1}}+E_{O_{2}}\right)}{\partial Y_{1}}=\frac{\partial E_{O_{1}}}{\partial Y_{1}}+\frac{\partial E_{O_{2}}}{\partial Y_{1}}<br>$$</p>
<p>　　　　因为<br>$$<br>　　\frac{\partial E_{O_{1}}}{\partial Y_{1}}与\frac{\partial E_{O_{2}}}{\partial Y_{1}}<br>$$<br>　　形式相同，因而先看前者。<br>　　　　<br>$$<br>　　\frac{\partial E_{O_{1}}}{\partial Y_{1}}=\frac{\partial E_{O_{1}}}{\partial O_{1}} * \frac{\partial O_{1}}{\partial z_{1}^{(2)}} * \frac{\partial z_{1}^{(2)}}{\partial Y_{1}}<br>$$</p>
<p>　　　　前面两项之前求过，因此上式变成：<br>$$<br>　　\frac{\partial E_{O_{1}}}{\partial Y_{1}}=\frac{\partial E_{O_{1}}}{\partial O_{1}} * \frac{\partial O_{1}}{\partial z_{1}^{(2)}} * \frac{\partial z_{1}^{(2)}}{\partial Y_{1}}=\left(O_{1}-T_{1}\right) * O_{1}\left(1-O_{1}\right) * \frac{\partial z_{1}^{(2)}}{\partial Y_{1}}<br>$$<br>　　​        又<br>$$<br>　　\frac{\partial z_{1}^{(2)}}{\partial Y_{1}}=\frac{\partial\left(W_{11}^{(2)} Y_{1}+W_{12}^{(2)} Y_{2}+K_{2}\right)}{\partial Y_{1}}=W_{11}^{(2)}<br>$$</p>
<p>　　　　故<br>$$<br>　　\frac{\partial E_{O_{1}}}{\partial z_{1}^{(1)}}=\left(O_{1}-T_{1}\right) * O_{1}\left(1-O_{1}\right) * W_{11}^{(2)}<br>$$</p>
<p>　　　　同理<br>$$<br>　　\frac{\partial E_{O_{2}}}{\partial z_{1}^{(1)}}=\left(O_{2}-T_{2}\right) * O_{2}\left(1-O_{2}\right) * W_{21}^{(2)}<br>$$</p>
<p>　　　　则<br>$$<br>　　\frac{\partial E_{总}}{\partial W_{11}^{(1)}}=\left(\left(O_{1}-T_{1}\right) * O_{1}\left(1-O_{1}\right) * W_{11}^{(2)}+\left(O_{2}-T_{2}\right) * O_{2}\left(1-O_{2}\right) * W_{21}^{(2)}\right)* Y_{1}\left(1-Y_{1}\right) * X_{1}<br>$$</p>
<p>　　　　代入数值可求得<br>　　　　<br>$$<br>　　\frac{\partial E_{总}}{\partial W_{11}^{(1)}}=0.000438568<br>$$</p>
<p>　　　　则参数更新为<br>　　　　<br>$$<br>　　\begin{aligned}<br>　　&amp;W_{n e w 11}^{(1)}=W_{11}^{(1)}-\eta * \frac{\partial E_{总}}{\partial W_{11}^{(1)}}=0.149781\<br>　　&amp;\text { 同理可求得： }\<br>　　&amp;W_{n e w 12}^{(1)}=W_{12}^{(1)}-\eta * \frac{\partial E_{总}}{\partial W_{12}^{(1)}}=0.199561\<br>　　&amp;W_{n e w 21}^{(1)}=W_{21}^{(1)}-\eta * \frac{\partial E_{总}^{(1)}}{\partial W_{21}^{(1)}}=0.249751\<br>　　&amp;W_{n e w 22}^{(1)}=W_{22}^{(1)}-\eta * \frac{\partial E_{总}^{(1)}}{\partial W_{22}^{(1)}}=0.299502<br>　　\end{aligned}<br>$$</p>
<p>　　　　到此，理论部分就都讲完了，万岁！！！</p>
<p>　　在这里在此说明下，本文主要参考<a href="https://www.cnblogs.com/charlotte77/p/5629865.html">一文弄懂神经网络中的反向传播法——BackPropagation</a>这篇文章，里面有些论证直接是按照作者的思路来的，而且代入数据也直接抄的作者的数据，因为这样做本人在写的过程中可以通过比较结果是不是跟它一样来验证推导出的公式正确与否。如果觉得本人写的还不是太清楚可以看看该文章，作者用了比较多的图片辅助解释可能会比较易懂(本人都集中到一张图中了)。<br>　　在这里顺便推荐一下该作者的博客，写的很好！一看作者说自己只是本科生，我觉得我研究生白读了，额。。。</p>
<h2 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a><strong>C++实现</strong></h2><hr>
<p>　　直接上代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;//结点类，用以构成网络class node </span><br><span class="line">&#123;public:    double value; //数值，存储结点最后的状态，对应到文章示例为X1，Y1等值    double W[2];  //结点到下一层的权值&#125;;//网络类，描述神经网络的结构并实现前向传播以及后向传播//这里为文章示例中的三层网络，每层结点均为两个class net </span><br><span class="line">&#123;public:</span><br><span class="line">    node input_layer[2];//输入层结点</span><br><span class="line">    node hidden_layer[2];//隐含层结点</span><br><span class="line">    node output_layer[2];//输出层结点,这里只是两个数，但这样做方便后面的扩展    double yita = 0.5;//学习率η    double k1;//输入层偏置项权重    double k2;//隐含层偏置项权重    double Tg[2];//训练目标    double O[2];//网络实际输出</span><br><span class="line"></span><br><span class="line">    net();//构造函数，用于初始化权重，一般可以随机初始化    double sigmoid(double z);//激活函数    double getLoss();//损失函数，输入为目标值    void forwardPropagation(double input1,double input2);//前向传播    void backPropagation(double T1, double T2);//反向传播，更新权值    void printresual();//打印信息&#125;;</span><br><span class="line"></span><br><span class="line">net::net()</span><br><span class="line">&#123;</span><br><span class="line">    k1 = 0.35;</span><br><span class="line">    k2 = 0.60;</span><br><span class="line">    input_layer[0].W[0] = 0.15;</span><br><span class="line">    input_layer[0].W[1] = 0.25;</span><br><span class="line">    input_layer[1].W[0] = 0.20;</span><br><span class="line">    input_layer[1].W[1] = 0.30;</span><br><span class="line">    hidden_layer[0].W[0] = 0.40;</span><br><span class="line">    hidden_layer[0].W[1] = 0.50;</span><br><span class="line">    hidden_layer[1].W[0] = 0.45;</span><br><span class="line">    hidden_layer[1].W[1] = 0.55;</span><br><span class="line">&#125;//激活函数double net::sigmoid(double z)</span><br><span class="line">&#123;    return 1/(1+ exp(-z));</span><br><span class="line">&#125;//损失函数double net::getLoss()</span><br><span class="line">&#123;    return (pow(O[0] -Tg[0],2)+ pow(O[1] - Tg[1],2))/2;</span><br><span class="line">&#125;//前向传播void net::forwardPropagation(double input1, double input2)</span><br><span class="line">&#123;</span><br><span class="line">    input_layer[0].value = input1;</span><br><span class="line">    input_layer[1].value = input2;    for (size_t hNNum = 0; hNNum &lt; 2; hNNum++)//算出隐含层结点的值</span><br><span class="line">    &#123;        double z = 0;        for (size_t iNNum = 0; iNNum &lt; 2; iNNum++)</span><br><span class="line">        &#123;</span><br><span class="line">            z+= input_layer[iNNum].value*input_layer[iNNum].W[hNNum];</span><br><span class="line">        &#125;</span><br><span class="line">        z+= k1;//加上偏置项</span><br><span class="line">        hidden_layer[hNNum].value = sigmoid(z);</span><br><span class="line">    &#125;    for (size_t outputNodeNum = 0; outputNodeNum &lt; 2; outputNodeNum++)//算出输出层结点的值</span><br><span class="line">    &#123;        double z = 0;        for (size_t hNNum = 0; hNNum &lt; 2; hNNum++)</span><br><span class="line">        &#123;</span><br><span class="line">            z += hidden_layer[hNNum].value*hidden_layer[hNNum].W[outputNodeNum];</span><br><span class="line">        &#125;</span><br><span class="line">        z += k2;//加上偏置项</span><br><span class="line">        O[outputNodeNum] = output_layer[outputNodeNum].value = sigmoid(z);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;//反向传播，这里为了公式好看一点多写了一些变量作为中间值//计算过程用到的公式在博文中已经推导过了，如果代码没看明白请看看博文void net::backPropagation(double T1, double T2)</span><br><span class="line">&#123;   </span><br><span class="line">    Tg[0] = T1;</span><br><span class="line">    Tg[1] = T2;    for (size_t iNNum = 0; iNNum &lt; 2; iNNum++)//更新输入层权重</span><br><span class="line">    &#123;        for (size_t wnum = 0; wnum &lt; 2; wnum++)</span><br><span class="line">        &#123;            double y = hidden_layer[wnum].value;</span><br><span class="line">            input_layer[iNNum].W[wnum] -= yita*((O[0] - T1)*O[0] *(1- O[0])*</span><br><span class="line">                hidden_layer[wnum].W[0] +(O[1] - T2)*O[1] *(1 - O[1])*hidden_layer[wnum].W[1])*</span><br><span class="line">                y*(1- y)*input_layer[iNNum].value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    for (size_t hNNum = 0; hNNum &lt; 2; hNNum++)//更新隐含层权重</span><br><span class="line">    &#123;        for (size_t wnum = 0; wnum &lt; 2; wnum++)</span><br><span class="line">        &#123;</span><br><span class="line">            hidden_layer[hNNum].W[wnum]-= yita*(O[wnum] - Tg[wnum])*</span><br><span class="line">                O[wnum] *(1- O[wnum])*hidden_layer[hNNum].value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;void net::printresual()</span><br><span class="line">&#123;    double loss = getLoss();</span><br><span class="line">    cout &lt;&lt; &quot;loss：&quot; &lt;&lt; loss &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;输出1：&quot; &lt;&lt; O[0] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;输出2：&quot; &lt;&lt; O[1] &lt;&lt; endl;</span><br><span class="line">&#125;void main()</span><br><span class="line">&#123;</span><br><span class="line">    net mnet;    for (size_t i = 0; i &lt; 10000; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mnet.forwardPropagation(0.05, 0.1);//前向传播</span><br><span class="line">        mnet.backPropagation(0.01, 0.99);//反向传播        if (i%1000==0)</span><br><span class="line">        &#123;</span><br><span class="line">            mnet.printresual();//反向传播</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="python实现"><a href="#python实现" class="headerlink" title="python实现"></a><strong>python实现</strong></h2><hr>
<p>　　这里本人将贴出自己写的代码，但因为python是初学的，还不太行，所以如有错误和不够简练的地方望请见谅。另外推荐一个网站可以学习各种编程语言的：<a href="http://www.runoob.com/python/python-tutorial.html">http://www.runoob.com/python/python-tutorial.html</a><br>　　哦哦，上面提到的博文也贴出了博主自行实现的python代码，本人因为初学无法评价，如有兴趣可以去看看。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import mathclass node:    #结点类，用以构成网络    def __init__(self,w1=None,w2=None):</span><br><span class="line">        self.value=0; #数值，存储结点最后的状态，对应到文章示例为X1，Y1等值</span><br><span class="line">        self.W=[w1,w2]; #结点到下一层的权值class net:    #网络类，描述神经网络的结构并实现前向传播以及后向传播    #这里为文章示例中的三层网络，每层结点均为两个    def __init__(self):        #初始化函数，将权重，偏置等值全部初始化为博文示例的数值</span><br><span class="line">        self.inlayer =[node(0.15,0.25),node(0.20,0.30)]; #输入层结点</span><br><span class="line">        self.hidlayer=[node(0.40,0.50),node(0.45,0.55)]; #隐含层结点</span><br><span class="line">        self.outlayer=[node(),node()];                   #输出层结点</span><br><span class="line"></span><br><span class="line">        self.yita = 0.5;                                 #学习率η</span><br><span class="line">        self.k1=0.35;                                    #输入层偏置项权重</span><br><span class="line">        self.k2=0.60;                                    #隐含层偏置项权重</span><br><span class="line">        self.Tg=[0,0];                                   #训练目标</span><br><span class="line">        self.O=[0,0];                                    #网络实际输出    def sigmoid(self,z):        #激活函数        return 1 / (1 + math.exp(-z)) </span><br><span class="line"></span><br><span class="line">    def getLoss(self):        #损失函数        return ((self.O[0] -self.Tg[0])**2+ (self.O[1] - self.Tg[1])**2)/2;    def forwardPropagation(self,input1,input2):        #前向传播</span><br><span class="line">        self.inlayer[0].value = input1;</span><br><span class="line">        self.inlayer[1].value = input2;        for hNNum in range(0,2):             #算出隐含层结点的值</span><br><span class="line">            z = 0;            for iNNum in range(0,2):</span><br><span class="line">                z+=self.inlayer[iNNum].value*self.inlayer[iNNum].W[hNNum];            #加上偏置项</span><br><span class="line">            z+= self.k1;</span><br><span class="line">            self.hidlayer[hNNum].value = self.sigmoid(z);        for oNNum in range(0,2):            #算出输出层结点的值</span><br><span class="line">            z = 0;            for hNNum in range(0,2):</span><br><span class="line">                z += self.hidlayer[hNNum].value* self.hidlayer[hNNum].W[oNNum];</span><br><span class="line">            z += self.k2;</span><br><span class="line">            self.outlayer[oNNum].value = self.sigmoid(z);</span><br><span class="line">            self.O[oNNum] = self.sigmoid(z);    def backPropagation(self,T1,T2):        #反向传播，这里为了公式好看一点多写了一些变量作为中间值        #计算过程用到的公式在博文中已经推导过了，如果代码没看明白请看看博文 </span><br><span class="line">        self.Tg[0] = T1;</span><br><span class="line">        self.Tg[1] = T2;        for iNNum in range(0,2):            #更新输入层权重            for wnum in range(0,2):</span><br><span class="line">                y = self.hidlayer[wnum].value;</span><br><span class="line">                self.inlayer[iNNum].W[wnum] -= self.yita*((self.O[0] - self.Tg[0])*self.O[0] *(1- self.O[0])*\</span><br><span class="line">                    self.hidlayer[wnum].W[0] +(self.O[1] - self.Tg[1])*self.O[1] *(1 - self.O[1])*\</span><br><span class="line">                    self.hidlayer[wnum].W[1])*y*(1- y)*self.inlayer[iNNum].value;        for hNNum in range(0,2):            #更新隐含层权重            for wnum in range(0,2):</span><br><span class="line">                self.hidlayer[hNNum].W[wnum]-= self.yita*(self.O[wnum] - self.Tg[wnum])*self.O[wnum]*\</span><br><span class="line">                    (1- self.O[wnum])*self.hidlayer[hNNum].value;    def printresual(self):        #信息打印</span><br><span class="line">        loss = self.getLoss();</span><br><span class="line">        print(&quot;loss&quot;,loss);</span><br><span class="line">        print(&quot;输出1&quot;,self.O[0]);</span><br><span class="line">        print(&quot;输出2&quot;,self.O[1]);#主程序mnet=net();for n in range(0,20000):</span><br><span class="line">    mnet.forwardPropagation(0.05, 0.1);</span><br><span class="line">    mnet.backPropagation(0.01, 0.99);    if (n%1000==0):</span><br><span class="line">        mnet.printresual();</span><br></pre></td></tr></table></figure>
<h2 id="pytorch的CPU实现"><a href="#pytorch的CPU实现" class="headerlink" title="pytorch的CPU实现"></a><strong>pytorch的CPU实现</strong></h2><hr>
<p>　　用pytorch实现的时候并没有用文章示例中给的参数进行初始化，因为那样很麻烦，而且也并不重要，因此用自带函数初始化了参数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import timeimport torchimport torch.nn as nnfrom torch.autograd import Variableclass Net(nn.Module):    def __init__(self):        #定义Net的初始化函数，这个函数定义了该神经网络的基本结构</span><br><span class="line">        super(Net, self).__init__() #复制并使用Net的父类的初始化方法，即先运行nn.Module的初始化函数</span><br><span class="line">        self.intohid_layer = nn.Linear(2, 2); #定义输入层到隐含层的连结关系函数</span><br><span class="line">        self.hidtoout_layer = nn.Linear(2, 2);#定义隐含层到输出层的连结关系函数    def forward(self, input):        #定义该神经网络的向前传播函数，该函数必须定义，一旦定义成功，向后传播函数也会自动生成</span><br><span class="line">        x = torch.nn.functional.sigmoid(self.intohid_layer(input))    #输入input在输入层经过经过加权和与激活函数后到达隐含层</span><br><span class="line">        x = torch.nn.functional.sigmoid(self.hidtoout_layer(x))       #类似上面        return x</span><br><span class="line"></span><br><span class="line">mnet = Net()</span><br><span class="line">target=Variable(torch.FloatTensor([0.01, 0.99]));   #目标输出input=Variable(torch.FloatTensor([0.05, 0.01]));    #输入loss_fn = torch.nn.MSELoss();                       #损失函数定义，可修改optimizer = torch.optim.SGD(mnet.parameters(), lr=0.5, momentum=0.9);</span><br><span class="line"></span><br><span class="line">start = time.time()for t in range(0,5000):</span><br><span class="line">    optimizer.zero_grad();      #清空节点值</span><br><span class="line">    out=mnet(input);            #前向传播</span><br><span class="line">    loss = loss_fn(out,target); #损失计算</span><br><span class="line">    loss.backward();            #后向传播</span><br><span class="line">    optimizer.step();           #更新权值    if (t%1000==0):</span><br><span class="line">        print(out);</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line">print(end - start)</span><br></pre></td></tr></table></figure>
<p>　　现成的架构实现起来就是简单，代码量呈指数下降，上面的代码运行要8s左右，下面试试看用GPU的要多久。</p>
<h2 id="pytorch的GPU实现"><a href="#pytorch的GPU实现" class="headerlink" title="pytorch的GPU实现"></a><strong>pytorch的GPU实现</strong></h2><hr>
<p>　　看现有的资料pytorch使用GPU非常简单，只需要在数据和模型后面加上“.cuda()”即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import timeimport torchimport torch.nn as nnfrom torch.autograd import Variableclass Net(nn.Module):    def __init__(self):        #定义Net的初始化函数，这个函数定义了该神经网络的基本结构</span><br><span class="line">        super(Net, self).__init__() #复制并使用Net的父类的初始化方法，即先运行nn.Module的初始化函数</span><br><span class="line">        self.intohid_layer = nn.Linear(2, 2); #定义输入层到隐含层的连结关系函数</span><br><span class="line">        self.hidtoout_layer = nn.Linear(2, 2);#定义隐含层到输出层的连结关系函数    def forward(self, input):        #定义该神经网络的向前传播函数，该函数必须定义，一旦定义成功，向后传播函数也会自动生成</span><br><span class="line">        x = torch.nn.functional.sigmoid(self.intohid_layer(input))    #输入input在输入层经过经过加权和与激活函数后到达隐含层</span><br><span class="line">        x = torch.nn.functional.sigmoid(self.hidtoout_layer(x))       #类似上面        return x</span><br><span class="line"></span><br><span class="line">mnet = Net().cuda()</span><br><span class="line">target=Variable(torch.cuda.FloatTensor([0.01, 0.99]));   #目标输出input=Variable(torch.cuda.FloatTensor([0.05, 0.01]));    #输入loss_fn = torch.nn.MSELoss();                            #损失函数定义，可修改optimizer = torch.optim.SGD(mnet.parameters(), lr=0.5, momentum=0.9);</span><br><span class="line"></span><br><span class="line">start = time.time()for t in range(0,5000):</span><br><span class="line">    optimizer.zero_grad();      #清空节点值</span><br><span class="line">    out=mnet(input);            #前向传播</span><br><span class="line">    loss = loss_fn(out,target); #损失计算</span><br><span class="line">    loss.backward();            #后向传播</span><br><span class="line">    optimizer.step();           #更新权值print(out.cpu());</span><br><span class="line">end = time.time()</span><br><span class="line">print(end - start)</span><br></pre></td></tr></table></figure>
<p>　　上面的代码运行时间是11s左右，比CPU版本的慢，这个比较合理，因为网络比较小，GPU单线程性能又不如CPU，因此有此结果，随着网络不断的复杂，可以想想这个情况会逐渐不一样。</p>
<p>　　最后再预告下下篇文章，<a href="https://aichn.cn/post/ee239b41.html">深度学习2—任意结点数的三层全连接神经网络</a><br>　　<br>　　另外写文章累人，写代码掉头发，写这篇就大概写了两个星期。。。加个打赏好啦，如果觉得文章有帮助，哈哈哈</p>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>-神经网络 -人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习2---任意结点数的三层全连接神经网络</title>
    <url>/post/ee239b41.html</url>
    <content><![CDATA[<p>上一篇文章：<a href="https://aichn.cn/post/74e51a6a.html">深度学习1—最简单的全连接神经网络</a>　<br>　　我们完成了一个三层（输入+隐含+输出）且每层都具有两个节点的全连接神经网络的原理分析和代码编写。本篇文章将进一步探讨如何把每层固定的两个节点变成任意个节点，以方便我们下一篇文章用本篇文章完成的网络来训练手写字符集“mnist”。<br>　　对于前向传播，基本上没有什么变化，就不用说了。主要看看后向传播的梯度下降公式。先放上上篇文章的网络图。<br><img src="/../images/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A02---%E4%BB%BB%E6%84%8F%E7%BB%93%E7%82%B9%E6%95%B0%E7%9A%84%E4%B8%89%E5%B1%82%E5%85%A8%E8%BF%9E%E6%8E%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/20180928134419558" alt="在这里插入图片描述"><br>　　上篇文章我们推知，含有两个节点的隐含层到输出层的权值对误差的偏导数，公式如下：<br>　<br>$$<br>　\frac{\partial E_{总}}{\partial W_{11}^{(２)}}=(O_{1}-T_{1})*O_{1}(1-O_{1})*Y_{1}<br>$$<br>　　而含有两个节点的输入层到隐含层的权值对于误差梯度的偏导数公式如下：<br>　　<br>$$<br>\frac{\partial E_{总}}{\partial W_{11}^{(1)}}=((O_{1}-T_{1})*O_{1}(1-O_{1})*W_{11}^{(2)}+(O_{2}-T_{2})*O_{2}(1-O_{2})*W_{21}^{(2)})*Y_{1}(1-Y_{1})*X_{1}<br>$$<br>　　现在我们来总结规律，先看第一道公式：<br>　　<br>$$<br>W_{11}^{(2)}<br>$$<br>位于输出层第一个结点的后方，与隐含层第一个结点相连接，其对总误差求偏导的式子结果也只与这两个节点的相关参数有关，与输入层、隐含层的第二个节点、输出层的第二个节点均无关。因此，也可以说，无论各层的节点数怎么样变化，隐含层到输出层的权值只与它连接的两个节点的参数相关。上式可以写成：<br>　　<br>$$<br>\frac{\partial E_{总}}{\partial W_{xy}^{(2)}}=(O_{x}-T_{x})*O_{x}(1-O_{x})*Y_{y}<br>$$<br>　　再看第二道公式：<br>　　<br>$$<br>W_{11}^{(1)}<br>$$<br>位于隐含层第一个节点的后方，与输入层第一个节点相连接，第一个隐含层节点又与输出层所有节点相连接。公式中出现的项与上面描述到的节点相关，因此如果输出层节点增加，则表达式需要增加对增加节点的计算。而隐含层和输入层增加则无所谓。因此表达式可以写成：<br>　　<br>$$<br>\frac{\partial E_{总}}{\partial W_{xy}^{(1)}}=[\sum_{k=1}^{n}(O_{k}-T_{k})*O_{k}(1-O_{k})*W_{kx}^{(2)}]*Y_{x}(1-Y_{x})*X_{y}<br>$$<br>　　大功告成！规律总结完了，下面就只剩下写代码了。不得不承认，这一篇原理部分蛮少的，应该只能算是上一篇文章的补充。但从固定到任意还是挺重要的，因此独立出来写。<br>　　下面我们用代码来实现一个任意节点数（代码中取的输入层、隐含层、输出层分别为5、10、5个节点，当然你高兴的话可以随意改动）的三层全连接神经网络。</p>
<h2 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a><strong>C++实现</strong></h2><hr>
<p>直接上代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include&lt;ctime&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">#define IPNNUM 5     //输入层节点数</span><br><span class="line">#define HDNNUM 10    //隐含层节点数</span><br><span class="line">#define OPNNUM 5     //输出层节点数</span><br><span class="line"></span><br><span class="line">//结点类，用以构成网络</span><br><span class="line">class node </span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">	double value; //数值，存储结点最后的状态</span><br><span class="line">	double *W=NULL;    //结点到下一层的权值</span><br><span class="line"></span><br><span class="line">	void initNode(int num);//初始化函数，必须调用以初始化权值个数</span><br><span class="line">	~node();	  //析构函数，释放掉权值占用内存</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void node::initNode(int num)</span><br><span class="line">&#123;</span><br><span class="line">	W = new double[num];</span><br><span class="line">	srand((unsigned)time(NULL));</span><br><span class="line">	for (size_t i = 0; i &lt; num; i++)//给权值赋一个随机值</span><br><span class="line">	&#123;</span><br><span class="line">		W[i]= (rand() % 100)/(double)100;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node::~node()</span><br><span class="line">&#123;</span><br><span class="line">	if (W!=NULL)</span><br><span class="line">	&#123;</span><br><span class="line">		delete[]W;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//网络类，描述神经网络的结构并实现前向传播以及后向传播</span><br><span class="line">class net </span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">	node inlayer[IPNNUM]; //输入层</span><br><span class="line">	node hidlayer[HDNNUM];//隐含层</span><br><span class="line">	node outlayer[OPNNUM];//输出层</span><br><span class="line"></span><br><span class="line">	double yita = 0.1;//学习率η</span><br><span class="line">	double k1;//输入层偏置项权重</span><br><span class="line">	double k2;//隐含层偏置项权重</span><br><span class="line">	double Tg[OPNNUM];//训练目标</span><br><span class="line">	double O[OPNNUM];//网络实际输出</span><br><span class="line"></span><br><span class="line">	net();//构造函数，用于初始化各层和偏置项权重</span><br><span class="line">	double sigmoid(double z);//激活函数</span><br><span class="line">	double getLoss();//损失函数，输入为目标值</span><br><span class="line">	void forwardPropagation(double *input);//前向传播,输入为输入层节点的值</span><br><span class="line">	void backPropagation(double *T);//反向传播，输入为目标输出值</span><br><span class="line">	void printresual(int trainingTimes);//打印信息</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">net::net()</span><br><span class="line">&#123;</span><br><span class="line">	//初始化输入层和隐含层偏置项权值，给一个随机值</span><br><span class="line">	srand((unsigned)time(NULL));</span><br><span class="line">	k1= (rand() % 100) / (double)100;</span><br><span class="line">	k2 = (rand() % 100) / (double)100;</span><br><span class="line">	//初始化输入层到隐含层节点个数</span><br><span class="line">	for (size_t i = 0; i &lt; IPNNUM; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		inlayer[i].initNode(HDNNUM);</span><br><span class="line">	&#125;</span><br><span class="line">	//初始化隐含层到输出层节点个数</span><br><span class="line">	for (size_t i = 0; i &lt; HDNNUM; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		hidlayer[i].initNode(OPNNUM);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">//激活函数</span><br><span class="line">double net::sigmoid(double z)</span><br><span class="line">&#123;</span><br><span class="line">	return 1/(1+ exp(-z));</span><br><span class="line">&#125;</span><br><span class="line">//损失函数</span><br><span class="line">double net::getLoss()</span><br><span class="line">&#123;</span><br><span class="line">	double mloss = 0;</span><br><span class="line">	for (size_t i = 0; i &lt; OPNNUM; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		mloss += pow(O[i] - Tg[i], 2);</span><br><span class="line">	&#125;</span><br><span class="line">	return mloss / OPNNUM;</span><br><span class="line">&#125;</span><br><span class="line">//前向传播</span><br><span class="line">void net::forwardPropagation(double *input)</span><br><span class="line">&#123;</span><br><span class="line">	for (size_t iNNum = 0; iNNum &lt; IPNNUM; iNNum++)//输入层节点赋值</span><br><span class="line">	&#123;</span><br><span class="line">		inlayer[iNNum].value = input[iNNum];</span><br><span class="line">	&#125;</span><br><span class="line">	for (size_t hNNum = 0; hNNum &lt; HDNNUM; hNNum++)//算出隐含层结点的值</span><br><span class="line">	&#123;</span><br><span class="line">		double z = 0;</span><br><span class="line">		for (size_t iNNum = 0; iNNum &lt; IPNNUM; iNNum++)</span><br><span class="line">		&#123;</span><br><span class="line">			z+= inlayer[iNNum].value*inlayer[iNNum].W[hNNum];</span><br><span class="line">		&#125;</span><br><span class="line">		z+= k1;//加上偏置项</span><br><span class="line">		hidlayer[hNNum].value = sigmoid(z);</span><br><span class="line">	&#125;</span><br><span class="line">	for (size_t oNNum = 0; oNNum &lt; OPNNUM; oNNum++)//算出输出层结点的值</span><br><span class="line">	&#123;</span><br><span class="line">		double z = 0;</span><br><span class="line">		for (size_t hNNum = 0; hNNum &lt; HDNNUM; hNNum++)</span><br><span class="line">		&#123;</span><br><span class="line">			z += hidlayer[hNNum].value*hidlayer[hNNum].W[oNNum];</span><br><span class="line">		&#125;</span><br><span class="line">		z += k2;//加上偏置项</span><br><span class="line">		O[oNNum] = outlayer[oNNum].value = sigmoid(z);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">//反向传播，这里为了公式好看一点多写了一些变量作为中间值</span><br><span class="line">//计算过程用到的公式在博文中已经推导过了，如果代码没看明白请看看博文</span><br><span class="line">void net::backPropagation(double *T)</span><br><span class="line">&#123;	</span><br><span class="line">	for (size_t i = 0; i &lt; OPNNUM; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Tg[i] = T[i];</span><br><span class="line">	&#125;</span><br><span class="line">	for (size_t iNNum = 0; iNNum &lt; IPNNUM; iNNum++)//更新输入层权重</span><br><span class="line">	&#123;</span><br><span class="line">		for (size_t hNNum = 0; hNNum &lt; HDNNUM; hNNum++)</span><br><span class="line">		&#123;</span><br><span class="line">			double y = hidlayer[hNNum].value;</span><br><span class="line">			double loss = 0;</span><br><span class="line">			for (size_t oNNum = 0; oNNum &lt; OPNNUM; oNNum++)</span><br><span class="line">			&#123;</span><br><span class="line">				loss += (O[oNNum] - Tg[oNNum])*O[oNNum] * (1 - O[oNNum])*hidlayer[hNNum].W[oNNum];</span><br><span class="line">			&#125;</span><br><span class="line">			inlayer[iNNum].W[hNNum] -= yita*loss*y*(1 - y)*inlayer[iNNum].value;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	for (size_t hNNum = 0; hNNum &lt; HDNNUM; hNNum++)//更新隐含层权重</span><br><span class="line">	&#123;</span><br><span class="line">		for (size_t oNNum = 0; oNNum &lt; OPNNUM; oNNum++)</span><br><span class="line">		&#123;</span><br><span class="line">			hidlayer[hNNum].W[oNNum]-= yita*(O[oNNum] - Tg[oNNum])*</span><br><span class="line">				O[oNNum] *(1- O[oNNum])*hidlayer[hNNum].value;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void net::printresual(int trainingTimes)</span><br><span class="line">&#123;</span><br><span class="line">	double loss = getLoss();</span><br><span class="line">	cout &lt;&lt; &quot;训练次数：&quot; &lt;&lt; trainingTimes &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; &quot;loss：&quot; &lt;&lt; loss &lt;&lt; endl;</span><br><span class="line">	for (size_t oNNum = 0; oNNum &lt; OPNNUM; oNNum++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; &quot;输出&quot; &lt;&lt; oNNum+1&lt;&lt; &quot;：&quot; &lt;&lt; O[oNNum] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">	net mnet;</span><br><span class="line">	double minput[IPNNUM] = &#123; 0.1, 0.2, 0.3, 0.4, 0.5 &#125;;</span><br><span class="line">	double mtarget[IPNNUM] = &#123; 0.2, 0.4, 0.6, 0.8, 1 &#125;;</span><br><span class="line">	for (size_t i = 0; i &lt; 10000; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		mnet.forwardPropagation(minput);//前向传播</span><br><span class="line">		mnet.backPropagation(mtarget);//反向传播</span><br><span class="line">		if (i%1000==0)</span><br><span class="line">		&#123;</span><br><span class="line">			mnet.printresual(i);//信息打印</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="python实现"><a href="#python实现" class="headerlink" title="python实现"></a><strong>python实现</strong></h2><hr>
<p>直接上代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import math</span><br><span class="line">import random</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">IPNNUM=5     #输入层节点数</span><br><span class="line">HDNNUM=10    #隐含层节点数</span><br><span class="line">OPNNUM=3     #输出层节点数</span><br><span class="line"></span><br><span class="line">class node:</span><br><span class="line">    #结点类，用以构成网络</span><br><span class="line">    def __init__(self,connectNum=0):</span><br><span class="line">        self.value=0 #数值，存储结点最后的状态，对应到文章示例为X1，Y1等值</span><br><span class="line">        self.W = (2*np.random.random_sample(connectNum)-1)*0.01</span><br><span class="line"></span><br><span class="line">class net:</span><br><span class="line">    #网络类，描述神经网络的结构并实现前向传播以及后向传播</span><br><span class="line">    def __init__(self):</span><br><span class="line">        #初始化函数，用于初始化各层间节点和偏置项权重</span><br><span class="line">        #输入层结点</span><br><span class="line">        self.inlayer=[node(HDNNUM)];</span><br><span class="line">        for obj in range(1, IPNNUM):</span><br><span class="line">            self.inlayer.append(node(HDNNUM)) </span><br><span class="line">        #隐含层结点</span><br><span class="line">        self.hidlayer=[node(OPNNUM)];</span><br><span class="line">        for obj in range(1, HDNNUM):</span><br><span class="line">            self.hidlayer.append(node(OPNNUM))             </span><br><span class="line">        #输出层结点</span><br><span class="line">        self.outlayer=[node(0)];</span><br><span class="line">        for obj in range(1, OPNNUM):</span><br><span class="line">            self.outlayer=[node(0)]                 </span><br><span class="line"></span><br><span class="line">        self.yita = 0.1                                           #学习率η</span><br><span class="line">        self.k1=random.random()                       #输入层偏置项权重</span><br><span class="line">        self.k2=random.random()                       #隐含层偏置项权重</span><br><span class="line">        self.Tg=np.zeros(OPNNUM)                   #训练目标</span><br><span class="line">        self.O=np.zeros(OPNNUM)                     #网络实际输出</span><br><span class="line"></span><br><span class="line">    def sigmoid(self,z):</span><br><span class="line">        #激活函数</span><br><span class="line">        return 1 / (1 + math.exp(-z))</span><br><span class="line"></span><br><span class="line">    def getLoss(self):</span><br><span class="line">        #损失函数</span><br><span class="line">        loss=0</span><br><span class="line">        for num in range(0, OPNNUM):</span><br><span class="line">            loss+=pow(self.O[num] -self.Tg[num],2)</span><br><span class="line">        return loss/OPNNUM</span><br><span class="line"></span><br><span class="line">    def forwardPropagation(self,input):</span><br><span class="line">        #前向传播</span><br><span class="line">        for i in range(0, IPNNUM):</span><br><span class="line">            #输入层节点赋值</span><br><span class="line">            self.inlayer[i].value = input[i]</span><br><span class="line">        for hNNum in range(0,HDNNUM):</span><br><span class="line">             #算出隐含层结点的值</span><br><span class="line">            z = 0</span><br><span class="line">            for iNNum in range(0,IPNNUM):</span><br><span class="line">                z+=self.inlayer[iNNum].value*self.inlayer[iNNum].W[hNNum]</span><br><span class="line">            #加上偏置项</span><br><span class="line">            z+= self.k1</span><br><span class="line">            self.hidlayer[hNNum].value = self.sigmoid(z)</span><br><span class="line">        for oNNum in range(0,OPNNUM):</span><br><span class="line">            #算出输出层结点的值</span><br><span class="line">            z = 0</span><br><span class="line">            for hNNum in range(0,HDNNUM):</span><br><span class="line">                z += self.hidlayer[hNNum].value* self.hidlayer[hNNum].W[oNNum]</span><br><span class="line">            z += self.k2</span><br><span class="line">            self.O[oNNum] = self.sigmoid(z)</span><br><span class="line"></span><br><span class="line">    def backPropagation(self,T):</span><br><span class="line">        #反向传播，这里为了公式好看一点多写了一些变量作为中间值</span><br><span class="line">        for num in range(0, OPNNUM):</span><br><span class="line">            self.Tg[num] = T[num]</span><br><span class="line">        for iNNum in range(0,IPNNUM):</span><br><span class="line">            #更新输入层权重</span><br><span class="line">            for hNNum in range(0,HDNNUM):</span><br><span class="line">                y = self.hidlayer[hNNum].value</span><br><span class="line">                loss = 0</span><br><span class="line">                for oNNum in range(0, OPNNUM):</span><br><span class="line">                    loss+=(self.O[oNNum] - self.Tg[oNNum])*self.O[oNNum] * (1 - self.O[oNNum])*self.hidlayer[hNNum].W[oNNum]</span><br><span class="line">                self.inlayer[iNNum].W[hNNum] -= self.yita*loss*y*(1- y)*self.inlayer[iNNum].value</span><br><span class="line">        for hNNum in range(0,HDNNUM):</span><br><span class="line">            #更新隐含层权重</span><br><span class="line">            for oNNum in range(0,OPNNUM):</span><br><span class="line">                self.hidlayer[hNNum].W[oNNum]-= self.yita*(self.O[oNNum] - self.Tg[oNNum])*self.O[oNNum]*\</span><br><span class="line">                    (1- self.O[oNNum])*self.hidlayer[hNNum].value</span><br><span class="line"></span><br><span class="line">    def printresual(self,trainingTimes):</span><br><span class="line">        #信息打印</span><br><span class="line">        loss = self.getLoss()</span><br><span class="line">        print(&quot;训练次数：&quot;, trainingTimes)</span><br><span class="line">        print(&quot;loss&quot;,loss)</span><br><span class="line">        for oNNum in range(0,OPNNUM):</span><br><span class="line">            print(&quot;输出&quot;,oNNum,&quot;:&quot;,self.O[oNNum])</span><br><span class="line"></span><br><span class="line">#主程序</span><br><span class="line">mnet=net()</span><br><span class="line">input=np.array([0.1,0.2,0.3,0.4,0.5])</span><br><span class="line">target=np.array([0.1,0.4,0.5])</span><br><span class="line"></span><br><span class="line">for n in range(0,1000):   </span><br><span class="line">    mnet.forwardPropagation(input)</span><br><span class="line">    mnet.backPropagation(target)</span><br><span class="line">    if (n%200==0):</span><br><span class="line">        mnet.printresual(n)</span><br></pre></td></tr></table></figure>
<h2 id="pytorch的CPU实现"><a href="#pytorch的CPU实现" class="headerlink" title="pytorch的CPU实现"></a><strong>pytorch的CPU实现</strong></h2><hr>
<p>其实pytorch本身就已经支持任意节点数，所以这里只是随意的改了下上一篇文章中代码的参数部分。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># coding=UTF-8</span><br><span class="line">import time</span><br><span class="line">import torch</span><br><span class="line">import torch.nn as nn</span><br><span class="line">from torch.autograd import Variable</span><br><span class="line"></span><br><span class="line">class Net(nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        #定义Net的初始化函数，这个函数定义了该神经网络的基本结构</span><br><span class="line">        super(Net, self).__init__() #复制并使用Net的父类的初始化方法，即先运行nn.Module的初始化函数</span><br><span class="line">        self.intohid_layer = nn.Linear(5, 10) #定义输入层到隐含层的连结关系函数</span><br><span class="line">        self.hidtoout_layer = nn.Linear(10, 5)#定义隐含层到输出层的连结关系函数</span><br><span class="line"></span><br><span class="line">    def forward(self, input):</span><br><span class="line">        #定义该神经网络的向前传播函数，该函数必须定义，一旦定义成功，向后传播函数也会自动生成</span><br><span class="line">        x = torch.nn.functional.sigmoid(self.intohid_layer(input))    #输入input在输入层经过经过加权和与激活函数后到达隐含层</span><br><span class="line">        x = torch.nn.functional.sigmoid(self.hidtoout_layer(x))       #类似上面</span><br><span class="line">        return x</span><br><span class="line"></span><br><span class="line">mnet = Net()</span><br><span class="line">target=Variable(torch.FloatTensor([0.2, 0.4, 0.6, 0.8, 1]))   #目标输出</span><br><span class="line">input=Variable(torch.FloatTensor([0.1, 0.2, 0.3, 0.4, 0.5]))    #输入</span><br><span class="line"></span><br><span class="line">loss_fn = torch.nn.MSELoss()                       #损失函数定义，可修改</span><br><span class="line">optimizer = torch.optim.SGD(mnet.parameters(), lr=0.5, momentum=0.9);</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line">for t in range(0,5000):</span><br><span class="line">    optimizer.zero_grad()      #清空节点值</span><br><span class="line">    out=mnet(input)            #前向传播</span><br><span class="line">    loss = loss_fn(out,target) #损失计算</span><br><span class="line">    loss.backward()            #后向传播</span><br><span class="line">    optimizer.step()           #更新权值</span><br><span class="line">    if (t%1000==0):</span><br><span class="line">        print(out)</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line">print(end - start)</span><br></pre></td></tr></table></figure>
<h2 id="pytorch的GPU实现"><a href="#pytorch的GPU实现" class="headerlink" title="pytorch的GPU实现"></a><strong>pytorch的GPU实现</strong></h2><hr>
<p>直接上代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># coding=UTF-8</span><br><span class="line">import time</span><br><span class="line">import torch</span><br><span class="line">import torch.nn as nn</span><br><span class="line">from torch.autograd import Variable</span><br><span class="line"></span><br><span class="line">class Net(nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        #定义Net的初始化函数，这个函数定义了该神经网络的基本结构</span><br><span class="line">        super(Net, self).__init__() #复制并使用Net的父类的初始化方法，即先运行nn.Module的初始化函数</span><br><span class="line">        self.intohid_layer = nn.Linear(5, 10) #定义输入层到隐含层的连结关系函数</span><br><span class="line">        self.hidtoout_layer = nn.Linear(10, 5)#定义隐含层到输出层的连结关系函数</span><br><span class="line"></span><br><span class="line">    def forward(self, input):</span><br><span class="line">        #定义该神经网络的向前传播函数，该函数必须定义，一旦定义成功，向后传播函数也会自动生成</span><br><span class="line">        x = torch.nn.functional.sigmoid(self.intohid_layer(input))    #输入input在输入层经过经过加权和与激活函数后到达隐含层</span><br><span class="line">        x = torch.nn.functional.sigmoid(self.hidtoout_layer(x))       #类似上面</span><br><span class="line">        return x</span><br><span class="line"></span><br><span class="line">mnet = Net().cuda()</span><br><span class="line">target=Variable(torch.cuda.FloatTensor([0.2, 0.4, 0.6, 0.8, 1]))   #目标输出</span><br><span class="line">input=Variable(torch.cuda.FloatTensor([0.1, 0.2, 0.3, 0.4, 0.5]))    #输入</span><br><span class="line"></span><br><span class="line">loss_fn = torch.nn.MSELoss()                       #损失函数定义，可修改</span><br><span class="line">optimizer = torch.optim.SGD(mnet.parameters(), lr=0.5, momentum=0.9);</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line">for t in range(0,5000):</span><br><span class="line">    optimizer.zero_grad()      #清空节点值</span><br><span class="line">    out=mnet(input)            #前向传播</span><br><span class="line">    loss = loss_fn(out,target) #损失计算</span><br><span class="line">    loss.backward()            #后向传播</span><br><span class="line">    optimizer.step()           #更新权值</span><br><span class="line">    if (t%1000==0):</span><br><span class="line">        print(out)</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line">print(end - start)</span><br></pre></td></tr></table></figure>
<p>到此就用代码实现了任意结点数的三层全连接神经网络，代码运行的结果都是对的，但相对来说pytorch收敛的快一些，可能跟其默认初始化的参数有关(自己写的代码都是用随机数初始化的)。<br>　　下一篇文章我们将用一个输入层、隐含层、输出层分别为784、100、10的三层全连接神经网络来训练闻名已久的MNIST手写数字字符集，然后自己手写一个数字来看看网络是否能比较给力的工作。<br>　　最后再预告下篇文章，<a href="https://aichn.cn/post/abc0fd31.html">深度学习3—用三层全连接神经网络训练MNIST手写数字字符集</a><br>　　另外写文章累人，写代码掉头发，如果觉得文章有帮助，哈哈哈</p>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>-神经网络 -人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>深入浅出--梯度下降法及其实现</title>
    <url>/post/e85f0a87.html</url>
    <content><![CDATA[<blockquote>
<ul>
<li>梯度下降的场景假设</li>
<li>梯度</li>
<li>梯度下降算法的数学解释</li>
<li>梯度下降算法的实例</li>
<li>梯度下降算法的实现</li>
<li>Further reading</li>
</ul>
</blockquote>
<p>本文将从一个下山的场景开始，先提出梯度下降算法的基本思想，进而从数学上解释梯度下降算法的原理，最后实现一个简单的梯度下降算法的实例！</p>
<h1 id="梯度下降的场景假设"><a href="#梯度下降的场景假设" class="headerlink" title="梯度下降的场景假设"></a>梯度下降的场景假设</h1><blockquote>
<p>梯度下降法的基本思想可以类比为一个下山的过程。假设这样一个场景：一个人被困在山上，需要从山上下来(i.e. 找到山的最低点，也就是山谷)。但此时山上的浓雾很大，导致可视度很低。因此，下山的路径就无法确定，他必须利用自己周围的信息去找到下山的路径。这个时候，他就可以利用梯度下降算法来帮助自己下山。具体来说就是，以他当前的所处的位置为基准，寻找这个位置最陡峭的地方，然后朝着山的高度下降的地方走，同理，如果我们的目标是上山，也就是爬到山顶，那么此时应该是朝着最陡峭的方向往上走。然后每走一段距离，都反复采用同一个方法，最后就能成功的抵达山谷。</p>
<p><img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-6ae594f795406b8b.png" alt="img"></p>
<p>image.png</p>
<p>我们同时可以假设这座山最陡峭的地方是无法通过肉眼立马观察出来的，而是需要一个复杂的工具来测量，同时，这个人此时正好拥有测量出最陡峭方向的能力。所以，此人每走一段距离，都需要一段时间来测量所在位置最陡峭的方向，这是比较耗时的。那么为了在太阳下山之前到达山底，就要尽可能的减少测量方向的次数。这是一个两难的选择，如果测量的频繁，可以保证下山的方向是绝对正确的，但又非常耗时，如果测量的过少，又有偏离轨道的风险。所以需要找到一个合适的测量方向的频率，来确保下山的方向不错误，同时又不至于耗时太多！</p>
</blockquote>
<h1 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h1><p>梯度下降的基本过程就和下山的场景很类似。</p>
<hr>
<p>首先，我们有一个可<a href="https://link.jianshu.com/?t=https://en.wikipedia.org/wiki/Differentiable_function"><em>微分</em></a>的函数。这个函数就代表着一座山。我们的目标就是找到这个函数的最小值，也就是山底。根据之前的场景假设，最快的下山的方式就是找到当前位置最陡峭的方向，然后沿着此方向向下走，对应到函数中，就是找到给定点的<a href="https://link.jianshu.com/?t=https://en.wikipedia.org/wiki/Gradient"><em>梯度</em></a> ，然后朝着梯度相反的方向，就能让函数值下降的最快！因为梯度的方向就是函数之变化最快的方向(在后面会详细解释)<br>所以，我们重复利用这个方法，反复求取梯度，最后就能到达局部的最小值，这就类似于我们下山的过程。而求取梯度就确定了最陡峭的方向，也就是场景中测量方向的手段。那么为什么梯度的方向就是最陡峭的方向呢？接下来，我们从微分开始讲起</p>
<h1 id="微分"><a href="#微分" class="headerlink" title="微分"></a>微分</h1><p>看待微分的意义，可以有不同的角度，最常用的两种是：</p>
<ul>
<li><p>函数图像中，某点的切线的斜率</p>
</li>
<li><p>函数的变化率</p>
<p>几个微分的例子：</p>
</li>
</ul>
<p>  <img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-0eb0f1bfd7de705b.png" alt="img"></p>
<p>  image.png</p>
<p>上面的例子都是单变量的微分，当一个函数有多个变量的时候，就有了多变量的微分，即分别对每个变量进行求微分</p>
<p><img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-4029977524e3b365.png" alt="img"></p>
<p>image.png</p>
<h1 id="梯度"><a href="#梯度" class="headerlink" title="梯度"></a>梯度</h1><p>梯度实际上就是多变量微分的一般化。<br>下面这个例子：</p>
<p><img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-570afdfc6fabf3b6.png" alt="img"></p>
<p>image.png</p>
<p>我们可以看到，梯度就是分别对每个变量进行微分，然后用逗号分割开，梯度是用&lt;&gt;包括起来，说明梯度其实一个向量。</p>
<p>梯度是微积分中一个很重要的概念，之前提到过梯度的意义</p>
<ul>
<li>在单变量的函数中，梯度其实就是函数的微分，代表着函数在某个给定点的切线的斜率</li>
<li>在多变量函数中，梯度是一个向量，向量有方向，梯度的方向就指出了函数在给定点的上升最快的方向</li>
</ul>
<p>这也就说明了为什么我们需要千方百计的求取梯度！我们需要到达山底，就需要在每一步观测到此时最陡峭的地方，梯度就恰巧告诉了我们这个方向。梯度的方向是函数在给定点上升最快的方向，那么梯度的反方向就是函数在给定点下降最快的方向，这正是我们所需要的。所以我们只要沿着梯度的方向一直走，就能走到局部的最低点！</p>
<p><img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-13d969531284a9f9.png" alt="img"></p>
<p>image.png</p>
<h1 id="梯度下降算法的数学解释"><a href="#梯度下降算法的数学解释" class="headerlink" title="梯度下降算法的数学解释"></a>梯度下降算法的数学解释</h1><p>上面我们花了大量的篇幅介绍梯度下降算法的基本思想和场景假设，以及梯度的概念和思想。下面我们就开始从数学上解释梯度下降算法的计算过程和思想！</p>
<p><img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-f20521a962005299.png" alt="img"></p>
<p>image.png</p>
<p>此公式的意义是：J是关于Θ的一个函数，我们当前所处的位置为Θ0点，要从这个点走到J的最小值点，也就是山底。首先我们先确定前进的方向，也就是梯度的反向，然后走一段距离的步长，也就是α，走完这个段步长，就到达了Θ1这个点！</p>
<p><img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-af8dd9722c762c13.png" alt="img"></p>
<p>image.png</p>
<p>下面就这个公式的几个常见的疑问：</p>
<ul>
<li>α是什么含义？<br>α在梯度下降算法中被称作为<strong>学习率</strong>或者<strong>步长</strong>，意味着我们可以通过α来控制每一步走的距离，以保证不要步子跨的太大扯着蛋，哈哈，其实就是不要走太快，错过了最低点。同时也要保证不要走的太慢，导致太阳下山了，还没有走到山下。所以α的选择在梯度下降法中往往是很重要的！α不能太大也不能太小，太小的话，可能导致迟迟走不到最低点，太大的话，会导致错过最低点！</li>
</ul>
<p><img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-ba3da0b06da97ddb.png" alt="img"></p>
<p>image.png</p>
<ul>
<li>为什么要梯度要乘以一个负号？<br>梯度前加一个负号，就意味着朝着梯度相反的方向前进！我们在前文提到，梯度的方向实际就是函数在此点上升最快的方向！而我们需要朝着下降最快的方向走，自然就是负的梯度的方向，所以此处需要加上负号</li>
</ul>
<h1 id="梯度下降算法的实例"><a href="#梯度下降算法的实例" class="headerlink" title="梯度下降算法的实例"></a>梯度下降算法的实例</h1><p>我们已经基本了解了梯度下降算法的计算过程，那么我们就来看几个梯度下降算法的小实例，首先从单变量的函数开始</p>
<h2 id="单变量函数的梯度下降"><a href="#单变量函数的梯度下降" class="headerlink" title="单变量函数的梯度下降"></a>单变量函数的梯度下降</h2><p>我们假设有一个单变量的函数</p>
<p><img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-abb73822fb6d2a2c.png" alt="img"></p>
<p>image.png</p>
<p>函数的微分</p>
<p><img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-66ce0cdcef5e2686.png" alt="img"></p>
<p>image.png</p>
<p>初始化，起点为</p>
<p><img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-8ee36cc5ce832b17.png" alt="img"></p>
<p>image.png</p>
<p>学习率为</p>
<p><img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-798b134107b6593d.png" alt="img"></p>
<p>image.png</p>
<p>根据梯度下降的计算公式</p>
<p><img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-f20521a962005299.png" alt="img"></p>
<p>image.png</p>
<p>我们开始进行梯度下降的迭代计算过程：</p>
<p><img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-57538d21dbb34e65.png" alt="img"></p>
<p>image.png</p>
<p>如图，经过四次的运算，也就是走了四步，基本就抵达了函数的最低点，也就是山底</p>
<p><img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-bb7fa36d116fcadc.png" alt="img"></p>
<p>image.png</p>
<h2 id="多变量函数的梯度下降"><a href="#多变量函数的梯度下降" class="headerlink" title="多变量函数的梯度下降"></a>多变量函数的梯度下降</h2><p>我们假设有一个目标函数</p>
<p><img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-a56cfde25c688859.png" alt="img"></p>
<p>image.png</p>
<p>现在要通过梯度下降法计算这个函数的最小值。我们通过观察就能发现最小值其实就是 (0，0)点。但是接下来，我们会从梯度下降算法开始一步步计算到这个最小值！<br>我们假设初始的起点为：</p>
<p><img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-8b1b6f1b200fd7b5.png" alt="img"></p>
<p>image.png</p>
<p>初始的学习率为：</p>
<p><img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-ccc1493848871074.png" alt="img"></p>
<p>image.png</p>
<p>函数的梯度为：</p>
<p><img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-3d744d9364a4ba40.png" alt="img"></p>
<p>image.png</p>
<p>进行多次迭代：</p>
<p><img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-b21bf64600c4e32f.png" alt="img"></p>
<p>image.png</p>
<p>我们发现，已经基本靠近函数的最小值点</p>
<p><img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-becdcdfdefb4eab7.png" alt="img"></p>
<p>image.png</p>
<h1 id="梯度下降算法的实现"><a href="#梯度下降算法的实现" class="headerlink" title="梯度下降算法的实现"></a>梯度下降算法的实现</h1><p>下面我们将用python实现一个简单的梯度下降算法。场景是一个简单的<a href="https://link.jianshu.com/?t=https://en.wikipedia.org/wiki/Linear_regression"><em>线性回归</em></a>的例子：假设现在我们有一系列的点，如下图所示</p>
<p><img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-333f16d34874c230.png" alt="img"></p>
<p>image.png</p>
<p>我们将用梯度下降法来拟合出这条直线！</p>
<p>首先，我们需要定义一个代价函数，在此我们选用<a href="https://link.jianshu.com/?t=https://en.wikipedia.org/wiki/Least_squares"><em>均方误差代价函数</em></a></p>
<p><img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-4e4000e69f05af7b.png" alt="img"></p>
<p>image.png</p>
<p>此公示中</p>
<ul>
<li><p>m是数据集中点的个数</p>
</li>
<li><p>½是一个常量，这样是为了在求梯度的时候，二次方乘下来就和这里的½抵消了，自然就没有多余的常数系数，方便后续的计算，同时对结果不会有影响</p>
</li>
<li><p>y 是数据集中每个点的真实y坐标的值</p>
</li>
<li><p>h 是我们的预测函数，根据每一个输入x，根据Θ 计算得到预测的y值，即</p>
</li>
</ul>
<p>  <img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-acea37db1e02004d.png" alt="img"></p>
<p>  image.png</p>
<p>我们可以根据代价函数看到，代价函数中的变量有两个，所以是一个多变量的梯度下降问题，求解出代价函数的梯度，也就是分别对两个变量进行微分</p>
<p><img src="/" alt="img"></p>
<p>image.png</p>
<p>明确了代价函数和梯度，以及预测的函数形式。我们就可以开始编写代码了。但在这之前，需要说明一点，就是为了方便代码的编写，我们会将所有的公式都转换为矩阵的形式，python中计算矩阵是非常方便的，同时代码也会变得非常的简洁。</p>
<p>为了转换为矩阵的计算，我们观察到预测函数的形式</p>
<p><img src="/" alt="img"></p>
<p>image.png</p>
<p>我们有两个变量，为了对这个公式进行矩阵化，我们可以给每一个点x增加一维，这一维的值固定为1，这一维将会乘到Θ0上。这样就方便我们统一矩阵化的计算</p>
<p><img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-a54d53411f945d95.png" alt="img"></p>
<p>image.png</p>
<p>然后我们将代价函数和梯度转化为矩阵向量相乘的形式</p>
<p><img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-66b04086dd1f8ba9.png" alt="img"></p>
<p>image.png</p>
<h2 id="coding-time"><a href="#coding-time" class="headerlink" title="coding time"></a>coding time</h2><p>首先，我们需要定义数据集和学习率</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as np# Size of the points dataset.m = 20# Points x-coordinate and dummy value (x0, x1).X0 = np.ones((m, 1))</span><br><span class="line">X1 = np.arange(1, m+1).reshape(m, 1)</span><br><span class="line">X = np.hstack((X0, X1))# Points y-coordinatey = np.array([    3, 4, 5, 5, 2, 4, 7, 8, 11, 8, 12,    11, 13, 13, 16, 17, 18, 17, 19, 21]).reshape(m, 1)# The Learning Rate alpha.alpha = 0.01</span><br></pre></td></tr></table></figure>
<p>接下来我们以矩阵向量的形式定义代价函数和代价函数的梯度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def error_function(theta, X, y):</span><br><span class="line">    &#x27;&#x27;&#x27;Error function J definition.&#x27;&#x27;&#x27;</span><br><span class="line">    diff = np.dot(X, theta) - y    return (1./2*m) * np.dot(np.transpose(diff), diff)def gradient_function(theta, X, y):</span><br><span class="line">    &#x27;&#x27;&#x27;Gradient of the function J definition.&#x27;&#x27;&#x27;</span><br><span class="line">    diff = np.dot(X, theta) - y    return (1./m) * np.dot(np.transpose(X), diff)</span><br></pre></td></tr></table></figure>
<p>最后就是算法的核心部分，梯度下降迭代计算</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def gradient_descent(X, y, alpha):</span><br><span class="line">    &#x27;&#x27;&#x27;Perform gradient descent.&#x27;&#x27;&#x27;</span><br><span class="line">    theta = np.array([1, 1]).reshape(2, 1)</span><br><span class="line">    gradient = gradient_function(theta, X, y)    while not np.all(np.absolute(gradient) &lt;= 1e-5):</span><br><span class="line">        theta = theta - alpha * gradient</span><br><span class="line">        gradient = gradient_function(theta, X, y)    return theta</span><br></pre></td></tr></table></figure>
<p>当梯度小于1e-5时，说明已经进入了比较平滑的状态，类似于山谷的状态，这时候再继续迭代效果也不大了，所以这个时候可以退出循环！</p>
<p>完整的代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as np# Size of the points dataset.m = 20# Points x-coordinate and dummy value (x0, x1).X0 = np.ones((m, 1))</span><br><span class="line">X1 = np.arange(1, m+1).reshape(m, 1)</span><br><span class="line">X = np.hstack((X0, X1))# Points y-coordinatey = np.array([    3, 4, 5, 5, 2, 4, 7, 8, 11, 8, 12,    11, 13, 13, 16, 17, 18, 17, 19, 21]).reshape(m, 1)# The Learning Rate alpha.alpha = 0.01def error_function(theta, X, y):</span><br><span class="line">    &#x27;&#x27;&#x27;Error function J definition.&#x27;&#x27;&#x27;</span><br><span class="line">    diff = np.dot(X, theta) - y    return (1./2*m) * np.dot(np.transpose(diff), diff)def gradient_function(theta, X, y):</span><br><span class="line">    &#x27;&#x27;&#x27;Gradient of the function J definition.&#x27;&#x27;&#x27;</span><br><span class="line">    diff = np.dot(X, theta) - y    return (1./m) * np.dot(np.transpose(X), diff)def gradient_descent(X, y, alpha):</span><br><span class="line">    &#x27;&#x27;&#x27;Perform gradient descent.&#x27;&#x27;&#x27;</span><br><span class="line">    theta = np.array([1, 1]).reshape(2, 1)</span><br><span class="line">    gradient = gradient_function(theta, X, y)    while not np.all(np.absolute(gradient) &lt;= 1e-5):</span><br><span class="line">        theta = theta - alpha * gradient</span><br><span class="line">        gradient = gradient_function(theta, X, y)    return theta</span><br><span class="line"></span><br><span class="line">optimal = gradient_descent(X, y, alpha)</span><br><span class="line">print(&#x27;optimal:&#x27;, optimal)</span><br><span class="line">print(&#x27;error function:&#x27;, error_function(optimal, X, y)[0,0])</span><br></pre></td></tr></table></figure>
<p>运行代码，计算得到的结果如下</p>
<p><img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-af64f7e8e5fb3dfb.png" alt="img"></p>
<p>image.png</p>
<p>所拟合出的直线如下</p>
<p><img src="/../images/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA--%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/1234352-27806efbd53ced41.png" alt="img"></p>
<p>image.png</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>至此，我们就基本介绍完了梯度下降法的基本思想和算法流程，并且用python实现了一个简单的梯度下降算法拟合直线的案例！<br>最后，我们回到文章开头所提出的场景假设:<br><strong>这个下山的人实际上就代表了<a href="https://link.jianshu.com/?t=https://en.wikipedia.org/wiki/Backpropagation">反向传播算法</a>，下山的路径其实就代表着算法中一直在寻找的参数Θ，山上当前点的最陡峭的方向实际上就是代价函数在这一点的梯度方向，场景中观测最陡峭方向所用的工具就是<a href="https://link.jianshu.com/?t=https://en.wikipedia.org/wiki/Derivative">微分</a> 。在下一次观测之前的时间就是有我们算法中的学习率α所定义的。</strong><br>可以看到场景假设和梯度下降算法很好的完成了对应！</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>-大数据 -人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>漫谈网络通信——从OSI网络模型到TCP/IP协议族</title>
    <url>/post/1184494b.html</url>
    <content><![CDATA[<h2 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h2><p>　　OSI(Open System Interconnection，开放系统互联)七层网络模型成为开放式系统互联参考模型，是一个把网络通信在逻辑上的定义，也可以理解成为定义了通用的网络通信规范。而我们的数据在网络中传输的过程，实际上就是如下图的封装和解封装的过程，发送方通过各种封装处理，把数据转换成比特流的形式，比特流在信号传输的硬件媒介中传输，接收方再把比特流进行解封装处理。</p>
<p><img src="/../images/%E6%BC%AB%E8%B0%88%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E2%80%94%E2%80%94%E4%BB%8EOSI%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%88%B0TCPIP%E5%8D%8F%E8%AE%AE%E6%97%8F/1061765-20161125200042800-2141541665.png" alt="img"> </p>
<p><strong>1.物理层</strong></p>
<p>　　<strong>规定了如何为网络通信实现最底层的物理连接，以及物理设备的机械、电气、功能和过程特性。</strong>如：如何使用电缆和接头的类型、用来传送信号的电压等。需要注意的是，网络通信过程中所需的物理媒介(网线、线缆等)，其实并不属于物理层，因为物理层实际上是一种规定，规定这些物理媒介设备在连接网络时的各种规格、参数以及工作方式。但是同时，双绞线、线缆等物理媒介又是物理层的实现。</p>
<p><strong>2.数据链路层</strong></p>
<p>　　<strong>规定了如何进行物理地址寻址、如何在物理线路上进行数据(帧frame)的可靠传递以及流量控制。</strong></p>
<p>　　数据链路层协议有SLIP协议、CSLIP协议、PPP协议等。交换机，对帧解码并根据帧中包含的信息把数据发送到正确的接收方，所以交换机是工作在数据链路层的。</p>
<p><strong>3.网络层</strong></p>
<p>　　<strong>规定了通过哪些网络节点、什么样的网络路径来将数据(数据包)从发送方发送到接收方。</strong>在网络层中，确定了从节点A发数据到节点B的网络路径，经过哪些节点。网络层既可以建立LAN通信系统，更主要的是可以在WAN网络系统中建立通信，这是因为它有自己的路由地址结构，通过路由协议(又称可路由协议)进行网络通信的路由工作。</p>
<p><strong>4.传输层</strong></p>
<p>　　<strong>负责总体的数据传输和数据控制，提供端到端的交换数据的机制。</strong>传输层对数据(段)进行分割和重组，并且进行流量控制和根据接收方的接收数据能力确定适当的传输速率。例如以太网无法处理大于1500字节的数据包，传输层将数据分割成数据片段，并对小数据片段进行序列编号。接收方的传输层将根据序列编号对数据进行重组。</p>
<p>　　传输层协议有TCP协议、UDP协议等。</p>
<p><strong>5.会话层</strong></p>
<p>　　<strong>在网络中的两个节点之间建立、维持和终止通信。</strong></p>
<p><strong>6.表示层</strong></p>
<p>　　<strong>在应用程序和网络之间对数据进行格式化，使之能够被另一方理解。</strong>即发送方的表示层将应用程序数据的抽象语法转换成网络适用于OSI网络传输的传送语法，接收方则相反。除此之外，表示层还可对数据进行加密与解密。</p>
<p><strong>7.应用层</strong></p>
<p>　　<strong>最顶层的OSI层，为应用程序提供网络服务。</strong>如为电子邮件、文件传输功能提供协议支持。</p>
<p>　　应用层协议有HTTP协议、FTP协议、SMTP协议等。</p>
<h2 id="什么是TCP-IP协议？"><a href="#什么是TCP-IP协议？" class="headerlink" title="什么是TCP/IP协议？"></a>什么是TCP/IP协议？</h2><p>　　TCP/IP协议定义了今天的电子设备如何连入internet网络，以及数据如何在他们之间传输的标准。在今天的基于TCP/IP的互联网诞生之前，能够使用接口通信处理实现互联互通的电脑并不多，而且大部分电脑之间信息的交换并不兼容。后来好几个牛逼哄哄的歪果仁开始捣鼓一些协议，能够让电脑之间进行通信。终于在1974年12月，Bob Kahn和Vinton G.Cerf带领的团队首先制定出了通过详细定义的TCP/IP协议标准。当时作了一个试验，将信息包通过点对点的卫星网络，再通过陆地电缆，再通过卫星网络，再由地面传输，贯串欧洲和美国，经过各种电脑系统，全程9.4万公里竟然没有丢失一个数据位，远距离的可靠数据传输证明了TCP/IP协议的成功。1983年1月1日，运行较长时期曾被人们习惯了的NCP被停止使用，TCP/IP协议作为因特网上所有主机间的共同协议，从此以后被作为一种必须遵守的规则被肯定和应用。（让我们为Bob Kahn和Vinton G.Cerf两位老爷爷撒花鼓掌吧👏👏👏）</p>
<p>　　从“TCP/IP”名字上来看，貌似这只是tcp协议和ip协议，但是实际上，这是很多协议(有人说有几百个协议，感觉待考证)的集合。由于知识广度和时间限制，将不对TCP/IP协议进行全面剖析，主要对其中比较重要的几个点进行阐述。</p>
<p>　　从概念上来讲，TCP/IP协议族则把7层网络模型合并成4层，其对应关系如下：</p>
<p>　　<img src="/../images/%E6%BC%AB%E8%B0%88%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E2%80%94%E2%80%94%E4%BB%8EOSI%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%88%B0TCPIP%E5%8D%8F%E8%AE%AE%E6%97%8F/1061765-20161127194411487-172064230.png" alt="img"></p>
<p>　　各层协议举例如下：</p>
<p>　　<img src="/../images/%E6%BC%AB%E8%B0%88%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E2%80%94%E2%80%94%E4%BB%8EOSI%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%88%B0TCPIP%E5%8D%8F%E8%AE%AE%E6%97%8F/1061765-20161208161042226-139297074.png" alt="img"></p>
<h2 id="TCP-IP——网络接口层"><a href="#TCP-IP——网络接口层" class="headerlink" title="TCP/IP——网络接口层"></a>TCP/IP——网络接口层</h2><p>　　<strong>主要作用一：数据封装/解封装成帧(frame)。</strong>为了保证可靠传输，网络层传过来的数据在这里被加工成了可被物理层传输的结构包——帧。帧中除了包括需要传输的数据外，还包括发送方和接收方的<strong>物理地址</strong>以及检错和控制信息。其中的物理地址确定了帧将发送到何处，检错和控制信息则是用来保证数据的无差错到达。数据帧结构如下(Address均为mac地址)：</p>
<p>　　　　<img src="/../images/%E6%BC%AB%E8%B0%88%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E2%80%94%E2%80%94%E4%BB%8EOSI%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%88%B0TCPIP%E5%8D%8F%E8%AE%AE%E6%97%8F/1061765-20161209103142351-268019127.png" alt="img"></p>
<p>　　<strong>主要作用二：控制帧传输。</strong>控制帧的传输主要体现在反馈重发、计时器、帧序号方面。接收方通过对帧的差错编码(奇偶校验码或 CRC 码)的检查，来判断帧在传输过程中是否出错，并向发送发进行反馈，如果传输发生差错，则需要重发纠正。作为发送发，如果在发送帧后，会同时启动定时器，如果帧发送后在一定时间内没有收到反馈，为了避免传输停滞不前，则在计时器Timeou后认为帧传输出错，自动重发。为了避免多次收到同一帧并将其递交给网络层的情况发生，则需要对每个发送的帧进行编号，接收方以此来判断该帧是否重复接受了。</p>
<p>　　<strong>主要作用三：流量控制。</strong>由于收发双方各自使用的设备工作速率和缓冲存储空间的差异，可能出现发送方的发送能力大于接收方接收能力的现象，此时若不对发送方的发送速率做适当的限制，前面来不及接收的帧将被后面不断发送来的帧“淹没”，从而造成帧的丢失而出错。由此可见，流量控制实际上是对发送方数据流量的控制，使其发送速率不超过接收方的速率。所以需要一些规则使得发送方知道在什么情况下可以接着发送下一帧，而在什么情况下必须暂停发送，以等待收到某种反馈信息后再继续发送。</p>
<h2 id="TCP-IP——网络层"><a href="#TCP-IP——网络层" class="headerlink" title="TCP/IP——网络层"></a>TCP/IP——网络层</h2><p>　　说到网络层不得不提的就是IP协议，它是TCP/IP协议族中最为核心的协议。所有的TCP、UDP、ICMP、IGMP协议数据都以IP数据报格式传输。IP协议提供的是不可靠的、无连接的数据报传输服务。不可靠是指IP协议不会保证数据报能否成功到达目的地，仅提供传输服务，传输出错，则会丢弃出错的数据报。无连接是指IP协议对数据报的处理是独立的，这也意味着接收方不一定会按照发送顺序接收数据报。</p>
<p><strong>IP数据报格式如下：</strong></p>
<p>　　　　<img src="/../images/%E6%BC%AB%E8%B0%88%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E2%80%94%E2%80%94%E4%BB%8EOSI%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%88%B0TCPIP%E5%8D%8F%E8%AE%AE%E6%97%8F/1061765-20161209104632866-706720294.png" alt="img"></p>
<p><strong>IP地址分类：</strong></p>
<p>　　<img src="/../images/%E6%BC%AB%E8%B0%88%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E2%80%94%E2%80%94%E4%BB%8EOSI%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%88%B0TCPIP%E5%8D%8F%E8%AE%AE%E6%97%8F/1061765-20161209114704288-2100256593.png" alt="img"></p>
<p>　　<img src="/../images/%E6%BC%AB%E8%B0%88%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E2%80%94%E2%80%94%E4%BB%8EOSI%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%88%B0TCPIP%E5%8D%8F%E8%AE%AE%E6%97%8F/1061765-20161209111532132-1543406608.png" alt="img"></p>
<p><strong>子网划分：</strong></p>
<p>　　一个有500台主机的网络，如果使用C类地址，则无法满足主机数量需求，使用B类地址则会造成IP地址的浪费。由此，需要在ABC类网络的基础上进行子网划分：即占用主机号的前几位表示子网号。子网掩码的概念由此被引入。</p>
<p>　　<img src="/../images/%E6%BC%AB%E8%B0%88%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E2%80%94%E2%80%94%E4%BB%8EOSI%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%88%B0TCPIP%E5%8D%8F%E8%AE%AE%E6%97%8F/1061765-20161209115838397-1820346421.png" alt="img"></p>
<p>　　子网掩码中的 1 标识了 IP 地址中相应的网络号，0 标识了主机号。将 IP 地址和子网掩码进行逻辑与运算 ，结果就能得到网络号和子网号。</p>
<p><strong>IP路由：</strong></p>
<p>　　如果发送方和接收方在直接点对点连接或者在一个共享网络上，那么IP数据报则可以直接送达。但多数情况下，两台主机互联，需要通过多台路由器，需要路由转发送达消息。这个路由的过程是怎样的呢？这里有个重要的角色——路由表。路由表是一张存储在内存中的记录路由信息的表，定义着到达特定网络终端的路径，在某些情况下，还有一些与这些路径相关的度量。路由表中保存的信息，则用来指导消息从发送方到达接受方的网络路由路径。Linux下查看路由表的命令是route -n，mac os查看路由表的命令是netstat -nr。</p>
<p>　　<img src="/../images/%E6%BC%AB%E8%B0%88%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E2%80%94%E2%80%94%E4%BB%8EOSI%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%88%B0TCPIP%E5%8D%8F%E8%AE%AE%E6%97%8F/1061765-20161209143711991-246353042.png" alt="img"></p>
<p>　　有了路由表，网络路径的确认过程则如下所示：</p>
<p>　　<img src="/../images/%E6%BC%AB%E8%B0%88%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E2%80%94%E2%80%94%E4%BB%8EOSI%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%88%B0TCPIP%E5%8D%8F%E8%AE%AE%E6%97%8F/1061765-20161209144715413-241953243.png" alt="img"></p>
<p>　　接收到数据报的路由器按照它自己的理由表进行继续转发，直到到达目的地址。而除了在路由寻址过程中失败会导致丢弃数据报之外，IP数据报的TTL(生命周期)被减为0，则该IP数据报也会被丢弃。</p>
<p>　　网络层还有几个比较重要的协议，ARP(Address Resolution Protocol地址解析协议)、ICMP(Internet Control Message Protocol报文控制协议)、IGMP(Internet Group Management Protocol组管理协议)，这里不做具体说明啦。</p>
<h2 id="TCP-IP——传输层"><a href="#TCP-IP——传输层" class="headerlink" title="TCP/IP——传输层"></a>TCP/IP——传输层</h2><p>　　无论参考OSI还是TCP/IP的网络模型，我们从传输层向更底层看，各层的协议都是在直接或间接的服务于主机与主机之间的通信，而传输层则是在进程与进程通信层面上的。传输层有两个重要的协议——TCP协议和UDP协议。不同的应用进程则使用不同的传输层协议。</p>
<p> 　<img src="/../images/%E6%BC%AB%E8%B0%88%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E2%80%94%E2%80%94%E4%BB%8EOSI%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%88%B0TCPIP%E5%8D%8F%E8%AE%AE%E6%97%8F/1061765-20161209165325585-1031551702.png" alt="img"></p>
<p>　　端口的作用则正是体现在传输层的。用来区分网络消息由主机上的那一个进程处理。端口号有 0～65535 的编号，其中0～1023为系统端口号。</p>
<p>　　<img src="/../images/%E6%BC%AB%E8%B0%88%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E2%80%94%E2%80%94%E4%BB%8EOSI%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%88%B0TCPIP%E5%8D%8F%E8%AE%AE%E6%97%8F/1061765-20161209165511679-2059357072.png" alt="img"></p>
<p><strong>UDP协议：</strong></p>
<p>　　UDP(User Datagram Protocol)即用户数据报协议，其传输机制决定了它的最大优点——快，同时也决定了它最大的缺点——不可靠、不稳定。</p>
<p>　　UDP是无连接的，发送数据之前不需要建立连接(TCP需要)。减少了开销和延时。</p>
<p>　　UDP是面向报文的，对IP数据报只做简单封装(8字节UDP报头)。减少报头开销。</p>
<p>　　UDP没有阻塞机制，宁愿阻塞时丢弃数据不传，也不阻塞造成延时。</p>
<p>　　UDP支持一对一、一对多、多对一、多对多通信。</p>
<p>　　　　</p>
<p>　　UDP报文结构：</p>
<p>　　　　<img src="/../images/%E6%BC%AB%E8%B0%88%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E2%80%94%E2%80%94%E4%BB%8EOSI%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%88%B0TCPIP%E5%8D%8F%E8%AE%AE%E6%97%8F/1061765-20161211140636694-1580349406.png" alt="img"></p>
<p><strong>TCP协议：</strong></p>
<p>　　TCP(Transmission Control Protocol)传输控制协议，相对于UDP，TCP是面向连接的、提供可靠的数据传输服务。同时也是较UDP开销较大的、传输速度较慢的。</p>
<p>　　TCP提供可靠的、面向连接的数据传输服务。使用TCP通信之前，需要进行“三次握手”建立连接，通信结束后还要使用“四次挥手”断开连接。</p>
<p>　　TCP是点对点的连接。一条TCP连接只能连接两个端点。</p>
<p>　　TCP 提供可靠传输，无差错、不丢失、不重复、按顺序。</p>
<p>　　TCP 提供全双工通信，允许通信双方任何时候都能发送数据，发送方设有发送缓存，接收方设有接收缓存。</p>
<p>　　TCP 面向字节流 。TCP 并不知道所传输的数据的含义，仅把数据看作一连串的字节序列，它也不保证接收方收到的数据块和发送方发出的数据块具有大小对应关系。</p>
<p>　　TCP报文结构：</p>
<p>　　<img src="/../images/%E6%BC%AB%E8%B0%88%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E2%80%94%E2%80%94%E4%BB%8EOSI%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%88%B0TCPIP%E5%8D%8F%E8%AE%AE%E6%97%8F/1061765-20161211202231726-826238063.png" alt="img"></p>
<p>　　TCP是面向字节流的，通过 TCP 传送的字节流中的每个字节都按顺序编号，而报头中的Sequence Number字段值则指的是本报文段数据的第一个字节的序号。Acknowledgment Number是期望收到对方下个报文段的第一个数据字节的序号。</p>
<p>　　Offset：占4位，指 TCP 报文段的报头长度，包括固定的20字节和TCP Options字段。</p>
<p>　　Reserved：占6位，保留为今后使用，目前为0。</p>
<p>　　TCP flags的C、E、U、A、P、R、S、F字段用来说明该报文的性质。意义如下： </p>
<p>　　　　C(CWR)和E(ECE)用来支持ECN(显示阻塞通告)。</p>
<p>　　　　U(URGENT)：当 URG=1时，它告诉系统此报文中有紧急数据，应优先传送(比如紧急关闭)，这要与紧急指针字段配合使用。</p>
<p>　　　　A(ACK)：仅当 ACK=1时确认号字段才有效。建立 TCP 连接后，所有报文段都必须把 ACK 字段置为 1。</p>
<p>　　　　P(PUSH)：若TCP连接的一端希望另一端立即响应，PSH字段便可以“催促”对方，不再等到缓存区填满才发送。</p>
<p>　　　　R(RESET)：若 TCP 连接出现严重差错，RST 置为 1，断开 TCP 连接，再重新建立连接。</p>
<p>　　　　S(SYN)：用于建立和释放连接，当SYN=1时，表示建立连接。</p>
<p>　　　　F(FIN)：用于释放连接，当 FIN=1，表明发送方已经发送完毕，要求释放TCP 连接。</p>
<p>　　Window：占2个字节。窗口值是指发送者自己的接收窗口大小，因为接收缓存的空间有限。 </p>
<p>　　CheckSum：占2个字节。和UDP报文一样，有一个检验和，用于检查报文是否在传输过程中出差错。</p>
<p>　　Urgent Pointer：占2字节。当URG=1时才有效，指出本报文段紧急数据的字节数。</p>
<p>　　TCP建立连接的三次握手：</p>
<p>　　<img src="/../images/%E6%BC%AB%E8%B0%88%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E2%80%94%E2%80%94%E4%BB%8EOSI%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%88%B0TCPIP%E5%8D%8F%E8%AE%AE%E6%97%8F/1061765-20161211174151304-1668168182.png" alt="img"></p>
<p>　　(1)Client首先向Server发送连接请求报文段，同步自己的seq(x)，Client进入SYN_SENT状态。</p>
<p>　　(2)Server收到Client的连接请求报文段，返回给Client自己的seq(y)以及ack(x+1)，Server进入SYN_REVD状态。</p>
<p>　　(3)Client收到Server的返回确认，再次向服务器发送确认报文段ack(y+1)，这个报文段已经可以携带数据了。Client进入ESTABLISHED状态。</p>
<p>　　(4)Server再次收到Client的确认信息后，进入ESTABLISHED状态。</p>
<p>　　TCP连接至此建立起来了。为什么要做三次握手呢？握手的过程实际上是在通知对方自己的初始化序号(Initial Sequence Number)，简称ISN，也就是上图中的x和y。x和y会被当作之后传输数据的一个依据，以保证TCP报文在传输过程中不会混乱。</p>
<p>　　我们回到TCP Header结构来看，Sequence Number和Acknowledgment Number都是占32位，所以seq和ack的取值范围是0 ～ 2^32-1。seq和ack每增加到2^32-1，则重新从0开始。值得一提的是，seq的初始值(ISN)并不是每次都从0开始的。我们设想一下，如果是从0开始，那么当TCP三次握手建立连接完成后，Client发送了30个报文，然后Client断线了。于是Client重连，再次用0作为初始的seq，这样就会出现两个报文具有相同的seq，就出现了混乱。事实上TCP的做法是每隔4微秒就对ISN做一次加1操作，当ISN到达2^32-1后再次从0开始的时候，已经过去了几个小时，之前的seq=0的报文已经不存在于这次连接中了，这样就避免了上面的问题。</p>
<p>　　</p>
<p>　　TCP断开连接的四次挥手：</p>
<p>　　<img src="/../images/%E6%BC%AB%E8%B0%88%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E2%80%94%E2%80%94%E4%BB%8EOSI%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%88%B0TCPIP%E5%8D%8F%E8%AE%AE%E6%97%8F/1061765-20161211181122866-333961282.png" alt="img"></p>
<p>　　(1)Client向Server发送断开连接请求的报文段，seq=m(m为Client最后一次向Server发送报文段的最后一个字节序号加1)，Client进入FIN-WAIT-1状态。</p>
<p>　　(2)Server收到断开报文段后，向Client发送确认报文段，seq=n(n为Server最后一次向Client发送报文段的最后一个字节序号加1)，ack=m+1，Server进入CLOSE-WAIT状态。此时这个TCP连接处于半开半闭状态，Server发送数据的话，Client仍然可以接收到。</p>
<p>　　(3)Server向Client发送断开确认报文段，seq=u(u为半开半闭状态下Server最后一次向Client发送报文段的最后一个字节序号加1)，ack=m+1，Server进入LAST-ACK状态。</p>
<p>　　(4)Client收到Server的断开确认报文段后，向Server发送确认断开报文，seq=m+1，ack=u+1，Client进入TIME-WAIT状态。</p>
<p>　　(5)Server收到Client的确认断开报文，进入CLOSED状态，断开了TCP连接。</p>
<p>　　(6)Client在TIME-WAIT状态等待一段时间(时间为2*MSL((Maximum Segment Life))，确认Client向Server发送的最后一次断开确认到达(如果没有到达，Server会重发步骤(3)中的断开确认报文段给Client，告诉Client你的最后一次确认断开没有收到)。如果Client在TIME-WAIT过程中没有再次收到Server的报文段，就进入CLOSES状态。TCP连接至此断开。</p>
<p>　　</p>
<p>　　TCP连接可靠性的体现：</p>
<p>　　(1)TCP报文段的长度可变，根据收发双方的缓存状态、网络状态而调整。</p>
<p>　　(2)当TCP收到发自TCP连接另一端的数据，它将发送一个确认。</p>
<p>　　(3)当TCP发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段，如果不能及时收到一个确认，将重发这个报文段。</p>
<p>　　(4)TCP将保持它首部和数据的检验和。如果通过检验和发现报文段有差错，这个报文段将被丢弃，等待超时重传。</p>
<p>　　(5)TCP将数据按字节排序，报文段中有序号，以确保顺序的正确性。</p>
<p>　　(6)TCP还能提供流量控制。TCP连接的每一方都有收发缓存。TCP的接收端只允许另一端发送接收端缓冲区所能接纳的数据。这将防止较快主机致使较慢主机的缓冲区溢出。</p>
<p>　　需要注意的是，TCP报文传输采用接受后返回确认的方式来保证报文传输的可靠性，并不是意味着发送方在发送一个报文段后就进入等待确认状态，让后面的报文段等着。也不是接收方在接收到一个报文后，对每一个报文都进行回复确认。</p>
<p>　　真实的情况是，对于发送方，在发送一个报文段后，复制一份该报文段的副本，然后继续进行下一个报文段的发送，如果没有得到发送方的回复确认，就对该报文段进行超时重发。对于接收方来说，则采用“积累确认”的方式进行回复。接收者收到多个连续的报文段后，只回复确认最后一个报文段，表示在这之前的数据都已收到。以此达到提升传输效率的目的。</p>
<p>　　TCP的流量控制和阻塞控制：</p>
<p>　　由于接收方缓存的限制，发送窗口不能大于接收方接收窗口。在报文段首部有一个字段就叫做窗口(rwnd)，这便是用于告诉对方自己的接收窗口，可见窗口的大小是可以变化的。　</p>
<p>　　<img src="/../images/%E6%BC%AB%E8%B0%88%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E2%80%94%E2%80%94%E4%BB%8EOSI%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%88%B0TCPIP%E5%8D%8F%E8%AE%AE%E6%97%8F/1061765-20161211194817054-1656684718.png" alt="img"></p>
<p>　　总结起来如上图，TCP的流量和阻塞控制采用“慢启动”、“加性增”、“乘性减”的策略。</p>
<p>　　慢启动：初始的窗口值很小，但是按指数规律渐渐增长，直到达到慢开始门限(ssthresh)。</p>
<p>　　加性增：窗口值达到慢开始门限后，每发送一个报文段，窗口值增加一个单位量。</p>
<p>　　乘性减：无论什么阶段，只要出现超时，则把窗口值减小一半。</p>
<h2 id="TCP-IP——应用层"><a href="#TCP-IP——应用层" class="headerlink" title="TCP/IP——应用层"></a>TCP/IP——应用层</h2><p> 　关于应用层协议，不同的应用或者具体来说同一种应用不同的需求，都会使用不同的应用层协议，作为互联网软件开发工程师，我们可能对应用层协议最为熟悉，这篇文章中将不再对应用层协议进行总结。</p>
<p>　　</p>
<p>　　</p>
<hr>
<p>　　写在最后：</p>
<p>　　　　实不相瞒，在写下这篇文章之前，文章中至少有一半的内容(😏甚至不止一半)是作者不完全掌握或者知其然不知其所以然的，本来想把文章题目叫做《深度分析….》，但是觉得技术文章动不动的“深度分析”可能只是相较于自己的知识层面的深度，而非真正客观意义上的深度技术分析，所以本着谦虚和严谨的态度把题目改成了《漫谈…》，想通过这种方式，对网络通信这一块做一个总结性的学习。讲真，这篇文章的部分内容 = 网络技术文章借鉴 + 个人理解，本人非专家，如有错误，欢迎斧正！</p>
]]></content>
      <categories>
        <category>网络通信</category>
      </categories>
      <tags>
        <tag>网络通信,OSI</tag>
      </tags>
  </entry>
  <entry>
    <title>源码分享</title>
    <url>/post/8461f8ca.html</url>
    <content><![CDATA[<p>老外做的中国汉字网站：<a href="https://hanziyuan.net/">https://hanziyuan.net/</a></p>
<p>LNMP一键安装包：<a href="https://lnmp.org/install.html">https://lnmp.org/install.html</a></p>
<p>斐讯PSG1208刷机大合集：<a href="https://pan.baidu.com/s/1ges68Jx#list/path=%2F">https://pan.baidu.com/s/1ges68Jx#list/path=%2F</a></p>
<p>蓝天主板BIOS下载更新：<a href="https://repo.palkeo.com/clevo-mirror/">https://repo.palkeo.com/clevo-mirror/</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>-其他</tag>
      </tags>
  </entry>
  <entry>
    <title>琴生(jensen)不等式</title>
    <url>/post/96895f36.html</url>
    <content><![CDATA[<p>在Gan生成对抗神经网络中会用到Jensen不等式，因此做下记录。</p>
<p>Jensen不等式告诉我们：如果f是在区间[a,b]上的凸函数（就是导数一直增长的函数，或者说是导数的导数大于0的函数），<em>x</em>是随机变量，那么有：<br>$$<br>E(f(x))≥f(E(x))<br>$$<br>也就是说函数f f<em>f</em>的期望大于等于期望的函数。</p>
<p>下面来看看怎么证明，我们假设<br>$$<br>x_{1}, x_{2}, \ldots \ldots x_{n}<br>$$<br>都是区间[a,b]内的数，且<br>$$<br>x_{1} \leq x_{2} \leq, \ldots \ldots x_{n}<br>$$<br>，则上式可以写成下面这个形式：<br>$$<br>a_{1} f\left(x_{1}\right)+a_{2} f\left(x_{2}\right)+\ldots \ldots+a_{n} f\left(x_{n}\right) \geq f\left(a_{1} x_{1}+a_{2} x_{2}+\ldots \ldots+a_{n} x_{n}\right)<br>$$<br>其中<br>$$<br>\sum_{i=1}^{n} a_{i}=1 \text { 且 } a_{i}&gt;0<br>$$<br>当n = 1时，式子显然成立。</p>
<p>当n = 2时，可以构造一个式子如下：<br>$$<br>F(x)=a_{1} f\left(x_{1}\right)+\left(1-a_{1}\right) f(x)-f\left(a_{1} x_{1}+\left(1-a_{1}\right) x\right)<br>$$<br>显然<br>$$<br>F(x_{1})=a_{1} f\left(x_{1}\right)+\left(1-a_{1}\right) f(x_{1})-f\left(a_{1} x_{1}+\left(1-a_{1}\right) x_{1}\right)=0<br>$$</p>
<p>$$<br>F^{\prime}(x)=\left(1-a_{1}\right) f^{\prime}(x)-f^{\prime}\left[a_{1} x_{1}+\left(1-a_{1}\right) x\right]\left(1-a_{1}\right)<br>$$</p>
<p>$$<br>=\left(1-a_{1}\right)\left(f^{\prime}(x)-f^{\prime}\left(a_{1}\left(x_{1}-x\right)+x\right)\right.<br>$$</p>
<p>由于是凸函数，当x&gt;x1的时候，a 1 ( x 1 − x ) + x ， 故F ′ ( x ) &gt; 0 </p>
<p>等式成立。</p>
<p>假设n = k 的时候等式成立，即<br>$$<br>a_{1} f\left(x_{1}\right)+a_{2} f\left(x_{2}\right)+\ldots \ldots+a_{k} f\left(x_{k}\right) \geq f\left(a_{1} x_{1}+a_{2} x_{2}+\ldots \ldots+a_{k} x_{k}\right) \sum_{i=1}^{n} a_{i}=1 且 a_{i}&gt;0<br>$$</p>
<p>那么当n = k + 1 时，有<br>$$<br>\begin{array}{c}<br>a_{1} f\left(x_{1}\right)+a_{2} f\left(x_{2}\right)+\ldots \ldots+a_{k} f\left(x_{k}\right)+a_{k+1} f\left(x_{k+1}\right) \<br>=\left(1-a_{k+1}\right) \frac{1}{\left(1-a_{k+1}\right)}\left[a_{1} f\left(x_{1}\right)+a_{2} f\left(x_{2}\right)+\ldots \ldots+a_{k} f\left(x_{k}\right)\right]+a_{k+1} f\left(x_{k+1}\right)<br>\end{array}<br>$$<br>这里有<br>$$<br>\frac{1}{\left(1-a_{k+1}\right)} \sum_{i=1}^{n} a_{i}=1<br>$$<br>故上式<br>$$<br>\geq\left(1-a_{k+1}\right) f\left(\frac{a_{1} x_{1}+\ldots a_{k} x_{k}}{1-a_{k+1}}\right)+a_{k+1} f\left(x_{k+1}\right)<br>$$<br>刚刚好满足n = 2时的情况，有<br>$$<br>\geq f\left(a_{1} x_{1}+a_{2} x_{2}+\ldots \ldots+a_{k} x_{k}+a_{k+1} x_{k+1}\right)<br>$$<br>等式成立！而且从证明的过程我们也可以看出，等于号只有在<br>$$<br>x_{1}, x_{2}, \ldots \ldots x_{n}<br>$$<br>都相等的情况下才能取得。</p>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>-人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习3—用三层全连接神经网络训练MNIST手写数字字符集</title>
    <url>/post/abc0fd31.html</url>
    <content><![CDATA[<p>上一篇文章：<a href="https://aichn.cn/post/ee239b41.html">深度学习2—任意结点数的三层全连接神经网络</a><br>　　距离上篇文章过去了快四个月了，真是时光飞逝，之前因为要考博所以耽误了更新，谁知道考完博后之前落下的接近半个学期的工作是如此之多，以至于弄到现在才算基本填完坑，实在是疲惫至极。<br>　　另外在这段期间，发现了一本非常好的神经网络入门书籍，本篇的很多细节问题本人就是在这本书上找到的答案，强烈推荐一下：
　　</p>
<p><img src="/../images/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A03%E2%80%94%E7%94%A8%E4%B8%89%E5%B1%82%E5%85%A8%E8%BF%9E%E6%8E%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%AD%E7%BB%83MNIST%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E5%AD%97%E7%AC%A6%E9%9B%86/20180629031044540" alt="这里写图片描述"></p>
<p>　　上篇文章介绍了如何实现一个任意结点数的三层全连接神经网络。本篇，我们将利用已经写好的代码，搭建一个输入层、隐含层、输出层分别为784、100、10的三层全连接神经网络来训练闻名已久的mnist手写数字字符集，然后自己手写一个数字来看看网络是否能比较给力的工作。<br>　　在正式做之前，还是按照惯例讲几个会用到的知识点。</p>
<ol>
<li>mnist数字字符集的结构解析，这个我单独写了一篇文章来做介绍了，如有需要了解请先移步：<a href="http://blog.csdn.net/weixinhum/article/details/74908042">深度学习3番外篇—mnist数据集格式及转换</a></li>
<li>我们之前都是直接放入几个数作为输入，然后给网络几个数作为目标来训练网络的，而mnist手写字符集给我们的是一堆手写的28<em>28像素的图片还有图片对应的手写数字标签，我们怎么对它进行转换？<br>　　转换是这样的，我们把图片的所有像素当做输入，也就是28</em>28=784个像素直接作为输入，然后用0~9总共十个数作为输出目标的指引(当标签是“5”，则目标输出为0.01、0.01、0.01、0.01、0.01、0.99、0.01、0.01、0.01、0.01，依次类推)。<br>   　　这里有一点比较有意思，为什么要用0.01而不是0，用0.99而不是1？<br>   　　答案是我们用的激活函数永远不能输出0，1这两个数，因此如果取了这两个数则网络永远无法达到预期，会有训练过度的可能。<br>   　　另外，细心的你可能也想到了，我们之前输入的数都是在01的范围内的，而像素的灰度取值范围在0255，因此我们需要先对灰度值做一个归一化处理然后再放入网络中。<br>   　　这里归一化处理的方式也比较有意思，假设X为输入，我们的处理公式如下：<br>   　　$X÷255×0.99+0.01 $<br>   　　为什么要乘0.99再加0.01？<br>   　　答案是我们不希望输入取到0值，因为0有个小学生都知道的特点，任何数乘以它都等于0，因此无论输入层到隐含层的权值是多少，在输入等于0的时候都是一样的，这会影响权值的更新。</li>
<li>我们前面只确定了输入和输出层的节点个数，隐含层的节点个数还不知道，那我们怎么选取呢？答案可能让人难过，没有绝对正确的公式，只有几个经验公式(似乎有优化算法可以确定隐含层节点个数，后面如有需要开一篇专门讨论)：<br>m=\sqrt{n+l}+\alpham=n+l+αm=log_{2}nm=log2nm=\sqrt{nl}m=nl<br>　　其中，mm是隐含层节点数，nn是输入层节点数，ll是输出层节点数，\alphaα是00~1010之间的常数<br>　　本篇取第三个，最后因为比较接近100，就直接取了100(怎么感觉好随意。。。)。</li>
<li>因为这次的输入节点有784个，算是比较多的，要十分注意在初始化网络参数的时候要避免参数与输入节点的积之和过大的情况出现。因为我们用的是sigmod函数作为激活函数，它的波形如下图所示：<br>　　<img src="/../images/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A03%E2%80%94%E7%94%A8%E4%B8%89%E5%B1%82%E5%85%A8%E8%BF%9E%E6%8E%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%AD%E7%BB%83MNIST%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E5%AD%97%E7%AC%A6%E9%9B%86/20180626011108241" alt="这里写图片描述"><br>   　　可以看到，如果输入的数值过大或过小，波形会趋于平缓，也就是通常所说的“梯度消失”，我们要避免这种情况的出现。当然这也是用sigmod函数作为激活函数的问题。<br>   　　那么究竟权值取多少合适呢，一般的做法是取-1~1中间的随机数，而数学家得到的经验规则告诉我们，可以在一个节点传入链接数量平方根倒数的大致范围内随机采样，初始化权值。以我们隐含层到输出层权重为例，输出层节点有100条传入链接，则其权重范围在-1/\sqrt{100}−1/100至1/\sqrt{100}1/100之间。</li>
<li>最后，我们要判断输出的是否准确，则先做前向传播，得到10个输出之后，找到最大的一个跟标签对比，如果相同则网络预测正确。</li>
</ol>
<hr>
<p>那么，原理介绍完了，我们先对下图所示的第一、二张图像和相应的标签进行训练，主要代码如下（整个工程的代码会在最后面给出）：
　　</p>
<p><img src="/../images/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A03%E2%80%94%E7%94%A8%E4%B8%89%E5%B1%82%E5%85%A8%E8%BF%9E%E6%8E%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%AD%E7%BB%83MNIST%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E5%AD%97%E7%AC%A6%E9%9B%86/20180626013655589" alt="这里写图片描述"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (size_t count = 0; count &lt; 3000; count++)</span><br><span class="line">&#123;</span><br><span class="line">	mnet.forwardPropagation(mNumImg[0].inputdata);//前向传播</span><br><span class="line">	mnet.backPropagation(mNumImg[0].outputdata);//反向传播</span><br><span class="line">	mnet.forwardPropagation(mNumImg[1].inputdata);//前向传播</span><br><span class="line">	mnet.backPropagation(mNumImg[1].outputdata);//反向传播</span><br><span class="line">&#125;</span><br><span class="line">mnet.forwardPropagation(mNumImg[0].inputdata);</span><br><span class="line">mnet.printresual(0);//输出结果</span><br><span class="line">mnet.forwardPropagation(mNumImg[1].inputdata);</span><br><span class="line">mnet.printresual(0);</span><br></pre></td></tr></table></figure>
<p>运行结果如下：<br><img src="/../images/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A03%E2%80%94%E7%94%A8%E4%B8%89%E5%B1%82%E5%85%A8%E8%BF%9E%E6%8E%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%AD%E7%BB%83MNIST%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E5%AD%97%E7%AC%A6%E9%9B%86/20180704012927910" alt="这里写图片描述"><br>　　可以看到训练了3000次之后该网络可以分类之前输入的两个数字了（10个数字中最大的为预测结果，为了方便后面的正确率统计，一般会写一个函数将最大的数选出来和标签进行对比，看看网络的判断是不是正确的）。<br><img src="/../images/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A03%E2%80%94%E7%94%A8%E4%B8%89%E5%B1%82%E5%85%A8%E8%BF%9E%E6%8E%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%AD%E7%BB%83MNIST%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E5%AD%97%E7%AC%A6%E9%9B%86/20180704020745652" alt="这里写图片描述"><br>　　可以看到，该网络基本能达到96%的准确率，而且还有上升的趋势，因为训练时间感人，所以这里就不再接着训练了，据网上查询到的结果，该网络基本精确率基本到96%多一些，不到97%就到头了。</p>
<h2 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a><strong>C++实现</strong></h2><hr>
<p>因为网络结构都没有改，改的只是各层节点的个数，前面提到的一些注意点，因此如果对整套代码有不明白的地方可以移步前两篇文章或看看本篇前面提到的5个注意点。<br>　　因为代码量变得比较多了，因此为了方便管理将工程分成了四个文件。</p>
<h3 id="setting-h"><a href="#setting-h" class="headerlink" title="setting.h"></a>setting.h</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include &quot;time.h&quot;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">#define IPNNUM 784</span><br><span class="line">#define HDNNUM 100</span><br><span class="line">#define OPNNUM 10</span><br></pre></td></tr></table></figure>
<h3 id="net-hpp"><a href="#net-hpp" class="headerlink" title="net.hpp"></a>net.hpp</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include &quot;setting.h&quot;</span><br><span class="line"></span><br><span class="line">class node</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">	double value; //数值，存储结点最后的状态</span><br><span class="line">	double *W = NULL;    //结点到下一层的权值</span><br><span class="line"></span><br><span class="line">	void initNode(int num);//初始化函数，必须调用以初始化权值个数</span><br><span class="line">	~node();     //析构函数，释放掉权值占用内存</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void node::initNode(int num)</span><br><span class="line">&#123;</span><br><span class="line">	W = new double[num];</span><br><span class="line">	srand((unsigned)time(NULL));</span><br><span class="line">	for (size_t i = 0; i &lt; num; i++)//给权值赋一个随机值</span><br><span class="line">	&#123;</span><br><span class="line">		W[i] = rand() % 100 / double(100)*0.1;</span><br><span class="line">		if (rand() % 2)</span><br><span class="line">		&#123;</span><br><span class="line">			W[i] = -W[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node::~node()</span><br><span class="line">&#123;</span><br><span class="line">	if (W != NULL)</span><br><span class="line">	&#123;</span><br><span class="line">		delete[]W;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//网络类，描述神经网络的结构并实现前向传播以及后向传播</span><br><span class="line">class net</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">	node inlayer[IPNNUM]; //输入层</span><br><span class="line">	node hidlayer[HDNNUM];//隐含层</span><br><span class="line">	node outlayer[OPNNUM];//输出层</span><br><span class="line"></span><br><span class="line">	double yita = 0.1;//学习率η</span><br><span class="line">	double k1;//输入层偏置项权重</span><br><span class="line">	double k2;//隐含层偏置项权重</span><br><span class="line">	double Tg[OPNNUM];//训练目标</span><br><span class="line">	double O[OPNNUM];//网络实际输出</span><br><span class="line"></span><br><span class="line">	net();//构造函数，用于初始化各层和偏置项权重</span><br><span class="line">	double sigmoid(double z);//激活函数</span><br><span class="line">	double getLoss();//损失函数，输入为目标值</span><br><span class="line">	void forwardPropagation(double *input);//前向传播,输入为输入层节点的值</span><br><span class="line">	void backPropagation(double *T);//反向传播，输入为目标输出值</span><br><span class="line">	void printresual(int trainingTimes);//打印信息</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">net::net()</span><br><span class="line">&#123;</span><br><span class="line">	//初始化输入层和隐含层偏置项权值，给一个随机值</span><br><span class="line">	srand((unsigned)time(NULL));</span><br><span class="line">	k1 = rand() % 100 / double(100);</span><br><span class="line">	k2 = rand() % 100 / double(100);</span><br><span class="line">	//初始化输入层到隐含层节点权重</span><br><span class="line">	for (size_t i = 0; i &lt; IPNNUM; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		inlayer[i].initNode(HDNNUM);</span><br><span class="line">	&#125;</span><br><span class="line">	//初始化隐含层到输出层节点权重</span><br><span class="line">	for (size_t i = 0; i &lt; HDNNUM; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		hidlayer[i].initNode(OPNNUM);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">//激活函数</span><br><span class="line">double net::sigmoid(double z)</span><br><span class="line">&#123;</span><br><span class="line">	return 1 / (1 + exp(-z));</span><br><span class="line">&#125;</span><br><span class="line">//损失函数</span><br><span class="line">double net::getLoss()</span><br><span class="line">&#123;</span><br><span class="line">	double mloss = 0;</span><br><span class="line">	for (size_t i = 0; i &lt; OPNNUM; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		mloss += pow(O[i] - Tg[i], 2);</span><br><span class="line">	&#125;</span><br><span class="line">	return mloss / OPNNUM;</span><br><span class="line">&#125;</span><br><span class="line">//前向传播</span><br><span class="line">void net::forwardPropagation(double *input)</span><br><span class="line">&#123;</span><br><span class="line">	for (size_t iNNum = 0; iNNum &lt; IPNNUM; iNNum++)//输入层节点赋值</span><br><span class="line">	&#123;</span><br><span class="line">		inlayer[iNNum].value = input[iNNum];</span><br><span class="line">	&#125;</span><br><span class="line">	for (size_t hNNum = 0; hNNum &lt; HDNNUM; hNNum++)//算出隐含层结点的值</span><br><span class="line">	&#123;</span><br><span class="line">		double z = 0;</span><br><span class="line">		for (size_t iNNum = 0; iNNum &lt; IPNNUM; iNNum++)</span><br><span class="line">		&#123;</span><br><span class="line">			z += inlayer[iNNum].value*inlayer[iNNum].W[hNNum];</span><br><span class="line">		&#125;</span><br><span class="line">		z += k1;//加上偏置项</span><br><span class="line">		hidlayer[hNNum].value = sigmoid(z);</span><br><span class="line">	&#125;</span><br><span class="line">	for (size_t oNNum = 0; oNNum &lt; OPNNUM; oNNum++)//算出输出层结点的值</span><br><span class="line">	&#123;</span><br><span class="line">		double z = 0;</span><br><span class="line">		for (size_t hNNum = 0; hNNum &lt; HDNNUM; hNNum++)</span><br><span class="line">		&#123;</span><br><span class="line">			z += hidlayer[hNNum].value*hidlayer[hNNum].W[oNNum];</span><br><span class="line">		&#125;</span><br><span class="line">		z += k2;//加上偏置项</span><br><span class="line">		O[oNNum] = outlayer[oNNum].value = sigmoid(z);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">//反向传播，这里为了公式好看一点多写了一些变量作为中间值</span><br><span class="line">//计算过程用到的公式在博文中已经推导过了，如果代码没看明白请看看博文</span><br><span class="line">void net::backPropagation(double *T)</span><br><span class="line">&#123;</span><br><span class="line">	for (size_t i = 0; i &lt; OPNNUM; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Tg[i] = T[i];</span><br><span class="line">	&#125;</span><br><span class="line">	for (size_t iNNum = 0; iNNum &lt; IPNNUM; iNNum++)//更新输入层权重</span><br><span class="line">	&#123;</span><br><span class="line">		for (size_t hNNum = 0; hNNum &lt; HDNNUM; hNNum++)</span><br><span class="line">		&#123;</span><br><span class="line">			double y = hidlayer[hNNum].value;</span><br><span class="line">			double loss = 0;</span><br><span class="line">			for (size_t oNNum = 0; oNNum &lt; OPNNUM; oNNum++)</span><br><span class="line">			&#123;</span><br><span class="line">				loss += (O[oNNum] - Tg[oNNum])*O[oNNum] * (1 - O[oNNum])*hidlayer[hNNum].W[oNNum];</span><br><span class="line">			&#125;</span><br><span class="line">			inlayer[iNNum].W[hNNum] -= yita * loss*y*(1 - y)*inlayer[iNNum].value;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	for (size_t hNNum = 0; hNNum &lt; HDNNUM; hNNum++)//更新隐含层权重</span><br><span class="line">	&#123;</span><br><span class="line">		for (size_t oNNum = 0; oNNum &lt; OPNNUM; oNNum++)</span><br><span class="line">		&#123;</span><br><span class="line">			hidlayer[hNNum].W[oNNum] -= yita * (O[oNNum] - Tg[oNNum])*</span><br><span class="line">				O[oNNum] * (1 - O[oNNum])*hidlayer[hNNum].value;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void net::printresual(int trainingTimes)</span><br><span class="line">&#123;</span><br><span class="line">	double loss = getLoss();</span><br><span class="line">	cout &lt;&lt; &quot;训练次数：&quot; &lt;&lt; trainingTimes &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; &quot;loss：&quot; &lt;&lt; loss &lt;&lt; endl;</span><br><span class="line">	for (size_t oNNum = 0; oNNum &lt; OPNNUM; oNNum++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; &quot;输出&quot; &lt;&lt; oNNum + 1 &lt;&lt; &quot;：&quot; &lt;&lt; O[oNNum] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="getImg-hpp"><a href="#getImg-hpp" class="headerlink" title="getImg.hpp"></a>getImg.hpp</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include &quot;setting.h&quot;</span><br><span class="line"></span><br><span class="line">class ImgData//单张图像</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">	unsigned char tag;</span><br><span class="line">	double data[IPNNUM];</span><br><span class="line">	double label[OPNNUM];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class getImg</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">	ImgData* mImgData;</span><br><span class="line">	void imgTrainDataRead(const char *datapath, const char *labelpath);</span><br><span class="line">	~getImg();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void getImg::imgTrainDataRead(const char *datapath, const char *labelpath)</span><br><span class="line">&#123;</span><br><span class="line">	/***********读取图片数据***********/</span><br><span class="line">	unsigned char readbuf[4];//信息数据读取空间</span><br><span class="line">	FILE *f;</span><br><span class="line">	fopen_s(&amp;f, datapath, &quot;rb&quot;);</span><br><span class="line">	fread_s(readbuf, 4, 1, 4, f);//读取魔数，即文件标志位</span><br><span class="line">	fread_s(readbuf, 4, 1, 4, f);//读取数据集图像个数</span><br><span class="line">	int sumOfImg = (readbuf[0] &lt;&lt; 24) + (readbuf[1] &lt;&lt; 16) + (readbuf[2] &lt;&lt; 8) + readbuf[3];//图像个数</span><br><span class="line">	fread_s(readbuf, 4, 1, 4, f);//读取数据集图像行数</span><br><span class="line">	int imgheight = (readbuf[0] &lt;&lt; 24) + (readbuf[1] &lt;&lt; 16) + (readbuf[2] &lt;&lt; 8) + readbuf[3];//图像行数</span><br><span class="line">	fread_s(readbuf, 4, 1, 4, f);//读取数据集图像列数</span><br><span class="line">	int imgwidth = (readbuf[0] &lt;&lt; 24) + (readbuf[1] &lt;&lt; 16) + (readbuf[2] &lt;&lt; 8) + readbuf[3];//图像列数</span><br><span class="line">	mImgData = new ImgData[sumOfImg];</span><br><span class="line">	unsigned char *data = new unsigned char[IPNNUM];</span><br><span class="line">	for (int i = 0; i &lt; sumOfImg; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		fread_s(data, IPNNUM, 1, IPNNUM, f);//读取数据集图像列数</span><br><span class="line">		for (size_t px = 0; px &lt; IPNNUM; px++)//图像数据归一化</span><br><span class="line">		&#123;</span><br><span class="line">			mImgData[i].data[px] = data[px]/(double)255*0.99+0.01;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	delete[]data;</span><br><span class="line">	fclose(f);</span><br><span class="line">	/**********************************/</span><br><span class="line">   /***********读取标签数据***********/</span><br><span class="line">   /**********************************/</span><br><span class="line">	fopen_s(&amp;f, labelpath, &quot;rb&quot;);</span><br><span class="line">	fread_s(readbuf, 4, 1, 4, f);//读取魔数，即文件标志位</span><br><span class="line">	fread_s(readbuf, 4, 1, 4, f);//读取数据集图像个数</span><br><span class="line">	sumOfImg = (readbuf[0] &lt;&lt; 24) + (readbuf[1] &lt;&lt; 16) + (readbuf[2] &lt;&lt; 8) + readbuf[3];//图像个数</span><br><span class="line">	for (int i = 0; i &lt; sumOfImg; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		fread_s(&amp;mImgData[i].tag, 1, 1, 1, f);//读取数据集图像列数</span><br><span class="line">		for (size_t j = 0; j &lt; 10; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			mImgData[i].label[j] = 0.01;</span><br><span class="line">		&#125;</span><br><span class="line">		mImgData[i].label[mImgData[i].tag] = 0.99;</span><br><span class="line">	&#125;</span><br><span class="line">	fclose(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getImg::~getImg()</span><br><span class="line">&#123;</span><br><span class="line">	delete[]mImgData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="BPNetC-cpp"><a href="#BPNetC-cpp" class="headerlink" title="BPNetC.cpp"></a>BPNetC.cpp</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;setting.h&quot;</span><br><span class="line">#include &quot;net.hpp&quot;//神经网络</span><br><span class="line">#include &quot;getImg.hpp&quot;//训练数据</span><br><span class="line"></span><br><span class="line">void AccuracyRate(int time, net *mnet, getImg *mImg)//精确率评估</span><br><span class="line">&#123;</span><br><span class="line">	double tagright = 0;//正确个数统计</span><br><span class="line">	for (size_t count = 0; count &lt; 10000; count++)</span><br><span class="line">	&#123;</span><br><span class="line">		mnet-&gt;forwardPropagation(mImg-&gt;mImgData[count].data);//前向传播</span><br><span class="line">		double value = -100;</span><br><span class="line">		int gettag = -100;</span><br><span class="line">		for (size_t i = 0; i &lt; 10; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			if (mnet-&gt;outlayer[i].value &gt; value)</span><br><span class="line">			&#123;</span><br><span class="line">				value = mnet-&gt;outlayer[i].value;</span><br><span class="line">				gettag = i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		if (mImg-&gt;mImgData[count].tag == gettag)</span><br><span class="line">		&#123;</span><br><span class="line">			tagright++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	//mnet.printresual(0);//信息打印</span><br><span class="line">	cout &lt;&lt; &quot;第&quot; &lt;&lt; time + 1 &lt;&lt; &quot;轮:  &quot;;</span><br><span class="line">	cout &lt;&lt; &quot;正确率为:&quot; &lt;&lt; tagright / 10000 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	getImg mGetTrainImg;</span><br><span class="line">	mGetTrainImg.imgTrainDataRead(&quot;train-images.idx3-ubyte&quot;, &quot;train-labels.idx1-ubyte&quot;);</span><br><span class="line">	getImg mGetTestImg;</span><br><span class="line">	mGetTestImg.imgTrainDataRead(&quot;t10k-images.idx3-ubyte&quot;, &quot;t10k-labels.idx1-ubyte&quot;);</span><br><span class="line">	net mnet;//神经网络对象</span><br><span class="line">	for (size_t j = 0; j &lt; 10; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		for (size_t i = 0; i &lt; 60000; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			mnet.forwardPropagation(mGetTrainImg.mImgData[i].data);//前向传播</span><br><span class="line">			mnet.backPropagation(mGetTrainImg.mImgData[i].label);//反向传播</span><br><span class="line">		&#125;</span><br><span class="line">		AccuracyRate(j,&amp;mnet, &amp;mGetTestImg);</span><br><span class="line">	&#125;</span><br><span class="line">	std::cout &lt;&lt; &quot;搞完收工!\n&quot;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="python实现"><a href="#python实现" class="headerlink" title="python实现"></a><strong>python实现</strong></h2><p>距离C++第一个版本完成过去了有半年多了，因为入学后各种事情搞得分身乏术，剩下一点时间也用来打游戏调解了哈哈哈。<br>最近因为<strong>研究需要！！！</strong> 又开始看神经网络，因此顺便修改了C++的第一个版本，并且把python版本也做了出来。万万没想到之前写的版本有bug，调了一天才调通了，看了之前文章python代码的同志们实在是抱歉！<br>另外，虽然完美的跑通了代码（其实也就是把C++版本翻译了一下），但python的运行速度之低实在是让人想哭（这里有极大部分是本人水平不够的关系，但本人一点都不想去学怎么提高其效率，因为不需要）。因此，在这篇过后将直接取消python实现这一块，哈哈哈哈哈！那么就用该块最后一份代码送它上路吧！</p>
<h3 id="ReadData-py"><a href="#ReadData-py" class="headerlink" title="ReadData.py"></a><a href="http://readdata.py/">ReadData.py</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import struct</span><br><span class="line"></span><br><span class="line">def loadImageSet(filename):</span><br><span class="line">	print (&quot;load image set&quot;,filename)</span><br><span class="line">	binfile= open(filename, &#x27;rb&#x27;)</span><br><span class="line">	buffers = binfile.read()</span><br><span class="line">	head = struct.unpack_from(&#x27;&gt;IIII&#x27; , buffers ,0)</span><br><span class="line">	print (&quot;head,&quot;,head)</span><br><span class="line">	offset = struct.calcsize(&#x27;&gt;IIII&#x27;)</span><br><span class="line">	imgNum = head[1]</span><br><span class="line">	width = head[2]</span><br><span class="line">	height = head[3]</span><br><span class="line">	#[60000]*28*28</span><br><span class="line">	bits = imgNum * width * height</span><br><span class="line">	bitsString = &#x27;&gt;&#x27; + str(bits) + &#x27;B&#x27; #读取定长数据段，即字符集图片总和</span><br><span class="line">	imgs = struct.unpack_from(bitsString,buffers,offset)</span><br><span class="line">	binfile.close()</span><br><span class="line">	imgs = np.reshape(imgs,[imgNum,1,width*height])#将字符集图片分隔为单张图片</span><br><span class="line">	print (&quot;load imgs finished&quot;)</span><br><span class="line">	return imgs</span><br><span class="line"></span><br><span class="line">def loadLabelSet(filename):</span><br><span class="line">	print (&quot;load label set&quot;,filename)</span><br><span class="line">	binfile = open(filename, &#x27;rb&#x27;)</span><br><span class="line">	buffers = binfile.read()</span><br><span class="line">	head = struct.unpack_from(&#x27;&gt;II&#x27; , buffers ,0)</span><br><span class="line">	print (&quot;head,&quot;,head)</span><br><span class="line">	imgNum=head[1]</span><br><span class="line">	offset = struct.calcsize(&#x27;&gt;II&#x27;)</span><br><span class="line">	numString = &#x27;&gt;&#x27;+str(imgNum)+&quot;B&quot;</span><br><span class="line">	labels = struct.unpack_from(numString , buffers , offset)</span><br><span class="line">	binfile.close()</span><br><span class="line">	labels = np.reshape(labels,[imgNum,1])</span><br><span class="line">	print (&#x27;load label finished&#x27;)</span><br><span class="line">	return labels</span><br></pre></td></tr></table></figure>
<h3 id="BPNetPy-py"><a href="#BPNetPy-py" class="headerlink" title="BPNetPy.py"></a><a href="http://bpnetpy.py/">BPNetPy.py</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import ReadData as rd</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import math</span><br><span class="line">import random</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">IPNNUM=784     #输入层节点数</span><br><span class="line">HDNNUM=100    #隐含层节点数</span><br><span class="line">OPNNUM=10     #输出层节点数</span><br><span class="line"></span><br><span class="line">class node:</span><br><span class="line">    #结点类，用以构成网络</span><br><span class="line">    def __init__(self,connectNum=0):</span><br><span class="line">        self.value=0 #数值，存储结点最后的状态，对应到文章示例为X1，Y1等值</span><br><span class="line">        self.W = (2*np.random.random_sample(connectNum)-1)*0.01</span><br><span class="line"></span><br><span class="line">class net:</span><br><span class="line">    #网络类，描述神经网络的结构并实现前向传播以及后向传播</span><br><span class="line">    def __init__(self):</span><br><span class="line">        #初始化函数，用于初始化各层间节点和偏置项权重</span><br><span class="line">        #输入层结点</span><br><span class="line">        self.inlayer=[node(HDNNUM)];</span><br><span class="line">        for obj in range(1, IPNNUM):</span><br><span class="line">            self.inlayer.append(node(HDNNUM)) </span><br><span class="line">        #隐含层结点</span><br><span class="line">        self.hidlayer=[node(OPNNUM)];</span><br><span class="line">        for obj in range(1, HDNNUM):</span><br><span class="line">            self.hidlayer.append(node(OPNNUM))             </span><br><span class="line">        #输出层结点</span><br><span class="line">        self.outlayer=[node(0)];</span><br><span class="line">        for obj in range(1, OPNNUM):</span><br><span class="line">            self.outlayer=[node(0)]                 </span><br><span class="line"></span><br><span class="line">        self.yita = 0.1                                            #学习率η</span><br><span class="line">        self.k1=random.random()                       #输入层偏置项权重</span><br><span class="line">        self.k2=random.random()                       #隐含层偏置项权重</span><br><span class="line">        self.Tg=np.zeros(OPNNUM)                   #训练目标</span><br><span class="line">        self.O=np.zeros(OPNNUM)                     #网络实际输出</span><br><span class="line"></span><br><span class="line">    def sigmoid(self,z):</span><br><span class="line">        #激活函数</span><br><span class="line">        return 1 / (1 + math.exp(-z))</span><br><span class="line"></span><br><span class="line">    def getLoss(self):</span><br><span class="line">        #损失函数</span><br><span class="line">        loss=0</span><br><span class="line">        for num in range(0, OPNNUM):</span><br><span class="line">            loss+=pow(self.O[num] -self.Tg[num],2)</span><br><span class="line">        return loss/OPNNUM</span><br><span class="line"></span><br><span class="line">    def forwardPropagation(self,input):</span><br><span class="line">        #前向传播</span><br><span class="line">        for i in range(0, IPNNUM):</span><br><span class="line">            #输入层节点赋值</span><br><span class="line">            self.inlayer[i].value = input[i]</span><br><span class="line">        for hNNum in range(0,HDNNUM):</span><br><span class="line">             #算出隐含层结点的值</span><br><span class="line">            z = 0</span><br><span class="line">            for iNNum in range(0,IPNNUM):</span><br><span class="line">                z+=self.inlayer[iNNum].value*self.inlayer[iNNum].W[hNNum]</span><br><span class="line">            #加上偏置项</span><br><span class="line">            z+= self.k1</span><br><span class="line">            self.hidlayer[hNNum].value = self.sigmoid(z)</span><br><span class="line">        for oNNum in range(0,OPNNUM):</span><br><span class="line">            #算出输出层结点的值</span><br><span class="line">            z = 0</span><br><span class="line">            for hNNum in range(0,HDNNUM):</span><br><span class="line">                z += self.hidlayer[hNNum].value* self.hidlayer[hNNum].W[oNNum]</span><br><span class="line">            z += self.k2</span><br><span class="line">            self.O[oNNum] = self.sigmoid(z)</span><br><span class="line"></span><br><span class="line">    def backPropagation(self,T):</span><br><span class="line">        #反向传播，这里为了公式好看一点多写了一些变量作为中间值</span><br><span class="line">        for num in range(0, OPNNUM):</span><br><span class="line">            self.Tg[num] = T[num]</span><br><span class="line">        for iNNum in range(0,IPNNUM):</span><br><span class="line">            #更新输入层权重</span><br><span class="line">            for hNNum in range(0,HDNNUM):</span><br><span class="line">                y = self.hidlayer[hNNum].value</span><br><span class="line">                loss = 0</span><br><span class="line">                for oNNum in range(0, OPNNUM):</span><br><span class="line">                    loss+=(self.O[oNNum] - self.Tg[oNNum])*self.O[oNNum] * (1 - self.O[oNNum])*self.hidlayer[hNNum].W[oNNum]</span><br><span class="line">                self.inlayer[iNNum].W[hNNum] -= self.yita*loss*y*(1- y)*self.inlayer[iNNum].value</span><br><span class="line">        for hNNum in range(0,HDNNUM):</span><br><span class="line">            #更新隐含层权重</span><br><span class="line">            for oNNum in range(0,OPNNUM):</span><br><span class="line">                self.hidlayer[hNNum].W[oNNum]-= self.yita*(self.O[oNNum] - self.Tg[oNNum])*self.O[oNNum]*\</span><br><span class="line">                    (1- self.O[oNNum])*self.hidlayer[hNNum].value</span><br><span class="line"></span><br><span class="line">    def printresual(self,trainingTimes):</span><br><span class="line">        #信息打印</span><br><span class="line">        loss = self.getLoss()</span><br><span class="line">        print(&quot;训练次数：&quot;, trainingTimes)</span><br><span class="line">        print(&quot;loss&quot;,loss)</span><br><span class="line">        for oNNum in range(0,OPNNUM):</span><br><span class="line">            print(&quot;输出&quot;,oNNum,&quot;:&quot;,self.O[oNNum])</span><br><span class="line"></span><br><span class="line">#主程序</span><br><span class="line">mnet=net()</span><br><span class="line">imgs=rd.loadImageSet(&quot;train-images.idx3-ubyte&quot;);</span><br><span class="line">labels=rd.loadLabelSet(&quot;train-labels.idx1-ubyte&quot;);</span><br><span class="line">##显示图像</span><br><span class="line">#im=np.array(input)</span><br><span class="line">#im = im.reshape(28,28)</span><br><span class="line">#fig = plt.figure()</span><br><span class="line">#plotwindow = fig.add_subplot(111)</span><br><span class="line">#plt.imshow(im , cmap=&#x27;gray&#x27;)</span><br><span class="line">#plt.show()</span><br><span class="line">for n in range(0,1000):</span><br><span class="line">    print(n)</span><br><span class="line">    for x in range(0,3):</span><br><span class="line">        input=(imgs[x,:]/255*0.99+0.01).ravel() #ravel多维转1维</span><br><span class="line">        target=np.ones(10)*0.01</span><br><span class="line">        target[labels[x]]=0.99</span><br><span class="line">        mnet.forwardPropagation(input)</span><br><span class="line">        mnet.backPropagation(target)</span><br><span class="line">        if (n%200==0):</span><br><span class="line">            mnet.printresual(n)</span><br></pre></td></tr></table></figure>
<h2 id="pytorch的CPU实现"><a href="#pytorch的CPU实现" class="headerlink" title="pytorch的CPU实现"></a><strong>pytorch的CPU实现</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># coding=utf-8</span><br><span class="line">import time</span><br><span class="line">import torch</span><br><span class="line">import torch.nn as nn</span><br><span class="line">from torch.autograd import Variable</span><br><span class="line">import torchvision.datasets as dsets</span><br><span class="line">import torchvision.transforms as transforms</span><br><span class="line"></span><br><span class="line">#网络模型</span><br><span class="line">class Net(nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        #定义Net的初始化函数，这个函数定义了该神经网络的基本结构</span><br><span class="line">        super(Net, self).__init__() #复制并使用Net的父类的初始化方法，即先运行nn.Module的初始化函数</span><br><span class="line">        self.intohid_layer = nn.Linear(784, 100) #定义输入层到隐含层的连结关系函数</span><br><span class="line">        self.hidtoout_layer = nn.Linear(100, 10)#定义隐含层到输出层的连结关系函数</span><br><span class="line">    def forward(self, input):</span><br><span class="line">        #定义该神经网络的向前传播函数，该函数必须定义，一旦定义成功，向后传播函数也会自动生成</span><br><span class="line">        x = torch.sigmoid(self.intohid_layer(input))   #输入input在输入层经过经过加权和与激活函数后到达隐含层</span><br><span class="line">        x = torch.sigmoid(self.hidtoout_layer(x))       #类似上面</span><br><span class="line">        return x</span><br><span class="line"></span><br><span class="line">mnet = Net()</span><br><span class="line">#数据集</span><br><span class="line">train_dataset = dsets.MNIST(root = &#x27;../mnist/&#x27;, #选择数据的根目录</span><br><span class="line">                           train = True, # 选择训练集</span><br><span class="line">                           transform = transforms.ToTensor(), # 转换成tensor变量</span><br><span class="line">                           download = False) # 不从网络上download图片</span><br><span class="line">test_dataset = dsets.MNIST(root = &#x27;../mnist/&#x27;, # 选择数据的根目录</span><br><span class="line">                           train = False, # 选择训练集</span><br><span class="line">                           transform = transforms.ToTensor(),# 转换成tensor变量</span><br><span class="line">                           download = False) # 不从网络上download图片</span><br><span class="line"># 加载数据</span><br><span class="line">train_loader = torch.utils.data.DataLoader(dataset = train_dataset, </span><br><span class="line">                                           batch_size = 1,#每一次训练选用的数据个数</span><br><span class="line">                                           shuffle = False)#将数据打乱</span><br><span class="line">test_loader = torch.utils.data.DataLoader(dataset = test_dataset,</span><br><span class="line">                                          batch_size = 1000,#每一次训练选用的数据个数</span><br><span class="line">                                          shuffle = False)</span><br><span class="line"></span><br><span class="line">loss_fn = torch.nn.MSELoss()#损失函数定义，可修改</span><br><span class="line">optimizer = torch.optim.SGD(mnet.parameters(), lr = 0.1, momentum=0.9)</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line">for epoch in range(1):#训练次数</span><br><span class="line">    print(&#x27;current epoch = %d&#x27; % epoch)</span><br><span class="line">    for i, (images, labels) in enumerate(train_loader): #利用enumerate取出一个可迭代对象的内容</span><br><span class="line">        images = Variable(images.view(-1, 28 * 28))</span><br><span class="line">        labels = Variable(labels)</span><br><span class="line">        labels = torch.LongTensor(labels).view(-1,1)#将标签转为单列矩阵</span><br><span class="line">        target= torch.zeros(1, 10).scatter_(dim = 1, index = labels, value = 0.98)#将标签转为onehot形式</span><br><span class="line">        target+=0.01</span><br><span class="line">        optimizer.zero_grad()               #清空节点值</span><br><span class="line">        outputs = mnet(images)          #前向传播</span><br><span class="line">        loss = loss_fn(outputs, target)  #损失计算</span><br><span class="line">        loss.backward()                         #后向传播</span><br><span class="line">        optimizer.step()                         #更新权值</span><br><span class="line">        if i % 10000 == 0:</span><br><span class="line">            print(i)</span><br><span class="line">            total = 0</span><br><span class="line">            correct = 0.0</span><br><span class="line">            for images, labels in test_loader:</span><br><span class="line">                images = Variable(images.view(-1, 28 * 28))</span><br><span class="line">                outputs = mnet(images)                                        #前向传播</span><br><span class="line">                _, predicts = torch.max(outputs.data, 1)                #返回预测结果</span><br><span class="line">                total += labels.size(0)</span><br><span class="line">                correct += (predicts == labels).sum()</span><br><span class="line">            print(&#x27;Accuracy = %.2f&#x27; % (100 * float(correct) / total))</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line">print(&#x27;花费时间%.2f&#x27; % (end - start))</span><br></pre></td></tr></table></figure>
<p>上面的代码在频率为3.40GHz的电脑上，训练10遍，每次都遍历一整个训练集要花费1000s左右，也就是16.7分钟左右，因全连接神经网络的过拟合问题，正确率基本到了97.5%之后就再也升不上去了。</p>
<h2 id="pytorch的GPU实现"><a href="#pytorch的GPU实现" class="headerlink" title="pytorch的GPU实现"></a><strong>pytorch的GPU实现</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># coding=utf-8</span><br><span class="line">import time</span><br><span class="line">import torch</span><br><span class="line">import torch.nn as nn</span><br><span class="line">from torch.autograd import Variable</span><br><span class="line">import torchvision.datasets as dsets</span><br><span class="line">import torchvision.transforms as transforms</span><br><span class="line"></span><br><span class="line">#网络模型</span><br><span class="line">class Net(nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        #定义Net的初始化函数，这个函数定义了该神经网络的基本结构</span><br><span class="line">        super(Net, self).__init__() #复制并使用Net的父类的初始化方法，即先运行nn.Module的初始化函数</span><br><span class="line">        self.intohid_layer = nn.Linear(784, 100) #定义输入层到隐含层的连结关系函数</span><br><span class="line">        self.hidtoout_layer = nn.Linear(100, 10)#定义隐含层到输出层的连结关系函数</span><br><span class="line">    def forward(self, input):</span><br><span class="line">        #定义该神经网络的向前传播函数，该函数必须定义，一旦定义成功，向后传播函数也会自动生成</span><br><span class="line">        x = torch.sigmoid(self.intohid_layer(input))   #输入input在输入层经过经过加权和与激活函数后到达隐含层</span><br><span class="line">        x = torch.sigmoid(self.hidtoout_layer(x))       #类似上面</span><br><span class="line">        return x</span><br><span class="line"></span><br><span class="line">mnet = Net().cuda()</span><br><span class="line">#数据集</span><br><span class="line">train_dataset = dsets.MNIST(root = &#x27;../mnist/&#x27;, #选择数据的根目录</span><br><span class="line">                           train = True, # 选择训练集</span><br><span class="line">                           transform = transforms.ToTensor(), # 转换成tensor变量</span><br><span class="line">                           download = False) # 不从网络上download图片</span><br><span class="line">test_dataset = dsets.MNIST(root = &#x27;../mnist/&#x27;, # 选择数据的根目录</span><br><span class="line">                           train = False, # 选择训练集</span><br><span class="line">                           transform = transforms.ToTensor(),# 转换成tensor变量</span><br><span class="line">                           download = False) # 不从网络上download图片</span><br><span class="line"># 加载数据</span><br><span class="line">train_loader = torch.utils.data.DataLoader(dataset = train_dataset, </span><br><span class="line">                                           batch_size = 1,#每一次训练选用的数据个数</span><br><span class="line">                                           shuffle = False)#将数据打乱</span><br><span class="line">test_loader = torch.utils.data.DataLoader(dataset = test_dataset,</span><br><span class="line">                                          batch_size = 1000,#每一次训练选用的数据个数</span><br><span class="line">                                          shuffle = False)</span><br><span class="line"></span><br><span class="line">loss_fn = torch.nn.MSELoss()#损失函数定义，可修改</span><br><span class="line">optimizer = torch.optim.SGD(mnet.parameters(), lr = 0.1, momentum=0.9)</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line">for epoch in range(1):#训练次数</span><br><span class="line">    print(&#x27;current epoch = %d&#x27; % epoch)</span><br><span class="line">    for i, (images, labels) in enumerate(train_loader): #利用enumerate取出一个可迭代对象的内容</span><br><span class="line">        images = Variable(images.view(-1, 28 * 28).cuda())</span><br><span class="line">        labels = Variable(labels.cuda())</span><br><span class="line">        labels = torch.cuda.LongTensor(labels).view(-1,1)#将标签转为单列矩阵</span><br><span class="line">        target= torch.zeros(1, 10).cuda().scatter_(dim = 1, index = labels, value = 0.98)#将标签转为onehot形式</span><br><span class="line">        target+=0.01</span><br><span class="line">        optimizer.zero_grad()               #清空节点值</span><br><span class="line">        outputs = mnet(images)           #前向传播</span><br><span class="line">        loss = loss_fn(outputs, target)  #损失计算</span><br><span class="line">        loss.backward()                          #后向传播</span><br><span class="line">        optimizer.step()                         #更新权值</span><br><span class="line">        if i % 10000 == 0:</span><br><span class="line">            print(i)</span><br><span class="line">            total = 0</span><br><span class="line">            correct = 0.0</span><br><span class="line">            for images, labels in test_loader:</span><br><span class="line">                images = Variable(images.view(-1, 28 * 28).cuda())</span><br><span class="line">                outputs = mnet(images)                                        #前向传播</span><br><span class="line">                _, predicts = torch.max(outputs.data, 1)                #返回预测结果</span><br><span class="line">                total += labels.size(0)</span><br><span class="line">                correct += (predicts == labels.cuda()).sum()</span><br><span class="line">            print(&#x27;Accuracy = %.2f&#x27; % (100 * float(correct) / total))</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line">print(&#x27;花费时间%.2f&#x27; % (end - start))</span><br></pre></td></tr></table></figure>
<p>另外写文章累人，写代码掉头发，如果觉得文章有帮助，哈哈哈</p>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>-神经网络 -人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>用frp内网穿透实现windows远程登录内网机器</title>
    <url>/post/57fe7328.html</url>
    <content><![CDATA[<p>步骤如下：</p>
<ol>
<li><p>阿里云购买服务器<br>最低配置，30元/月即可。 </p>
</li>
<li><p>为服务器安装git<br>先更新apt再安装，否则可能会失败</p>
</li>
</ol>
<p>用frp实现内网穿透非常简单，但是前提是你有一个公网IP的机器，没有的话你需要先买个vps，如果你已经有了，那么可以继续往下看了。</p>
<ol start="3">
<li>我们需要从frp官网下载frp软件 <a href="https://links.jianshu.com/go?to=https://github.com/fatedier/frp/releases">下载地址</a><br> 你需要根据你的vps系统来选择对应的版本，我的vps是ubuntu的，我选的是<code>frp_0.27.0_linux_amd64.tar.gz</code><br> 那么直接ssh登录到vps上用命令：</li>
</ol>
   <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">wget <span class="symbol">https:</span>/<span class="regexp">/github.com/fatedier</span><span class="regexp">/frp/releases</span><span class="regexp">/download/v</span>0.<span class="number">27.0</span>/frp_0.<span class="number">27</span>.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>
<p>   下载到本地，然后解压：   </p>
   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">mkdir /usr/local/frp/</span><br><span class="line">mv frp_0.<span class="number">27.0</span>_linux_amd64<span class="selector-class">.tar</span><span class="selector-class">.gz</span> /usr/local/frp/</span><br><span class="line"><span class="selector-attr">[root@izbp147qkvfxrb2efks5y9z ~]</span># cd /usr/local/frp/</span><br><span class="line"><span class="selector-attr">[root@izbp147qkvfxrb2efks5y9z frp]</span># tar -zxvf frp_0.<span class="number">27.0</span>_linux_amd64<span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure>
<p>   进frp目录：</p>
   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[root@izbp147qkvfxrb2efks5y9z ~]</span># cd /usr/local/frp/frp_0.<span class="number">27.0</span>_linux_amd64/</span><br></pre></td></tr></table></figure>
<p>   这个目录下有个frps.ini文件，这是服务端的配置文件，内容如下：   </p>
   <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">common</span>]</span><br><span class="line">bind_port = <span class="number">7000</span></span><br></pre></td></tr></table></figure>
<p>   记住这个7000端口，文件内容我们不用修改。</p>
<blockquote>
<p>vps上的frp是做服务端</p>
</blockquote>
<p>   因此，我们运行这个服务端   </p>
   <figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">nohup <span class="operator">./</span>frps <span class="operator">-</span>c <span class="operator">./</span>frps.ini <span class="operator">&amp;</span></span><br></pre></td></tr></table></figure>


<ol start="4">
<li><p>问题:</p>
<p>运行./frps -c ./frps.ini时，-bash: ./frps: Permission denied</p>
<p>解决：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 777 ./frps -c ./frps.ini</span><br></pre></td></tr></table></figure>
<p>即可</p>
<p>其中，frps.ini可为：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">common</span>]</span><br><span class="line">bind_port = <span class="number">7000</span> <span class="meta">#frps服务端口</span></span><br><span class="line"></span><br><span class="line">vhost_http_port = <span class="number">8080</span> <span class="meta">#http转发端口</span></span><br><span class="line"></span><br><span class="line">vhost_https_port = <span class="number">8081</span> <span class="meta">#https转发端口</span></span><br><span class="line"></span><br><span class="line">token=<span class="number">12345</span> <span class="meta">#frp认证密钥</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">#frpweb视图端口</span></span><br><span class="line">dashboard_addr = <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">dashboard_port = <span class="number">7500</span>  </span><br><span class="line"><span class="meta">#frpweb视图账号密码</span></span><br><span class="line">dashboard_user = admin</span><br><span class="line">dashboard_pwd = admin</span><br></pre></td></tr></table></figure></li>
<li><p>FRP设置开机自启</p>
</li>
</ol>
<p>开机自启脚本frpstart.sh：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#chkconfig: 345 88 14</span><br><span class="line">#description:FRP1 //此行必写,描述服务.</span><br><span class="line"></span><br><span class="line">nohup /usr/local/frp/frp_0.27.0_linux_amd64/frps -c /usr/local/frp/frp_0.27.0_linux_amd64/frps.ini &amp;</span><br></pre></td></tr></table></figure>
<p>增加脚本可执行权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 755 frpstart.sh</span><br></pre></td></tr></table></figure>
<p>将脚本移动到/etc/rc.d/init.d目录下，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@izbp147qkvfxrb2efks5y9z frp_0.27.0_linux_amd64]#mv frpstart.sh /etc/rc.d/init.d/</span><br></pre></td></tr></table></figure>


<p>添加开机自启脚本到自动启动项目中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@izbp147qkvfxrb2efks5y9z frp_0.27.0_linux_amd64]# cd /etc/rc.d/init.d</span><br><span class="line">[root@izbp147qkvfxrb2efks5y9z init.d]# chkconfig --add frpstart.sh</span><br><span class="line">[root@izbp147qkvfxrb2efks5y9z init.d]# chkconfig frpstart.sh on</span><br></pre></td></tr></table></figure>



<ol start="5">
<li>进入阿里云控制台，添加入站规则，否则客户端可能会连接失败<br>（报错：[service.go:97] login to server failed: dial tcp 47.114.55.62:7000: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.<br>dial tcp 47.114.55.62:7000: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=7000/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=7500/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=8081/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=3389/tcp --permanent</span><br><span class="line">#重启防火墙服务</span><br><span class="line">systemctl restart firewalld.service </span><br><span class="line">查看所有打开的端口：</span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br><span class="line">也可以直接关闭防火墙服务，因为阿里云有实例安全组规则配置相当于防火墙，关闭后就不用两头配置了，节约时间。</span><br></pre></td></tr></table></figure>
<p><img src="/../images/%E7%94%A8frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%AE%9E%E7%8E%B0windows%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E5%86%85%E7%BD%91%E6%9C%BA%E5%99%A8/20190511102320416.png" alt="在这里插入图片描述"></p>
<ol start="6">
<li><p>从frp官网下载frp软件的windows版本<br> 这次我们要下载的是windows版本<a href="https://links.jianshu.com/go?to=https://github.com/fatedier/frp/releases/download/v0.27.0/frp_0.27.0_windows_amd64.zip">frp_0.27.0_windows_amd64.zip</a></p>
<blockquote>
<p>windows版本是做frp客户端</p>
</blockquote>
<p>解压出来的文件夹里有个<code>frpc.ini</code>文件，这是客户端的配置文件， 我们需要修改这个文件。</p>
</li>
<li><p>进入客户端（想要控制的内网windows），下载frpc配置frpc.ini:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">common</span>]</span><br><span class="line">server_addr = 公网IP</span><br><span class="line">server_port = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">RDP</span>]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">local_port = <span class="number">3389</span></span><br><span class="line">remote_port = <span class="number">3389</span></span><br></pre></td></tr></table></figure></li>
<li><p>在<code>server_addr</code>这里填入你的公网ip，下面的<code>remote_port</code>里填写一个你自己定的端口，这个端口不要和现有端口冲突即可，我这里写的是3389，后来我们就需要用这个端口来连接远程桌面<br> 配置好文件以后，用命令：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">frpc<span class="selector-class">.exe</span> -c frpc<span class="selector-class">.ini</span></span><br></pre></td></tr></table></figure>
<p>来启动客户端，此时会弹出来一个控制台窗口，不用关闭，最小化即可。</p>
</li>
<li><p>现在我们可以来远程连接了<br> 在另一个内网的机器上运行windows远程桌面：<br> 在运行中输入命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mstsc</span><br></pre></td></tr></table></figure>
<p>来打开远程桌面窗口，输入<code>你的vps公网ip:你刚才设置的remote_port</code>，比如:49.168.168.168:3389回车，然后等待连接建立吧，速度取决于你的VPS带宽。</p>
</li>
</ol>
<ol start="10">
<li>被控端控制面板–&gt;远程桌面–&gt;允许远程桌面</li>
</ol>
<p><img src="/../images/%E7%94%A8frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%AE%9E%E7%8E%B0windows%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E5%86%85%E7%BD%91%E6%9C%BA%E5%99%A8/20200115201633964.png" alt="img"></p>
<ol start="11">
<li><p>各个平台下输入ip:3399远程控制和账户名、密码即可。<br>控制端使用Micosoft remote desktop即可，在IOS， Android， MAC上均有app；</p>
<p>若控制端为windows，则使用自带的远程桌面连接即可。</p>
<p>ps: 比TeamViewer免费版快多了，而且没有设备数量限制</p>
</li>
</ol>
]]></content>
      <categories>
        <category>内网穿透</category>
      </categories>
      <tags>
        <tag>内网穿透</tag>
      </tags>
  </entry>
  <entry>
    <title>相对熵（KL散度）</title>
    <url>/post/66caae23.html</url>
    <content><![CDATA[<p>我们简单介绍了信息熵的概念，知道了信息熵可以表达数据的信息量大小，是信息处理一个非常重要的概念。</p>
<p>对于离散型随机变量，信息熵公式如下：<br>$$<br>H ( p ) = H ( X ) = \mathrm { E } _ { x \sim p ( x ) } [ - \log p ( x ) ] = -\sum_{i=1}^n  p ( x )\log p ( x )<br>$$<br>对于连续型随机变量，信息熵公式如下：<br>$$<br>H ( p ) = H ( X ) = \mathrm { E } _ { x \sim p ( x ) } [ - \log p ( x ) ] = - \int p ( x ) \log p ( x ) d x<br>$$<br>注意，我们前面在说明的时候log是以2为底的，但是一般情况下在神经网络中，默认以e为底，这样算出来的香农信息量虽然不是最小的可用于完整表示事件的比特数，但对于信息熵的含义来说是区别不大的。其实只要这个底数是大于1的，都能用来表达信息熵的大小。</p>
<p>本篇我们来看看机器学习中比较重要的一个概念—相对熵。相对熵，又被称为KL散度或信息散度，是两个概率分布间差异的非对称性度量 。在信息论中，相对熵等价于两个概率分布的信息熵的差值，若其中一个概率分布为真实分布，另一个为理论（拟合）分布，则此时相对熵等于交叉熵与真实分布的信息熵之差，表示使用理论分布拟合真实分布时产生的信息损耗 。</p>
<p>看完上面的解释，我相信你跟我开始看的时候一模一样，一脸懵逼。下面我们直接看公式，然后慢慢理解：<br>$$<br>D _ { K L } ( p | q ) = \sum _ { i = 1 } ^ { N } \left[ p \left( x _ { i } \right)\log p \left( x _ { i } \right) - p \left( x _ { i } \right)\log q \left( x _ { i } \right)\right]<br>$$<br>上面的<br>$$<br>p ( x _i)<br>$$<br>为真实事件的概率分布，<br>$$<br>q ( x _i)<br>$$<br>为理论拟合出来的该事件的概率分布。</p>
<p>因此该公式的字面上含义就是真实事件的信息熵与理论拟合的事件的香农信息量与真实事件的概率的乘积的差的累加。比较难懂的是<br>$$<br>-\sum _ { i = 1 } ^ { N } p \left( x _ { i } \right) \log q \left( x _ { i } \right)<br>$$<br>这玩意，到底是什么鬼。经过我看了又看，我发现好像很难做出含义解释，估计这东西是前人凑出来的好用的东西（以后有新的理解会更新上来）。那么退而求其次看看它有什么用吧。</p>
<p>假设理论拟合出来的事件概率分布跟真实的一模一样，那么这玩意就等于真实事件的信息熵，这一点显而易见。</p>
<p>假设拟合的不是特别好，那么这个玩意会比真实事件的信息熵大（稍后证明）。</p>
<p>也就是在理论拟合出来的事件概率分布跟真实的一模一样的时候，相对熵等于0。而拟合出来不太一样的时候，相对熵大于0。这个性质很关键，因为它正是深度学习梯度下降法需要的特性。假设神经网络拟合完美了，那么它就不再梯度下降，而不完美则因为它大于0而继续下降。</p>
<p>但它有不好的地方，就是它是不对称的。举个例子，比如随机变量X∼P取值为1,2,3时的概率分别为[0.1,0.4,0.5]，随机变量Y∼Q取值为1,2,3时的概率分别为[0.4,0.2,0.4]，则：<br>$$<br>D ( P | Q ) = 0.1 \times \log \left( \frac { 0.1 } { 0.4 } \right) + 0.4 \times \log \left( \frac { 0.4 } { 0.2 } \right) + 0.5 \times \log \left( \frac { 0.5 } { 0.4 } \right)=0.250<br>$$</p>
<p>$$<br>D ( Q | P ) = 0.4 \times \log \left( \frac { 0.4 } { 0.1 } \right) + 0.2 \times \log \left( \frac { 0.2 } { 0.4 } \right) + 0.4 \times \log \left( \frac { 0.4 } { 0.5 } \right)=0.327<br>$$</p>
<p>也就是用P来拟合Q和用Q来拟合P的相对熵居然不一样，而他们的距离是一样的。这也就是说，相对熵的大小并不跟距离有一一对应的关系。这点蛮头疼的，因为一般我们希望距离越远下降越快，而相对熵取哪个为参考在同等距离情况下下降的速度都不一样，这就非常尴尬了。</p>
<p>推导到这相信很多人会想，既然如此，那为什么现在还是很多人用相对熵衍生出来的交叉熵作为损失函数来训练神经网络而不直接用距离相关的均方差呢？<br>以下面的例子稍作解释：<br>假设神经网络的最后一层激活函数为sigmoid，它长这样：<br><img src="/../images/%E7%9B%B8%E5%AF%B9%E7%86%B5%EF%BC%88KL%E6%95%A3%E5%BA%A6%EF%BC%89/201812181413501.png" alt="在这里插入图片描述"><br>可以看到它的两头异常的平，也就是说在那些地方的导数接近于0。而反向传播是需要求导的，用了均方差损失函数之后求导结果包含y(y−1)（可参考<a href="https://aichn.cn/post/74e51a6a.html">这篇文章深度学习1—最简单的全连接神经网络</a>），这在y接近于0或者1的时候都趋于0，会导致梯度消失，网络训练不下去。但如果用相对熵衍生出来的交叉熵作为损失函数则没有这个问题。详细的分析可见<a href="https://aichn.cn/post/7c5ef9ec.html">这篇文章为什么交叉熵能作为损失函数及其弥补了平方差损失什么缺陷</a>。因此虽然相对熵的距离特性不是特别好，但总归好过直接梯度消失玩不下去，因此很多用sigmoid作为激活函数的神经网络还是选择了用相对熵衍生出来的交叉熵作为损失函数。<br>当然如果你选用的不是sigmoid激活函数，则不需要考虑这些，这个是外话了。</p>
<p>最后来证明下相对熵公式只有在<br>$$<br>p(x_i)等于q(x_i)<br>$$<br>的时候等于0，其他时候大于0。<br>要证：<br>$$<br>D _ { K L } ( p | q ) = \sum _ { i = 1 } ^ { N } \left[ p \left( x _ { i } \right)\log p \left( x _ { i } \right) - p \left( x _ { i } \right)\log q \left( x _ { i } \right)\right]\geq0<br>$$<br>即证<br>$$<br>\sum _ { i = 1 } ^ { N } p (x_ { i }) \log \ \frac { q (x_ { i }) } { p (x_ { i }) }  \leq0<br>$$<br>又<br>$$<br>\ln ( x ) \leq x - 1<br>$$<br>，当且仅当x=1时等号成立又ln(x)≤x−1，当且仅当x=1时等号成立</p>
<p>故<br>$$<br>\sum _ { i = 1 } ^ { N } p (x_ { i }) \log \ \frac { q (x_ { i }) } { p (x_ { i }) }  \leq\sum _ { i = 1 } ^ { N } p (x_ { i }) (\frac { q (x_ { i }) } { p (x_ { i }) }-1)=\sum _ { i = 1 } ^ { N } [p (x_ { i })-q (x_ { i })]=0<br>$$<br>上面式子中≤的等于号只在<br>$$<br>p (x_ { i })=q (x_ { i })<br>$$<br>时成立。</p>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>-人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖+公网ip+阿里云ddns解析，完美外网访问</title>
    <url>/post/602c2475.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h3><p>上回说到，通过公网IP，我们已经能使用 ip:端口 的方式，在外网访问到，我们的群晖nas了。</p>
<p>但是面临着两个问题。第一点，公网ip复杂难记，就是你勉强记住了，熟悉了，第二点，ip是会变化的。</p>
<p>这就很难受了。</p>
<p>有没有什么好的解决方案。</p>
<p>答案自然是有的——DDNS。</p>
<h3 id="什么是DDNS"><a href="#什么是DDNS" class="headerlink" title="什么是DDNS"></a><strong>什么是DDNS</strong></h3><p>参考百度百科。</p>
<blockquote>
<p>DDNS（Dynamic Domain Name Server，动态域名服务）是将用户的动态IP地址映射到一个固定的域名解析服务上，用户每次连接网络的时候客户端程序就会通过信息传递把该主机的动态IP地址传送给位于服务商主机上的服务器程序，服务器程序负责提供DNS服务并实现动态域名解析。</p>
</blockquote>
<p>这东西听起来就很符合我们的需求。</p>
<p>开搞。</p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a><strong>准备</strong></h3><p>其实群晖自带也是有DDNS的设置的。在，控制面板-外部访问-DDNS中。</p>
<p><img src="/../images/%E7%BE%A4%E6%99%96+%E5%85%AC%E7%BD%91ip+%E9%98%BF%E9%87%8C%E4%BA%91ddns%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%AE%8C%E7%BE%8E%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE/v2-ca7f7c4df3126d2b21d696cddbd733dc_720w.jpg" alt="img"></p>
<p>其实，可以申请群晖自己的服务，包括域名那些。</p>
<p>好像是可以免费的。（没折腾过，不清楚，回头试试）</p>
<p>可是我为啥还是选择阿里云。</p>
<ol>
<li>机子支持docker，想玩。（别问我为啥需要docker，因为群晖ddns的设置里面，服务商没有阿里云的）</li>
<li>我自己有阿里云服务器；</li>
<li>我已经有备案好的自己的域名了。</li>
</ol>
<p>如果你也想加入阿里云。可以看看这里。双十二还有活动。</p>
<p><a href="https://link.zhihu.com/?target=https://www.aliyun.com/minisite/goods?userCode=zyatgdr1&taskCode=pintuan20201212&recordId=305304">优惠上云，来阿里云·云小站www.aliyun.com/minisite/goods?userCode=zyatgdr1&amp;taskCode=pintuan20201212&amp;recordId=305304<img src="https://pic1.zhimg.com/v2-8d9075848f13871f324bab0db4eb7628_ipico.jpg" alt="img"></a></p>
<p>如果你也具备这些条件，那就继续往下看。</p>
<h3 id="阿里云设置"><a href="#阿里云设置" class="headerlink" title="阿里云设置"></a><strong>阿里云设置</strong></h3><h3 id="1-登录阿里云控制台，鼠标右上角头像，找到-“accesskey管理”"><a href="#1-登录阿里云控制台，鼠标右上角头像，找到-“accesskey管理”" class="headerlink" title="1. 登录阿里云控制台，鼠标右上角头像，找到 “accesskey管理”"></a><strong>1. 登录阿里云控制台，鼠标右上角头像，找到 “accesskey管理”</strong></h3><p><img src="/../images/%E7%BE%A4%E6%99%96+%E5%85%AC%E7%BD%91ip+%E9%98%BF%E9%87%8C%E4%BA%91ddns%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%AE%8C%E7%BE%8E%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE/v2-5bebd9022932f48f9ab3452d7f6a596a_720w.jpg" alt="img"></p>
<h3 id="2-进去之后选择使用子账号Accesskey"><a href="#2-进去之后选择使用子账号Accesskey" class="headerlink" title="2. 进去之后选择使用子账号Accesskey"></a><strong>2. 进去之后选择使用子账号Accesskey</strong></h3><p>因为就是说，好管理，权限分配的比较明确。这一块，比较推荐这么做。</p>
<p>创建好账号，授权</p>
<h3 id="3-权限管理-授权"><a href="#3-权限管理-授权" class="headerlink" title="3. 权限管理-授权"></a><strong>3. 权限管理-授权</strong></h3><p>选择就是 <strong>管理云解析（DNS）的权限</strong></p>
<p>注意是<strong>管理</strong>！</p>
<h3 id="4-将账号的-AccessKeyID、AccessKeySecret-保存下来"><a href="#4-将账号的-AccessKeyID、AccessKeySecret-保存下来" class="headerlink" title="4. 将账号的 AccessKeyID、AccessKeySecret 保存下来"></a><strong>4. 将账号的 AccessKeyID、AccessKeySecret 保存下来</strong></h3><p>有个选择，可以选择下载下来的。</p>
<p>这样不容易忘记。</p>
<p>保存这两个，极其重要。</p>
<h3 id="域名设置"><a href="#域名设置" class="headerlink" title="域名设置"></a><strong>域名设置</strong></h3><p>还是在阿里云的控制台，选择就是找到域名解析。</p>
<p><img src="/../images/%E7%BE%A4%E6%99%96+%E5%85%AC%E7%BD%91ip+%E9%98%BF%E9%87%8C%E4%BA%91ddns%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%AE%8C%E7%BE%8E%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE/v2-16e22c6683ebed48cb51c4af090d9644_720w.jpg" alt="img"></p>
<p>点击<strong>“域名”</strong>，进去找到就是域名解析。</p>
<p>对自己已经备好案的域名，进行解析的设置。</p>
<p>选择添加记录。</p>
<p><img src="/../images/%E7%BE%A4%E6%99%96+%E5%85%AC%E7%BD%91ip+%E9%98%BF%E9%87%8C%E4%BA%91ddns%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%AE%8C%E7%BE%8E%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE/v2-396eddb9ac921a9012448767cc3a0f4a_720w.jpg" alt="img"></p>
<p>选择类型A-将域名指向一个ipv4地址，</p>
<p>主机记录，补充完整自己的域名。（这个完整的域名下面要用到）</p>
<p>记录值，选择你家的公网ip。</p>
<h3 id="docker跑起来"><a href="#docker跑起来" class="headerlink" title="docker跑起来"></a><strong>docker跑起来</strong></h3><h3 id="1-套件中心下载docker，安装"><a href="#1-套件中心下载docker，安装" class="headerlink" title="1. 套件中心下载docker，安装"></a><strong>1. 套件中心下载docker，安装</strong></h3><h3 id="2-在注册表中，搜索-“aliyun-ddns”，此处我用的第一个"><a href="#2-在注册表中，搜索-“aliyun-ddns”，此处我用的第一个" class="headerlink" title="2. 在注册表中，搜索 “aliyun-ddns”，此处我用的第一个"></a><strong>2. 在注册表中，搜索 “aliyun-ddns”，此处我用的第一个</strong></h3><p><img src="/../images/%E7%BE%A4%E6%99%96+%E5%85%AC%E7%BD%91ip+%E9%98%BF%E9%87%8C%E4%BA%91ddns%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%AE%8C%E7%BE%8E%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE/v2-d7cf6ec1f74f3a6a06778c83481e2e83_720w.jpg" alt="img"></p>
<h3 id="3-右键下载安装"><a href="#3-右键下载安装" class="headerlink" title="3. 右键下载安装"></a><strong>3. 右键下载安装</strong></h3><p>如果你下载不了，可能docker需要设置一下。 这个在我折腾<strong>jellyfin</strong> 的时候，就体验到了。</p>
<p>如果docker下载速度慢，或者失败，你可能需要设置下docker镜像。</p>
<p><a href="https://zhuanlan.zhihu.com/p/337825636">卡尺：第六篇：群晖docker加速镜像下载5 赞同 · 6 评论文章<img src="/../images/%E7%BE%A4%E6%99%96+%E5%85%AC%E7%BD%91ip+%E9%98%BF%E9%87%8C%E4%BA%91ddns%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%AE%8C%E7%BE%8E%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE/v2-a52a73c2cdf8b6885fee7c5badb2597f_180x120.jpg" alt="img"></a></p>
<p>关于一个是jellyfin的教程。</p>
<h3 id="4-等待下载完成，你可以在“映像”中看到"><a href="#4-等待下载完成，你可以在“映像”中看到" class="headerlink" title="4. 等待下载完成，你可以在“映像”中看到"></a><strong>4. 等待下载完成，你可以在“映像”中看到</strong></h3><p><img src="/../images/%E7%BE%A4%E6%99%96+%E5%85%AC%E7%BD%91ip+%E9%98%BF%E9%87%8C%E4%BA%91ddns%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%AE%8C%E7%BE%8E%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE/v2-b2d1eee22eeb7c2ada129cbc178dea04_720w.jpg" alt="img"></p>
<h3 id="5-选中，左上角的“启动”，打开设置向导"><a href="#5-选中，左上角的“启动”，打开设置向导" class="headerlink" title="5. 选中，左上角的“启动”，打开设置向导"></a><strong>5. 选中，左上角的“启动”，打开设置向导</strong></h3><p>在<strong>”高级设置“</strong>中，选择“<strong>环境</strong>“ ，对应关系</p>
<p>AKID 对应 刚刚保存下来的 AccessKeyID</p>
<p>AKSCT 对应 AccessKeySecret</p>
<p>DOMAIN 对应 （刚刚的完整的）你的域名</p>
<h3 id="6-应用，启动，"><a href="#6-应用，启动，" class="headerlink" title="6. 应用，启动，"></a><strong>6. 应用，启动，</strong></h3><p>在容器选择你启动的ddns，右键详情，在日志里面找到解析记录的话，就是成功了。</p>
<h3 id="如何访问"><a href="#如何访问" class="headerlink" title="如何访问"></a><strong>如何访问</strong></h3><p>当上面都弄好了。你可以通过 域名加端口的方式，访问到你的群晖了。举个栗子。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">home.xxxx.xyz:5000</span><br></pre></td></tr></table></figure>


<p>至此，外网访问总算是完美了。</p>
<hr>
<p>希望对你有帮助。</p>
<hr>
<p><strong>2020/12/18 补充更新</strong></p>
<p>早上看到阿里云半夜给我发邮件。说是记录值修改了。</p>
<p><img src="/../images/%E7%BE%A4%E6%99%96+%E5%85%AC%E7%BD%91ip+%E9%98%BF%E9%87%8C%E4%BA%91ddns%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%AE%8C%E7%BE%8E%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE/v2-5153f98826647a28ea12dfa4bf647515_720w.jpg" alt="img"></p>
<p>可以证明我们的设置没有问题。当公网ip变化的时候，docker的程序能发现这一变化，然后因为有云解析的权限，去修改了这个记录值，保证我们能通过一直通过域名访问到我的群晖啦。</p>
]]></content>
      <categories>
        <category>ddns</category>
      </categories>
      <tags>
        <tag>ddns</tag>
      </tags>
  </entry>
  <entry>
    <title>老外做的中国汉字的网站</title>
    <url>/post/11261dbb.html</url>
    <content><![CDATA[<p><a href="http://www.chineseetymology.org/CharacterEtymology.aspx?characterInput=%E8%BB%8A&amp;submitButton1=Etymology">http://www.chineseetymology.org/CharacterEtymology.aspx?characterInput=車&amp;submitButton1=Etymology</a></p>
<p><a href="http://hanziyuan.net/">http://hanziyuan.net/</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>-其他</tag>
      </tags>
  </entry>
  <entry>
    <title>系统如何分辨出垃圾邮件? 数据挖掘算法与现实生活中的应用案例</title>
    <url>/post/64e638e5.html</url>
    <content><![CDATA[<p>对于武汉，北京的秋来的真是早，九月初的傍晚，就能够感觉到丝丝丝丝丝丝的凉意。</p>
<p>最近两件事挺有感觉的。</p>
<p>看某发布会，设计师李剑叶的话挺让人感动的。“**的设计是内敛和克制的…。希望设计成为一种，可以被忽略的存在感”。</p>
<p>其次，有感于不断跳Tone的妇科圣手，冯唐，“有追求、敢放弃”是他的标签。</p>
<p>“如何分辨出垃圾邮件”、“如何判断一笔交易是否属于欺诈”、“如何判断红酒的品质和档次”、“扫描王是如何做到文字识别的”、“如何判断佚名的著作是否出自某位名家之手”、“如何判断一个细胞是否属于肿瘤细胞”等等，这些问题似乎都很专业，都不太好回答。但是，如果了解一点点数据挖掘（Data Mining）的知识，你，或许会有柳暗花明的感觉。</p>
<p>的确，数据挖掘无处不在。它和生活密不可分，就像空气一样，弥漫在你的周围。但是，很多时候，你并不能意识到它。因此，它是陌生的，也是熟悉的。</p>
<p>本文，主要想简单介绍下数据挖掘中的<a href="http://www.dataguru.cn/article-5747-1.html?union_site=innerlink">算法</a>，以及它包含的类型。然后，通过现实中触手可及的、活生生的案例，去诠释它的真实存在。</p>
<p>一、数据挖掘的算法类型</p>
<p><img src="/../images/%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E5%88%86%E8%BE%A8%E5%87%BA%E5%9E%83%E5%9C%BE%E9%82%AE%E4%BB%B6%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E7%AE%97%E6%B3%95%E4%B8%8E%E7%8E%B0%E5%AE%9E%E7%94%9F%E6%B4%BB%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%E6%A1%88%E4%BE%8B/112529swlt4f4etwfiote5.jpg" alt="数据挖掘"></p>
<p>一般来说，数据挖掘的算法包含四种类型，即分类、预测、聚类、关联。前两种属于有监督学习，后两种属于无监督学习，属于描述性的模式识别和发现。</p>
<p>（一）有监督学习</p>
<p>有监督的学习，即存在目标变量，需要探索特征变量和目标变量之间的关系，在目标变量的监督下学习和优化算法。例如，信用评分模型就是典型的有监督学习，目标变量为“是否违约”。算法的目的在于研究特征变量（人口统计、资产属性等）和目标变量之间的关系。</p>
<p>（1）分类算法</p>
<p>分类算法和预测算法的较大区别在于，前者的目标变量是分类离散型（例如，是否逾期、是否肿瘤细胞、是否垃圾邮件等），后者的目标变量是连续型。一般而言，具体的分类算法包括，逻辑回归、决策树、KNN、贝叶斯判别、SVM、随机森林、<a href="http://www.dataguru.cn/article-8976-1.html?union_site=innerlink">神经网络</a>等。</p>
<p>（2）预测算法</p>
<p>预测类算法，其目标变量一般是连续型变量。常见的算法，包括线性回归、回归树、神经网络、SVM等。</p>
<p>（二）无监督学习</p>
<p>无监督学习，即不存在目标变量，基于数据本身，去识别变量之间内在的模式和特征。例如关联分析，通过数据发现项目A和项目B之间的关联性。例如聚类分析，通过距离，将所有样本划分为几个稳定可区分的群体。这些都是在没有目标变量监督下的模式识别和分析。</p>
<p>（1）聚类分析</p>
<p>聚类的目的就是实现对样本的细分，使得同组内的样本特征较为相似，不同组的样本特征差异较大。常见的聚类算法包括kmeans、系谱聚类、密度聚类等。</p>
<p>（2）关联分析</p>
<p>关联分析的目的在于，找出项目（item）之间内在的联系。常常是指购物篮分析，即消费者常常会同时购买哪些产品（例如游泳裤、防晒霜），从而有助于商家的捆绑销售。</p>
<p>二、基于数据挖掘的案例和应用</p>
<p>上文所提到的四种算法类型（分类、预测、聚类、关联），是比较传统和常见的。还有其他一些比较有趣的算法分类和应用场景，例如协同过滤、异常值分析、社会网络、文本分析等。下面，想针对不同的算法类型，具体的介绍下数据挖掘在日常生活中真实的存在。下面是能想到的、几个比较有趣的、和生活紧密关联的例子。</p>
<p><img src="/../images/%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E5%88%86%E8%BE%A8%E5%87%BA%E5%9E%83%E5%9C%BE%E9%82%AE%E4%BB%B6%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E7%AE%97%E6%B3%95%E4%B8%8E%E7%8E%B0%E5%AE%9E%E7%94%9F%E6%B4%BB%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%E6%A1%88%E4%BE%8B/112529hed5dyfefxkg2hud.jpg" alt="数据挖掘"></p>
<p>（一）基于分类模型的案例</p>
<p>这里面主要想介绍两个案例，一个是垃圾邮件的分类和判断，另外一个是在生物医药领域的应用，即肿瘤细胞的判断和分辨。</p>
<p><img src="/../images/%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E5%88%86%E8%BE%A8%E5%87%BA%E5%9E%83%E5%9C%BE%E9%82%AE%E4%BB%B6%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E7%AE%97%E6%B3%95%E4%B8%8E%E7%8E%B0%E5%AE%9E%E7%94%9F%E6%B4%BB%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%E6%A1%88%E4%BE%8B/112529mxx3yxy5pxxpqpyx.jpg" alt="数据挖掘"></p>
<p>（1）垃圾邮件的判别</p>
<p>邮箱系统如何分辨一封Email是否属于垃圾邮件？这应该属于文本挖掘的范畴，通常会采用朴素贝叶斯的方法进行判别。它的主要原理是，根据邮件正文中的单词，是否经常出现在垃圾邮件中，进行判断。例如，如果一份邮件的正文中包含“报销”、“发票”、“促销”等词汇时，该邮件被判定为垃圾邮件的概率将会比较大。</p>
<p>一般来说，判断邮件是否属于垃圾邮件，应该包含以下几个步骤。</p>
<p>第一，把邮件正文拆解成单词组合，假设某篇邮件包含100个单词。</p>
<p>第二，根据贝叶斯条件概率，计算一封已经出现了这100个单词的邮件，属于垃圾邮件的概率和正常邮件的概率。如果结果表明，属于垃圾邮件的概率大于正常邮件的概率。那么该邮件就会被划为垃圾邮件。</p>
<p>（2）医学上的肿瘤判断</p>
<p>如何判断细胞是否属于肿瘤细胞呢？肿瘤细胞和普通细胞，有差别。但是，需要非常有经验的医生，通过病理切片才能判断。如果通过<a href="http://www.dataguru.cn/article-4063-1.html?union_site=innerlink">机器学习</a>的方式，使得系统自动识别出肿瘤细胞。此时的效率，将会得到飞速的提升。并且，通过主观（医生）+客观（模型）的方式识别肿瘤细胞，结果交叉验证，结论可能更加靠谱。</p>
<p>如何操作？通过分类模型识别。简言之，包含两个步骤。首先，通过一系列指标刻画细胞特征，例如细胞的半径、质地、周长、面积、光滑度、对称性、凹凸性等等，构成细胞特征的数据。其次，在细胞特征宽表的基础上，通过搭建分类模型进行肿瘤细胞的判断。</p>
<p>（二）基于预测模型的案例</p>
<p>这里面主要想介绍两个案例。即通过化学特性判断和预测红酒的品质。另外一个是，通过搜索引擎来预测和判断股价的波动和趋势。</p>
<p>（1）红酒品质的判断</p>
<p>如何评鉴红酒？有经验的人会说，红酒最重要的是口感。而口感的好坏，受很多因素的影响，例如年份、产地、气候、酿造的工艺等等。但是，统计学家并没有时间去品尝各种各样的红酒，他们觉得通过一些化学属性特征就能够很好地判断红酒的品质了。并且，现在很多酿酒企业其实也都这么干了，通过监测红酒中化学成分的含量，从而控制红酒的品质和口感。</p>
<p>那么，如何判断鉴红酒的品质呢？</p>
<p>第一步，收集很多红酒样本，整理检测他们的化学特性，例如酸性、含糖量、氯化物含量、硫含量、酒精度、PH值、密度等等。</p>
<p>第二步，通过分类回归树模型进行预测和判断红酒的品质和等级。</p>
<p>（2）搜索引擎的搜索量和股价波动</p>
<p>一只南美洲热带雨林中的蝴蝶，偶尔扇动了几下翅膀，可以在两周以后，引起美国德克萨斯州的一场龙卷风。你在互联网上的搜索是否会影响公司股价的波动？</p>
<p>很早之前，就已经有文献证明，互联网关键词的搜索量（例如流感）会比疾控中心提前1到2周预测出某地区流感的爆发。</p>
<p>同样，现在也有些学者发现了这样一种现象，即公司在互联网中搜索量的变化，会显著影响公司股价的波动和趋势，即所谓的投资者注意力理论。该理论认为，公司在搜索引擎中的搜索量，代表了该股票被投资者关注的程度。因此，当一只股票的搜索频数增加时，说明投资者对该股票的关注度提升，从而使得该股票更容易被个人投资者购买，进一步地导致股票价格上升，带来正向的股票收益。这是已经得到无数论文验证了的。</p>
<p>（三）基于关联分析的案例：沃尔玛的啤酒尿布</p>
<p>啤酒尿布是一个非常非常古老陈旧的故事。故事是这样的，沃尔玛发现一个非常有趣的现象，即把尿布与啤酒这两种风马牛不相及的商品摆在一起，能够大幅增加两者的销量。原因在于，美国的妇女通常在家照顾孩子，所以，她们常常会嘱咐丈夫在下班回家的路上为孩子买尿布，而丈夫在买尿布的同时又会顺手购买自己爱喝的啤酒。沃尔玛从数据中发现了这种关联性，因此，将这两种商品并置，从而大大提高了关联销售。</p>
<p>啤酒尿布主要讲的是产品之间的关联性，如果大量的数据表明，消费者购买A商品的同时，也会顺带着购买B产品。那么A和B之间存在关联性。在超市中，常常会看到两个商品的捆绑销售，很有可能就是关联分析的结果。</p>
<p>（四）基于聚类分析的案例：零售客户细分</p>
<p>对客户的细分，还是比较常见的。细分的功能，在于能够有效的划分出客户群体，使得群体内部成员具有相似性，但是群体之间存在差异性。其目的在于识别不同的客户群体，然后针对不同的客户群体，精准地进行产品设计和推送，从而节约营销成本，提高营销效率。</p>
<p>例如，针对商业银行中的零售客户进行细分，基于零售客户的特征变量（人口特征、资产特征、负债特征、结算特征），计算客户之间的距离。然后，按照距离的远近，把相似的客户聚集为一类，从而有效的细分客户。将全体客户划分为诸如，理财偏好者、基金偏好者、活期偏好者、国债偏好者、风险均衡者、渠道偏好者等。</p>
<p><img src="/../images/%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E5%88%86%E8%BE%A8%E5%87%BA%E5%9E%83%E5%9C%BE%E9%82%AE%E4%BB%B6%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E7%AE%97%E6%B3%95%E4%B8%8E%E7%8E%B0%E5%AE%9E%E7%94%9F%E6%B4%BB%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%E6%A1%88%E4%BE%8B/112529woa4d740pdtyroxi.jpg" alt="数据挖掘"></p>
<p>（五）基于异常值分析的案例：支付中的交易欺诈侦测</p>
<p>采用支付宝支付时，或者刷信用卡支付时，系统会实时判断这笔刷卡行为是否属于盗刷。通过判断刷卡的时间、地点、商户名称、金额、频率等要素进行判断。这里面基本的原理就是寻找异常值。如果您的刷卡被判定为异常，这笔交易可能会被终止。</p>
<p>异常值的判断，应该是基于一个欺诈规则库的。可能包含两类规则，即事件类规则和模型类规则。第一，事件类规则，例如刷卡的时间是否异常（凌晨刷卡）、刷卡的地点是否异常（非经常所在地刷卡）、刷卡的商户是否异常（被列入黑名单的套现商户）、刷卡金额是否异常（是否偏离正常均值的三倍标准差）、刷卡频次是否异常（高频密集刷卡）。第二，模型类规则，则是通过算法判定交易是否属于欺诈。一般通过支付数据、卖家数据、结算数据，构建模型进行分类问题的判断。</p>
<p>（六）基于协同过滤的案例：电商猜你喜欢和推荐引擎</p>
<p>电商中的猜你喜欢，应该是大家更为熟悉的。在京东商城或者亚马逊购物，总会有“猜你喜欢”、“根据您的浏览历史记录精心为您推荐”、“购买此商品的顾客同时也购买了<strong>商品”、“浏览了该商品的顾客最终购买了</strong>商品”，这些都是推荐引擎运算的结果。</p>
<p>这里面，确实很喜欢亚马逊的推荐，通过“购买该商品的人同时购买了**商品”，常常会发现一些质量比较高、较为受认可的书。</p>
<p>一般来说，电商的“猜你喜欢”（即推荐引擎）都是在协同过滤算法（Collaborative Filter）的基础上，搭建一套符合自身特点的规则库。即该算法会同时考虑其他顾客的选择和行为，在此基础上搭建产品相似性矩阵和用户相似性矩阵。基于此，找出最相似的顾客或最关联的产品，从而完成产品的推荐。</p>
<p>（七）基于社会网络分析的案例：电信中的种子客户</p>
<p>种子客户和社会网络，最早出现在电信领域的研究。即，通过人们的通话记录，就可以勾勒出人们的关系网络。电信领域的网络，一般会分析客户的影响力和客户流失、产品扩散的关系。</p>
<p>基于通话记录，可以构建客户影响力指标体系。采用的指标，大概包括如下，一度人脉、二度人脉、三度人脉、平均通话频次、平均通话量等。基于社会影响力，分析的结果表明，高影响力客户的流失会导致关联客户的流失。其次，在产品的扩散上，选择高影响力客户作为传播的起点，很容易推动新套餐的扩散和渗透。</p>
<p>此外，社会网络在银行（担保网络）、保险（团伙欺诈）、互联网（社交互动）中也都有很多的应用和案例。</p>
<p><img src="/../images/%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E5%88%86%E8%BE%A8%E5%87%BA%E5%9E%83%E5%9C%BE%E9%82%AE%E4%BB%B6%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E7%AE%97%E6%B3%95%E4%B8%8E%E7%8E%B0%E5%AE%9E%E7%94%9F%E6%B4%BB%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%E6%A1%88%E4%BE%8B/112529ymohcxcw100x51ok.jpg" alt="数据挖掘"></p>
<p>（八）基于文本分析的案例</p>
<p>这里面主要想介绍两个案例。一个是类似“扫描王”的APP，直接把纸质文档扫描成电子文档。相信很多人都用过，这里准备简单介绍下原理。另外一个是，江湖上总是传言红楼梦的前八十回和后四十回，好像并非都是出自曹雪芹之手，这里面准备从统计的角度聊聊。</p>
<p>（1）字符识别：扫描王APP</p>
<p>手机拍照时会自动识别人脸，还有一些APP，例如扫描王，可以扫描书本，然后把扫描的内容自动转化为word。这些属于图像识别和字符识别（Optical Character Recognition）。图像识别比较复杂，字符识别理解起来比较容易些。</p>
<p>查找了一些资料，字符识别的大概原理如下，以字符S为例。</p>
<p>第一，把字符图像缩小到标准像素尺寸，例如12*16。注意，图像是由像素构成，字符图像主要包括黑、白两种像素。</p>
<p>第二，提取字符的特征向量。如何提取字符的特征，采用二维直方图投影。就是把字符（12*16的像素图）往水平方向和垂直方向上投影。水平方向有12个维度，垂直方向有16个维度。这样分别计算水平方向上各个像素行中黑色像素的累计数量、垂直方向各个像素列上的黑色像素的累计数量。从而得到水平方向12个维度的特征向量取值，垂直方向上16个维度的特征向量取值。这样就构成了包含28个维度的字符特征向量。</p>
<p>第三，基于前面的字符特征向量，通过神经网络学习，从而识别字符和有效分类。</p>
<p>（2）文学著作与统计：红楼梦归属</p>
<p>这是非常著名的一个争论，悬而未决。对于红楼梦的作者，通常认为前80回合是曹雪芹所著，后四十回合为高鹗所写。其实主要问题，就是想确定，前80回合和后40回合是否在遣词造句方面存在显著差异。</p>
<p>这事让一群统计学家比较兴奋了。有些学者通过统计名词、动词、形容词、副词、虚词出现的频次，以及不同词性之间的相关系做判断。有些学者通过虚词（例如之、其、或、亦、了、的、不、把、别、好），判断前后文风的差异。有些学者通过场景（花卉、树木、饮食、医药与诗词）频次的差异，来做统计判断。总而言之，主要通过一些指标量化，然后比较指标之间是否存在显著差异，藉此进行写作风格的判断。</p>
]]></content>
      <categories>
        <category>数据挖掘</category>
      </categories>
      <tags>
        <tag>数据挖掘,算法</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖NAS搭建GitServer并配置权限与SSH秘钥免密登陆</title>
    <url>/post/e0cfee7a.html</url>
    <content><![CDATA[<p>一、序言<br>公司长期使用SVN作为版本管理仓库,并且没有使用分支管理,在开发与发布时遇到了很多问题.后来配置了Jenkins自动化出版本,在开发与发布中需要进场切换版本. 综合考虑,最终决定在内网NAS上搭建一个Git远程仓库.<br>NAS是Linux内核的操作系统,所以需要一定Linux命令操作的基础.查阅大量资料并实践,最终整理成这一篇文章.</p>
<p>二、环境配置</p>
<ol>
<li>群晖NAS (我们使用的非Plus版本,不支持docker安装GitLab,只能使用GitServer)</li>
<li>NAS管理员权限</li>
<li>SSH客户端,xshell或者putty</li>
</ol>
<p>三、开始配置</p>
<ol>
<li>安装GitServer<br>在群晖NAS的套件中心安装GitServer,这一步非常简单<br><img src="/../images/%E7%BE%A4%E6%99%96NAS%E6%90%AD%E5%BB%BAGitServer%E5%B9%B6%E9%85%8D%E7%BD%AE%E6%9D%83%E9%99%90%E4%B8%8ESSH%E7%A7%98%E9%92%A5%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29vbFlzbA==,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"></li>
<li>创建一个共享目录用于存放Git仓库,并设置访问权限</li>
<li>创建仓库目录<br><img src="/../images/%E7%BE%A4%E6%99%96NAS%E6%90%AD%E5%BB%BAGitServer%E5%B9%B6%E9%85%8D%E7%BD%AE%E6%9D%83%E9%99%90%E4%B8%8ESSH%E7%A7%98%E9%92%A5%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29vbFlzbA==,size_20,color_FFFFFF,t_70,g_se,x_16-16727463984671.png" alt="在这里插入图片描述"></li>
<li>创建一个用户群组,并设置访问权限<br><img src="/../images/%E7%BE%A4%E6%99%96NAS%E6%90%AD%E5%BB%BAGitServer%E5%B9%B6%E9%85%8D%E7%BD%AE%E6%9D%83%E9%99%90%E4%B8%8ESSH%E7%A7%98%E9%92%A5%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29vbFlzbA==,size_20,color_FFFFFF,t_70,g_se,x_16-16727463984672.png" alt="在这里插入图片描述"><br><img src="/../images/%E7%BE%A4%E6%99%96NAS%E6%90%AD%E5%BB%BAGitServer%E5%B9%B6%E9%85%8D%E7%BD%AE%E6%9D%83%E9%99%90%E4%B8%8ESSH%E7%A7%98%E9%92%A5%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29vbFlzbA==,size_20,color_FFFFFF,t_70,g_se,x_16-16727463984673.png" alt="在这里插入图片描述"></li>
<li>新建用户并加入git_group<br><img src="/../images/%E7%BE%A4%E6%99%96NAS%E6%90%AD%E5%BB%BAGitServer%E5%B9%B6%E9%85%8D%E7%BD%AE%E6%9D%83%E9%99%90%E4%B8%8ESSH%E7%A7%98%E9%92%A5%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29vbFlzbA==,size_20,color_FFFFFF,t_70,g_se,x_16-16727463984674.png" alt="在这里插入图片描述"><br><img src="/../images/%E7%BE%A4%E6%99%96NAS%E6%90%AD%E5%BB%BAGitServer%E5%B9%B6%E9%85%8D%E7%BD%AE%E6%9D%83%E9%99%90%E4%B8%8ESSH%E7%A7%98%E9%92%A5%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86/403b58a6aacf462189b4d66d1e575f96.png" alt="在这里插入图片描述"></li>
<li>在GitServer中添加用户访问权限<br>在NAS的主程序中打开GitServer,并添加刚刚创建的用户访问权限<br><img src="/../images/%E7%BE%A4%E6%99%96NAS%E6%90%AD%E5%BB%BAGitServer%E5%B9%B6%E9%85%8D%E7%BD%AE%E6%9D%83%E9%99%90%E4%B8%8ESSH%E7%A7%98%E9%92%A5%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29vbFlzbA==,size_20,color_FFFFFF,t_70,g_se,x_16-16727463984675.png" alt="在这里插入图片描述"></li>
<li>打开用户账户中的家目录<br>打开家目录有两个作用</li>
<li>解决用户通过ssh访问的时候会提示目录不存在的问题</li>
<li>可以为用户配置SSH秘钥,实现免密登陆<br><img src="/../images/%E7%BE%A4%E6%99%96NAS%E6%90%AD%E5%BB%BAGitServer%E5%B9%B6%E9%85%8D%E7%BD%AE%E6%9D%83%E9%99%90%E4%B8%8ESSH%E7%A7%98%E9%92%A5%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29vbFlzbA==,size_20,color_FFFFFF,t_70,g_se,x_16-16727463984686.png" alt="在这里插入图片描述"></li>
<li>开启SSH远程访问功能</li>
</ol>
<p><img src="/../images/%E7%BE%A4%E6%99%96NAS%E6%90%AD%E5%BB%BAGitServer%E5%B9%B6%E9%85%8D%E7%BD%AE%E6%9D%83%E9%99%90%E4%B8%8ESSH%E7%A7%98%E9%92%A5%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29vbFlzbA==,size_20,color_FFFFFF,t_70,g_se,x_16-16727463984687.png" alt="在这里插入图片描述"></p>
<p>走到这一步,NAS可以通过页面设置的部分都处理完成,接下来我们需要用过SSH远程连接NAS,通过命令来创建Git仓库</p>
<p>四、创建Git仓库<br>使用xshell/putty等工具连接NAS,需要用管理员账号登陆</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -i  							//切换管理员权限</span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">cd</span> /volume1/gittest   			//进入刚刚创建的共享目录中</span><br><span class="line"><span class="built_in">mkdir</span> res.git						//创建仓库	</span><br><span class="line"><span class="built_in">cd</span> res.git</span><br><span class="line">git init --bare 					//初始化git仓库</span><br></pre></td></tr></table></figure>
<p><img src="/../images/%E7%BE%A4%E6%99%96NAS%E6%90%AD%E5%BB%BAGitServer%E5%B9%B6%E9%85%8D%E7%BD%AE%E6%9D%83%E9%99%90%E4%B8%8ESSH%E7%A7%98%E9%92%A5%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29vbFlzbA==,size_20,color_FFFFFF,t_70,g_se,x_16-16727463984688.png" alt="在这里插入图片描述"></p>
<ol>
<li>配置设置文件归属和权限<br>至此，git仓库已经创建好，但是我们并不能正确访问到，因为目录还有访问权限，我们需要将gittest目录下所有文件的访问权限修改为当前用户可以访问</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /volume1 </span><br><span class="line"><span class="built_in">chown</span> -R root:git_group gittest			//修改gittest文件及其子目录的归属用户和组</span><br><span class="line"><span class="built_in">cd</span> </span><br></pre></td></tr></table></figure>
<p>五、使用Git与配置ssh秘钥</p>
<ol>
<li>接下来我们可以使用git来拉取NAS上的仓库了</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> ssh://gittest_user@192.168.2.55/volume1/gittest/res.git</span><br></pre></td></tr></table></figure>
<p>如果提示 Could not chdir to home directory /var/services/homes/gittest_user: Permission denied<br>warning: You appear to have cloned an empty repository.<br>我们需要将/var/service的权限修改一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 775 /var</span><br><span class="line"><span class="built_in">chmod</span> 775 /var/services</span><br><span class="line"><span class="built_in">chmod</span> 755 -R /var/services/homes										//homes以及子目录的权限必须为755</span><br></pre></td></tr></table></figure>
<ol>
<li>配置ssh秘钥<br>这里使用git拉取,推送每次都需要使用密码,我们可以创建秘钥来实现免密ssh登陆</li>
<li>允许ssh使用秘钥验证</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
<p>解开以下几行的注释,并退出保存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RSAAuthentication <span class="built_in">yes</span></span><br><span class="line">PubkeyAuthentication <span class="built_in">yes</span></span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<p>接着重启 ssh 服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo synoservicectl --restart sshd</span><br></pre></td></tr></table></figure>
<p>或者在NAS网页控制台中重新关闭,打开ssh设置<br>\2. 生成秘钥<br>在客户端主机中执行以下命令(我使用的git bash)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -f ./gittest_user    //-f 指定秘钥文件路径和名称</span><br></pre></td></tr></table></figure>
<p><img src="/../images/%E7%BE%A4%E6%99%96NAS%E6%90%AD%E5%BB%BAGitServer%E5%B9%B6%E9%85%8D%E7%BD%AE%E6%9D%83%E9%99%90%E4%B8%8ESSH%E7%A7%98%E9%92%A5%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29vbFlzbA==,size_18,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"></p>
<p>此时我们就得到了两个文件<br><img src="/../images/%E7%BE%A4%E6%99%96NAS%E6%90%AD%E5%BB%BAGitServer%E5%B9%B6%E9%85%8D%E7%BD%AE%E6%9D%83%E9%99%90%E4%B8%8ESSH%E7%A7%98%E9%92%A5%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29vbFlzbA==,size_20,color_FFFFFF,t_70,g_se,x_16-16727463984689.png" alt="在这里插入图片描述"></p>
<ol>
<li>上传公钥文件到NAS<br>客户端执行以下命令(git bash)</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp ./gittest_user.pub username@192.168.2.55:/volume1/homes/gittest_user/.ssh</span><br></pre></td></tr></table></figure>
<p>这个时候我们上传不了文件到NAS中,提示没有权限,这是因为NASgittest_user 目录下的权限是755</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp: /volume1/homes/gittest_user/.ssh//gittest_user.pub: Permission denied</span><br></pre></td></tr></table></figure>
<p>只有临时把NAS的 /volume1/homes/gittest_user 目录权限改为777,上传之后再修改回来</p>
<p>上传成功之后,使用xshell执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /volume1/homes/gittest_user/.ssh/</span><br><span class="line"><span class="built_in">cat</span> gittest_user.pub &gt; authorized_keys</span><br><span class="line"><span class="built_in">chmod</span> 755 authorized_keys	</span><br></pre></td></tr></table></figure>
<ol>
<li>客户端私钥转换<br>因为 TortoiseGit 和SourcesTree 使用的是ppk格式的私钥,我们需要把pem私钥转换成ppk私钥</li>
</ol>
<p>打开PuTTY Key Generator,并导入pem私钥<br><img src="/../images/%E7%BE%A4%E6%99%96NAS%E6%90%AD%E5%BB%BAGitServer%E5%B9%B6%E9%85%8D%E7%BD%AE%E6%9D%83%E9%99%90%E4%B8%8ESSH%E7%A7%98%E9%92%A5%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29vbFlzbA==,size_17,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"></p>
<p>点击 Save private key 保存ppk格式的私钥</p>
<ol>
<li>使用TortoiseGit重新拉取<br><img src="/../images/%E7%BE%A4%E6%99%96NAS%E6%90%AD%E5%BB%BAGitServer%E5%B9%B6%E9%85%8D%E7%BD%AE%E6%9D%83%E9%99%90%E4%B8%8ESSH%E7%A7%98%E9%92%A5%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29vbFlzbA==,size_20,color_FFFFFF,t_70,g_se,x_16-167274639846810.png" alt="在这里插入图片描述"></li>
</ol>
<p>现在每次拉取推送都不再需要输入密码了</p>
]]></content>
      <categories>
        <category>群晖</category>
      </categories>
      <tags>
        <tag>群晖</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝天官方各机型BIOS下载20161219更新</title>
    <url>/post/3a715a7a.html</url>
    <content><![CDATA[<h1 id="Index-of-CLEVO-BIOS"><a href="#Index-of-CLEVO-BIOS" class="headerlink" title="Index of /CLEVO BIOS"></a>Index of /CLEVO BIOS</h1><table>
<thead>
<tr>
<th align="left">[Name](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/?C=N;O=D)</th>
<th align="left">[Last modified](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/?C=M;O=A)</th>
<th align="left">[Size](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/?C=S;O=A)</th>
<th align="left">[Description](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/?C=D;O=A)</th>
</tr>
</thead>
<tbody><tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><a href="http://blacky.bestmail.ws/">Parent Directory</a></td>
<td align="left"></td>
<td align="left">-</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">[P6xxRx/](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/P6xxRx/)</td>
<td align="left">2016-04-17 11:15</td>
<td align="left">-</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">[P6xxSE/](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/P6xxSE/)</td>
<td align="left">2016-04-17 10:13</td>
<td align="left">-</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">[P6xxSG/](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/P6xxSG/)</td>
<td align="left">2016-04-17 10:18</td>
<td align="left">-</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">[P7x0DM/](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/P7x0DM/)</td>
<td align="left">2016-04-17 11:19</td>
<td align="left">-</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">[P18xHM/](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/P18xHM/)</td>
<td align="left">2011-12-01 19:06</td>
<td align="left">-</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">[P150EM/](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/P150EM/)</td>
<td align="left">2013-06-23 21:18</td>
<td align="left">-</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">[P150HM/](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/P150HM/)</td>
<td align="left">2012-09-14 10:59</td>
<td align="left">-</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">[P150SM/](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/P150SM/)</td>
<td align="left">2015-05-16 12:26</td>
<td align="left">-</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">[P151EM/](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/P151EM/)</td>
<td align="left">2013-06-23 22:38</td>
<td align="left">-</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">[P170EM/](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/P170EM/)</td>
<td align="left">2014-01-24 17:56</td>
<td align="left">-</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">[P170HM/](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/P170HM/)</td>
<td align="left">2012-07-04 17:01</td>
<td align="left">-</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">[P170SM/](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/P170SM/)</td>
<td align="left">2015-05-16 12:22</td>
<td align="left">-</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">[P370SM/](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/P370SM/)</td>
<td align="left">2015-07-25 11:40</td>
<td align="left">-</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">[P570WM/](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/P570WM/)</td>
<td align="left">2014-10-04 17:31</td>
<td align="left">-</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">[P750ZM/](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/P750ZM/)</td>
<td align="left">2015-09-19 11:24</td>
<td align="left">-</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">[P770ZM/](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/P770ZM/)</td>
<td align="left">2015-09-19 11:27</td>
<td align="left">-</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">[P775DM/](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/P775DM/)</td>
<td align="left">2016-04-17 11:18</td>
<td align="left">-</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">[P870DM/](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/P870DM/)</td>
<td align="left">2016-04-17 10:37</td>
<td align="left">-</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">[W1xER/](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/W1xER/)</td>
<td align="left">2013-12-18 10:49</td>
<td align="left">-</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">[W35xST/](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/W35xST/)</td>
<td align="left">2014-01-31 14:37</td>
<td align="left">-</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">[W110ER/](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/W110ER/)</td>
<td align="left">2013-12-18 10:41</td>
<td align="left">-</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">[W230SS/](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/W230SS/)</td>
<td align="left">2015-05-16 12:37</td>
<td align="left">-</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">[W230ST/](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/W230ST/)</td>
<td align="left">2014-10-04 18:05</td>
<td align="left">-</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">[other/](<a href="http://blacky.bestmail.ws/CLEVO">http://blacky.bestmail.ws/CLEVO</a> BIOS/other/)</td>
<td align="left">2015-07-17 22:43</td>
<td align="left">-</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<p><a href="https://repo.palkeo.com/clevo-mirror/">https://repo.palkeo.com/clevo-mirror/</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>-其他</tag>
      </tags>
  </entry>
  <entry>
    <title>西部数据 NAS 红盘 WD20EFRX 假货识别</title>
    <url>/post/36149d23.html</url>
    <content><![CDATA[<p>电脑外设鱼龙混杂，尤其像网上购买硬件，很多不懂得消费者很容易被JS得小伎俩欺骗。下面介绍简单的购买技巧来识别买到的硬盘是否为假货。</p>
<p>西部数据红盘和黑盘的价格比普通绿盘高出近三分之一。某些无良商家便用绿盘来以次充好。欺骗消费者。西部数据官网查询保修只是凭借序列号，而这个序列号的标签纸很容易就可以伪造出来。卖家只要准备一批在质保内的序列号，就可以瞒天过海。</p>
<p>惯用伎俩大致有3条：</p>
<p>1.更换正面标签，将绿盘的标签换成红盘或黑盘；</p>
<p>2.谎称水货或散装，保修只给店铺保修，不支持全国联保，而从官网查到的保修期都不足三年；</p>
<p>3.将绿盘固件刷成红盘或黑盘，重置S.M.A.R.T参数，这样即使用专业软件如HDTune等也无法立即识别；</p>
<h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><ol>
<li><p>1</p>
<p>以下图示，左边为真货，右边为假货</p>
<p>1.真盘的外形突出部分与假盘完全不同。</p>
<p>2.真盘的黑色螺丝孔的布局也与假盘不一致。</p>
<p>![西部数据 NAS 红盘 WD20EFRX 假货识别](../images/西部数据 NAS 红盘 WD20EFRX 假货识别/586bfdefe0781431ecc14dd8dc6699cf035362cf.jpg)</p>
</li>
<li><p>2</p>
<p>以下图示，左边为真货，右边为假货</p>
<p>1.真盘的马达部分有胶水，假盘没有</p>
<p>2.真盘的PCBA码为二维码，而假盘则为条形码</p>
<p>3.PCB布线外观等不同。商家会以硬盘生产批次不同来误导买家。而作为一个合格的硬件生产厂商，电路板对于产品来说是至关重要的。不可能因为生产批次的而导致电路板完全不一致。就如一瓶饮料，不会因为生产批次不同而直接把原料给换掉，最多换换包装。除非是这饮料有问题，这是重大生产事故。而这类事故通常百度新闻等都会有报道。</p>
<p>4.接口形状不一致</p>
<p>![西部数据 NAS 红盘 WD20EFRX 假货识别](../images/西部数据 NAS 红盘 WD20EFRX 假货识别/2e223d85e036e2917b9f4c54b2723d03baea5bcf.jpg)</p>
</li>
<li><p>3</p>
<p>另外，有些商家会将硬盘S.M.A.R.T中通电次数刷为零，标榜为全新未使用。</p>
<p>而电子产品在出厂时都会经过质检，在质检过程中需要通电测试。因此，标榜0通电的必然是刷固件刷出来的。</p>
<p>而绿盘大都只有5400RPM，性能比红盘和黑盘相差很多。因此使用专业软件也可以比较出真货与假货的区别。</p>
</li>
<li><p>4</p>
<p>当然，这些只是简单地识别方法。最根本的是不要贪便宜，价格比正品差距很大，那肯定有猫腻。</p>
</li>
<li><p>5</p>
<p>2014.06.15 add</p>
<p>感谢 zxslovers 的经验分享</p>
</li>
</ol>
<p>   我还要补充一点，让造假无所遁形<strong><a href="https://westerndigital.secure.force.com/ind/ID_ProductsRegistered">https://westerndigital.secure.force.com/ind/ID_ProductsRegistered</a></strong>这个是西部数据官网的注册连接，极其难找，一般买家把硬盘买来后只根据硬盘的编号去查询下保修时间，一看保修时间对就认为是正品，这是不对的，因为每个硬盘编号，它对应的还有电路板编号，而这个连接是注册官方保修的连接，只有同时填写硬盘编号和电路板编号才能把硬盘注册的，如果你能注册成功，那么你的硬盘才享受保修服务，是正版的了！</p>
<p>   难点在如何找电路板编号，大家看硬盘后面的电路板，有个非常小的二维码块，从上面读取</p>
<pre><code>电路板序列号为：XSBW821NHF200011801也就是下面划线的部分的字母和数字把硬盘编号S/N后面的一组字母数字如：WMC1T4306300 和这个电路板编号XSBW821NHF200011801一起注册，只有成功了才说明你的硬盘的编号和电路板编号是对的！！这个绝对让假硬盘无所遁形！其他一切皆为浮云</code></pre>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>-技术</tag>
      </tags>
  </entry>
  <entry>
    <title>英国广播公司：《人类星球 第一季》(BBC Human Planet Season 1)【YYeTs人人影视出品】【中英双语字幕】【更新番外篇III】【完结】【BDRip】</title>
    <url>/post/e9b1e83d.html</url>
    <content><![CDATA[<p><a href="http://www.ed2000.com/ShowFile/250303.html">http://www.ed2000.com/ShowFile/250303.html</a> </p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="http://ed2k//|file|%E4%BA%BA%E7%B1%BB%E6%98%9F%E7%90%83.Human.Planet.S01E01.Chi_Eng.BDRip.AC3.1024X576.x264-YYeTs%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86(ED2000.COM).mkv|733350684|71ba1fbf1a5ff5d536e33b50310620c6|h=zmfa2fgth6udm4kjckjr6lbzzz7f6uvn|/">人类星球.Human.Planet.S01E01.Chi_Eng.BDRip.AC3.1024X576.x264-YYeTs人人影视.mkv</a></td>
<td>699.38 MB</td>
</tr>
<tr>
<td><a href="http://ed2k//|file|%E4%BA%BA%E7%B1%BB%E6%98%9F%E7%90%83.Human.Planet.S01E02.Chi_Eng.BDRip.AC3.1024X576.x264-YYeTs%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86(ED2000.COM).mkv|733204896|973e503a87128d16366608ae882bbbfe|/">人类星球.Human.Planet.S01E02.Chi_Eng.BDRip.AC3.1024X576.x264-YYeTs人人影视.mkv</a></td>
<td>699.24 MB</td>
</tr>
<tr>
<td><a href="http://ed2k//|file|%E4%BA%BA%E7%B1%BB%E6%98%9F%E7%90%83.Human.Planet.S01E03.Chi_Eng.BDRip.AC3.1024X576.x264-YYeTs%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86(ED2000.COM).mkv|733417791|f9decbb04c2cf3204f86d5b6b29b41bd|/">人类星球.Human.Planet.S01E03.Chi_Eng.BDRip.AC3.1024X576.x264-YYeTs人人影视.mkv</a></td>
<td>699.44 MB</td>
</tr>
<tr>
<td><a href="http://ed2k//|file|%E4%BA%BA%E7%B1%BB%E6%98%9F%E7%90%83.Human.Planet.S01E04.Chi_Eng.BDRip.AC3.1024X576.x264-YYeTs%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86(ED2000.COM).mkv|732792914|9ad5d6528ba68db778dd57e94dfd3160|/">人类星球.Human.Planet.S01E04.Chi_Eng.BDRip.AC3.1024X576.x264-YYeTs人人影视.mkv</a></td>
<td>698.85 MB</td>
</tr>
<tr>
<td><a href="http://ed2k//|file|%E4%BA%BA%E7%B1%BB%E6%98%9F%E7%90%83.Human.Planet.S01E05.Chi_Eng.BDRip.AC3.1024X576.x264-YYeTs%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86(ED2000.COM).mkv|732790791|aa4271a0d52ab560446f448e9556ac13|/">人类星球.Human.Planet.S01E05.Chi_Eng.BDRip.AC3.1024X576.x264-YYeTs人人影视.mkv</a></td>
<td>698.84 MB</td>
</tr>
<tr>
<td><a href="http://ed2k//|file|%E4%BA%BA%E7%B1%BB%E6%98%9F%E7%90%83.Human.Planet.S01E06.Chi_Eng.BDRip.AC3.1024X576.x264-YYeTs%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86(ED2000.COM).mkv|732563535|4ccae7973262bcca6e64ab28c1105a32|/">人类星球.Human.Planet.S01E06.Chi_Eng.BDRip.AC3.1024X576.x264-YYeTs人人影视.mkv</a></td>
<td>698.63 MB</td>
</tr>
<tr>
<td><a href="http://ed2k//|file|%E4%BA%BA%E7%B1%BB%E6%98%9F%E7%90%83.Human.Planet.S01E07.Chi_Eng.BDRip.AC3.1024X576.x264-YYeTs%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86(ED2000.COM).mkv|732735197|5c60d64595b8237bd3cefb9c878c1418|/">人类星球.Human.Planet.S01E07.Chi_Eng.BDRip.AC3.1024X576.x264-YYeTs人人影视.mkv</a></td>
<td>698.79 MB</td>
</tr>
<tr>
<td><a href="http://ed2k//|file|%E4%BA%BA%E7%B1%BB%E6%98%9F%E7%90%83.Human.Planet.S01E08.Chi_Eng.BDRip.AC3.1024X576.x264-YYeTs%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86(ED2000.COM).mkv|733064183|84778ea88dd75856b8e26932e9811ac4|/">人类星球.Human.Planet.S01E08.Chi_Eng.BDRip.AC3.1024X576.x264-YYeTs人人影视.mkv</a></td>
<td>699.10 MB</td>
</tr>
<tr>
<td><a href="http://ed2k//|file|%E4%BA%BA%E7%B1%BB%E6%98%9F%E7%90%83.%E7%95%AA%E5%A4%96%E7%AF%87.Human.Planet.Extra.3.Chi_Eng.WEBRip.1024X576.x264-YYeTs%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86(ED2000.COM).mkv|243302285|45fea0c54d42772300a2f5f867511f7d|/">人类星球.番外篇.Human.Planet.Extra.3.Chi_Eng.WEBRip.1024X576.x264-YYeTs人人影视.mkv</a></td>
<td>232.03 MB</td>
</tr>
</tbody></table>
<p> <strong>中文名</strong>: 英国广播公司：人类星球 第一季</p>
<p><strong>英文名</strong>: BBC: Human Planet Season 1</p>
<p><strong>资源格式</strong>: BDRip</p>
<p><strong>版本</strong>: [YYeTs人人影视出品][中英双语字幕][更新番外篇III][完结]</p>
<p><strong>发行时间</strong>: 2011年01月03日</p>
<p><strong>制作发行</strong>: 英国广播公司</p>
<p><strong>地区</strong>: 英国</p>
<p><strong>语言</strong>: 英语</p>
<p><strong>简介</strong>:</p>
<p> <img src="/../images/%E8%8B%B1%E5%9B%BD%E5%B9%BF%E6%92%AD%E5%85%AC%E5%8F%B8%E4%BA%BA%E7%B1%BB%E6%98%9F%E7%90%83%E7%AC%AC%E4%B8%80%E5%AD%A3/thumb.jpg" alt="img"></p>
<p>【类型】: 科教 【影片长度】: 60 Minutes 【集数】: 8集 【字幕】: 无 【服务器】: 随机 【分享时间】: 全天</p>
<blockquote>
<p><strong>多版本下载：</strong><a href="http://yyets.com/showresource-juji-793.html">http://yyets.com/showresource-juji-793.html</a></p>
</blockquote>
<p>【内容介绍】： BBC8集大型电视系列片 - Human Planet （人类星球），探讨人与自然的关系。8集节目分别探讨极地、山区、海洋、丛林、草原、河流、沙漠和城市的人类活动。世界一流的自然与人类专家以及摄影师，从空中、陆地和水下抓拍珍贵镜头。BBC摄制组前往世界80个地方，抓拍了从未在电视屏幕上出现过的罕见精彩的人类活动。 Human Planet is is narrated by John Hurt and also features original music by composer Nitin Sawhney. The series looks at how human beings have been the only animals that have been able to adapt to life in every habitat on Earth. The series looks at man’s ability to survive in the most extreme environments on the planet. </p>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>-电影</tag>
      </tags>
  </entry>
  <entry>
    <title>进远景论坛方法</title>
    <url>/post/edb70a23.html</url>
    <content><![CDATA[<p>修改hosts<br>218.93.127.136 pcbeta.com<br>218.93.127.136 uc.pcbeta.com<br>218.93.127.136 m.pcbeta.com<br>218.93.127.136 web.pcbeta.com<br>218.93.127.136 i.pcbeta.com<br>218.93.127.136 bbs.pcbeta.com<br>218.93.127.136 <a href="http://jump.bdimg.com/safecheck/index?url=x+Z5mMbGPAu6psTyi+uBNSwM5kbsgXOExclEQBwqCNr7LAYdITHoVOgaj8AbWjZRMVJWer8MmNrc99WDfAa0fDx0jpvVAOecZVybKVEXRvGgj6bhyjG6iHY9qHh6BM0y">http://www.pcbeta.com</a><br>218.93.127.136 cdn.pcbeta.attachment.inimc.com<br>218.93.127.136 cdn.pcbeta.static.inimc.com<br>218.93.127.136 cdn.pcbeta.css.inimc.com<br>218.93.127.136 static.template.pcbeta.com</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>-其他</tag>
      </tags>
  </entry>
  <entry>
    <title>迪优美特rk3128刷机时“测试设备失败”或“低格失败”解决办法</title>
    <url>/post/ee993d94.html</url>
    <content><![CDATA[<p><strong>此解决方法同样适用于芯片为Rk3128的**</strong>其它**<strong>型号的**</strong>机顶**<strong>盒</strong></p>
<p>首先要准备以下三款软件： 1.瑞芯微驱动 2.AndroidTool_Release_v2.33 刷机工具 3.RK3128_固件</p>
<p>先装瑞芯微驱动，然后打开AndroidTool_Release_v2.33，再点“固件”找到准备刷入的RK3128_固件，盒子按住复位键插上usb线，等显示“发现一个LOADER没备”后松开复位键。点<strong>“下载镜像”</strong>再点<strong>低格</strong>，<strong>这时**</strong>低格会停留在**<strong>0%没反应，拔出usb**</strong>插头，然后迅速插入，等重新显示“发现一个LOADER设备”后再点**<strong>就可以正常**</strong>低格了。<strong>低格完成后点击“</strong>升级固件<strong>”回到升级操作界面，先点“</strong>擦除flash<strong>”后再点</strong>升级**，固件便开始刷入<a href="http://www.hdpfans.com/">机顶盒</a>，等校验完成后就成功了。</p>
<p><strong>迪优X16 等盒子刷过带lock固件问题说明：</strong></p>
<p><strong>正常情况下只要是瑞芯微RK3128芯片，刷其它版本的Rk3128固件同样可以随便刷。但是一旦刷过带lock加密底包的固件如 RK3128_DYMT_LOCK2.3_YUNOS2.2.1或RK3128_ZX_android_lock_等等之后 就不能再刷入其它版本固件了。</strong></p>
<p><strong>想要刷其它版本的固件，用以上方法就可以正常刷入了，也无需先刷入原厂固件包擦除flash 后再进行刷机。</strong></p>
<p>AndroidTool_Release_v2.33 刷机工具</p>
<h4 id="本帖隐藏的内容"><a href="#本帖隐藏的内容" class="headerlink" title="本帖隐藏的内容"></a>本帖隐藏的内容</h4><p>链接: <a href="http://pan.baidu.com/s/1o83yfYM">http://pan.baidu.com/s/1o83yfYM</a> 密码: xkwz</p>
<p>安卓Rk3128通用版(沙发桌面)</p>
<h4 id="本帖隐藏的内容-1"><a href="#本帖隐藏的内容-1" class="headerlink" title="本帖隐藏的内容"></a>本帖隐藏的内容</h4><p>链接: <a href="http://pan.baidu.com/s/1bp3eBGN">http://pan.baidu.com/s/1bp3eBGN</a> 密码: fm6c</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>-技术</tag>
      </tags>
  </entry>
  <entry>
    <title>通过广域网(Intelnet)进行远程唤醒[或开机] 图解</title>
    <url>/post/c004a920.html</url>
    <content><![CDATA[<p>WAN远程唤醒与LAN远程唤醒有着诸多不同，WAN远程唤醒首先需要主板、网卡等硬件的支持，需要一条有效的Intelnet连接，与Lan远程唤醒不同的是，WAN远程唤醒需要经过路由器，因此下面我就来详细讲解如何在路由器上进行设置，以支持WAN远程唤醒，前提是，你已经成功进行了LAN远程唤醒。</p>
<p><strong>一、WOL（远程唤醒）工具介绍</strong></p>
<p>实现远程唤醒的软件有很多，原理都是相同的。下面列出几款常用的WOL软件：</p>
<p>■ LanHelper</p>
<p>■ Magic Packet Utility</p>
<p>■ NetWaker for windows</p>
<p>■ WakeOnLanGui（<a href="http://www.depicus.com/">http://www.depicus.com</a>）</p>
<p><strong>二、准备</strong></p>
<p>WAN与LAN在不同在于在广域网上，有许多的路由器等网络设备，这些设备可能会使Magic Packet的包不能到达我们想唤醒的电脑网卡上。因此，要实现通过internet来唤醒，必须得到路由器的支持。下面就以我的TP-Link WR841N无线路由为例来说明配置过程。</p>
<p>首先确保路由器可以正常接入internet，即通过服务商得到一个公网IP（对于家庭来说ADSL、Cable Modem是常见的上网方式），进入路由器WEB配置页面<a href="http://192.168.1.1/">http://192.168.1.1。</a></p>
<p><strong>三、端口映射（虚拟服务器）</strong></p>
<p>依次点击“转发规则”-&gt;“虚拟服务器”，添加一新条目，端口为2301（2301是默认的端口号，也可以是其它端口号，只要不和其它的冲突），IP地址为需要唤醒电脑网卡所使用的IP地址（比如192.168.1.250），协议为UDP，并使之处于“生效”状态。</p>
<p><img src="/../images/%E9%80%9A%E8%BF%87%E5%B9%BF%E5%9F%9F%E7%BD%91(Intelnet" alt="img">进行远程唤醒[或开机] 图解/20150122153904700)</p>
<p>这一步使得当路由器收到发到它2301端口的数据都会转发到IP地址为192.168.1.250的这台电脑上。</p>
<p><strong>四、IP地址与MAC地址之间的绑定</strong></p>
<p>依次点击“IP与MAC绑定”-&gt;“静态ARP绑定设置”，添加一新条目，MAC地址添为网卡（被唤醒电脑上的）MAC，如50-E5-60-CA-1A-4A，IP为上一步设置的IP地址：192.168.1.250。</p>
<p><img src="/../images/%E9%80%9A%E8%BF%87%E5%B9%BF%E5%9F%9F%E7%BD%91(Intelnet" alt="img">进行远程唤醒[或开机] 图解/20150122154246829)</p>
<p>注意：记住要启用路由器的“ARP绑定”功能（图片中的红圈部分），不然此步的设置是不生效的。</p>
<p>当路由器收到从internet发往2301端口的Magic Packet包时，由于设了端口映射，路由器就直接将该Magic Packet包转发到192.168.1.250上。但是由于电脑是处理关机状态，ARP无法通过广播找到192.168.1.250这台电脑，Magic Packet包将被路由器丢弃，因此进行静态的IP-MAC绑定，使数据包可以直接发往MAC地址为50-E5-60-CA-1A-4A的网卡上。</p>
<p>此时，从理论上来说，通过internet的远程唤醒就可以成功了。但是，如果远程主机没有配置静态IP地址，而是通过DHCP方式获取动态IP地址的，那么还有一些工作需要做，以确保万无一失。</p>
<p><strong>五、静态IP地址分配</strong></p>
<p>大家都清楚，DHCP租约协议是有有效期的，TP-Link上的DHCP租约有效期默认是2小时，为了确保远程电脑在启动后可以获得192.168.1.250这个IP地址，需要在DHCP服务器中设置一个静态地址分配，即为MAC地址50-E5-60-CA-1A-4A静态分配192.168.1.250这个IP地址，而且永不过期。</p>
<p><img src="/../images/%E9%80%9A%E8%BF%87%E5%B9%BF%E5%9F%9F%E7%BD%91(Intelnet" alt="img">进行远程唤醒[或开机] 图解/20150122154757301)</p>
<p><strong>六、使用动态DNS功能</strong></p>
<p>在路由器上使用动态DNS功能，这样可以用一个域名来访问而不用查看经常改变的公网IP（ADSL拨号上网的IP是经常变的）。同时，允许路由器可以进行无端WEB管理，以方便当我们在任何地方都可以检查路由器的状态。</p>
<p>说到DDNS，不得不提到大名鼎鼎的花生壳了，TP-LINK路由器默认就内嵌了动态DNS功能，只需要到花生壳的官网注册一个护照，并申请一个免费域名，然后在路由器上登录。登录成功后，会看到域名，这样花生壳就将域名和路由器上的公网IP地址绑定在一起了。</p>
<p><img src="/../images/%E9%80%9A%E8%BF%87%E5%B9%BF%E5%9F%9F%E7%BD%91(Intelnet" alt="img">进行远程唤醒[或开机] 图解/20150122154957702)</p>
<p><strong>七、使用第三方工具进行远程唤醒</strong></p>
<p>访问<a href="http://www.depicus.com/wake-on-lan/woli.aspx%E8%BF%99%E4%B8%AA%E9%A1%B5%E9%9D%A2%EF%BC%8C%E8%BF%99%E6%98%AFdepicus%E6%8F%90%E4%BE%9B%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9C%A8%E7%BA%BF%E7%9A%84%E8%BF%9C%E7%A8%8B%E5%94%A4%E9%86%92%E5%B7%A5%E5%85%B7%E9%A1%B5%E9%9D%A2%EF%BC%8C%E4%BD%BF%E7%94%A8%E8%B5%B7%E6%9D%A5%E5%BE%88%E6%96%B9%E4%BE%BF%E3%80%82%E5%B7%A5%E4%BD%9C%E7%95%8C%E9%9D%A2%E5%A6%82%E4%B8%8B%EF%BC%9A">http://www.depicus.com/wake-on-lan/woli.aspx这个页面，这是depicus提供的一个在线的远程唤醒工具页面，使用起来很方便。工作界面如下：</a></p>
<p><img src="/../images/%E9%80%9A%E8%BF%87%E5%B9%BF%E5%9F%9F%E7%BD%91(Intelnet" alt="img">进行远程唤醒[或开机] 图解/20150122155050140)</p>
<p>下面就进行远程唤醒的四个参数作下说明：</p>
<ul>
<li><strong>Your Network Cards Mac Address：</strong>（内部局域网）远程主机的网卡MAC地址，不是路由器的MAC地址。[一开始我这里搞错了，填的是路由器的MAC地址，怎么也不能远程唤醒]</li>
<li><strong>Any Computers Ip Number or FQDN：</strong>路由器获取到的公网IP地址或使用花生壳DDNS进行绑定的合法域名。这里最好使用DDNS功能绑定一个域名，因为域名是不变的，而你不清楚你的路由器什么时候会重新从ISP服务商那里获取公网IP地址。但如果使用了DDNS，即使路由器的IP地址变了，会自动更新到花生壳服务器上。</li>
<li><strong>Your Subnet Mask：</strong>子网掩码。这个很重要，因为路由器是动态地从ISP服务商那里获取IP地址的，你根本不知道该IP地址所对应的子网掩码，所以索性就填写255.255.255.255，这表示是唯一一个IP地址，而不是一个网段。</li>
<li><strong>Any Port Number：</strong>网络端口，路由器会一直侦听该网络端口，一旦侦测到有数据包发往该端口，就进行转发。</li>
</ul>
<p>经过上述配置，我已经通过Internet成功远程唤醒了我的服务器。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>-技术</tag>
      </tags>
  </entry>
  <entry>
    <title>超强、超详细Redis入门教程</title>
    <url>/post/84925621.html</url>
    <content><![CDATA[<p>转载自：<br><a href="http://www.h5min.cn/article/56448.htm">http://www.h5min.cn/article/56448.htm</a><br>这篇文章主要介绍了超强、超详细Redis入门教程,本文详细介绍了Redis数据库各个方面的知识,需要的朋友可以参考下</p>
<p><strong>【本教程目录】</strong></p>
<p>1.redis是什么<br>2.redis的作者何许人也<br>3.谁在使用redis<br>4.学会安装redis<br>5.学会启动redis<br>6.使用redis客户端<br>7.redis数据结构 – 简介<br>8.redis数据结构 – strings<br>9.redis数据结构 – lists<br>10.redis数据结构 – 集合<br>11.redis数据结构 – 有序集合<br>12.redis数据结构 – 哈希<br>13.聊聊redis持久化 – 两种方式<br>14.聊聊redis持久化 – RDB<br>15.聊聊redis持久化 – AOF<br>16.聊聊redis持久化 – AOF重写<br>17.聊聊redis持久化 – 如何选择RDB和AOF<br>18.聊聊主从 – 用法<br>19.聊聊主从 – 同步原理<br>20.聊聊redis的事务处理<br>21.教你看懂redis配置 – 简介<br>22.教你看懂redis配置 -通用<br>23.教你看懂redis配置 – 快照<br>24.教你看懂redis配置 – 复制<br>25.教你看懂redis配置 – 安全<br>26.教你看懂redis配置 -限制<br>27.教你看懂redis配置 – 追加模式<br>28.教你看懂redis配置 – LUA脚本<br>29.教你看懂redis配置 – 慢日志<br>30.教你看懂redis配置 – 事件通知<br>31.教你看懂redis配置 – 高级配置</p>
<p><strong>【redis是什么】</strong></p>
<p>redis是一个开源的、使用C语言编写的、支持网络交互的、可基于内存也可持久化的Key-Value数据库。</p>
<p>redis的官网地址，非常好记，是redis.io。（特意查了一下，域名后缀io属于国家域名，是british Indian Ocean territory，即英属印度洋领地）</p>
<p>目前，Vmware在资助着redis项目的开发和维护。</p>
<p><strong>【redis的作者何许人也】</strong></p>
<p>开门见山，先看照片：</p>
<p><img src="/../images/%E8%B6%85%E5%BC%BA%E3%80%81%E8%B6%85%E8%AF%A6%E7%BB%86Redis%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/e579af6ed598f69807c7d8ddb761c755.png" alt="img"></p>
<p>是不是出乎了你的意料，嗯，高手总会有些地方与众不同的。</p>
<p>这位便是redis的作者，他叫Salvatore Sanfilippo，来自意大利的西西里岛，现在居住在卡塔尼亚。目前供职于Pivotal公司。</p>
<p>他使用的网名是antirez，如果你有兴趣，可以去他的博客逛逛，地址是antirez.com，当然也可以去follow他的github，地址是<a href="http://github.com/antirez%E3%80%82">http://github.com/antirez。</a></p>
<p><strong>【谁在使用redis】</strong></p>
<p>Blizzard、digg、stackoverflow、github、flickr …</p>
<p><strong>【学会安装redis】</strong></p>
<p>从redis.io下载最新版redis-X.Y.Z.tar.gz后解压，然后进入redis-X.Y.Z文件夹后直接make即可，安装非常简单。</p>
<p>make成功后会在src文件夹下产生一些二进制可执行文件，包括redis-server、redis-cli等等：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ find . -type f -executable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">./redis-benchmark //用于进行redis性能测试的工具</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">./redis-check-dump //用于修复出问题的dump.rdb文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">./redis-cli //redis的客户端</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">./redis-server //redis的服务端</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">./redis-check-aof //用于修复出问题的AOF文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">./redis-sentinel //用于集群管理</span><br></pre></td></tr></table></figure>
<p><strong>【学会启动redis】</strong></p>
<p>启动redis非常简单，直接./redis-server就可以启动服务端了，还可以用下面的方法指定要加载的配置文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./redis-server ../redis.conf</span><br></pre></td></tr></table></figure>
<p>默认情况下，redis-server会以非daemon的方式来运行，且默认服务端口为6379。<br>有关作者为什么选择6379作为默认端口，还有一段有趣的典故，英语好的同学可以看看作者这篇博文中的解释。</p>
<p><strong>【使用redis客户端】</strong></p>
<p>我们直接看一个例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//这样来启动redis客户端了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ ./redis-cli</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//用set指令来设置key、value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; set name &quot;roc&quot; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//来获取name的值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; get name </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;roc&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//通过客户端来关闭redis服务端</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; shutdown </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>
<p><strong>【redis数据结构 – 简介】</strong></p>
<p>redis是一种高级的key:value存储系统，其中value支持五种数据类型：</p>
<p>1.字符串（strings）<br>2.字符串列表（lists）<br>3.字符串集合（sets）<br>4.有序字符串集合（sorted sets）<br>5.哈希（hashes）</p>
<p>而关于key，有几个点要提醒大家：</p>
<p>1.key不要太长，尽量不要超过1024字节，这不仅消耗内存，而且会降低查找的效率；<br>2.key也不要太短，太短的话，key的可读性会降低；<br>3.在一个项目中，key最好使用统一的命名模式，例如user:10000:passwd。</p>
<p><strong>【redis数据结构 – strings】</strong></p>
<p>有人说，如果只使用redis中的字符串类型，且不使用redis的持久化功能，那么，redis就和memcache非常非常的像了。这说明strings类型是一个很基础的数据类型，也是任何存储系统都必备的数据类型。</p>
<p>我们来看一个最简单的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set mystr &quot;hello world!&quot; //设置字符串类型</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get mystr //读取字符串类型</span><br></pre></td></tr></table></figure>
<p>字符串类型的用法就是这么简单，因为是二进制安全的，所以你完全可以把一个图片文件的内容作为字符串来存储。</p>
<p>另外，我们还可以通过字符串类型进行数值操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set mynum &quot;2&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; get mynum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;2&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; incr mynum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(integer) 3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; get mynum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;3&quot;</span><br></pre></td></tr></table></figure>
<p>看，在遇到数值操作时，redis会将字符串类型转换成数值。</p>
<p>由于INCR等指令本身就具有原子操作的特性，所以我们完全可以利用redis的INCR、INCRBY、DECR、DECRBY等指令来实现原子计数的效果，假如，在某种场景下有3个客户端同时读取了mynum的值（值为2），然后对其同时进行了加1的操作，那么，最后mynum的值一定是5。不少网站都利用redis的这个特性来实现业务上的统计计数需求。</p>
<p><strong>【redis数据结构 – lists】</strong></p>
<p>redis的另一个重要的数据结构叫做lists，翻译成中文叫做“列表”。</p>
<p>首先要明确一点，redis中的lists在底层实现上并不是数组，而是链表，也就是说对于一个具有上百万个元素的lists来说，在头部和尾部插入一个新元素，其时间复杂度是常数级别的，比如用LPUSH在10个元素的lists头部插入新元素，和在上千万元素的lists头部插入新元素的速度应该是相同的。</p>
<p>虽然lists有这样的优势，但同样有其弊端，那就是，链表型lists的元素定位会比较慢，而数组型lists的元素定位就会快得多。</p>
<p>lists的常用操作包括LPUSH、RPUSH、LRANGE等。我们可以用LPUSH在lists的左侧插入一个新元素，用RPUSH在lists的右侧插入一个新元素，用LRANGE命令从lists中指定一个范围来提取元素。我们来看几个例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//新建一个list叫做mylist，并在列表头部插入元素&quot;1&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lpush mylist &quot;1&quot; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//返回当前mylist中的元素个数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(integer) 1 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//在mylist右侧插入元素&quot;2&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; rpush mylist &quot;2&quot; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(integer) 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//在mylist左侧插入元素&quot;0&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lpush mylist &quot;0&quot; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(integer) 3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//列出mylist中从编号0到编号1的元素</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lrange mylist 0 1 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1) &quot;0&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2) &quot;1&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//列出mylist中从编号0到倒数第一个元素</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lrange mylist 0 -1 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1) &quot;0&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2) &quot;1&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3) &quot;2&quot;</span><br></pre></td></tr></table></figure>
<p>lists的应用相当广泛，随便举几个例子：</p>
<p>1.我们可以利用lists来实现一个消息队列，而且可以确保先后顺序，不必像MySQL那样还需要通过ORDER BY来进行排序。<br>2.利用LRANGE还可以很方便的实现分页的功能。<br>3.在博客系统中，每片博文的评论也可以存入一个单独的list中。</p>
<p><strong>【redis数据结构 – 集合】</strong></p>
<p>redis的集合，是一种无序的集合，集合中的元素没有先后顺序。</p>
<p>集合相关的操作也很丰富，如添加新元素、删除已有元素、取交集、取并集、取差集等。我们来看例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//向集合myset中加入一个新元素&quot;one&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; sadd myset &quot;one&quot; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; sadd myset &quot;two&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//列出集合myset中的所有元素</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; smembers myset </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1) &quot;one&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2) &quot;two&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//判断元素1是否在集合myset中，返回1表示存在</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; sismember myset &quot;one&quot; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//判断元素3是否在集合myset中，返回0表示不存在</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; sismember myset &quot;three&quot; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(integer) 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//新建一个新的集合yourset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; sadd yourset &quot;1&quot; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; sadd yourset &quot;2&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; smembers yourset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1) &quot;1&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2) &quot;2&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//对两个集合求并集</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; sunion myset yourset </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1) &quot;1&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2) &quot;one&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3) &quot;2&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4) &quot;two&quot;</span><br></pre></td></tr></table></figure>
<p>对于集合的使用，也有一些常见的方式，比如，QQ有一个社交功能叫做“好友标签”，大家可以给你的好友贴标签，比如“大美女”、“土豪”、“欧巴”等等，这时就可以使用redis的集合来实现，把每一个用户的标签都存储在一个集合之中。</p>
<p><strong>【redis数据结构 – 有序集合】</strong></p>
<p>redis不但提供了无需集合（sets），还很体贴的提供了有序集合（sorted sets）。有序集合中的每个元素都关联一个序号（score），这便是排序的依据。</p>
<p>很多时候，我们都将redis中的有序集合叫做zsets，这是因为在redis中，有序集合相关的操作指令都是以z开头的，比如zrange、zadd、zrevrange、zrangebyscore等等</p>
<p>老规矩，我们来看几个生动的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//新增一个有序集合myzset，并加入一个元素baidu.com，给它赋予的序号是1：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; zadd myzset 1 baidu.com </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//向myzset中新增一个元素360.com，赋予它的序号是3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; zadd myzset 3 360.com </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//向myzset中新增一个元素google.com，赋予它的序号是2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; zadd myzset 2 google.com </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//列出myzset的所有元素，同时列出其序号，可以看出myzset已经是有序的了。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; zrange myzset 0 -1 with scores </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1) &quot;baidu.com&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2) &quot;1&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3) &quot;google.com&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4) &quot;2&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5) &quot;360.com&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6) &quot;3&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//只列出myzset的元素</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; zrange myzset 0 -1 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1) &quot;baidu.com&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2) &quot;google.com&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3) &quot;360.com&quot;</span><br></pre></td></tr></table></figure>
<p><strong>【redis数据结构 – 哈希】</strong></p>
<p>最后要给大家介绍的是hashes，即哈希。哈希是从redis-2.0.0版本之后才有的数据结构。</p>
<p>hashes存的是字符串和字符串值之间的映射，比如一个用户要存储其全名、姓氏、年龄等等，就很适合使用哈希。</p>
<p>我们来看一个例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//建立哈希，并赋值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; HMSET user:001 username antirez password P1pp0 age 34 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//列出哈希的内容</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; HGETALL user:001 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1) &quot;username&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2) &quot;antirez&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3) &quot;password&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4) &quot;P1pp0&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5) &quot;age&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6) &quot;34&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//更改哈希中的某一个值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; HSET user:001 password 12345 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(integer) 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//再次列出哈希的内容</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; HGETALL user:001 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1) &quot;username&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2) &quot;antirez&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3) &quot;password&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4) &quot;12345&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5) &quot;age&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6) &quot;34&quot;</span><br></pre></td></tr></table></figure>
<p>有关hashes的操作，同样很丰富，需要时，大家可以从<a href="https://redis.io/commands#hash">这里</a>查询。</p>
<p><strong>【聊聊redis持久化 – 两种方式】</strong></p>
<p>redis提供了两种持久化的方式，分别是RDB（Redis DataBase）和AOF（Append Only File）。</p>
<p>RDB，简而言之，就是在不同的时间点，将redis存储的数据生成快照并存储到磁盘等介质上；</p>
<p>AOF，则是换了一个角度来实现持久化，那就是将redis执行过的所有写指令记录下来，在下次redis重新启动时，只要把这些写指令从前到后再重复执行一遍，就可以实现数据恢复了。</p>
<p>其实RDB和AOF两种方式也可以同时使用，在这种情况下，如果redis重启的话，则会优先采用AOF方式来进行数据恢复，这是因为AOF方式的数据恢复完整度更高。</p>
<p>如果你没有数据持久化的需求，也完全可以关闭RDB和AOF方式，这样的话，redis将变成一个纯内存数据库，就像memcache一样。</p>
<p><strong>【聊聊redis持久化 – RDB】</strong></p>
<p>RDB方式，是将redis某一时刻的数据持久化到磁盘中，是一种快照式的持久化方法。</p>
<p>redis在进行数据持久化的过程中，会先将数据写入到一个临时文件中，待持久化过程都结束了，才会用这个临时文件替换上次持久化好的文件。正是这种特性，让我们可以随时来进行备份，因为快照文件总是完整可用的。</p>
<p>对于RDB方式，redis会单独创建（fork）一个子进程来进行持久化，而主进程是不会进行任何IO操作的，这样就确保了redis极高的性能。</p>
<p>如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。</p>
<p>虽然RDB有不少优点，但它的缺点也是不容忽视的。如果你对数据的完整性非常敏感，那么RDB方式就不太适合你，因为即使你每5分钟都持久化一次，当redis故障时，仍然会有近5分钟的数据丢失。所以，redis还提供了另一种持久化方式，那就是AOF。</p>
<p><strong>【聊聊redis持久化 – AOF】</strong></p>
<p>AOF，英文是Append Only File，即只允许追加不允许改写的文件。</p>
<p>如前面介绍的，AOF方式是将执行过的写指令记录下来，在数据恢复时按照从前到后的顺序再将指令都执行一遍，就这么简单。</p>
<p>我们通过配置redis.conf中的appendonly yes就可以打开AOF功能。如果有写操作（如SET等），redis就会被追加到AOF文件的末尾。</p>
<p>默认的AOF持久化策略是每秒钟fsync一次（fsync是指把缓存中的写指令记录到磁盘中），因为在这种情况下，redis仍然可以保持很好的处理性能，即使redis故障，也只会丢失最近1秒钟的数据。</p>
<p>如果在追加日志时，恰好遇到磁盘空间满、inode满或断电等情况导致日志写入不完整，也没有关系，redis提供了redis-check-aof工具，可以用来进行日志修复。</p>
<p>因为采用了追加方式，如果不做任何处理的话，AOF文件会变得越来越大，为此，redis提供了AOF文件重写（rewrite）机制，即当AOF文件的大小超过所设定的阈值时，redis就会启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集。举个例子或许更形象，假如我们调用了100次INCR指令，在AOF文件中就要存储100条指令，但这明显是很低效的，完全可以把这100条指令合并成一条SET指令，这就是重写机制的原理。</p>
<p>在进行AOF重写时，仍然是采用先写临时文件，全部完成后再替换的流程，所以断电、磁盘满等问题都不会影响AOF文件的可用性，这点大家可以放心。</p>
<p>AOF方式的另一个好处，我们通过一个“场景再现”来说明。某同学在操作redis时，不小心执行了FLUSHALL，导致redis内存中的数据全部被清空了，这是很悲剧的事情。不过这也不是世界末日，只要redis配置了AOF持久化方式，且AOF文件还没有被重写（rewrite），我们就可以用最快的速度暂停redis并编辑AOF文件，将最后一行的FLUSHALL命令删除，然后重启redis，就可以恢复redis的所有数据到FLUSHALL之前的状态了。是不是很神奇，这就是AOF持久化方式的好处之一。但是如果AOF文件已经被重写了，那就无法通过这种方法来恢复数据了。</p>
<p>虽然优点多多，但AOF方式也同样存在缺陷，比如在同样数据规模的情况下，AOF文件要比RDB文件的体积大。而且，AOF方式的恢复速度也要慢于RDB方式。</p>
<p>如果你直接执行BGREWRITEAOF命令，那么redis会生成一个全新的AOF文件，其中便包括了可以恢复现有数据的最少的命令集。</p>
<p>如果运气比较差，AOF文件出现了被写坏的情况，也不必过分担忧，redis并不会贸然加载这个有问题的AOF文件，而是报错退出。这时可以通过以下步骤来修复出错的文件：</p>
<p>1.备份被写坏的AOF文件<br>2.运行redis-check-aof –fix进行修复<br>3.用diff -u来看下两个文件的差异，确认问题点<br>4.重启redis，加载修复后的AOF文件</p>
<p><strong>【聊聊redis持久化 – AOF重写】</strong></p>
<p>AOF重写的内部运行原理，我们有必要了解一下。</p>
<p>在重写即将开始之际，redis会创建（fork）一个“重写子进程”，这个子进程会首先读取现有的AOF文件，并将其包含的指令进行分析压缩并写入到一个临时文件中。</p>
<p>与此同时，主工作进程会将新接收到的写指令一边累积到内存缓冲区中，一边继续写入到原有的AOF文件中，这样做是保证原有的AOF文件的可用性，避免在重写过程中出现意外。</p>
<p>当“重写子进程”完成重写工作后，它会给父进程发一个信号，父进程收到信号后就会将内存中缓存的写指令追加到新AOF文件中。</p>
<p>当追加结束后，redis就会用新AOF文件来代替旧AOF文件，之后再有新的写指令，就都会追加到新的AOF文件中了。</p>
<p><strong>【聊聊redis持久化 – 如何选择RDB和AOF】</strong></p>
<p>对于我们应该选择RDB还是AOF，官方的建议是两个同时使用。这样可以提供更可靠的持久化方案。</p>
<p><strong>【聊聊主从 – 用法】</strong></p>
<p>像MySQL一样，redis是支持主从同步的，而且也支持一主多从以及多级从结构。</p>
<p>主从结构，一是为了纯粹的冗余备份，二是为了提升读性能，比如很消耗性能的SORT就可以由从服务器来承担。</p>
<p>redis的主从同步是异步进行的，这意味着主从同步不会影响主逻辑，也不会降低redis的处理性能。</p>
<p>主从架构中，可以考虑关闭主服务器的数据持久化功能，只让从服务器进行持久化，这样可以提高主服务器的处理性能。</p>
<p>在主从架构中，从服务器通常被设置为只读模式，这样可以避免从服务器的数据被误修改。但是从服务器仍然可以接受CONFIG等指令，所以还是不应该将从服务器直接暴露到不安全的网络环境中。如果必须如此，那可以考虑给重要指令进行重命名，来避免命令被外人误执行。</p>
<p><strong>【聊聊主从 – 同步原理】</strong></p>
<p>从服务器会向主服务器发出SYNC指令，当主服务器接到此命令后，就会调用BGSAVE指令来创建一个子进程专门进行数据持久化工作，也就是将主服务器的数据写入RDB文件中。在数据持久化期间，主服务器将执行的写指令都缓存在内存中。</p>
<p>在BGSAVE指令执行完成后，主服务器会将持久化好的RDB文件发送给从服务器，从服务器接到此文件后会将其存储到磁盘上，然后再将其读取到内存中。这个动作完成后，主服务器会将这段时间缓存的写指令再以redis协议的格式发送给从服务器。</p>
<p>另外，要说的一点是，即使有多个从服务器同时发来SYNC指令，主服务器也只会执行一次BGSAVE，然后把持久化好的RDB文件发给多个下游。在redis2.8版本之前，如果从服务器与主服务器因某些原因断开连接的话，都会进行一次主从之间的全量的数据同步；而在2.8版本之后，redis支持了效率更高的增量同步策略，这大大降低了连接断开的恢复成本。</p>
<p>主服务器会在内存中维护一个缓冲区，缓冲区中存储着将要发给从服务器的内容。从服务器在与主服务器出现网络瞬断之后，从服务器会尝试再次与主服务器连接，一旦连接成功，从服务器就会把“希望同步的主服务器ID”和“希望请求的数据的偏移位置（replication offset）”发送出去。主服务器接收到这样的同步请求后，首先会验证主服务器ID是否和自己的ID匹配，其次会检查“请求的偏移位置”是否存在于自己的缓冲区中，如果两者都满足的话，主服务器就会向从服务器发送增量内容。</p>
<p>增量同步功能，需要服务器端支持全新的PSYNC指令。这个指令，只有在redis-2.8之后才具有。</p>
<p><strong>【聊聊redis的事务处理】</strong></p>
<p>众所周知，事务是指“一个完整的动作，要么全部执行，要么什么也没有做”。</p>
<p>在聊redis事务处理之前，要先和大家介绍四个redis指令，即MULTI、EXEC、DISCARD、WATCH。这四个指令构成了redis事务处理的基础。</p>
<p>1.MULTI用来组装一个事务；<br>2.EXEC用来执行一个事务；<br>3.DISCARD用来取消一个事务；<br>4.WATCH用来监视一些key，一旦这些key在事务执行之前被改变，则取消事务的执行。</p>
<p>纸上得来终觉浅，我们来看一个MULTI和EXEC的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis&gt; MULTI //标记事务开始</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">redis&gt; INCR user_id //多条命令按顺序入队</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QUEUED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">redis&gt; INCR user_id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QUEUED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">redis&gt; INCR user_id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QUEUED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">redis&gt; PING</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QUEUED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">redis&gt; EXEC //执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1) (integer) 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2) (integer) 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3) (integer) 3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4) PONG</span><br></pre></td></tr></table></figure>
<p>在上面的例子中，我们看到了QUEUED的字样，这表示我们在用MULTI组装事务时，每一个命令都会进入到内存队列中缓存起来，如果出现QUEUED则表示我们这个命令成功插入了缓存队列，在将来执行EXEC时，这些被QUEUED的命令都会被组装成一个事务来执行。</p>
<p>对于事务的执行来说，如果redis开启了AOF持久化的话，那么一旦事务被成功执行，事务中的命令就会通过write命令一次性写到磁盘中去，如果在向磁盘中写的过程中恰好出现断电、硬件故障等问题，那么就可能出现只有部分命令进行了AOF持久化，这时AOF文件就会出现不完整的情况，这时，我们可以使用redis-check-aof工具来修复这一问题，这个工具会将AOF文件中不完整的信息移除，确保AOF文件完整可用。</p>
<p>有关事务，大家经常会遇到的是两类错误：</p>
<p>1.调用EXEC之前的错误<br>2.调用EXEC之后的错误</p>
<p>“调用EXEC之前的错误”，有可能是由于语法有误导致的，也可能时由于内存不足导致的。只要出现某个命令无法成功写入缓冲队列的情况，redis都会进行记录，在客户端调用EXEC时，redis会拒绝执行这一事务。（这时2.6.5版本之后的策略。在2.6.5之前的版本中，redis会忽略那些入队失败的命令，只执行那些入队成功的命令）。我们来看一个这样的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; haha //一个明显错误的指令</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(error) ERR unknown command &#x27;haha&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QUEUED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//redis无情的拒绝了事务的执行，原因是“之前出现了错误”</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br></pre></td></tr></table></figure>
<p>而对于“调用EXEC之后的错误”，redis则采取了完全不同的策略，即redis不会理睬这些错误，而是继续向下执行事务中的其他命令。这是因为，对于应用层面的错误，并不是redis自身需要考虑和处理的问题，所以一个事务中如果某一条命令执行失败，并不会影响接下来的其他命令的执行。我们也来看一个例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; set age 23</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QUEUED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//age不是集合，所以如下是一条明显错误的指令</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; sadd age 15 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QUEUED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; set age 29</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QUEUED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; exec //执行事务时，redis不会理睬第2条指令执行错误</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1) OK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2) (error) WRONGTYPE Operation against a key holding the wrong kind of value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3) OK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;29&quot; //可以看出第3条指令被成功执行了</span><br></pre></td></tr></table></figure>
<p>好了，我们来说说最后一个指令“WATCH”，这是一个很好用的指令，它可以帮我们实现类似于“乐观锁”的效果，即CAS（check and set）。</p>
<p>WATCH本身的作用是“监视key是否被改动过”，而且支持同时监视多个key，只要还没真正触发事务，WATCH都会尽职尽责的监视，一旦发现某个key被修改了，在执行EXEC时就会返回nil，表示事务无法触发。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set age 23</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; watch age //开始监视age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; set age 24 //在EXEC之前，age的值被修改了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; set age 25</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QUEUED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QUEUED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; exec //触发EXEC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(nil) //事务无法被执行</span><br></pre></td></tr></table></figure>
<p><strong>【教你看懂redis配置 – 简介】</strong></p>
<p>我们可以在启动redis-server时指定应该加载的配置文件，方法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./redis-server /path/to/redis.conf</span><br></pre></td></tr></table></figure>
<p>接下来，我们就来讲解下redis配置文件的各个配置项的含义，注意，本文是基于redis-2.8.4版本进行讲解的。</p>
<p>redis官方提供的redis.conf文件，足有700+行，其中100多行为有效配置行，另外的600多行为注释说明。</p>
<p>在配置文件的开头部分，首先明确了一些度量单位：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1k =&gt; 1000 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 1kb =&gt; 1024 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 1m =&gt; 1000000 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 1mb =&gt; 1024*1024 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 1g =&gt; 1000000000 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 1gb =&gt; 1024*1024*1024 bytes</span><br></pre></td></tr></table></figure>
<p>可以看出，redis配置中对单位的大小写不敏感，1GB、1Gb和1gB都是相同的。由此也说明，redis只支持bytes，不支持bit单位。</p>
<p>redis支持“主配置文件中引入外部配置文件”，很像C/C++中的include指令，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include /path/to/other.conf</span><br></pre></td></tr></table></figure>
<p>如果你看过redis的配置文件，会发现还是很有条理的。redis配置文件被分成了几大块区域，它们分别是：</p>
<p>1.通用（general）<br>2.快照（snapshotting）<br>3.复制（replication）<br>4.安全（security）<br>5.限制（limits)<br>6.追加模式（append only mode)<br>7.LUA脚本（lua scripting)<br>8.慢日志（slow log)<br>9.事件通知（event notification）</p>
<p>下面我们就来逐一讲解。</p>
<p><strong>【教你看懂redis配置 -通用】</strong></p>
<p>默认情况下，redis并不是以daemon形式来运行的。通过daemonize配置项可以控制redis的运行形式，如果改为yes，那么redis就会以daemon形式运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">daemonize no</span><br></pre></td></tr></table></figure>
<p>当以daemon形式运行时，redis会生成一个pid文件，默认会生成在/var/run/redis.pid。当然，你可以通过pidfile来指定pid文件生成的位置，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pidfile /path/to/redis.pid</span><br></pre></td></tr></table></figure>
<p>默认情况下，redis会响应本机所有可用网卡的连接请求。当然，redis允许你通过bind配置项来指定要绑定的IP，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind 192.168.1.2 10.8.4.2</span><br></pre></td></tr></table></figure>
<p>redis的默认服务端口是6379，你可以通过port配置项来修改。如果端口设置为0的话，redis便不会监听端口了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">port 6379</span><br></pre></td></tr></table></figure>
<p>有些同学会问“如果redis不监听端口，还怎么与外界通信呢”，其实redis还支持通过unix socket方式来接收请求。可以通过unixsocket配置项来指定unix socket文件的路径，并通过unixsocketperm来指定文件的权限。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unixsocket /tmp/redis.sock</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">unixsocketperm 755</span><br></pre></td></tr></table></figure>
<p>当一个redis-client一直没有请求发向server端，那么server端有权主动关闭这个连接，可以通过timeout来设置“空闲超时时限”，0表示永不关闭。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">timeout 0</span><br></pre></td></tr></table></figure>
<p>TCP连接保活策略，可以通过tcp-keepalive配置项来进行设置，单位为秒，假如设置为60秒，则server端会每60秒向连接空闲的客户端发起一次ACK请求，以检查客户端是否已经挂掉，对于无响应的客户端则会关闭其连接。所以关闭一个连接最长需要120秒的时间。如果设置为0，则不会进行保活检测。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tcp-keepalive 0</span><br></pre></td></tr></table></figure>
<p>redis支持通过loglevel配置项设置日志等级，共分四级，即debug、verbose、notice、warning。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">loglevel notice</span><br></pre></td></tr></table></figure>
<p>redis也支持通过logfile配置项来设置日志文件的生成位置。如果设置为空字符串，则redis会将日志输出到标准输出。假如你在daemon情况下将日志设置为输出到标准输出，则日志会被写到/dev/null中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">logfile &quot;&quot;</span><br></pre></td></tr></table></figure>
<p>如果希望日志打印到syslog中，也很容易，通过syslog-enabled来控制。另外，syslog-ident还可以让你指定syslog里的日志标志，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">syslog-ident redis</span><br></pre></td></tr></table></figure>
<p>而且还支持指定syslog设备，值可以是USER或LOCAL0-LOCAL7。具体可以参考syslog服务本身的用法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">syslog-facility local0</span><br></pre></td></tr></table></figure>
<p>对于redis来说，可以设置其数据库的总数量，假如你希望一个redis包含16个数据库，那么设置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">databases 16</span><br></pre></td></tr></table></figure>
<p>这16个数据库的编号将是0到15。默认的数据库是编号为0的数据库。用户可以使用select <DBid>来选择相应的数据库。</DBid></p>
<p><strong>【教你看懂redis配置 – 快照】</strong></p>
<p>快照，主要涉及的是redis的RDB持久化相关的配置，我们来一起看一看。</p>
<p>我们可以用如下的指令来让数据保存到磁盘上，即控制RDB快照功能：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">save &lt;seconds&gt; &lt;changes&gt;</span><br></pre></td></tr></table></figure>
<p>举例来说：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">save 900 1 //表示每15分钟且至少有1个key改变，就触发一次持久化</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">save 300 10 //表示每5分钟且至少有10个key改变，就触发一次持久化</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">save 60 10000 //表示每60秒至少有10000个key改变，就触发一次持久化</span><br></pre></td></tr></table></figure>
<p>如果你想禁用RDB持久化的策略，只要不设置任何save指令就可以，或者给save传入一个空字符串参数也可以达到相同效果，就像这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">save &quot;&quot;</span><br></pre></td></tr></table></figure>
<p>如果用户开启了RDB快照功能，那么在redis持久化数据到磁盘时如果出现失败，默认情况下，redis会停止接受所有的写请求。这样做的好处在于可以让用户很明确的知道内存中的数据和磁盘上的数据已经存在不一致了。如果redis不顾这种不一致，一意孤行的继续接收写请求，就可能会引起一些灾难性的后果。</p>
<p>如果下一次RDB持久化成功，redis会自动恢复接受写请求。</p>
<p>当然，如果你不在乎这种数据不一致或者有其他的手段发现和控制这种不一致的话，你完全可以关闭这个功能，以便在快照写入失败时，也能确保redis继续接受新的写请求。配置项如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stop-writes-on-bgsave-error yes</span><br></pre></td></tr></table></figure>
<p>对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用LZF算法进行压缩。如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能，但是存储在磁盘上的快照会比较大。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rdbcompression yes</span><br></pre></td></tr></table></figure>
<p>在存储快照后，我们还可以让redis使用CRC64算法来进行数据校验，但是这样做会增加大约10%的性能消耗，如果你希望获取到最大的性能提升，可以关闭此功能。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rdbchecksum yes</span><br></pre></td></tr></table></figure>
<p>我们还可以设置快照文件的名称，默认是这样配置的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dbfilename dump.rdb</span><br></pre></td></tr></table></figure>
<p>最后，你还可以设置这个快照文件存放的路径。比如默认设置就是当前文件夹：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dir ./</span><br></pre></td></tr></table></figure>
<p><strong>【教你看懂redis配置 – 复制】</strong></p>
<p>redis提供了主从同步功能。</p>
<p>通过slaveof配置项可以控制某一个redis作为另一个redis的从服务器，通过指定IP和端口来定位到主redis的位置。一般情况下，我们会建议用户为从redis设置一个不同频率的快照持久化的周期，或者为从redis配置一个不同的服务端口等等。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure>
<p>如果主redis设置了验证密码的话（使用requirepass来设置），则在从redis的配置中要使用masterauth来设置校验密码，否则的话，主redis会拒绝从redis的访问请求。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">masterauth &lt;master-password&gt;</span><br></pre></td></tr></table></figure>
<p>当从redis失去了与主redis的连接，或者主从同步正在进行中时，redis该如何处理外部发来的访问请求呢？这里，从redis可以有两种选择：</p>
<p>第一种选择：如果slave-serve-stale-data设置为yes（默认），则从redis仍会继续响应客户端的读写请求。</p>
<p>第二种选择：如果slave-serve-stale-data设置为no，则从redis会对客户端的请求返回“SYNC with master in progress”，当然也有例外，当客户端发来INFO请求和SLAVEOF请求，从redis还是会进行处理。</p>
<p>你可以控制一个从redis是否可以接受写请求。将数据直接写入从redis，一般只适用于那些生命周期非常短的数据，因为在主从同步时，这些临时数据就会被清理掉。自从redis2.6版本之后，默认从redis为只读。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slave-read-only yes</span><br></pre></td></tr></table></figure>
<p>只读的从redis并不适合直接暴露给不可信的客户端。为了尽量降低风险，可以使用rename-command指令来将一些可能有破坏力的命令重命名，避免外部直接调用。比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span><br></pre></td></tr></table></figure>
<p>从redis会周期性的向redis发出PING包。你可以通过repl_ping_slave_period指令来控制其周期。默认是10秒。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repl-ping-slave-period 10</span><br></pre></td></tr></table></figure>
<p>在主从同步时，可能在这些情况下会有超时发生：</p>
<p>1.以从redis的角度来看，当有大规模IO传输时。<br>2.以从redis的角度来看，当数据传输或PING时，主redis超时<br>3.以主redis的角度来看，在回复从redis的PING时，从redis超时</p>
<p>用户可以设置上述超时的时限，不过要确保这个时限比repl-ping-slave-period的值要大，否则每次主redis都会认为从redis超时。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repl-timeout 60</span><br></pre></td></tr></table></figure>
<p>我们可以控制在主从同步时是否禁用TCP_NODELAY。如果开启TCP_NODELAY，那么主redis会使用更少的TCP包和更少的带宽来向从redis传输数据。但是这可能会增加一些同步的延迟，大概会达到40毫秒左右。如果你关闭了TCP_NODELAY，那么数据同步的延迟时间会降低，但是会消耗更多的带宽。（如果你不了解TCP_NODELAY，可以到这里来科普一下）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repl-disable-tcp-nodelay no</span><br></pre></td></tr></table></figure>
<p>我们还可以设置同步队列长度。队列长度（backlog)是主redis中的一个缓冲区，在与从redis断开连接期间，主redis会用这个缓冲区来缓存应该发给从redis的数据。这样的话，当从redis重新连接上之后，就不必重新全量同步数据，只需要同步这部分增量数据即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repl-backlog-size 1mb</span><br></pre></td></tr></table></figure>
<p>如果主redis等了一段时间之后，还是无法连接到从redis，那么缓冲队列中的数据将被清理掉。我们可以设置主redis要等待的时间长度。如果设置为0，则表示永远不清理。默认是1个小时。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repl-backlog-ttl 3600</span><br></pre></td></tr></table></figure>
<p>我们可以给众多的从redis设置优先级，在主redis持续工作不正常的情况，优先级高的从redis将会升级为主redis。而编号越小，优先级越高。比如一个主redis有三个从redis，优先级编号分别为10、100、25，那么编号为10的从redis将会被首先选中升级为主redis。当优先级被设置为0时，这个从redis将永远也不会被选中。默认的优先级为100。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slave-priority 100</span><br></pre></td></tr></table></figure>
<p>假如主redis发现有超过M个从redis的连接延时大于N秒，那么主redis就停止接受外来的写请求。这是因为从redis一般会每秒钟都向主redis发出PING，而主redis会记录每一个从redis最近一次发来PING的时间点，所以主redis能够了解每一个从redis的运行情况。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">min-slaves-to-write 3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">min-slaves-max-lag 10</span><br></pre></td></tr></table></figure>
<p>上面这个例子表示，假如有大于等于3个从redis的连接延迟大于10秒，那么主redis就不再接受外部的写请求。上述两个配置中有一个被置为0，则这个特性将被关闭。默认情况下min-slaves-to-write为0，而min-slaves-max-lag为10。</p>
<p><strong>【教你看懂redis配置 – 安全】</strong></p>
<p>我们可以要求redis客户端在向redis-server发送请求之前，先进行密码验证。当你的redis-server处于一个不太可信的网络环境中时，相信你会用上这个功能。由于redis性能非常高，所以每秒钟可以完成多达15万次的密码尝试，所以你最好设置一个足够复杂的密码，否则很容易被黑客破解。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">requirepass zhimakaimen</span><br></pre></td></tr></table></figure>
<p>这里我们通过requirepass将密码设置成“芝麻开门”。</p>
<p>redis允许我们对redis指令进行更名，比如将一些比较危险的命令改个名字，避免被误执行。比如可以把CONFIG命令改成一个很复杂的名字，这样可以避免外部的调用，同时还可以满足内部调用的需要：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c89</span><br></pre></td></tr></table></figure>
<p>我们甚至可以禁用掉CONFIG命令，那就是把CONFIG的名字改成一个空字符串：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rename-command CONFIG &quot;&quot;</span><br></pre></td></tr></table></figure>
<p>但需要注意的是，如果你使用AOF方式进行数据持久化，或者需要与从redis进行通信，那么更改指令的名字可能会引起一些问题。</p>
<p><strong>【教你看懂redis配置 -限制】</strong></p>
<p>我们可以设置redis同时可以与多少个客户端进行连接。默认情况下为10000个客户端。当你无法设置进程文件句柄限制时，redis会设置为当前的文件句柄限制值减去32，因为redis会为自身内部处理逻辑留一些句柄出来。</p>
<p>如果达到了此限制，redis则会拒绝新的连接请求，并且向这些连接请求方发出“max number of clients reached”以作回应。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">maxclients 10000</span><br></pre></td></tr></table></figure>


<p>我们甚至可以设置redis可以使用的内存量。一旦到达内存使用上限，redis将会试图移除内部数据，移除规则可以通过maxmemory-policy来指定。</p>
<p>如果redis无法根据移除规则来移除内存中的数据，或者我们设置了“不允许移除”，那么redis则会针对那些需要申请内存的指令返回错误信息，比如SET、LPUSH等。但是对于无内存申请的指令，仍然会正常响应，比如GET等。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">maxmemory &lt;bytes&gt;</span><br></pre></td></tr></table></figure>
<p>需要注意的一点是，如果你的redis是主redis（说明你的redis有从redis），那么在设置内存使用上限时，需要在系统中留出一些内存空间给同步队列缓存，只有在你设置的是“不移除”的情况下，才不用考虑这个因素。</p>
<p>对于内存移除规则来说，redis提供了多达6种的移除规则。他们是：</p>
<p>1.volatile-lru：使用LRU算法移除过期集合中的key<br>2.allkeys-lru：使用LRU算法移除key<br>3.volatile-random：在过期集合中移除随机的key<br>4.allkeys-random：移除随机的key<br>5.volatile-ttl：移除那些TTL值最小的key，即那些最近才过期的key。<br>6.noeviction：不进行移除。针对写操作，只是返回错误信息。</p>
<p>无论使用上述哪一种移除规则，如果没有合适的key可以移除的话，redis都会针对写请求返回错误信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">maxmemory-policy volatile-lru</span><br></pre></td></tr></table></figure>
<p>LRU算法和最小TTL算法都并非是精确的算法，而是估算值。所以你可以设置样本的大小。假如redis默认会检查三个key并选择其中LRU的那个，那么你可以改变这个key样本的数量。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">maxmemory-samples 3</span><br></pre></td></tr></table></figure>
<p>最后，我们补充一个信息，那就是到目前版本（2.8.4）为止，redis支持的写指令包括了如下这些：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set setnx setex append</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">getset mset msetnx exec sort</span><br></pre></td></tr></table></figure>
<p><strong>【教你看懂redis配置 – 追加模式】</strong></p>
<p>默认情况下，redis会异步的将数据持久化到磁盘。这种模式在大部分应用程序中已被验证是很有效的，但是在一些问题发生时，比如断电，则这种机制可能会导致数分钟的写请求丢失。</p>
<p>如博文上半部分中介绍的，追加文件（Append Only File）是一种更好的保持数据一致性的方式。即使当服务器断电时，也仅会有1秒钟的写请求丢失，当redis进程出现问题且操作系统运行正常时，甚至只会丢失一条写请求。</p>
<p>我们建议大家，AOF机制和RDB机制可以同时使用，不会有任何冲突。对于如何保持数据一致性的讨论，请参见<a href="https://redis.io/topics/keyspace-events">本文</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">appendonly no</span><br></pre></td></tr></table></figure>
<p>我们还可以设置aof文件的名称：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br></pre></td></tr></table></figure>
<p>fsync()调用，用来告诉操作系统立即将缓存的指令写入磁盘。一些操作系统会“立即”进行，而另外一些操作系统则会“尽快”进行。</p>
<p>redis支持三种不同的模式：</p>
<p>1.no：不调用fsync()。而是让操作系统自行决定sync的时间。这种模式下，redis的性能会最快。<br>2.always：在每次写请求后都调用fsync()。这种模式下，redis会相对较慢，但数据最安全。<br>3.everysec：每秒钟调用一次fsync()。这是性能和安全的折衷。</p>
<p>默认情况下为everysec。有关数据一致性的揭秘，可以参考<a href="https://redis.io/topics/keyspace-events">本文</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">appendfsync everysec</span><br></pre></td></tr></table></figure>
<p>当fsync方式设置为always或everysec时，如果后台持久化进程需要执行一个很大的磁盘IO操作，那么redis可能会在fsync()调用时卡住。目前尚未修复这个问题，这是因为即使我们在另一个新的线程中去执行fsync()，也会阻塞住同步写调用。</p>
<p>为了缓解这个问题，我们可以使用下面的配置项，这样的话，当BGSAVE或BGWRITEAOF运行时，fsync()在主进程中的调用会被阻止。这意味着当另一路进程正在对AOF文件进行重构时，redis的持久化功能就失效了，就好像我们设置了“appendsync none”一样。如果你的redis有时延问题，那么请将下面的选项设置为yes。否则请保持no，因为这是保证数据完整性的最安全的选择。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">no-appendfsync-on-rewrite no</span><br></pre></td></tr></table></figure>
<p>我们允许redis自动重写aof。当aof增长到一定规模时，redis会隐式调用BGREWRITEAOF来重写log文件，以缩减文件体积。</p>
<p>redis是这样工作的：redis会记录上次重写时的aof大小。假如redis自启动至今还没有进行过重写，那么启动时aof文件的大小会被作为基准值。这个基准值会和当前的aof大小进行比较。如果当前aof大小超出所设置的增长比例，则会触发重写。另外，你还需要设置一个最小大小，是为了防止在aof很小时就触发重写。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure>
<p>如果设置auto-aof-rewrite-percentage为0，则会关闭此重写功能。</p>
<p><strong>【教你看懂redis配置 – LUA脚本】</strong></p>
<p>lua脚本的最大运行时间是需要被严格限制的，要注意单位是毫秒：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lua-time-limit 5000</span><br></pre></td></tr></table></figure>
<p>如果此值设置为0或负数，则既不会有报错也不会有时间限制。</p>
<p><strong>【教你看懂redis配置 – 慢日志】</strong></p>
<p>redis慢日志是指一个系统进行日志查询超过了指定的时长。这个时长不包括IO操作，比如与客户端的交互、发送响应内容等，而仅包括实际执行查询命令的时间。</p>
<p>针对慢日志，你可以设置两个参数，一个是执行时长，单位是微秒，另一个是慢日志的长度。当一个新的命令被写入日志时，最老的一条会从命令日志队列中被移除。</p>
<p>单位是微秒，即1000000表示一秒。负数则会禁用慢日志功能，而0则表示强制记录每一个命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slowlog-log-slower-than 10000</span><br></pre></td></tr></table></figure>
<p>慢日志最大长度，可以随便填写数值，没有上限，但要注意它会消耗内存。你可以使用SLOWLOG RESET来重设这个值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slowlog-max-len 128</span><br></pre></td></tr></table></figure>
<p><strong>【教你看懂redis配置 – 事件通知】</strong></p>
<p>redis可以向客户端通知某些事件的发生。这个特性的具体解释可以参见<a href="https://redis.io/topics/keyspace-events">本文</a>。</p>
<p><strong>【教你看懂redis配置 – 高级配置】</strong></p>
<p>有关哈希数据结构的一些配置项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hash-max-ziplist-entries 512</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hash-max-ziplist-value 64</span><br></pre></td></tr></table></figure>
<p>有关列表数据结构的一些配置项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list-max-ziplist-entries 512</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list-max-ziplist-value 64</span><br></pre></td></tr></table></figure>
<p>有关集合数据结构的配置项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set-max-intset-entries 512</span><br></pre></td></tr></table></figure>
<p>有关有序集合数据结构的配置项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zset-max-ziplist-entries 128</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zset-max-ziplist-value 64</span><br></pre></td></tr></table></figure>
<p>关于是否需要再哈希的配置项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">activerehashing yes</span><br></pre></td></tr></table></figure>
<p>关于客户端输出缓冲的控制项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client-output-buffer-limit slave 256mb 64mb 60</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br></pre></td></tr></table></figure>

<p>有关频率的配置项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hz 10</span><br></pre></td></tr></table></figure>
<p>有关重写aof的配置项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aof-rewrite-incremental-fsync yes</span><br></pre></td></tr></table></figure>
<p>至此，redis的入门内容就结束了，内容实在不少，但相对来说都很基础，本文没有涉及redis集群、redis工作原理、redis源码、redis相关LIB库等内容，后续会陆续奉献，大家敬请期待：）</p>
<p>谢谢！</p>
]]></content>
      <categories>
        <category>微服务架构</category>
      </categories>
      <tags>
        <tag>微服务,Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>香农信息量</title>
    <url>/post/6375c8f0.html</url>
    <content><![CDATA[<p>如果是连续型随机变量的情况，设p为随机变量X的概率分布，即p(x)为随机变量X在X=x处的概率密度函数值，则随机变量X在X=x处的香农信息量定义为：-<br>$$<br>log_2p(x)=log_2\frac{1}{p(x)}<br>$$<br>这时香农信息量的单位为比特。（如果非连续型随机变量，则为某一具体随机事件的概率，其他的同上）</p>
<p>香农信息量用于刻画消除随机变量在处的不确定性所需的信息量的大小。</p>
<p>上面是香农信息量的完整而严谨的表达，基本上读完就只剩下一个问题，为什么是这个式子？为了方便理解我们先看一下香农信息量在数据压缩应用的一般流程。</p>
<p>假设我们有一段数据长下面这样：aaBaaaVaaaaa</p>
<p>可以算出三个字母出现的概率分别为：</p>
<p>$$<br>a:\frac{10}{12}，B:\frac{1}{12}，V:\frac{1}{12}<br>$$<br>香农信息量为：a:0.263，B:3.585，V:3.585</p>
<p>也就是说如果我们要用比特来表述这几个字母，分别需要0.263，3.585，3.585个这样的比特。当然，由于比特是整数的，因此应该向上取整，变为1，4，4个比特。</p>
<p>这个时候我们就可以按照这个指导对字母进行编码，比如把a编码为”00”，把B编码为”10001000”，V编码为”10011001”，然后用编码替换掉字母来完成压缩编码，数据压缩结果为：001000000100100000。</p>
<p>上面例子看起来有点不合理，因为如果我们去搞，我们会编码出不一样的东西，如a编码为”00”，B编码为”1010”，V编码为”1111”，因此可以把数据压缩的更小。那么问题出现在哪呢？</p>
<p>出现在这里的B和V这两个字母只用两个比特进行编码对于他们自身而言并不是充分的。在另外一个压缩的例子中，可以一下子就看出来：abBcdeVfhgim</p>
<p>上面的每一个字母出现的概率都为<br>$$<br>\frac{1}{12}<br>$$<br>，假设我们还是以两个比特去编码B和V，那么就无法完全区分出12个字母。而如果是4个比特，便有16种可能性，可以足够区分这12个字母。</p>
<p>现在回过头来看香农信息量的公式，它正是告诉我们，如果已经知道一个事件出现的概率，至少需要多少的比特数才能完整描绘这个事件（无论外部其他事件的概率怎么变化），其中为底的2就是比特的两种可能性，而因为二分是一个除的关系，因此自变量是概率分之一而不是概率本身。</p>
<p>感性的看，如果我们知道a出现的概率为<br>$$<br>\frac{5}{6}<br>$$<br>，那么用比特中的”0”状态来表述它是完全合理的，因为其他事件的概率总和只有<br>$$<br>\frac{1}{6}<br>$$<br>，但我们给这<br>$$<br>\frac{1}{6}<br>$$<br>空出了比特的”1”这<br>$$<br>\frac{1}{2}<br>$$<br>的空间来表达他们，是完全足够的。</p>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>-人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>遗传算法详解（GA）</title>
    <url>/post/7e3b9734.html</url>
    <content><![CDATA[<p><strong>本文是去年课题组周报中的一个专题讲解，详细讲了GA，由于是周报，所以十分详细。很适合初学者入门。文中也简单提及了模拟退火算法。文章综合参考了一些互联网资料。发博客以备忘！</strong></p>
<p><strong>三：遗传算法</strong></p>
<p>​    照例先给出科学定义：</p>
<p>​    遗传算法（Genetic Algorithm, GA）起源于对生物系统所进行的计算机模拟研究。它是模仿自然界生物进化机制发展起来的随机全局搜索和优化方法，借鉴了达尔文的进化论和孟德尔的遗传学说。其本质是一种高效、并行、全局搜索的方法，能在搜索过程中自动获取和积累有关搜索空间的知识，并自适应地控制搜索过程以求得最佳解。</p>
<p>   <strong>再给出相关术语：（各位看看就好，后面都会涉及到，再细说）</strong></p>
<p>基因型(genotype)：性状染色体的内部表现；</p>
<p>表现型(phenotype)：染色体决定的性状的外部表现，或者说，根据基因型形成的个体的外部表现；</p>
<p>进化(evolution)：种群逐渐适应生存环境，品质不断得到改良。生物的进化是以种群的形式进行的。</p>
<p>适应度(fitness)：度量某个物种对于生存环境的适应程度。</p>
<p>选择(selection)：<strong>以一定的概率</strong>从种群中选择若干个个体。一般，选择过程是一种<strong>基于适应度</strong>的优胜劣汰的过程。</p>
<p>复制(reproduction)：细胞分裂时，遗传物质DNA通过复制而转移到新产生的细胞中，新细胞就继承了旧细胞的基因。</p>
<p>交叉(crossover)：两个染色体的某一相同位置处DNA被切断，前后两串分别交叉组合形成两个新的染色体。也称基因重组或杂交；</p>
<p>变异(mutation)：复制时可能（很小的概率）产生某些复制差错，变异产生新的染色体，表现出新的性状。</p>
<p>编码(coding)：DNA中遗传信息在一个长链上按一定的模式排列。遗传编码可看作从表现型到基因型的映射。</p>
<p>解码(decoding)：基因型到表现型的映射。</p>
<p>个体（individual）：指染色体带有特征的实体；</p>
<p>种群（population）：个体的集合，该集合内个体数称为种群的大小。 </p>
<p>​    遗传算法的有趣应用很多，诸如寻路问题，8数码问题，囚犯困境，动作控制，找圆心问题（在一个不规则的多边形中，寻找一个包含在该多边形内的最大圆圈的圆心），TSP问题，生产调度问题，人工生命模拟等。下面我以袋鼠为例子讲讲遗传算法。（因为袋鼠会跳） </p>
<p>   遗传算法中每一条染色体，对应着遗传算法的一个解决方案，一般我们用适应性函数（fitness function）来衡量这个解决方案的优劣。所以从一个基因组到其解的适应度形成一个映射。可以把遗传算法的过程看作是一个在多元函数里面求最优解的过程。 <strong>可以这样想象，这个多维曲面里面有数不清的“山峰”，而这些山峰所对应的就是局部最优解。而其中也会有一个“山峰”的海拔最高的，那么这个就是全局最优解。而遗传算法的任务就是尽量爬到最高峰，而不是陷落在一些小山峰。</strong>（另外，值得注意的是遗传算法不一定要找“最高的山峰”，如果问题的适应度评价越小越好的话，那么全局最优解就是函数的最小值，对应的，遗传算法所要找的就是“最深的谷底”）</p>
<p>​                            <img src="/../images/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%EF%BC%88GA%EF%BC%89/20160419105834575" alt="img"></p>
<p><strong>问题的提出与解决方案：</strong></p>
<p>  让我们先来考虑考虑下面这个问题的解决办法。</p>
<p>​      已知一元函数：<img src="/../images/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%EF%BC%88GA%EF%BC%89/20160419105917087" alt="img"></p>
<p>现在要求在既定的区间内找出函数的最大值 </p>
<p>​               <img src="/../images/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%EF%BC%88GA%EF%BC%89/20160419105954545" alt="img"></p>
<p><strong>“袋鼠跳”问题</strong></p>
<p>​    既然我们把函数曲线理解成一个一个山峰和山谷组成的山脉。那么我们可以设想所得到的每一个解就是一只袋鼠，我们希望它们不断的向着更高处跳去，直到跳到最高的山峰（尽管袋鼠本身不见得愿意那么做）。所以求最大值的过程就转化成一个“袋鼠跳”的过程。</p>
<p>作为对比下面简单介绍“袋鼠跳”的几种方式。</p>
<p> \1. 爬山法（最速上升爬山法）：</p>
<p>   从搜索空间中随机产生邻近的点，从中选择对应解最优的个体，替换原来的个体，不断重复上述过程。因为爬山法只对“邻近”的点作比较，所以目光比较“短浅”，常常只能收敛到离开初始位置比较近的局部最优解上面。对于存在很多局部最优点的问题，通过一个简单的迭代找出全局最优解的机会非常渺茫。（在爬山法中，袋鼠最有希望到达最靠近它出发点的山顶，但不能保证该山顶是珠穆朗玛峰，或者是一个非常高的山峰。因为一路上它只顾上坡，没有下坡。）</p>
<p>\2. 模拟退火：</p>
<p>   这个方法来自金属热加工过程的启发。在金属热加工过程中，当金属的温度超过它的熔点（Melting Point）时，原子就会激烈地随机运动。与所有的其它的物理系统相类似，原子的这种运动趋向于寻找其能量的极小状态。在这个能量的变迁过程中，开始时，温度非常高， 使得原子具有很高的能量。随着温度不断降低，金属逐渐冷却，金属中的原子的能量就越来越小，最后达到所有可能的最低点。利用模拟退火的时候，让算法从较大的跳跃开始，使到它有足够的“能量”逃离可能“路过”的局部最优解而不至于限制在其中，当它停在全局最优解附近的时候，逐渐的减小跳跃量，以便使其“落脚 ”到全局最优解上。（在模拟退火中，袋鼠喝醉了，而且随机地大跳跃了很长时间。运气好的话，它从一个山峰跳过山谷，到了另外一个更高的山峰上。但最后，它渐渐清醒了并朝着它所在的峰顶跳去。）</p>
<p>\3. 遗传算法：</p>
<p>  模拟物竞天择的生物进化过程，通过维护一个潜在解的群体执行了多方向的搜索，并支持这些方向上的信息构成和交换。是以面为单位的搜索，比以点为单位的搜索，更能发现全局最优解。（在遗传算法中，有很多袋鼠，它们降落到喜玛拉雅山脉的任意地方。<strong>这些袋鼠并不知道它们的任务是寻找珠穆朗玛峰。</strong>但每过几年，就在一些海拔高度较低的地方射杀一些袋鼠，并希望存活下来的袋鼠是多产的，在它们所处的地方生儿育女<em>。</em>）（或者换个说法。从前，有一大群袋鼠，它们被莫名其妙的零散地遗弃于喜马拉雅山脉。于是只好在那里艰苦的生活。海拔低的地方弥漫着一种无色无味的毒气，海拔越高毒气越稀薄。可是可怜的袋鼠们对此<strong>全然不觉</strong>，还是习惯于活蹦乱跳。于是，不断有袋鼠死于海拔较低的地方，而越是在海拔高的袋鼠越是能活得更久，也越有机会生儿育女。就这样经过许多年，这些袋鼠们竟然都不自觉地聚拢到了一个个的山峰上，可是在所有的袋鼠中，只有聚拢到珠穆朗玛峰的袋鼠被带回了美丽的澳洲。）</p>
<p><strong>遗传算法的实现过程</strong></p>
<p>​    遗传算法的实现过程实际上就像自然界的进化过程那样。首先寻找一种对问题潜在解进行“数字化”编码的方案。（建立表现型和基因型的映射关系）然后用随机数初始化一个种群（那么第一批袋鼠就被随意地分散在山脉上），种群里面的个体就是这些数字化的编码。接下来，通过适当的解码过程之后（得到袋鼠的位置坐标），用适应性函数对每一个基因个体作一次适应度评估（袋鼠爬得越高，越是受我们的喜爱，所以适应度相应越高）。用选择函数按照某种规定择优选择（我们要每隔一段时间，在山上射杀一些所在海拔较低的袋鼠，以保证袋鼠总体数目持平。）。让个体基因变异（让袋鼠随机地跳一跳）。然后产生子代（希望存活下来的袋鼠是多产的，并在那里生儿育女）。遗传算法并不保证你能获得问题的最优解，但是使用遗传算法的最大优点在于你不必去了解和操心如何去“找”最优解。（你不必去指导袋鼠向那边跳，跳多远。）而只要简单的“否定”一些表现不好的个体就行了。（*<strong>*把那些总是爱走下坡路的袋鼠射杀，这就是遗传算法的精粹！\</strong>）**</p>
<p> <strong>所以我们总结出遗传算法的一般步骤：</strong></p>
<p>​    开始循环直至找到满意的解。</p>
<p>1.评估每条染色体所对应个体的适应度。</p>
<p>2.遵照适应度越高，选择概率越大的原则，从种群中选择两个个体作为父方和母方。</p>
<p>3.抽取父母双方的染色体，进行交叉，产生子代。</p>
<p>4.对子代的染色体进行变异。</p>
<p>5.重复2，3，4步骤，直到新种群的产生。</p>
<p>结束循环。</p>
<p>​                <img src="/../images/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%EF%BC%88GA%EF%BC%89/20160419110213089" alt="img"></p>
<p><strong>接下来，我们将详细地剖析遗传算法过程的每一个细节。</strong></p>
<p><strong>编制袋鼠的染色体—-基因的编码方式</strong></p>
<p>   受到人类染色体结构的启发，我们可以设想一下，假设目前只有“0”，“1”两种碱基，我们也用一条链条把他们有序的串连在一起，因为每一个单位都能表现出 1 bit的信息量，所以一条足够长的染色体就能为我们勾勒出一个个体的所有特征。<strong>这就是二进制编码法</strong>，染色体大致如下：</p>
<p><strong>010010011011011110111110</strong></p>
<p>   上面的编码方式虽然简单直观，但明显地，当个体特征比较复杂的时候，需要大量的编码才能精确地描述，相应的解码过程（类似于生物学中的DNA翻译过程，就是把基因型映射到表现型的过程。）将过分繁复，为改善遗传算法的计算复杂性、提高运算效率，提出了浮点数编码。染色体大致如下：</p>
<p><strong>1.2 –3.3 – 2.0 –5.4 – 2.7 – 4.3</strong></p>
<p><strong>（注：还有一种编码方式叫符号编码）</strong></p>
<p>   那么我们如何利用这两种编码方式来为袋鼠的染色体编码呢？因为编码的目的是建立表现型到基因型的映射关系，而表现型一般就被理解为个体的特征。比如人的基因型是46条染色体所描述的却能解码成一个眼，耳，口，鼻等特征各不相同的活生生的人。所以我们要想为“袋鼠”的染色体编码，我们必须先来考虑“袋鼠”的“个体特征”是什么。也许有的人会说，袋鼠的特征很多，比如性别，身长，体重，也许它喜欢吃什么也能算作其中一个特征。但具体在解决这个问题的情况下，我们应该进一步思考：无论这只袋鼠是长短，肥瘦，黑白只要它在低海拔就会被射杀，同时也没有规定身长的袋鼠能跳得远一些，身短的袋鼠跳得近一些。当然它爱吃什么就更不相关了。<strong>我们由始至终都只关心一件事情：袋鼠在哪里。</strong>因为只要我们知道袋鼠在那里，我们就能做两件必须去做的事情：</p>
<p>（1）通过查阅喜玛拉雅山脉的地图来得知袋鼠所在的海拔高度（通过自变量求适应函数的值。）以判断我们有没必要把它射杀。</p>
<p>（2）知道袋鼠跳一跳（交叉和变异）后去到哪个新位置。</p>
<p>   如果我们一时无法准确的判断哪些“个体特征”是必要的，哪些是非必要的，我们常常可以用到这样一种思维方式：比如你认为袋鼠的爱吃什么东西非常必要，那么你就想一想，有两只袋鼠，它们其它的个体特征完全同等的情况下，一只长得黑，另外一只长得不是那么黑。你会马上发现，这不会对它们的命运有丝毫的影响，它们应该有同等的概率被射杀！<strong>只因它们处于同一个地方</strong>。（<strong>值得一提的是</strong>，如果你的基因编码设计中包含了袋鼠黑不黑的信息，这其实不会影响到袋鼠的进化的过程，而那只攀到珠穆朗玛峰的袋鼠黑与白什么的也完全是随机的，但是它所在的位置却是非常确定的。）</p>
<p>  <strong><em>\</em>以上是对遗传算法编码过程中经常经历的思维过程，必须把具体问题抽象成数学模型，突出主要矛盾，舍弃次要矛盾。只有这样才能简洁而有效的解决问题。**</strong></p>
<p>   既然确定了袋鼠的位置作为个体特征，具体来说位置就是横坐标。那么接下来，我们就要建立表现型到基因型的映射关系。就是说如何用编码来表现出袋鼠所在的横坐标。由于横坐标是一个实数，所以说透了我们就是要对这个实数编码。回顾我们上面所介绍的两种编码方式，最先想到的应该就是，对于二进制编码方式来说，编码会比较复杂，而对于浮点数编码方式来说，则会比较简洁。恩，正如你所想的，用浮点数编码，仅仅需要一个浮点数而已。而下面则介绍如何建立二进制编码到一个实数的映射。</p>
<p> 明显地，一定长度的二进制编码序列，只能表示一定精度的浮点数。譬如我们要求解<strong>精确到六位小数</strong>，由于区间长度为2 – (-1) = 3 ,为了保证精度要求，至少把区间[-1,2]分为3 × 106等份。又因为</p>
<p>​      <img src="/../images/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%EF%BC%88GA%EF%BC%89/20160419110310909" alt="img"></p>
<p>所以编码的二进制串至少需要22位。</p>
<p>​    把一个二进制串（b0,b1,….bn)转化位区间里面对应的实数值通过下面两个步骤。</p>
<p>  （1）将一个二进制串代表的二进制数转化为10进制数：</p>
<p>​         <img src="/../images/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%EF%BC%88GA%EF%BC%89/20160419110345793" alt="img"></p>
<p>  （2）对应区间内的实数：</p>
<p>​             <img src="/../images/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%EF%BC%88GA%EF%BC%89/20160419110410684" alt="img"></p>
<p>   （像极了模数转换）</p>
<p>  例如一个二进制串&lt;1000101110110101000111&gt;表示实数值0.637197。</p>
<p>​     <img src="/../images/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%EF%BC%88GA%EF%BC%89/20160419110442168" alt="img"></p>
<p>（纠正一个错误，这里是-1） </p>
<p>​    二进制串&lt;0000000000000000000000&gt;和&lt;1111111111111111111111&gt;则分别表示区间的两个端点值-1和2。</p>
<p>   好了，目前为止我们把袋鼠的染色体给研究透了，让我们继续跟进袋鼠的进化旅程</p>
<p><strong>物竞天择－－适应性评分与及选择函数。</strong></p>
<p><strong>1.物竞――适应度函数（fitness function）</strong></p>
<p>  自然界生物竞争过程往往包含两个方面：生物相互间的搏斗与及生物与客观环境的搏斗过程。但在我们这个实例里面，你可以想象到，袋鼠相互之间是非常友好的，它们并不需要互相搏斗以争取生存的权利。它们的生死存亡更多是取决于你的判断。因为你要衡量哪只袋鼠该杀，哪只袋鼠不该杀，所以你必须制定一个衡量的标准。而对于这个问题，这个衡量的标准比较容易制定：袋鼠所在的海拔高度。（因为你单纯地希望袋鼠爬得越高越好。）所以我们直接用袋鼠的海拔高度作为它们的适应性评分。即适应度函数直接返回函数值就行了。</p>
<p><strong>2.天择――选择函数（selection）</strong></p>
<p>  自然界中，越适应的个体就越有可能繁殖后代。但是也不能说适应度越高的就肯定后代越多，只能是从概率上来说更多。（毕竟有些所处海拔高度较低的袋鼠很幸运，逃过了你的眼睛。）那么我们怎么来建立这种概率关系呢？下面我们介绍一种常用的选择方法――轮盘赌（Roulette Wheel Selection）选择法。                 </p>
<p>   比如我们有5条染色体，他们所对应的适应度评分分别为：5，7，10，13，15。</p>
<p>​    所以累计总适应度为：</p>
<p>​                 <img src="/../images/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%EF%BC%88GA%EF%BC%89/20160419110514403" alt="img"></p>
<p>​    所以各个个体被选中的概率分别为：</p>
<p>​         <img src="/../images/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%EF%BC%88GA%EF%BC%89/20160419110549491" alt="img"></p>
<p> <img src="/../images/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%EF%BC%88GA%EF%BC%89/20160419110611554" alt="img"></p>
<p>你可以想象一下，我们转动轮盘，轮盘停下来的时候，指针会随机地指向某一个个体所代表的区域，那么非常幸运地，这个个体被选中了。（很明显，适应度评分越高的个体被选中的概率越大。）</p>
<p><strong><em>\</em>注：还有精英选择机制**</strong></p>
<p><strong>遗传变异――基因重组（交叉）与基因突变。</strong></p>
<p> 应该说<strong>这两个步骤就是使得子代不同于父代的根本原因</strong>（<strong>注意，我没有说是子代优于父代，只有经过自然的选择后，才会出现子代优于父代的倾向。</strong>）。对于这两种遗传操作，二进制编码和浮点型编码在处理上有很大的差异，其中二进制编码的遗传操作过程，比较类似于自然界里面的过程，下面将分开讲述。</p>
<p><strong>1.基因重组/交叉(recombination/crossover)</strong></p>
<p>  （1）二进制编码</p>
<p>  二进制编码的基因交换过程非常类似高中生物中所讲的同源染色体的联会过程――随机把其中几个位于同一位置的编码进行交换，产生新的个体。</p>
<p><img src="/../images/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%EF%BC%88GA%EF%BC%89/20160419110643602" alt="img"></p>
<p>（2）浮点数编码</p>
<p>   如果一条基因中含有多个浮点数编码，那么也可以用跟上面类似的方法进行基因交叉，不同的是进行交叉的基本单位不是二进制码，而是浮点数。而如果对于单个浮点数的基因交叉，就有其它不同的重组方式了，比如中间重组：随机产生就能得到介于父代基因编码值和母代基因编码值之间的值作为子代基因编码的值。比如5.5和6交叉，产生5.7，5.6。</p>
<p>  考虑到“袋鼠跳”问题的具体情况――袋鼠的个体特征仅仅表现为它所处的位置。可以想象，同一个位置的袋鼠的基因是完全相同的，而两条相同的基因进行交叉后，相当于什么都没有做，所以我们不打算在这个例子里面使用交叉这一个遗传操作步骤。（当然硬要这个操作步骤也不是不行的，你可以把两只异地的袋鼠捉到一起，让它们交配，然后产生子代，再把它们送到它们应该到的地方。）</p>
<p><strong>2.基因突变(Mutation)</strong></p>
<p> （1）二进制编码</p>
<p>   基因突变过程：基因突变是染色体的某一个位点上基因的改变。基因突变使一个基因变成它的等位基因，并且通常会引起一定的表现型变化。正如上面所说，二进制编码的遗传操作过程和生物学中的过程非常相类似，基因串上的“ 0”或“ 1”有一定几率变成与之相反的“ 1”或“ 0”。例如下面这串二进制编码：</p>
<p><strong>101101001011001</strong></p>
<p>经过基因突变后，可能变成以下这串新的编码：</p>
<p><strong>001101011011001</strong></p>
<p>（2）浮点型编码</p>
<p>   浮点型编码的基因突变过程一般是对原来的浮点数增加或者减少一个小随机数。比如原来的浮点数串如下：</p>
<p>1.2,3.4,5.1, 6.0, 4.5</p>
<p>变异后，可能得到如下的浮点数串：</p>
<p>1.3,3.1,4.9, 6.3, 4.4</p>
<p> 当然，<strong>这个小随机数也有大小之分，我们一般管它叫“步长”。</strong>（想想“袋鼠跳”问题，袋鼠跳的长短就是这个步长。）一般来说<strong>步长越大，开始时进化的速度会比较快，但是后来比较难收敛到精确的点上</strong>。而小步长却能较精确的收敛到一个点上。所以<strong>很多时候为了加快遗传算法的进化速度，而又能保证后期能够比较精确地收敛到最优解上面，会采取动态改变步长的方法。</strong>其实这个过程与前面介绍的模拟退火过程比较相类似。</p>
<p> 到此为止，<strong>基因编码，基因适应度评估，基因选择，基因变异都一一实现了</strong>，剩下来的就是把这些遗传过程的“零件”装配起来了。（写成代码）</p>
<p>下面是上例的运行结果：</p>
<p> <img src="/../images/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%EF%BC%88GA%EF%BC%89/20160419110727716" alt="img"></p>
<p>红点代表真实的最大点，由求导法可求的为f(1.85)=3.85</p>
<p> <img src="/../images/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%EF%BC%88GA%EF%BC%89/20160419110801498" alt="img"></p>
<p><img src="/../images/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%EF%BC%88GA%EF%BC%89/20160419110917904" alt="img"></p>
<p><img src="/../images/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%EF%BC%88GA%EF%BC%89/20160419110954715" alt="img"></p>
<p><strong>总结：</strong></p>
<p><strong>编码原则</strong><br>完备性（completeness）：问题空间的所有解都能表示为所设计的基因型；<br>健全性（soundness）：任何一个基因型都对应于一个可能解；<br>非冗余性（non-redundancy）：问题空间和表达空间一一对应。</p>
<p><strong>适应度函数的重要性</strong><br>   适应度函数的选取直接影响遗传算法的收敛速度以及能否找到最优解。一般而言，适应度函数是由目标函数变换而成的。</p>
<p>适应度函数设计不当有可能出现欺骗问题：<br>（1）进化初期，个别超常个体控制选择过程；<br>（2）进化末期，个体差异太小导致陷入局部极值。</p>
<p>欺骗问题举例：</p>
<p>还是袋鼠问题，如果低海拔的地方出现毒雾，会杀死袋鼠，只有爬上珠穆朗玛峰顶端的袋鼠才能生存下来。</p>
<p>因为喜马拉雅山脉有很多山峰，我们以高度作为适应度，case（1）：如果不在珠峰的猴子若比在珠峰半山腰的猴子要高，因为种群大小不变，在珠峰的猴子可能就会被淘汰；case（2）：100只猴子都不在珠峰；</p>
<p>\1. 选择的作用：优胜劣汰，适者生存；</p>
<p>\2. 交叉的作用：保证种群的稳定性，朝着最优解的方向进化；</p>
<p>\3. 变异的作用：保证种群的多样性，避免交叉可能产生的局部收敛。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>-算法</tag>
      </tags>
  </entry>
  <entry>
    <title>重做红楼梦的数据分析-判断前80回后40回是否一个人写的</title>
    <url>/post/56293a93.html</url>
    <content><![CDATA[<h1 id="重做红楼梦的数据分析-判断前80回后40回是否一个人写的"><a href="#重做红楼梦的数据分析-判断前80回后40回是否一个人写的" class="headerlink" title="重做红楼梦的数据分析-判断前80回后40回是否一个人写的"></a>重做红楼梦的数据分析-判断前80回后40回是否一个人写的</h1><p>红楼梦的数据分析已经有许多人做过，结论也各不相同。<br>我在知乎上看到两篇帖子：<br>\1. [通过数据挖掘能分析《红楼梦》各回的真伪吗？](<a href="https://www.zhihu.com/question/19768898">https://www.zhihu.com/question/19768898</a> 智慧思特的回答)<br>\2. <a href="https://zhuanlan.zhihu.com/p/21421723">用机器学习判定红楼梦后40回是否曹雪芹所写</a><br>觉得很有意思，于是用自己的方法重做了一次</p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置:"></a>环境配置:</h2><p>我主要使用的编程环境是Jupyter Notebook 4.2.1，因为可以调整每一个代码块，方便<br>纠错什么的。<br>然后我们得用到一个中文分词工具 - Jieba, 是由百度工程师Sun Junyi开发的<br>之后我们还得用到一些做机器学习/数据挖掘的标准包：numpy, matplotlib 和 sklearn</p>
<h2 id="数据准备："><a href="#数据准备：" class="headerlink" title="数据准备："></a>数据准备：</h2><p>用爬虫思想，我去这个网站扒下来红楼梦全集，然后剪掉中间所有的换行符，使得每一回只<br>占文档中的一行。这样的话，方便接下来读取。</p>
<p>直接上代码：<br>一、导入各种需要的包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"></span><br><span class="line">book = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">120</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;处理第&#123;&#125;回...&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">if</span> i+<span class="number">1</span>&lt;<span class="number">10</span>:</span><br><span class="line">        url = <span class="string">&quot;http://www.purepen.com/hlm/00&#123;&#125;.htm&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> i+<span class="number">1</span> &lt; <span class="number">100</span>:</span><br><span class="line">        url = <span class="string">&quot;http://www.purepen.com/hlm/0&#123;&#125;.htm&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        url = <span class="string">&quot;http://www.purepen.com/hlm/&#123;&#125;.htm&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>)</span><br><span class="line">    request = urllib2.Request(url)</span><br><span class="line">    response = urllib2.urlopen(request)</span><br><span class="line">    bsObj = bs(response.read().decode(<span class="string">&#x27;gb18030&#x27;</span>)) <span class="comment">#注意原网页的codec是哪一种</span></span><br><span class="line">    chapter = bsObj.table.font.contents[<span class="number">0</span>]</span><br><span class="line">    book.append(chapter)<span class="number">123456789101112131415161718192021</span></span><br></pre></td></tr></table></figure>
<p>下面是结果：<br><img src="/../images/%E9%87%8D%E5%81%9A%E7%BA%A2%E6%A5%BC%E6%A2%A6%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E5%88%A4%E6%96%AD%E5%89%8D80%E5%9B%9E%E5%90%8E40%E5%9B%9E%E6%98%AF%E5%90%A6%E4%B8%80%E4%B8%AA%E4%BA%BA%E5%86%99%E7%9A%84/20160729160447659" alt="这里写图片描述"></p>
<p><img src="/../images/%E9%87%8D%E5%81%9A%E7%BA%A2%E6%A5%BC%E6%A2%A6%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E5%88%A4%E6%96%AD%E5%89%8D80%E5%9B%9E%E5%90%8E40%E5%9B%9E%E6%98%AF%E5%90%A6%E4%B8%80%E4%B8%AA%E4%BA%BA%E5%86%99%E7%9A%84/20160729160602300" alt="这里写图片描述"></p>
<p>之后把全文存进一个txt文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;红楼梦.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">    f.write(codecs.BOM_UTF8)  </span><br><span class="line">    <span class="keyword">for</span> chap <span class="keyword">in</span> book:</span><br><span class="line">        s = chap.encode(<span class="string">&#x27;utf-8&#x27;</span>).strip()</span><br><span class="line">        f.write(<span class="string">&quot;&quot;</span>.join(s.split()))</span><br><span class="line">        f.write(<span class="string">&#x27;\n&#x27;</span>)<span class="number">123456</span></span><br></pre></td></tr></table></figure>
<p>数据ready，可以开始进行处理了</p>
<h2 id="处理"><a href="#处理" class="headerlink" title="处理:"></a>处理:</h2><p>直接上代码：<br><strong>一、导入各种需要的包</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D <span class="comment"># 因为后面会用到3d作图</span></span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="comment"># 下面是机器学习包</span></span><br><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> train_test_split </span><br><span class="line"><span class="keyword">from</span> sklearn.grid_search <span class="keyword">import</span> GridSearchCV</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"><span class="comment"># Jieba</span></span><br><span class="line"><span class="keyword">import</span> jieba123456789101112</span><br></pre></td></tr></table></figure>
<p><strong>二、读取文件并分词</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;红楼梦.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"> all_chaps = [chap.decode(<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">for</span> chap <span class="keyword">in</span> f.readlines()]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给整本书分词</span></span><br><span class="line">dictionary = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">120</span>):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;处理第&#123;&#125;回&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>)</span><br><span class="line">    words = <span class="built_in">list</span>(jieba.cut(all_chaps[i]))</span><br><span class="line">    dictionary.append(words)<span class="number">123456789</span></span><br></pre></td></tr></table></figure>
<p><strong>三、Flatten数组</strong> （中文是’摊平’? 哈哈）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tmp = [item <span class="keyword">for</span> sublist <span class="keyword">in</span> dictionary <span class="keyword">for</span> item <span class="keyword">in</span> sublist] <span class="comment"># 摊平</span></span><br><span class="line">dictionary = tmp12</span><br></pre></td></tr></table></figure>
<p><strong>四、 给每一回贴上标签</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给每一回贴上标签</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">120</span>):</span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">80</span>:</span><br><span class="line">        all_chaps[i] = [all_chaps[i],<span class="string">&#x27;1&#x27;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        all_chaps[i] = [all_chaps[i],<span class="string">&#x27;0&#x27;</span>]</span><br><span class="line"></span><br><span class="line">content = [row[<span class="number">0</span>] <span class="keyword">for</span> row <span class="keyword">in</span> all_chaps]</span><br><span class="line">label = [row[<span class="number">1</span>] <span class="keyword">for</span> row <span class="keyword">in</span> all_chaps]<span class="number">123456789</span></span><br></pre></td></tr></table></figure>
<p><strong>五、找出每一回均出现的词</strong><br>之所以要这么做，是因为有一些很常出现的角色名在后四十回因为剧情原因不再出现了。在整个分析中我们注重对于文言虚词和其他连接词的分析，因为这样更能体现出写作者的个人风格。另外，这也是为什么我们没有在Jieba里加入角色名称的字典，因为没有这个必要。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找出每一回均有出现的词</span></span><br><span class="line"><span class="keyword">from</span> progressbar <span class="keyword">import</span> ProgressBar <span class="comment"># 显示进度</span></span><br><span class="line">pbar =ProgressBar()</span><br><span class="line"></span><br><span class="line">wordineverychap = []</span><br><span class="line">length = <span class="built_in">len</span>(dictionary)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;共有&#123;&#125;个词&quot;</span>.<span class="built_in">format</span>(length)</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> pbar(dictionary):</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> text <span class="keyword">in</span> content:</span><br><span class="line">        <span class="keyword">if</span> word <span class="keyword">in</span> text:</span><br><span class="line">            n+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">120</span>:</span><br><span class="line">        wordineverychap.append(word)<span class="number">1234567891011121314</span></span><br></pre></td></tr></table></figure>
<p><strong>六、合并虚词，以防虚词被过滤掉</strong><br>这里用的虚词是直接从维基百科上抄下来的，一共20个左右，所以也并不麻烦。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;xuci.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    xuci = [word.decode(<span class="string">&#x27;utf8&#x27;</span>).strip() <span class="keyword">for</span> word <span class="keyword">in</span> f.readlines()]</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> xuci:</span><br><span class="line">    <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> wordineverychap:</span><br><span class="line">        wordineverychap.append(word)<span class="number">12345</span></span><br></pre></td></tr></table></figure>
<p><strong>七、过滤重复的词语，并去掉标点符号</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">selected_words = <span class="built_in">list</span>(<span class="built_in">set</span>(wordineverychap))</span><br><span class="line"><span class="comment"># 人工处理, 删除标点符号</span></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> selected_words:</span><br><span class="line">    <span class="built_in">print</span> w1234</span><br></pre></td></tr></table></figure>
<p>计算结果是一共有125个词语</p>
<p><strong>八、给每个词语计数 并 排序</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wordT = []</span><br><span class="line">countT = []</span><br><span class="line">table = &#123;&#125;</span><br><span class="line"></span><br><span class="line">chapNo = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> chap <span class="keyword">in</span> content:</span><br><span class="line">    sub_table = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> uw:</span><br><span class="line">        sub_table[word.decode(<span class="string">&#x27;utf8&#x27;</span>)] = chap.count(word.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    table[chapNo] = sub_table</span><br><span class="line">    chapNo+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line">table_sorted = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx <span class="keyword">in</span> table:</span><br><span class="line">    sub_table_sorted = <span class="built_in">sorted</span>(table[idx].items(),key=operator.itemgetter(<span class="number">1</span>),reverse=<span class="literal">True</span>)</span><br><span class="line">    table_sorted.append(sub_table_sorted)<span class="number">123456789101112131415161718</span></span><br></pre></td></tr></table></figure>
<p><strong>九、把数据存在csv里，以免不小心关掉程序后不用重新计算</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 任务：把数据存到csv里</span></span><br><span class="line"><span class="keyword">import</span> unicodecsv <span class="keyword">as</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入第一行和第一列</span></span><br><span class="line">f1 = <span class="built_in">open</span>(<span class="string">&#x27;cipin.csv&#x27;</span>, <span class="string">&#x27;w+&#x27;</span>)</span><br><span class="line">writer = csv.writer(f1, encoding=<span class="string">&#x27;utf8&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">first_row = [<span class="string">&#x27;&#x27;</span>]  <span class="comment"># A1留空</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">120</span>):</span><br><span class="line">    first_row.append(<span class="string">&#x27;第&#123;&#125;回&#x27;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>))</span><br><span class="line">writer.writerow(first_row)   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> selected_words:</span><br><span class="line">    row = [word]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">120</span>):</span><br><span class="line">        row.append(table[i+<span class="number">1</span>][word.decode(<span class="string">&#x27;utf8&#x27;</span>)])</span><br><span class="line">    writer.writerow(row)</span><br><span class="line"></span><br><span class="line">f1.close()<span class="number">12345678910111213141516171819</span></span><br></pre></td></tr></table></figure>
<p><strong>十、把数据向量化</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 任务：把数据向量化 </span></span><br><span class="line"></span><br><span class="line">all_vectors = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">120</span>):</span><br><span class="line">    chap_vector = []</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> selected_words:</span><br><span class="line">        chap_vector.append(table[i+<span class="number">1</span>][word.decode(<span class="string">&#x27;utf8&#x27;</span>)])</span><br><span class="line">    all_vectors.append(chap_vector)</span><br><span class="line"><span class="number">12345678910</span></span><br></pre></td></tr></table></figure>
<p><strong>十一、把高维向量压缩为3维向量，方便作图</strong><br>这里我们使用PCA(Principal Component Analysis)，就是一种把高维度向量变成低维度向量的算法。比如我们现在每一回就有125维，无法作图。这个算法，像它的名字一样，会采集最重要的向量，然后压缩成到我们所需要的维数（3维）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置PCA的目标维数并创建一个model</span></span><br><span class="line">pca = PCA(n_components=<span class="number">3</span>)</span><br><span class="line"><span class="comment">#Feed我们的向量，进行训练</span></span><br><span class="line">pca.fit(all_vectors)</span><br><span class="line"><span class="comment">#取得目标向量</span></span><br><span class="line">z = pca.fit_transform(all_vectors)</span><br><span class="line"><span class="comment">#取得前八十回的向量</span></span><br><span class="line">xs_a = [row[<span class="number">0</span>] <span class="keyword">for</span> row <span class="keyword">in</span> z[:<span class="number">80</span>]]</span><br><span class="line">ys_a = [row[<span class="number">1</span>] <span class="keyword">for</span> row <span class="keyword">in</span> z[:<span class="number">80</span>]]</span><br><span class="line">zs_a = [row[<span class="number">2</span>] <span class="keyword">for</span> row <span class="keyword">in</span> z[:<span class="number">80</span>]]</span><br><span class="line"><span class="comment">#取得后四十回的向量</span></span><br><span class="line">xs_b = [row[<span class="number">0</span>] <span class="keyword">for</span> row <span class="keyword">in</span> z[-<span class="number">40</span>:]]</span><br><span class="line">ys_b = [row[<span class="number">1</span>] <span class="keyword">for</span> row <span class="keyword">in</span> z[-<span class="number">40</span>:]]</span><br><span class="line">zs_b = [row[<span class="number">2</span>] <span class="keyword">for</span> row <span class="keyword">in</span> z[-<span class="number">40</span>:]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个新的图表</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>, projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line"><span class="comment">#绘图</span></span><br><span class="line">ax.scatter(xs_a, ys_a, zs_a, c=<span class="string">&#x27;r&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">ax.scatter(xs_b, ys_b, zs_b, c=<span class="string">&#x27;b&#x27;</span>, marker=<span class="string">&#x27;^&#x27;</span>)</span><br><span class="line">plt.show()<span class="number">12345678910111213141516171819202122</span></span><br></pre></td></tr></table></figure>
<p>这就是绘制出来的图表：<br><img src="/../images/%E9%87%8D%E5%81%9A%E7%BA%A2%E6%A5%BC%E6%A2%A6%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E5%88%A4%E6%96%AD%E5%89%8D80%E5%9B%9E%E5%90%8E40%E5%9B%9E%E6%98%AF%E5%90%A6%E4%B8%80%E4%B8%AA%E4%BA%BA%E5%86%99%E7%9A%84/20160729163738580" alt="这里写图片描述"><br>每一个点表示一回，红色的点表示的是前八十回，蓝色的点表示的是后四十回。从该图我们可以发现，前八十回和后四十回的写作者用词习惯有可观察到的不同，所以由此我们可以大胆的说，前后的写作者是不同的！</p>
<p>为了准确，我们还可以做一组对比试验，这次我们分别画出前四十回 ,中间四十回 和 后四十回：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#前四十回</span></span><br><span class="line">xs_a = [row[<span class="number">0</span>] <span class="keyword">for</span> row <span class="keyword">in</span> z[:<span class="number">40</span>]]</span><br><span class="line">ys_a = [row[<span class="number">1</span>] <span class="keyword">for</span> row <span class="keyword">in</span> z[:<span class="number">40</span>]]</span><br><span class="line">zs_a = [row[<span class="number">2</span>] <span class="keyword">for</span> row <span class="keyword">in</span> z[:<span class="number">40</span>]]</span><br><span class="line"><span class="comment">#中间四十回</span></span><br><span class="line">xs_b = [row[<span class="number">0</span>] <span class="keyword">for</span> row <span class="keyword">in</span> z[<span class="number">40</span>:<span class="number">80</span>]]</span><br><span class="line">ys_b = [row[<span class="number">1</span>] <span class="keyword">for</span> row <span class="keyword">in</span> z[<span class="number">40</span>:<span class="number">80</span>]]</span><br><span class="line">zs_b = [row[<span class="number">2</span>] <span class="keyword">for</span> row <span class="keyword">in</span> z[<span class="number">40</span>:<span class="number">80</span>]]</span><br><span class="line"><span class="comment">#最后四十回</span></span><br><span class="line">xs_c = [row[<span class="number">0</span>] <span class="keyword">for</span> row <span class="keyword">in</span> z[-<span class="number">40</span>:]]</span><br><span class="line">ys_c = [row[<span class="number">1</span>] <span class="keyword">for</span> row <span class="keyword">in</span> z[-<span class="number">40</span>:]]</span><br><span class="line">zs_c = [row[<span class="number">2</span>] <span class="keyword">for</span> row <span class="keyword">in</span> z[-<span class="number">40</span>:]]</span><br><span class="line"></span><br><span class="line">ax.scatter(xs_a, ys_a, zs_a, c=<span class="string">&#x27;b&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">ax.scatter(xs_b, ys_b, zs_b, c=<span class="string">&#x27;y&#x27;</span>, marker=<span class="string">&#x27;^&#x27;</span>)</span><br><span class="line">ax.scatter(xs_c, ys_c, zs_c, c=<span class="string">&#x27;r&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">plt.show()<span class="number">1234567891011121314151617</span></span><br></pre></td></tr></table></figure>
<p>画出的图表是这样：<br><img src="/../images/%E9%87%8D%E5%81%9A%E7%BA%A2%E6%A5%BC%E6%A2%A6%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E5%88%A4%E6%96%AD%E5%89%8D80%E5%9B%9E%E5%90%8E40%E5%9B%9E%E6%98%AF%E5%90%A6%E4%B8%80%E4%B8%AA%E4%BA%BA%E5%86%99%E7%9A%84/20160729164814901" alt="这里写图片描述"><br>蓝色的是前四十回，绿色的是中间四十回，红色的是后四十回。在这个图里我们也能看到前四十回和中间四十回重合了很多，而后四十回相对独立。</p>
<p><strong>十三、用机器学习的思路处理</strong><br>简单的说，就是我们把前八十回和后四十回分别做标注，用‘1’表示属于前八十回，‘0’表示属于后四十回。接着我们从前八十回中抽16回，后四十回中抽8回用作训练样本，剩下的用作测试样本。如果训练出来的模型成功从预测样本中预测出是否属于前八十回，就代表我们的想法是对的—–前八十回和后四十回的用词习惯的确不同。</p>
<p>上代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">label = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">120</span>):</span><br><span class="line">    <span class="keyword">if</span> i&lt;<span class="number">80</span>:</span><br><span class="line">        label.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        label.append(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 分出训练和测试样本</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(all_vectors, label, test_size=<span class="number">0.8</span>)</span><br><span class="line"><span class="comment"># 使用GridSearch找到合适的参数</span></span><br><span class="line">params = [&#123;<span class="string">&#x27;C&#x27;</span>:[<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">100</span>,<span class="number">250</span>,<span class="number">500</span>]&#125;]</span><br><span class="line">grid = GridSearchCV(SVC(kernel=<span class="string">&#x27;linear&#x27;</span>),params,cv=<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 训练！</span></span><br><span class="line">grid.fit(x_train,y_train)</span><br><span class="line"><span class="comment"># 预测</span></span><br><span class="line">y_pred = grid.predict(x_test)</span><br><span class="line"><span class="comment"># 显示预测结果</span></span><br><span class="line"><span class="built_in">print</span>(classification_report(y_test, y_pred))<span class="number">1234567891011121314151617</span></span><br></pre></td></tr></table></figure>
<p>最后我们的预测结果是这样的：</p>
<table>
<thead>
<tr>
<th>prediction</th>
<th>precision</th>
<th>recall</th>
<th>f1-score</th>
<th>support</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0.85</td>
<td>0.97</td>
<td>0.90</td>
<td>29</td>
</tr>
<tr>
<td>1</td>
<td>0.98</td>
<td>0.93</td>
<td>0.95</td>
<td>67</td>
</tr>
<tr>
<td>avg/total</td>
<td>0.94</td>
<td>0.94</td>
<td>0.94</td>
<td>96</td>
</tr>
</tbody></table>
<p>就结果而言，我们的模型比较准确的预测了测试样本属于哪个分类，说明我们的直观判断，可能是对的。</p>
<p>撒花~</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>-python</tag>
      </tags>
  </entry>
</search>
